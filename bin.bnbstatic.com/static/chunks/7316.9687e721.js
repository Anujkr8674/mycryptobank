"use strict";
(self.webpackChunkspot_trade_ui = self.webpackChunkspot_trade_ui || []).push([
    [7316], {
        c9uE: (e, t, i) => {
            i.d(t, {
                $: () => n
            });
            var r = i("VLTf"),
                o = i.n(r),
                s = i("jYFu");
            class n {
                get isFetchingData() {
                    return "loading" === this._fetchState
                }
                setDataProvider(e) {
                    return this._dataProvider = e, this
                }
                setInterval(e) {
                    return e && !o()(this.interval, e) && (this.interval = e, this.reset()), this
                }
                setSymbol(e) {
                    return e && !o()(this.symbol, e) && (this.symbol = e, this.reset()), this
                }
                setLoadCallback(e) {
                    this._loadCallbak = e
                }
                triggerLoading(e) {
                    this._loadCallbak && this._loadCallbak(e)
                }
                getCleanDatas(e) {
                    const t = {};
                    return e.filter((({
                        time: e
                    }) => !t[e] && (t[e] = 1, !0))).sort(((e, t) => e.time - t.time))
                }
                async getData({
                    seriesData: e,
                    startTime: t,
                    endTime: i,
                    mode: r
                }, o, n = !1) {
                    try {
                        if ("loading" === this._fetchState) return;
                        this._fetchState = "loading";
                        const a = this._dataProvider;
                        if (!a) return;
                        const {
                            interval: l,
                            symbol: c
                        } = this;
                        if (!l || !c) return;
                        const d = { ...this._getSyncParams(),
                            seriesData: e,
                            startTime: t,
                            endTime: i,
                            mode: r,
                            limit: Math.ceil(((i || 0) - (t || 0)) / (0, s.OH)(l))
                        };
                        (a.getData || a.getBarDatas).call(a, d, (e => {
                            const {
                                data: t = [],
                                isLoadAll: i
                            } = e;
                            this._isSync({
                                interval: l,
                                symbol: c
                            }) && (this.isLoadAll = this.isLoadAll || i, t.length > 0 ? (this._seriesData = n ? this.getCleanDatas(t) : this.getCleanDatas(this._seriesData.concat(t)), o(this._seriesData)) : o([]))
                        }))
                    } catch (a) {
                        console.error(`basicKline getData occured error: ${a.message}`)
                    } finally {
                        this._fetchState = "done"
                    }
                }
                subcribe(e) {
                    const t = this._dataProvider,
                        {
                            interval: i,
                            symbol: r
                        } = this;
                    if (!t) return;
                    if (!i || !r) return;
                    (t.subscribe || t.subcribe).call(t, this._getSyncParams(), (t => {
                        "done" === this._fetchState && this.isSubscriptionEnabled && this._isSync({
                            interval: i,
                            symbol: r
                        }) && e(t)
                    }))
                }
                unSubcribe() {
                    if (!this._dataProvider) return;
                    (this._dataProvider.unsubscribe || this._dataProvider.unSubcribe).call(this._dataProvider, this._getSyncParams())
                }
                subscribeAskBid(e) {
                    const {
                        interval: t,
                        symbol: i
                    } = this;
                    t && i && this._dataProvider ? .subscribeAskBid ? .((r => {
                        this._isSync({
                            interval: t,
                            symbol: i
                        }) && e(r)
                    }))
                }
                unsubscribeAskBid() {
                    this._dataProvider ? .unsubscribeAskBid ? .()
                }
                getPositions(e) {
                    const {
                        interval: t,
                        symbol: i
                    } = this;
                    t && i && this._dataProvider ? .getPositions ? .(e)
                }
                subscribePositions(e) {
                    const {
                        interval: t,
                        symbol: i
                    } = this;
                    t && i && this._dataProvider ? .subscribePositions ? .((r => {
                        this._isSync({
                            interval: t,
                            symbol: i
                        }) && e(r)
                    }))
                }
                unsubscribePositions() {
                    this._dataProvider ? .unsubscribePositions ? .()
                }
                getOrders(e) {
                    const {
                        interval: t,
                        symbol: i
                    } = this;
                    t && i && this._dataProvider ? .getOrders ? .(e)
                }
                subscribeOrders(e) {
                    const {
                        interval: t,
                        symbol: i
                    } = this;
                    t && i && this._dataProvider ? .subscribeOrders ? .((r => {
                        this._isSync({
                            interval: t,
                            symbol: i
                        }) && e(r)
                    }))
                }
                unsubscribeOrders() {
                    this._dataProvider ? .unsubscribeOrders ? .()
                }
                getExecutionOrders(e) {
                    const {
                        interval: t,
                        symbol: i
                    } = this;
                    t && i && this._dataProvider ? .getExecutionOrders ? .(e)
                }
                subscribeExecutionOrders(e) {
                    const {
                        interval: t,
                        symbol: i
                    } = this;
                    t && i && this._dataProvider ? .subscribeExecutionOrders ? .((r => {
                        this._isSync({
                            interval: t,
                            symbol: i
                        }) && e(r)
                    }))
                }
                unsubscribeExecutionOrders() {
                    this._dataProvider ? .unsubscribeExecutionOrders ? .()
                }
                getLabelLines(e) {
                    const {
                        interval: t,
                        symbol: i
                    } = this;
                    t && i && this._dataProvider ? .getLabelLines ? .(e)
                }
                subscribeLabelLines(e) {
                    const {
                        interval: t,
                        symbol: i
                    } = this;
                    t && i && this._dataProvider ? .subscribeLabelLines ? .((r => {
                        this._isSync({
                            interval: t,
                            symbol: i
                        }) && e(r)
                    }))
                }
                unsubscribeLabelLines() {
                    this._dataProvider ? .unsubscribeLabelLines ? .()
                }
                getSingleLabelLines(e) {
                    const {
                        interval: t,
                        symbol: i
                    } = this;
                    t && i && this._dataProvider ? .getSingleLabelLines ? .(e)
                }
                subscribeSingleLabelLines(e) {
                    const {
                        interval: t,
                        symbol: i
                    } = this;
                    t && i && this._dataProvider ? .subscribeSingleLabelLines ? .((r => {
                        this._isSync({
                            interval: t,
                            symbol: i
                        }) && e(r)
                    }))
                }
                unsubscribeSingleLabelLines() {
                    this._dataProvider ? .unsubscribeSingleLabelLines ? .()
                }
                getAlerts(e) {
                    const {
                        interval: t,
                        symbol: i
                    } = this;
                    t && i && this._dataProvider ? .getAlerts ? .(e)
                }
                subscribeAlerts(e) {
                    const {
                        interval: t,
                        symbol: i
                    } = this;
                    t && i && this._dataProvider ? .subscribeAlerts ? .((r => {
                        this._isSync({
                            interval: t,
                            symbol: i
                        }) && e(r)
                    }))
                }
                unsubscribeAlerts() {
                    this._dataProvider ? .unsubscribeAlerts ? .()
                }
                reset() {
                    this._seriesData.length = 0, this.isLoadAll = !1
                }
                disableSubscription() {
                    this.isSubscriptionEnabled = !1
                }
                enableSubscription() {
                    this.isSubscriptionEnabled = !0
                }
                _getSyncParams() {
                    const {
                        interval: e,
                        symbol: t
                    } = this;
                    return {
                        interval: e,
                        symbol: t
                    }
                }
                _isSync({
                    interval: e,
                    symbol: t
                }) {
                    return o()(e, this.interval) && o()(t, this.symbol)
                }
                constructor() {
                    this._seriesData = [], this._fetchState = "ready", this.interval = "", this.isLoadAll = !1, this.isSubscriptionEnabled = !0
                }
            }
        },
        eY1w: (e, t, i) => {
            i.d(t, {
                A6: () => c,
                K1: () => p,
                Mz: () => a,
                O5: () => u,
                US: () => l,
                XE: () => r,
                YB: () => o,
                gj: () => h,
                kF: () => n,
                sF: () => g,
                sY: () => s,
                x1: () => m
            });
            const r = '<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M5.34981 3V1H3.6501V3H1.94995V13H3.65015V15H5.34981V13H7.05V3H5.34981ZM5.34981 11.3H3.6501V4.7H5.34981V11.3Z" fill="currentColor"/>\n<path d="M12.3499 3V1H10.6502V3H8.95001V13H10.6502V15H12.3499V13H14.0501V3H12.3499ZM12.3499 11.3H10.6502V4.7H12.3499V11.3Z" fill="currentColor"/>\n</svg>',
                o = '<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M13 2.7H8.94998L12.04 5.8L10.84 7L8.83998 5V10.98L10.82 9L12.03 10.2L8.92998 13.3H13V15H2.97998V13.3H7.02998L3.93998 10.2L5.13998 9L7.13998 11V5.02L5.15998 7L3.94998 5.8L7.04998 2.7H2.97998V1H13V2.7Z" fill="currentColor"/>\n</svg>',
                s = '<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M13.8 3h-3.6v2.027c-.66.17-1.285.431-1.858.77L6.91 4.363 4.363 6.91l1.434 1.433a7.157 7.157 0 00-.77 1.858H3v3.6h2.027c.17.66.431 1.285.77 1.858L4.363 17.09l2.546 2.546 1.433-1.434c.573.339 1.197.6 1.858.77V21h3.6v-2.027a7.157 7.157 0 001.858-.77l1.433 1.434 2.546-2.546-1.434-1.434a7.16 7.16 0 00.77-1.857H21v-3.6h-2.027a7.158 7.158 0 00-.77-1.858l1.434-1.433-2.546-2.546-1.434 1.434a7.156 7.156 0 00-1.857-.77V3zm-4.5 9a2.7 2.7 0 115.4 0 2.7 2.7 0 01-5.4 0z" fill="currentColor"></path></svg>',
                n = '<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M12 14.5a2.5 2.5 0 100-5 2.5 2.5 0 000 5z" fill="currentColor"></path><path fill-rule="evenodd" clip-rule="evenodd" d="M6.555 6.31L1 12l5.555 5.69a7.572 7.572 0 0010.89 0L23 12l-5.555-5.69a7.572 7.572 0 00-10.89 0zM17 12a5 5 0 11-10 0 5 5 0 0110 0z" fill="currentColor"></path></svg>',
                a = '<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" clip-rule="evenodd" d="M2.94 5.06l16 16 2.12-2.12-2.446-2.447L23 12l-5.555-5.69a7.566 7.566 0 00-9.883-.87L5.06 2.94 2.939 5.06zm6.747 2.506a5 5 0 016.747 6.747L9.687 7.566z" fill="currentColor"></path><path d="M1 12l2.29-2.346 10.198 10.198a7.574 7.574 0 01-6.933-2.162L1 12z" fill="currentColor"></path></svg>',
                l = '<svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M6.697 4.575L4.575 6.697 9.88 12l-5.304 5.303 2.122 2.122L12 14.12l5.303 5.304 2.122-2.122L14.12 12l5.304-5.303-2.122-2.122L12 9.88 6.697 4.575z" fill="currentColor"></path></svg>',
                c = '<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path fill-rule="evenodd" clip-rule="evenodd" d="M7.92656 8.11751L10.5192 5.52486L11.6977 6.70337L7.92648 10.4746L6.74797 9.2961L6.74805 9.29602L4.15527 6.70325L5.33378 5.52474L7.92656 8.11751Z" fill="#929AA5"/>\n</svg>\n',
                d = e => `<svg width="300" height="60" viewBox="0 0 300 60" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M13.6096 30L6.83425 36.7383L0 30L6.83425 23.2031L13.6096 30ZM30.165 13.5352L41.8303 25.1367L48.6646 18.3398L30.165 0L11.6654 18.3984L18.4996 25.1953L30.165 13.5352ZM53.4957 23.2031L46.7203 30L53.5546 36.7969L60.3888 30L53.4957 23.2031ZM30.165 46.4648L18.4996 34.8047L11.6654 41.6016L30.165 60L48.6646 41.6016L41.8303 34.8047L30.165 46.4648ZM30.165 36.7383L36.9992 29.9414L30.165 23.2031L23.3307 30L30.165 36.7383ZM102.042 37.4414V37.3242C102.042 32.9297 99.6858 30.7031 95.8562 29.2383C98.2129 27.9492 100.216 25.8398 100.216 22.1484V22.0312C100.216 16.875 96.033 13.5352 89.3166 13.5352H73.9395V46.4062H89.6701C97.1524 46.4648 102.042 43.418 102.042 37.4414ZM92.9694 23.3789C92.9694 25.8398 90.9662 26.8359 87.7258 26.8359H81.0094V19.8633H88.1972C91.2608 19.8633 92.9694 21.0938 92.9694 23.2617V23.3789ZM94.7957 36.5039C94.7957 38.9648 92.8515 40.0781 89.6701 40.0781H81.0094V32.8711H89.4344C93.1461 32.8711 94.7957 34.2188 94.7957 36.4453V36.5039ZM117.302 46.4648V13.5352H109.996V46.4062H117.302V46.4648ZM156.422 46.4648V13.5352H149.234V33.8086L133.739 13.5352H127.023V46.4062H134.211V25.5469L150.236 46.4648H156.422ZM196.72 46.4648L182.522 13.3594H175.805L161.606 46.4648H169.089L172.093 39.082H186.057L189.061 46.4648H196.72ZM183.464 32.6953H174.686L179.104 22.0312L183.464 32.6953ZM231.422 46.4648V13.5352H224.234V33.8086L208.739 13.5352H202.023V46.4062H209.211V25.5469L225.236 46.4648H231.422ZM268.951 41.1328L264.297 36.5039C261.705 38.8477 259.407 40.3711 255.577 40.3711C249.921 40.3711 245.974 35.6836 245.974 30.0586V29.8828C245.974 24.2578 249.98 19.6289 255.577 19.6289C258.877 19.6289 261.469 21.0352 264.061 23.3203L268.716 17.9883C265.652 15 261.94 12.8906 255.695 12.8906C245.562 12.8906 238.433 20.5664 238.433 29.8828V30C238.433 39.4336 245.679 46.9336 255.401 46.9336C261.764 46.9922 265.534 44.7656 268.951 41.1328ZM300 46.4648V40.0195H282.031V33.1055H297.643V26.6602H282.031V19.9805H299.764V13.5352H274.843V46.4062H300V46.4648Z" fill="${e}"/>\n</svg>\n`,
                h = d("#EAECEF"),
                u = d("#202630"),
                g = "M3 1.75h6v1.5H3zM3 5.25h6v1.5H3zM3 8.75h6v1.5H3z",
                p = "M2.79025 2.40641L1.90636 3.29029L4.11607 5.5L1.90636 7.70971L2.79025 8.59359L4.99996 6.38388L7.20966 8.59359L8.09355 7.70971L5.88384 5.5L8.09355 3.29029L7.20966 2.40641L4.99996 4.61612L2.79025 2.40641Z",
                m = "M6.14592 1.35417L7.39592 1.35417L7.39591 6.97917L8.85425 6.97917L6.77091 9.0625L4.68758 6.97916L6.14591 6.97916L6.14592 1.35417ZM2.39591 8.85417L3.64591 8.85417L3.64591 3.02083L5.10425 3.02083L3.02091 0.9375L0.937581 3.02083L2.39591 3.02083L2.39591 8.85417Z"
        },
        lDj4: (e, t, i) => {
            i.d(t, {
                A: () => n,
                h: () => s
            });
            var r = i("DTvD");
            const o = {
                    visible: !1,
                    setVisible: () => null
                },
                s = () => {
                    const [e, t] = (0, r.useState)(o.visible);
                    return (0, r.useMemo)((() => ({
                        visible: e,
                        setVisible: t
                    })), [e, t])
                },
                n = (0, r.createContext)(o)
        },
        oOO9: (e, t, i) => {
            i.d(t, {
                A: () => n,
                h: () => s
            });
            var r = i("DTvD");
            const o = {
                    visible: !1,
                    setVisible: () => null,
                    currentId: "",
                    setCurrentId: () => null,
                    position: {
                        x: 0,
                        y: 0
                    },
                    setPosition: () => null
                },
                s = () => {
                    const [e, t] = (0, r.useState)(o.visible), [i, s] = (0, r.useState)(o.currentId), [n, a] = (0, r.useState)(o.position);
                    return (0, r.useMemo)((() => ({
                        visible: e,
                        setVisible: t,
                        currentId: i,
                        setCurrentId: s,
                        position: n,
                        setPosition: a
                    })), [e, t, i, s, n, a])
                },
                n = (0, r.createContext)(o)
        },
        "5Pqn": (e, t, i) => {
            i.d(t, {
                A: () => n,
                h: () => s
            });
            var r = i("DTvD");
            const o = {
                    visible: !1,
                    setVisible: () => null,
                    price: 0,
                    setPrice: () => null,
                    formattedPrice: "",
                    setFormattedPrice: () => null,
                    mousePosition: {
                        x: 0,
                        y: 0
                    },
                    setMousePosition: () => null
                },
                s = () => {
                    const [e, t] = (0, r.useState)(o.visible), [i, s] = (0, r.useState)(o.price), [n, a] = (0, r.useState)(o.formattedPrice), [l, c] = (0, r.useState)(o.mousePosition);
                    return {
                        visible: e,
                        setVisible: t,
                        price: i,
                        setPrice: s,
                        formattedPrice: n,
                        setFormattedPrice: a,
                        mousePosition: l,
                        setMousePosition: c
                    }
                },
                n = (0, r.createContext)(o)
        },
        P2OS: (e, t, i) => {
            i.d(t, {
                UE: () => g,
                fU: () => l,
                mB: () => u,
                pk: () => a
            });
            var r = i("g/AJ"),
                o = i.n(r),
                s = i("bmS5"),
                n = i.n(s);
            const a = e => new Date(e).valueOf() > Date.now(),
                l = e => {
                    const t = new Date(e);
                    return `${t.getFullYear().toString()}-${n()(t.getMonth()+1,1,12).toString().padStart(2,"0")}-${t.getDate().toString().padStart(2,"0")} ${t.getHours().toString().padStart(2,"0")}:${t.getMinutes().toString().padStart(2,"0")}:${t.getSeconds().toString().padStart(2,"0")}`
                },
                c = o()(60),
                d = c,
                h = o()(24),
                u = e => {
                    const t = new Date;
                    if (!e) return {
                        disabledHours: () => [],
                        disabledMinutes: () => [],
                        disabledSeconds: () => []
                    };
                    const i = e.year() === t.getUTCFullYear(),
                        r = e.month() === t.getUTCMonth(),
                        o = e.date() === t.getUTCDate();
                    if (!i || !r || !o) return {
                        disabledHours: () => [],
                        disabledMinutes: () => [],
                        disabledSeconds: () => []
                    };
                    const s = h.filter((e => e > t.getHours())),
                        n = d.filter((e => e > t.getMinutes())),
                        a = c.filter((e => e > t.getSeconds()));
                    return {
                        disabledHours: () => s,
                        disabledMinutes: () => n,
                        disabledSeconds: () => a
                    }
                },
                g = e => {
                    const t = new Date(e).toLocaleDateString();
                    return new Date(t).valueOf()
                }
        },
        dBLR: (e, t, i) => {
            i.d(t, {
                A: () => z
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i("f9BG"),
                n = i("fc5I"),
                a = i.n(n),
                l = i("Olbk"),
                c = i("xqbL"),
                d = i.n(c),
                h = i("Gz4J"),
                u = i("46Ff"),
                g = i("jmB/"),
                p = i("iFsL"),
                m = i("KNYd"),
                x = i("tgKj"),
                f = i("1C1L"),
                y = i("gZrf");
            const b = ({
                    onClickAway: e,
                    onClick: t
                }) => {
                    const i = (0, o.useRef)(null);
                    (0, m.A)(i, e);
                    const {
                        getI18n: s
                    } = (0, p.P3)(), n = (0, o.useMemo)((() => s("color-picker-remove-color", {
                        defaultValue: "Remove Color"
                    })), [s]);
                    return (0, r.jsxs)(x.A, {
                        ref: i,
                        className: "bg-PrimaryText items-center justify-between px-[12px] py-[8px] cursor-pointer shadow gap-[4px] text-SecondaryBg rounded-[8px]",
                        onClick: t,
                        children: [(0, r.jsx)(y.A, {
                            className: "w-[16px] h-[16px]"
                        }), n]
                    })
                },
                v = ({
                    color: e,
                    onClick: t = () => null,
                    onContextMenu: i = () => null,
                    isSelected: o = !1,
                    isRemoveSelected: s = !1
                }) => {
                    const n = "rgb(255, 255, 255)" === e;
                    return (0, r.jsx)(x.A, {
                        className: d()("border-[1px] w-[24px] h-[24px] border-solid items-center justify-center rounded-[2px]", {
                            "border-PrimaryYellow": o,
                            "border-[transparent]": !o,
                            "border-Input": s
                        }),
                        children: (0, r.jsx)(l.Ay, {
                            className: d()("flex items-center justify-center rounded-[2px] cursor-pointer", {
                                "m-[1px]": n && o || !n,
                                "m-[0px] border-[1px] border-solid border-Line": n && !o
                            }),
                            style: {
                                width: "20px",
                                height: "20px",
                                background: e
                            },
                            onClick: t,
                            onContextMenu: i
                        })
                    })
                },
                C = e => e.enableContextMenu ? (0, r.jsx)(f.A, {
                    enablePortal: !0,
                    useReactPopper: !0,
                    open: e.contextMenuProps.showMenu,
                    placement: "top",
                    overlay: (0, r.jsx)(b, {
                        onClickAway: e.contextMenuProps.onClickAway,
                        onClick: e.contextMenuProps.onRemoveColor
                    }),
                    children: (0, r.jsx)(v, {
                        onClick: e.onClick,
                        onContextMenu: e.contextMenuProps.onContextMenu,
                        isSelected: e.isSelected,
                        isRemoveSelected: e.contextMenuProps.showMenu,
                        color: e.color
                    })
                }) : (0, r.jsx)(v, {
                    onClick: e.onClick,
                    isSelected: e.isSelected,
                    color: e.color
                }),
                w = ({
                    r: e,
                    g: t,
                    b: i
                }) => {
                    let r = 0,
                        o = 0,
                        s = 0;
                    const n = Math.max(e, t, i),
                        a = n - Math.min(e, t, i);
                    return r = 0 === a ? 0 : e === n ? (t - i) / a % 6 : t === n ? (i - e) / a + 2 : (e - t) / a + 4, r = Math.floor(60 * r), r < 0 && (r += 360), o = Math.round(100 * (0 === n ? 0 : a / n)), s = Math.round(n / 255 * 100), {
                        h: r,
                        s: o,
                        v: s
                    }
                },
                A = ({
                    h: e,
                    s: t,
                    v: i
                }) => {
                    let r = [];
                    const o = (i /= 100) * (t /= 100),
                        s = e / 60,
                        n = o * (1 - Math.abs(s % 2 - 1)),
                        a = i - o;
                    switch (parseInt(`${s}`, 10)) {
                        case 0:
                            r = [o, n, 0];
                            break;
                        case 1:
                            r = [n, o, 0];
                            break;
                        case 2:
                            r = [0, o, n];
                            break;
                        case 3:
                            r = [0, n, o];
                            break;
                        case 4:
                            r = [n, 0, o];
                            break;
                        case 5:
                            r = [o, 0, n]
                    }
                    if (0 === r.length) throw new Error("hsv color is not valid");
                    return {
                        r: Math.round(255 * (r[0] + a)),
                        g: Math.round(255 * (r[1] + a)),
                        b: Math.round(255 * (r[2] + a))
                    }
                };
            var S = i("BbzZ"),
                T = i("bmS5"),
                k = i.n(T),
                L = i("puuf");
            const _ = ({
                    color: e,
                    onChangeColor: t
                }) => {
                    const i = (0, o.useMemo)((() => {
                            try {
                                return (0, s.A)(e)
                            } catch (t) {
                                return (0, s.A)("rgba(0,0,0,1)")
                            }
                        }), [e]),
                        n = (0, o.useMemo)((() => {
                            const [e, t, r] = i.rgb();
                            return w({
                                r: e,
                                g: t,
                                b: r
                            })
                        }), [i]),
                        [a, l] = (0, o.useState)(!1),
                        [c, {
                            width: d,
                            height: h
                        }] = (0, S.A)(),
                        u = (0, o.useCallback)((e => {
                            const i = e.currentTarget.getBoundingClientRect(),
                                r = k()(e.clientX - i.x, 0, d),
                                o = k()(e.clientY - i.y, 0, h),
                                {
                                    r: s,
                                    g: a,
                                    b: l
                                } = A({
                                    h: n.h,
                                    s: Math.round(r / d * 100),
                                    v: Math.round(100 * (1 - o / h))
                                });
                            t(`rgb(${s},${a},${l})`)
                        }), [d, h, n.h, t]),
                        g = (0, o.useCallback)((e => {
                            l(!0), u(e)
                        }), [l, u]),
                        p = (0, o.useCallback)((e => {
                            a && u(e)
                        }), [a, u]),
                        m = (0, o.useCallback)((() => {
                            l(!1)
                        }), [l]);
                    return (0, r.jsxs)(L.A, {
                        className: "flex h-[160px] relative overflow-hidden items-center rounded-[6px]",
                        style: {
                            background: `hsl(${n.h}, 100%, 50%)`
                        },
                        ref: c,
                        onMouseDown: g,
                        onMouseMove: p,
                        onMouseUp: m,
                        children: [(0, r.jsx)(L.A, {
                            className: "w-full absolute",
                            style: {
                                height: `${h}px`,
                                background: "linear-gradient(to right, #fff, rgba(255,255,255,0))"
                            }
                        }), (0, r.jsx)(L.A, {
                            className: "w-full absolute",
                            style: {
                                height: `${h}px`,
                                background: "linear-gradient(to top, #000, rgba(0,0,0,0))"
                            }
                        }), (0, r.jsx)(L.A, {
                            className: "absolute border-solid border-[2px] rounded-full border-white shadow",
                            style: {
                                width: "18px",
                                height: "18px",
                                left: `${Math.min(n.s/100*d-9,d-1)}px`,
                                top: `${Math.min((1-n.v/100)*h-9,h-1)}px`
                            }
                        })]
                    })
                },
                P = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/g,
                D = ["rgb(0,0,0)", "rgb(32, 38, 48)", "rgb(51, 59, 71)", "rgb(67, 70, 80)", "rgb(93, 96, 106)", "rgb(120, 123, 133)", "rgb(149, 152, 160)", "rgb(178, 181, 189)", "rgb(234, 236, 239)", "rgb(255, 255, 255)"],
                I = ["rgb(246, 70, 93)", "rgb(241, 157, 56)", "rgb(252, 236, 96)", "rgb(46, 189, 133)", "rgb(68, 150, 130)", "rgb(84, 185, 209)", "rgb(56, 96, 246)", "rgb(97, 60, 176)", "rgb(143, 49, 170)", "rgb(214, 56, 100)"],
                V = ["rgb(237, 165, 166)", "rgb(247, 206, 138)", "rgb(253, 245, 167)", "rgb(175, 212, 171)", "rgb(134, 202, 189)", "rgb(150, 219, 232)", "rgb(153, 189, 244)", "rgb(175, 157, 214)", "rgb(197, 149, 212)", "rgb(230, 148, 176)", "rgb(231, 130, 131)", "rgb(244, 186, 96)", "rgb(253, 241, 136)", "rgb(144, 197, 138)", "rgb(103, 186, 168)", "rgb(115, 205, 222)", "rgb(106, 154, 239)", "rgb(144, 118, 199)", "rgb(175, 108, 195)", "rgb(223, 107, 145)", "rgb(228, 94, 99)", "rgb(242, 171, 70)", "rgb(252, 239, 114)", "rgb(123, 185, 114)", "rgb(82, 168, 148)", "rgb(95, 195, 215)", "rgb(68, 119, 237)", "rgb(120, 88, 188)", "rgb(159, 77, 182)", "rgb(218, 78, 122)", "rgb(164, 52, 55)", "rgb(229, 130, 48)", "rgb(242, 194, 79)", "rgb(80, 140, 70)", "rgb(43, 100, 86)", "rgb(66, 148, 164)", "rgb(37, 71, 196)", "rgb(76, 46, 162)", "rgb(113, 38, 156)", "rgb(178, 45, 91)", "rgb(117, 34, 37)", "rgb(213, 91, 38)", "rgb(230, 133, 55)", "rgb(47, 92, 40)", "rgb(17, 50, 42)", "rgb(39, 94, 99)", "rgb(23, 49, 147)", "rgb(46, 28, 140)", "rgb(68, 23, 134)", "rgb(124, 29, 77)"];
            var M;
            ! function(e) {
                e[e.Add = 0] = "Add", e[e.Edit = 1] = "Edit"
            }(M || (M = {}));
            const B = ({
                color: e,
                onChangeColor: t,
                onChangeAlpha: i,
                onClickConfirm: n,
                onClickCancel: a,
                onClickAdd: c,
                mode: d = 0
            }) => {
                const {
                    getI18n: m
                } = (0, p.P3)(), x = (0, o.useMemo)((() => {
                    try {
                        return (0, s.A)(e)
                    } catch (t) {
                        return (0, s.A)("rgba(0,0,0,1)")
                    }
                }), [e]), f = (0, o.useMemo)((() => x.alpha()), [x]), y = (0, o.useMemo)((() => {
                    const [e, t, i] = x.rgb();
                    return w({
                        r: e,
                        g: t,
                        b: i
                    })
                }), [x]), [b, v] = (0, o.useMemo)((() => [x.alpha(0).css(), x.alpha(1).css()]), [x]), [S, T] = (0, o.useState)(x.hex("rgb")), k = (0, o.useMemo)((() => m("color-picker-cancel", {
                    defaultValue: "Cancel"
                })), [m]), L = (0, o.useMemo)((() => m("color-picker-add", {
                    defaultValue: "Add"
                })), [m]), D = (0, o.useMemo)((() => m("color-picker-confirm", {
                    defaultValue: "Confirm"
                })), [m]), I = (0, o.useCallback)((() => c(x.css())), [x, c]), V = (0, o.useMemo)((() => (0, r.jsx)(h.A, {
                    sz: "small",
                    variant: "primary",
                    className: "flex-1",
                    onClick: n,
                    children: D
                })), [D, n]), M = (0, o.useMemo)((() => (0, r.jsx)(h.A, {
                    sz: "small",
                    variant: "secondary",
                    className: "flex-1",
                    style: {
                        minHeight: "auto"
                    },
                    onClick: a,
                    children: k
                })), [k, a]), B = (0, o.useMemo)((() => (0, r.jsx)(h.A, {
                    sz: "small",
                    variant: "primary",
                    className: "flex-1",
                    style: {
                        minHeight: "auto"
                    },
                    onClick: I,
                    children: L
                })), [L, I]), E = (0, o.useCallback)((e => {
                    t(e);
                    try {
                        const t = (0, s.A)(e).hex("rgb");
                        T(t)
                    } catch (i) {}
                }), [t]), j = (0, o.useCallback)((e => {
                    try {
                        const {
                            r: i,
                            g: r,
                            b: o
                        } = A({
                            h: Math.round(e),
                            s: y.s,
                            v: y.v
                        }), n = `rgb(${i},${r},${o})`;
                        t(n);
                        const a = (0, s.A)(n).hex("rgb");
                        T(a)
                    } catch (i) {}
                }), [y.s, y.v, t]), O = (0, o.useCallback)((e => i(+(.01 * Math.round(e)).toFixed(2))), [i]), H = (0, o.useCallback)((e => {
                    T(e), P.test(e) && t(e)
                }), [t]);
                return (0, r.jsxs)(l.Ay, {
                    className: "flex flex-col bg-[--color-CardBg]",
                    children: [(0, r.jsx)(l.Ay, {
                        className: "mb-[8px]",
                        children: (0, r.jsx)(_, {
                            color: e,
                            onChangeColor: E
                        })
                    }), (0, r.jsxs)(l.Ay, {
                        className: "grid mb-[8px]",
                        style: {
                            gap: "8px",
                            gridTemplateColumns: "max-content auto",
                            gridTemplateRows: "auto"
                        },
                        children: [(0, r.jsx)(C, {
                            color: e
                        }), (0, r.jsx)(u.A, {
                            style: {
                                fontSize: "12px",
                                textAlign: "center"
                            },
                            size: "small",
                            variant: "line",
                            className: "!h-[24px] flex justify-center items-center !w-[64px] !rounded-[4px] [&_input]:w-full !p-0",
                            value: S,
                            onChange: H
                        })]
                    }), (0, r.jsx)(g.A, {
                        max: 360,
                        value: y.h,
                        onChange: j,
                        className: "h-full [&_.bn-slider-track]:invisible",
                        style: {
                            marginBottom: "8px",
                            marginTop: "0px",
                            marginLeft: "0px",
                            marginRight: "0px",
                            background: "linear-gradient(to right, #f00 0%, #ff0 17%, #0f0 33%, #0ff 50%, #00f 67%, #f0f 83%, #f00 100%)",
                            borderRadius: "12px"
                        }
                    }), (0, r.jsx)(g.A, {
                        max: 100,
                        value: 100 * f,
                        onChange: O,
                        className: "h-full [&_.bn-slider-track]:invisible",
                        style: {
                            marginBottom: "8px",
                            marginTop: "0px",
                            marginLeft: "0px",
                            marginRight: "0px",
                            background: `linear-gradient(to right, ${b}, ${v})`,
                            borderRadius: "12px"
                        }
                    }), 0 === d ? (0, r.jsxs)(l.Ay, {
                        className: "flex flex-row h-[32px]",
                        style: {
                            gap: "8px"
                        },
                        children: [M, B]
                    }) : V]
                })
            };
            var E = i("kcvK"),
                j = i("wHCr");
            const O = () => (0, r.jsx)(l.Ay, {
                    className: "w-full mt-[8px]",
                    style: {
                        borderBottomColor: "var(--color-Line)",
                        borderBottomStyle: "solid",
                        borderBottomWidth: "1px"
                    }
                }),
                H = ({
                    className: e,
                    children: t
                }) => (0, r.jsx)(l.Ay, {
                    className: d()("grid gap-[4px]", e),
                    style: {
                        gridTemplateColumns: "repeat(10,20px)",
                        gridTemplateRows: "auto"
                    },
                    children: t
                }),
                R = ({
                    currentRgbString: e,
                    colors: t,
                    onChangeColor: i,
                    className: o
                }) => (0, r.jsx)(H, {
                    className: o,
                    children: t.map(((t, o) => (0, r.jsx)(C, {
                        color: t,
                        onClick: () => i(t),
                        isSelected: e === t
                    }, o)))
                }),
                N = ({
                    currentRgbString: e,
                    colors: t,
                    onChangeColor: i,
                    onClickAddButton: s,
                    onRemoveColor: n
                }) => {
                    const [a, c] = (0, o.useState)(-1), {
                        getI18n: d
                    } = (0, p.P3)();
                    return (0, r.jsxs)(H, {
                        className: "py-[10px] gap-[8px] flex-wrap",
                        children: [t.map(((t, o) => (0, r.jsx)(C, {
                            color: t,
                            onClick: () => i(t),
                            isSelected: e === t,
                            enableContextMenu: !0,
                            contextMenuProps: {
                                onClickAway: () => {
                                    a === o && c(-1)
                                },
                                onContextMenu: e => {
                                    e.stopPropagation(), e.preventDefault(), c(o)
                                },
                                onRemoveColor: () => {
                                    a === o && (c(-1), n(t, o))
                                },
                                showMenu: a === o
                            }
                        }, o))), 20 === t.length ? null : (0, r.jsx)(E.A, {
                            enablePortal: !0,
                            useReactPopper: !0,
                            arrow: !0,
                            bubbleClassName: "",
                            tooltips: d("color-picker-add-color", {
                                defaultValue: "Add Custom Color"
                            }),
                            children: (0, r.jsx)(l.Ay, {
                                className: "w-[20px] flex items-center justify-center cursor-pointer h-[20px] hover:bg-Input rounded-[2px] overflow-hidden",
                                children: (0, r.jsx)(j.A, {
                                    className: "w-[16px] h-[16px] text-IconNormal",
                                    onClick: s
                                })
                            })
                        })]
                    })
                },
                W = ({
                    color: e,
                    onChangeColor: t,
                    onChangeAlpha: i,
                    customizedColors: n,
                    onClickAddCustomizedColor: a,
                    onClickRemoveCustomizedColor: c
                }) => {
                    const d = (0, o.useCallback)((e => t(e)), [t]),
                        h = (0, o.useCallback)((e => i(+(.01 * Math.round(e)).toFixed(2))), [i]),
                        u = (0, o.useMemo)((() => {
                            try {
                                return (0, s.A)(e)
                            } catch (t) {
                                return (0, s.A)("rgba(0,0,0,1)")
                            }
                        }), [e]),
                        [p, m] = (0, o.useMemo)((() => [u.alpha(0).css(), u.alpha(1).css()]), [u]),
                        x = (0, o.useMemo)((() => u.alpha()), [u]);
                    return (0, r.jsxs)(l.Ay, {
                        className: "flex flex-col bg-[--color-CardBg]",
                        children: [(0, r.jsx)(R, {
                            className: "mb-[4px]",
                            currentRgbString: m,
                            colors: D,
                            onChangeColor: d
                        }), (0, r.jsx)(R, {
                            className: "mb-[10px]",
                            currentRgbString: m,
                            colors: I,
                            onChangeColor: d
                        }), (0, r.jsx)(R, {
                            currentRgbString: m,
                            colors: V,
                            onChangeColor: d
                        }), (0, r.jsx)(O, {}), (0, r.jsx)(N, {
                            currentRgbString: m,
                            colors: n,
                            onChangeColor: d,
                            onClickAddButton: a,
                            onRemoveColor: c
                        }), (0, r.jsx)(g.A, {
                            max: 100,
                            value: 100 * x,
                            onChange: h,
                            className: "h-full [&_.bn-slider-track]:invisible",
                            style: {
                                margin: 0,
                                background: `linear-gradient(to right, ${p}, ${m})`,
                                borderRadius: "12px"
                            }
                        })]
                    })
                };
            var F;
            ! function(e) {
                e[e.Default = 0] = "Default", e[e.Custom = 1] = "Custom"
            }(F || (F = {}));
            const z = ({
                color: e = "rgba(255,255,255,0)",
                candlestickInstance: t,
                onChange: i = a()
            }) => {
                const [n, c] = (0, o.useState)(e), [h, u] = (0, o.useState)(M.Add), [g, p] = (0, o.useState)(0), [m, x] = (0, o.useState)([]);
                (0, o.useEffect)((() => {
                    const e = t.settingStore,
                        i = ({
                            key: t,
                            value: i,
                            type: r
                        }) => {
                            if ("load" === r) {
                                const t = e.getValue("@customColors");
                                x(t)
                            }
                            "@customColors" === t && x(i)
                        };
                    return e.subscribeValueChanged(i), () => {
                        e.unsubscribeValueChanged(i)
                    }
                }), [t]);
                const f = (0, o.useCallback)((() => {
                        p(0)
                    }), [p]),
                    y = (0, o.useCallback)((e => {
                        const i = t.settingStore,
                            r = [...i.getValue("@customColors") || [], e];
                        i.setValue("@customColors", r), p(0)
                    }), [t]),
                    b = (0, o.useCallback)((() => {
                        p(0)
                    }), [p]),
                    v = (0, o.useCallback)((() => {
                        u(M.Edit), p(1)
                    }), [u, p]),
                    C = (0, o.useCallback)((() => {
                        u(M.Add), p(1)
                    }), [u, p]),
                    w = (0, o.useCallback)(((e, i) => {
                        const r = t.settingStore,
                            o = (r.getValue("@customColors") || []).filter(((e, t) => i !== t));
                        r.setValue("@customColors", o)
                    }), [t]),
                    A = (0, o.useCallback)((e => {
                        c((t => {
                            try {
                                const r = (0, s.A)(t).alpha(),
                                    o = (0, s.A)(e).alpha(r).css();
                                return i(o), o
                            } catch (r) {
                                return t
                            }
                        }))
                    }), [i]),
                    S = (0, o.useCallback)((e => {
                        c((t => {
                            try {
                                const r = (0, s.A)(t).alpha(e).css();
                                return i(r), r
                            } catch (r) {
                                return t
                            }
                        }))
                    }), [i]);
                return (0, r.jsx)(l.Ay, {
                    className: d()("bg-CardBg w-[256px] min-h-[287px] p-[8px]"),
                    onClick: e => e.stopPropagation(),
                    children: 1 === g ? (0, r.jsx)(B, {
                        color: n,
                        mode: h,
                        onChangeColor: A,
                        onChangeAlpha: S,
                        onClickConfirm: () => setTimeout(f, 0),
                        onClickCancel: () => setTimeout(b, 0),
                        onClickAdd: e => setTimeout((() => y(e)), 0)
                    }) : (0, r.jsx)(W, {
                        color: n,
                        customizedColors: m,
                        onChangeColor: A,
                        onChangeAlpha: S,
                        onClickCustomize: v,
                        onClickAddCustomizedColor: () => setTimeout(C, 0),
                        onClickRemoveCustomizedColor: w
                    })
                })
            }
        },
        y6qk: (e, t, i) => {
            i.d(t, {
                Cl: () => f,
                H_: () => y,
                av: () => b
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i("Olbk"),
                n = i("zxgP"),
                a = i("F05g"),
                l = i("I4z7"),
                c = i("MKk+"),
                d = i("k6za"),
                h = i("1tqE"),
                u = i("vjpm"),
                g = i("lbH7");
            const p = "calc(100%)",
                m = "-10px",
                x = ({
                    disabled: e,
                    children: t,
                    subChildren: i,
                    subChildrenWrapperWidth: n,
                    onClick: a,
                    ...l
                }) => {
                    const c = (0, o.useRef)(null),
                        [d, h] = (0, o.useState)({
                            left: p,
                            top: m
                        }),
                        [u, x] = (0, o.useState)(!1),
                        f = (0, o.useCallback)((e => {
                            e.stopPropagation(), a ? .(e)
                        }), [a]),
                        y = (0, o.useCallback)((() => x(!0)), []),
                        b = (0, o.useCallback)((() => {
                            x(!1), h({
                                left: p,
                                top: m
                            })
                        }), []);
                    return (0, o.useEffect)((() => {
                        if (!u) return;
                        const e = c.current ? .getBoundingClientRect();
                        if (!e) return;
                        const t = window.innerWidth,
                            i = window.innerHeight,
                            r = { ...e.x + e.width < t ? {
                                    left: p
                                } : {
                                    right: p
                                },
                                ...e.y + e.height < i ? {
                                    top: m
                                } : {
                                    bottom: m
                                }
                            };
                        h(r)
                    }), [u]), (0, r.jsxs)(s.Ay, { ...l,
                        onClick: f,
                        onMouseEnter: y,
                        onMouseLeave: b,
                        className: "relative grid grid-rows-[54px] px-[15px] md:grid-rows-[38px] md:px-[10px] items-center cursor-pointer gap-[--space-2xs] hover:bg-[--color-Input]",
                        children: [t, i && u ? (0, r.jsx)(g.x, {
                            ref: c,
                            style: {
                                position: "absolute",
                                ...d
                            },
                            wrapperWidth: n,
                            children: i
                        }) : null]
                    })
                },
                f = ({
                    children: e,
                    icon: t,
                    squishIcon: i = !1,
                    squishArrow: o = !1,
                    onClick: n,
                    subChildren: a,
                    subChildrenWrapperWidth: l
                }) => (0, r.jsxs)(x, {
                    style: {
                        gridTemplateColumns: "auto 1fr auto"
                    },
                    subChildren: a,
                    subChildrenWrapperWidth: l,
                    onClick: n,
                    children: [i ? null : (0, r.jsx)(s.Ay, {
                        className: "w-[20px] h-[20px]",
                        children: t ? (0, r.jsx)(t, {
                            className: "w-full h-full text-[--color-IconNormal]"
                        }) : null
                    }), (0, r.jsx)(s.Ay, {
                        className: "typography-body3 text-[--color-PrimaryText]",
                        children: e
                    }), o ? null : (0, r.jsx)(s.Ay, {
                        className: "w-[16px] h-[16px]",
                        children: a ? (0, r.jsx)(c.A, {
                            className: "w-full h-full text-[--color-IconNormal]"
                        }) : null
                    })]
                }),
                y = ({
                    children: e,
                    subChildren: t,
                    subChildrenWrapperWidth: i,
                    checked: l,
                    disabled: g,
                    onClick: p,
                    closeLevel1: m,
                    totalLevel1: f = 0
                }) => {
                    const {
                        isMobile: y
                    } = (0, u.Q)(), [b, v] = (0, o.useState)(!1), C = !!t, w = (0, o.useCallback)((e => {
                        if (!g) return y && C ? v(!0) : void p ? .(e)
                    }), [g, y, C, p]), A = (0, o.useCallback)((() => v(!1)), []), S = 54 * (f + 1);
                    return (0, r.jsxs)(r.Fragment, {
                        children: [(0, r.jsxs)(x, {
                            style: {
                                gridTemplateColumns: "1fr auto"
                            },
                            subChildren: t,
                            subChildrenWrapperWidth: i,
                            onClick: w,
                            children: [(0, r.jsx)(n.A, {
                                sz: "lg",
                                value: "",
                                checked: l,
                                disabled: g,
                                children: e
                            }), (0, r.jsx)(s.Ay, {
                                className: "w-[16px] h-[16px]",
                                children: t ? (0, r.jsx)(c.A, {
                                    className: "w-full h-full text-[--color-IconNormal]"
                                }) : null
                            })]
                        }), y && (0, r.jsx)(a.A, {
                            visible: b,
                            direction: "bottom",
                            onClose: A,
                            enablePortal: !0,
                            enableScrollSpace: !1,
                            children: (0, r.jsxs)(s.Ay, {
                                style: {
                                    minHeight: S
                                },
                                className: "mt-[16px]",
                                children: [(0, r.jsxs)(s.Ay, {
                                    className: "flex items-center justify-between py-[14px] px-[15px]",
                                    children: [(0, r.jsx)(d.A, {
                                        className: "text-[20px] text-PrimaryText",
                                        onClick: A
                                    }), (0, r.jsx)(s.Ay, {
                                        className: "t-headline4",
                                        children: e
                                    }), (0, r.jsx)(h.A, {
                                        className: "text-[20px] cursor-pointer text-IconNormal",
                                        onClick: () => {
                                            A(), m ? .()
                                        }
                                    })]
                                }), t]
                            })
                        })]
                    })
                },
                b = ({
                    children: e,
                    onClick: t,
                    checked: i
                }) => (0, r.jsxs)(x, {
                    style: {
                        gridTemplateColumns: "1fr auto"
                    },
                    onClick: t,
                    children: [(0, r.jsx)(s.Ay, {
                        className: "typography-body3 text-[--color-PrimaryText]",
                        children: e
                    }), (0, r.jsx)(l.A, {
                        size: "small",
                        checked: i,
                        defaultChecked: i
                    })]
                })
        },
        lbH7: (e, t, i) => {
            i.d(t, {
                x: () => n
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i("Olbk");
            const n = (0, o.forwardRef)((({
                children: e,
                wrapperWidth: t = "max-content",
                ...i
            }, o) => (0, r.jsx)(s.Ay, { ...i,
                style: {
                    boxShadow: "var(--shadow-shadow2)",
                    zIndex: "var(--zindex-dropdown)",
                    ...i.style,
                    width: t
                },
                className: "flex flex-col rounded-[12px] bg-[--color-CardBg] py-[10px]",
                ref: o,
                children: e
            })))
        },
        RkhT: (e, t, i) => {
            i.d(t, {
                o: () => P
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i("y6qk"),
                n = i("iFsL"),
                a = i("jYFu"),
                l = i("dLyb");
            const c = ({
                children: e,
                feature: t,
                candlestick: i
            }) => {
                const n = (0, l.Q0)({
                        candlestick: i,
                        feature: t
                    }),
                    a = (0, o.useCallback)((() => i ? .toggleFeature(t)), [i, t]);
                return (0, r.jsx)(s.av, {
                    onClick: a,
                    checked: n,
                    children: e
                })
            };
            var d = i("vjpm");
            const h = ({
                    candlestick: e,
                    percentageScale: t,
                    logarithmicScale: i,
                    invertedScale: h,
                    closeLevel1: u,
                    totalLevel1: g
                }) => {
                    const {
                        getI18n: p
                    } = (0, n.P3)(), {
                        isMobile: m
                    } = (0, d.Q)(), x = (0, o.useMemo)((() => p("contextMenu-scale", {
                        defaultValue: "Scale"
                    })), [p]), f = (0, o.useMemo)((() => p("contextMenu-precentageView", {
                        defaultValue: "Percentage View"
                    })), [p]), y = (0, o.useMemo)((() => p("contextMenu-logarithmicView", {
                        defaultValue: "Logarithmic View"
                    })), [p]), b = (0, o.useMemo)((() => p("contextMenu-invertedView", {
                        defaultValue: "Inverted View"
                    })), [p]), {
                        checked: v
                    } = (0, l.ir)({
                        candlestick: e,
                        features: [a.O5.PercentageScale, a.O5.LogarithmicScale, a.O5.InvertedScale]
                    }), C = (0, o.useCallback)((() => {
                        e && (e.getFeatureToggleState(a.O5.PercentageScale) && e.toggleFeature(a.O5.PercentageScale), e.getFeatureToggleState(a.O5.LogarithmicScale) && e.toggleFeature(a.O5.LogarithmicScale), e.getFeatureToggleState(a.O5.InvertedScale) && e.toggleFeature(a.O5.InvertedScale))
                    }), [e]);
                    return t.visible || i.visible || h.visible ? (0, r.jsx)(s.H_, {
                        disabled: !v && !m,
                        checked: v,
                        onClick: C,
                        closeLevel1: u,
                        totalLevel1: g,
                        subChildren: (0, r.jsxs)(r.Fragment, {
                            children: [t.visible ? (0, r.jsx)(c, {
                                candlestick: e,
                                feature: a.O5.PercentageScale,
                                children: f
                            }) : null, i.visible ? (0, r.jsx)(c, {
                                candlestick: e,
                                feature: a.O5.LogarithmicScale,
                                children: y
                            }) : null, h.visible ? (0, r.jsx)(c, {
                                candlestick: e,
                                feature: a.O5.InvertedScale,
                                children: b
                            }) : null]
                        }),
                        children: x
                    }) : null
                },
                u = ({
                    candlestick: e,
                    marketPriceLine: t,
                    countdown: i,
                    askBid: d,
                    closeLevel1: h,
                    totalLevel1: u
                }) => {
                    const {
                        getI18n: g
                    } = (0, n.P3)(), p = (0, o.useMemo)((() => g("contextMenu-priceLineRaw", {
                        defaultValue: "Price Line"
                    })), [g]), m = (0, o.useMemo)((() => g("contextMenu-priceLine", {
                        defaultValue: "Market Price Line"
                    })), [g]), x = (0, o.useMemo)((() => g("contextMenu-countdown", {
                        defaultValue: "Count Down"
                    })), [g]), f = (0, o.useMemo)((() => g("contextMenu-bidAndAskPrice", {
                        defaultValue: "Bid & Ask Price"
                    })), [g]), {
                        checked: y
                    } = (0, l.ir)({
                        candlestick: e,
                        features: [a.O5.Countdown, a.O5.PriceLine, a.O5.AskBid]
                    }), b = (0, o.useCallback)((() => {
                        e && (y ? (e.getFeatureToggleState(a.O5.PriceLine) && e.toggleFeature(a.O5.PriceLine), e.getFeatureToggleState(a.O5.Countdown) && e.toggleFeature(a.O5.Countdown), e.getFeatureToggleState(a.O5.AskBid) && e.toggleFeature(a.O5.AskBid)) : (t.visible && e.toggleFeature(a.O5.PriceLine), i.visible && e.toggleFeature(a.O5.Countdown), d.visible && e.toggleFeature(a.O5.AskBid)))
                    }), [d.visible, e, y, i.visible, t.visible]);
                    return t.visible || i.visible || d.visible ? (0, r.jsx)(s.H_, {
                        checked: y,
                        onClick: b,
                        closeLevel1: h,
                        totalLevel1: u,
                        subChildren: (0, r.jsxs)(r.Fragment, {
                            children: [t.visible ? (0, r.jsx)(c, {
                                candlestick: e,
                                feature: a.O5.PriceLine,
                                children: m
                            }) : null, i.visible ? (0, r.jsx)(c, {
                                candlestick: e,
                                feature: a.O5.Countdown,
                                children: x
                            }) : null, d.visible ? (0, r.jsx)(c, {
                                candlestick: e,
                                feature: a.O5.AskBid,
                                children: f
                            }) : null]
                        }),
                        children: p
                    }) : null
                },
                g = ({
                    candlestick: e,
                    floatingWindow: t,
                    plusButton: i,
                    closeLevel1: d,
                    totalLevel1: h
                }) => {
                    const {
                        getI18n: u
                    } = (0, n.P3)(), g = (0, o.useMemo)((() => u("contextMenu-quickOrder", {
                        defaultValue: "Quick Order"
                    })), [u]), p = (0, o.useMemo)((() => u("contextMenu-floatingWindow", {
                        defaultValue: "Floating Window"
                    })), [u]), m = (0, o.useMemo)((() => u("contextMenu-plusButton", {
                        defaultValue: "Plus Button"
                    })), [u]), x = (0, l.Q0)({
                        candlestick: e,
                        feature: a.O5.ChartTrading
                    }), f = t.visible && t.toggled, y = (0, o.useMemo)((() => t.visible && f || i.visible && x), [x, t.visible, f, i.visible]), b = (0, o.useCallback)((() => {
                        y ? (t.visible && t.onToggled({
                            toggled: !1,
                            source: "parent"
                        }), i.visible && e ? .getFeatureToggleState(a.O5.ChartTrading) && e.toggleFeature(a.O5.ChartTrading)) : (t.visible && t.onToggled({
                            toggled: !0,
                            source: "parent"
                        }), i.visible && e ? .toggleFeature(a.O5.ChartTrading))
                    }), [e, y, t, i.visible]);
                    return t.visible || i.visible ? (0, r.jsx)(s.H_, {
                        checked: y,
                        onClick: b,
                        closeLevel1: d,
                        totalLevel1: h,
                        subChildren: (0, r.jsxs)(r.Fragment, {
                            children: [t.visible && (0, r.jsx)(s.av, {
                                onClick: () => t.visible && t.onToggled ? .({
                                    toggled: f,
                                    source: "self"
                                }),
                                checked: f,
                                children: p
                            }), i.visible && (0, r.jsx)(c, {
                                candlestick: e,
                                feature: a.O5.ChartTrading,
                                children: m
                            })]
                        }),
                        children: g
                    }) : null
                },
                p = ({
                    children: e,
                    feature: t,
                    candlestick: i,
                    onToggled: n
                }) => {
                    const a = (0, l.Q0)({
                            candlestick: i,
                            feature: t
                        }),
                        c = (0, o.useCallback)((() => {
                            i ? .toggleFeature(t), n ? .()
                        }), [i, t, n]);
                    return (0, r.jsx)(s.H_, {
                        onClick: c,
                        checked: a,
                        children: e
                    })
                },
                m = ({
                    candlestick: e,
                    visible: t,
                    onToggled: i
                }) => {
                    const {
                        getI18n: s
                    } = (0, n.P3)(), l = (0, o.useMemo)((() => s("contextMenu-informationMines", {
                        defaultValue: "Spotlight"
                    })), [s]);
                    return t ? (0, r.jsx)(p, {
                        candlestick: e,
                        feature: a.O5.InformationMines,
                        onToggled: i,
                        children: l
                    }) : null
                };
            var x = i("kcvK"),
                f = i("Olbk");
            const y = ({
                    children: e,
                    tooltip: t
                }) => {
                    const {
                        isMobile: i
                    } = (0, d.Q)(), o = (0, r.jsx)(x.A, {
                        enablePortal: !i,
                        useReactPopper: !0,
                        arrow: !0,
                        tooltips: t,
                        children: (0, r.jsx)(f.Ay, {
                            className: "typography-body3 underline decoration-dotted decoration-[--color-TertiaryText] underline-offset-[5px]",
                            children: e
                        })
                    });
                    return i ? (0, r.jsx)(f.Ay, {
                        onClick: e => e.stopPropagation(),
                        children: o
                    }) : o
                },
                b = ({
                    children: e,
                    isActive: t = !1,
                    onClick: i
                }) => {
                    const s = (0, o.useMemo)((() => ["w-full", "h-full", "flex", "items-center", "justify-center", "rounded-[6px]", t ? "bg-[--color-DisabledText]" : "bg-[--color-Line]", "hover:opacity-80", "text-[--color-PrimaryText]", "typography-subtitle3", "cursor-pointer"].join(" ")), [t]);
                    return (0, r.jsx)(f.Ay, {
                        className: s,
                        onClick: i,
                        children: e
                    })
                },
                v = ({
                    items: e,
                    selected: t,
                    onChange: i
                }) => (0, r.jsx)(f.Ay, {
                    className: "flex flex-row gap-[4px] h-[24px] px-[10px] mb-[10px]",
                    children: e.map((({
                        value: e,
                        text: o
                    }, s) => (0, r.jsx)(b, {
                        isActive: e === t,
                        onClick: t => {
                            t.stopPropagation(), i(e)
                        },
                        children: o
                    }, s)))
                }),
                C = ({
                    tooltip: e,
                    updatedOn: t,
                    buy: i,
                    sell: a,
                    closeLevel1: l,
                    totalLevel1: c
                }) => {
                    const {
                        getI18n: d
                    } = (0, n.P3)(), h = (0, o.useMemo)((() => d("contextMenu-avergePrice", {
                        defaultValue: "Average Price"
                    })), [d]), u = (0, o.useMemo)((() => e || `${d("contextMenu-averagePrice-tooltip",{defaultValue:'Based on your "selected time period," the average Buy/Sell price of orders will be displayed on the corresponding Spot/Margin K-line chart. For more data, please go to "Trade Analysis." Data updated on:'})} ${t}`), [e, d, t]), g = (0, o.useMemo)((() => d("contextMenu-buyAveragePrice", {
                        defaultValue: "Buy Average Price"
                    })), [d]), p = (0, o.useMemo)((() => d("contextMenu-sellAveragePrice", {
                        defaultValue: "Sell Average Price"
                    })), [d]), m = i.visible && i.toggled, x = a.visible && a.toggled, f = (0, o.useMemo)((() => m || x), [m, x]), b = (0, o.useCallback)((() => {
                        f ? (i.visible && i.onToggled ? .({
                            toggled: !1,
                            source: "parent"
                        }), a.visible && a.onToggled ? .({
                            toggled: !1,
                            source: "parent"
                        })) : (i.visible && i.onToggled ? .({
                            toggled: !0,
                            source: "parent"
                        }), a.visible && a.onToggled ? .({
                            toggled: !0,
                            source: "parent"
                        }))
                    }), [i, f, a]);
                    return i.visible || a.visible ? (0, r.jsx)(s.H_, {
                        checked: f,
                        onClick: b,
                        closeLevel1: l,
                        totalLevel1: c,
                        subChildrenWrapperWidth: "235px",
                        subChildren: (0, r.jsxs)(r.Fragment, {
                            children: [i.visible ? (0, r.jsxs)(r.Fragment, {
                                children: [(0, r.jsx)(s.av, {
                                    onClick: () => i.visible && i.onToggled({
                                        toggled: m,
                                        source: "self"
                                    }),
                                    checked: m,
                                    children: g
                                }), m && (0, r.jsx)(v, {
                                    items: i.items,
                                    selected: i.selected,
                                    onChange: i.onPeriodChanged
                                })]
                            }) : null, a.visible ? (0, r.jsxs)(r.Fragment, {
                                children: [(0, r.jsx)(s.av, {
                                    onClick: () => a.visible && a.onToggled({
                                        toggled: x,
                                        source: "self"
                                    }),
                                    checked: x,
                                    children: p
                                }), x && (0, r.jsx)(v, {
                                    items: a.items,
                                    selected: a.selected,
                                    onChange: a.onPeriodChanged
                                })]
                            }) : null]
                        }),
                        children: (0, r.jsx)(y, {
                            tooltip: u,
                            children: h
                        })
                    }) : null
                },
                w = e => {
                    const {
                        getI18n: t
                    } = (0, n.P3)(), i = (0, o.useMemo)((() => t("contextMenu-openOrders", {
                        defaultValue: "Open Orders"
                    })), [t]);
                    return e.visible ? (0, r.jsx)(s.H_, {
                        onClick: () => e.onToggled ? .({
                            toggled: e.toggled,
                            source: "self"
                        }),
                        checked: e.toggled,
                        children: i
                    }) : null
                },
                A = e => {
                    const {
                        getI18n: t
                    } = (0, n.P3)(), i = (0, o.useMemo)((() => t("contextMenu-positions", {
                        defaultValue: "Positions"
                    })), [t]);
                    return e.visible ? (0, r.jsx)(s.H_, {
                        onClick: () => e.onToggled ? .({
                            toggled: e.toggled,
                            source: "self"
                        }),
                        checked: e.toggled,
                        children: i
                    }) : null
                },
                S = e => {
                    const {
                        getI18n: t
                    } = (0, n.P3)(), i = (0, o.useMemo)((() => t("contextMenu-orderHistory", {
                        defaultValue: "Order History"
                    })), [t]);
                    return e.visible ? (0, r.jsx)(s.H_, {
                        onClick: () => e.onToggled ? .({
                            toggled: e.toggled,
                            source: "self"
                        }),
                        checked: e.toggled,
                        children: (0, r.jsx)(y, {
                            tooltip: e.tooltip,
                            children: i
                        })
                    }) : null
                },
                T = e => {
                    const {
                        getI18n: t
                    } = (0, n.P3)(), i = (0, o.useMemo)((() => t("contextMenu-price-alert", {
                        defaultValue: "Price Alert"
                    })), [t]), a = (0, o.useMemo)((() => t("contextMenu-price-alert-tooltip", {
                        defaultValue: "Price alerts created on App will be displayed on chart. Supported Alerts: Price Reaches, Price Rises Above, Price Drops To"
                    })), [t]);
                    return e.visible ? (0, r.jsx)(s.H_, {
                        onClick: () => e.onToggled ? .({
                            toggled: e.toggled,
                            source: "self"
                        }),
                        checked: e.toggled,
                        children: (0, r.jsx)(y, {
                            tooltip: a,
                            children: i
                        })
                    }) : null
                },
                k = e => {
                    const {
                        getI18n: t
                    } = (0, n.P3)(), i = (0, o.useMemo)((() => t("contextMenu-breakevenPrice", {
                        defaultValue: "Breakeven Price"
                    })), [t]);
                    return e.visible ? (0, r.jsx)(s.H_, {
                        onClick: () => e.onToggled ? .({
                            toggled: e.toggled,
                            source: "self"
                        }),
                        checked: e.toggled,
                        children: i
                    }) : null
                },
                L = e => {
                    const {
                        getI18n: t
                    } = (0, n.P3)(), i = (0, o.useMemo)((() => t("contextMenu-liquidationPrice", {
                        defaultValue: "Liquidation Price"
                    })), [t]);
                    return e.visible ? (0, r.jsx)(s.H_, {
                        onClick: () => e.onToggled ? .({
                            toggled: e.toggled,
                            source: "self"
                        }),
                        checked: e.toggled,
                        children: i
                    }) : null
                },
                _ = e => {
                    const {
                        getI18n: t
                    } = (0, n.P3)(), i = (0, o.useMemo)((() => t("contextMenu-botPreview", {
                        defaultValue: "Bot Preview"
                    })), [t]);
                    return e.visible ? (0, r.jsx)(s.H_, {
                        onClick: () => e.onToggled ? .({
                            toggled: e.toggled,
                            source: "self"
                        }),
                        checked: e.toggled,
                        children: i
                    }) : null
                },
                P = ({
                    candlestick: e,
                    quickOrder: t,
                    scale: i,
                    priceLine: s,
                    averagePrice: n,
                    openOrders: a,
                    positions: l,
                    orderHistory: c,
                    priceAlert: d,
                    breakevenPrice: p,
                    liquidationPrice: x,
                    botPreview: f,
                    spotlight: y
                }) => (0, o.useMemo)((() => [t.floatingWindow.visible || t.plusButton.visible ? (0, r.jsx)(g, {
                    candlestick: e,
                    ...t
                }, "QuickOrder") : null, a.visible ? (0, r.jsx)(w, { ...a
                }, "OpenOrders") : null, l.visible ? (0, r.jsx)(A, { ...l
                }, "Positions") : null, c.visible ? (0, r.jsx)(S, { ...c
                }, "OrderHistory") : null, f.visible ? (0, r.jsx)(_, { ...f
                }, "BotPreview") : null, p.visible ? (0, r.jsx)(k, { ...p
                }, "BreakevenPrice") : null, x.visible ? (0, r.jsx)(L, { ...x
                }, "LiquidationPrice") : null, n.buy.visible || n.sell.visible ? (0, r.jsx)(C, { ...n
                }, "AveragePrice") : null, d.visible ? (0, r.jsx)(T, { ...d
                }, "PriceAlert") : null, s.askBid.visible || s.countdown.visible || s.marketPriceLine.visible ? (0, r.jsx)(u, {
                    candlestick: e,
                    ...s
                }, "PriceLine") : null, i.invertedScale.visible || i.logarithmicScale.visible || i.percentageScale.visible ? (0, r.jsx)(h, {
                    candlestick: e,
                    ...i
                }, "Scale") : null, y.visible ? (0, r.jsx)(m, {
                    candlestick: e,
                    ...y
                }, "Spotlight") : null]), [n, f, p, x, e, a, c, l, d, s, t, i, y])
        },
        dLyb: (e, t, i) => {
            i.d(t, {
                EF: () => l,
                Q0: () => c,
                ir: () => a
            });
            var r = i("DTvD"),
                o = i("8+PA"),
                s = i("HV0L"),
                n = i("UfNb");
            const a = ({
                    candlestick: e,
                    features: t
                }) => {
                    const i = (0, o.A)();
                    (0, r.useEffect)((() => e ? (e.on("settingsLoaded", i), e.on("featureToggled", i), () => {
                        e.off("settingsLoaded", i), e.off("featureToggled", i)
                    }) : () => null), [e, i]);
                    const s = (0, r.useCallback)((() => t.reduce(((t, i) => t || e ? .getFeatureToggleState(i) || !1), !1)), [e, t]),
                        n = (0, r.useCallback)((() => t.map((t => e ? .getFeatureToggleState(t) || !1))), [e, t]);
                    return {
                        checked: s(),
                        results: n()
                    }
                },
                l = ({
                    candlestick: e
                }) => {
                    const [t, i] = (0, r.useState)(0), [o, a] = (0, r.useState)(""), [l, c] = (0, r.useState)(!0);
                    return (0, r.useEffect)((() => {
                        const t = ({
                            panel: e,
                            price: t,
                            formattedPrice: r
                        }) => {
                            if (!(e instanceof n.A)) return;
                            const o = e.panelType === s.HP.BASE;
                            c(e.panelType === s.HP.BASE), o && t && r && (i(t), a(r))
                        };
                        return e.on("contextmenu", t), () => e.off("contextmenu", t)
                    }), [e]), {
                        price: t,
                        formattedPrice: o,
                        isBasePanel: l
                    }
                },
                c = ({
                    candlestick: e,
                    feature: t
                }) => {
                    const i = (0, o.A)();
                    return (0, r.useEffect)((() => e ? (e.on("settingsLoaded", i), e.on("featureToggled", i), () => {
                        e.off("settingsLoaded", i), e.off("featureToggled", i)
                    }) : () => null), [e, i]), e ? .getFeatureToggleState(t) || !1
                }
        },
        juww: (e, t, i) => {
            i.r(t), i.d(t, {
                default: () => oe
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i("jd1c"),
                n = i("g77m"),
                a = i.n(n),
                l = i("HV0L"),
                c = i("iFsL"),
                d = i("pOh6"),
                h = i("D/6i"),
                u = i("gHj0"),
                g = i("Vpgv"),
                p = i("rYve"),
                m = i("p0Xq"),
                x = i("DLi3"),
                f = i("utzP"),
                y = i("TbLg"),
                b = i("uqyQ"),
                v = i("N/b4"),
                C = i("D0ta"),
                w = i("D+0E"),
                A = i("hqBy"),
                S = i("k6za"),
                T = i("trTv"),
                k = i("8UK6"),
                L = i("CaDK"),
                _ = i("INSH"),
                P = i("tY0K"),
                D = i("kjhn"),
                I = i("geX7"),
                V = i("/nqG"),
                M = i("4nny"),
                B = i("NDvJ"),
                E = i("gZrf"),
                j = i("qqbu");
            const O = e => (0, r.jsx)(j.A, {
                    viewBox: "0 0 20 20",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    ...e,
                    children: (0, r.jsx)("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M7.55265 11.2502C7.08454 12.2356 6.08016 12.9168 4.91667 12.9168C3.30584 12.9168 2 11.611 2 10.0002C2 8.38933 3.30584 7.0835 4.91667 7.0835C6.08016 7.0835 7.08454 7.76477 7.55265 8.75016H12.7807C13.2488 7.76477 14.2532 7.0835 15.4167 7.0835C17.0275 7.0835 18.3333 8.38933 18.3333 10.0002C18.3333 11.611 17.0275 12.9168 15.4167 12.9168C14.2532 12.9168 13.2488 12.2356 12.7807 11.2502H7.55265Z",
                        fill: "currentColor"
                    })
                }),
                H = e => (0, r.jsxs)(j.A, {
                    viewBox: "0 0 20 20",
                    fill: "none",
                    xmlns: "http://www.w3.org/2000/svg",
                    ...e,
                    children: [(0, r.jsx)("rect", {
                        x: "6.22754",
                        y: "15.6206",
                        width: "2.08333",
                        height: "16.5519",
                        transform: "rotate(-135 6.22754 15.6206)",
                        fill: "currentColor"
                    }), (0, r.jsx)("circle", {
                        cx: "12.1824",
                        cy: "8.19259",
                        r: "2.91667",
                        transform: "rotate(-135 12.1824 8.19259)",
                        fill: "currentColor"
                    }), (0, r.jsx)("circle", {
                        cx: "5.70068",
                        cy: "14.6745",
                        r: "2.91667",
                        transform: "rotate(-135 5.70068 14.6745)",
                        fill: "currentColor"
                    })]
                });
            var R, N = i("jYFu");
            ! function(e) {
                e[e.MENU_CURSOR = 0] = "MENU_CURSOR", e[e.MENU_TOOLS = 1] = "MENU_TOOLS", e[e.MENU_CONTROL = 2] = "MENU_CONTROL", e[e.MENU_HANDLER = 3] = "MENU_HANDLER", e[e.MENU_TOOLS_LINE = 4] = "MENU_TOOLS_LINE", e[e.MENU_TOOLS_TRACK = 5] = "MENU_TOOLS_TRACK", e[e.MENU_TOOLS_ARROW = 6] = "MENU_TOOLS_ARROW", e[e.MENU_TOOLS_TEXT = 7] = "MENU_TOOLS_TEXT"
            }(R || (R = {}));
            const W = [{
                key: 0,
                children: [{
                    key: l.X2.DefaultCursor,
                    icon: () => h.A,
                    i18nKey: N.Tr.DRAW_DEFAULT_CURSOR,
                    i18n: "Cursor",
                    multiSelect: !1
                }, {
                    key: l.X2.CrossHairCursor,
                    icon: () => u.A,
                    i18nKey: N.Tr.DRAW_CROSS_CURSOR,
                    i18n: "Cross Cursor",
                    multiSelect: !1
                }]
            }, {
                key: 1,
                children: [{
                    key: 4,
                    activeKey: l.X2.TrendLine,
                    children: [{
                        key: l.X2.TrendLine,
                        icon: () => g.A,
                        i18nKey: N.Tr.DRAW_TREND_LINE,
                        i18n: "Trend Line",
                        multiSelect: !1
                    }, {
                        key: l.X2.ExtendTrendLine,
                        icon: () => p.A,
                        i18nKey: N.Tr.DRAW_EX_TREND_LINE,
                        i18n: "Extended Trend Line",
                        multiSelect: !1
                    }, {
                        key: l.X2.HorizontalLine,
                        icon: () => m.A,
                        i18nKey: N.Tr.DRAW_HORIZONTAL_LINE,
                        i18n: "Horizontal Line",
                        multiSelect: !1
                    }, {
                        key: l.X2.HorizontalExtendedLine,
                        icon: () => O,
                        i18nKey: N.Tr.DRAW_HORIZONTAL_EXTENDED_LINE,
                        i18n: "Extended Horizontal Line",
                        multiSelect: !1
                    }, {
                        key: l.X2.VerticalLine,
                        icon: () => x.A,
                        i18nKey: N.Tr.DRAW_VERTICAL_LINE,
                        i18n: "Vertical Line",
                        multiSelect: !1
                    }, {
                        key: l.X2.CrossLine,
                        icon: () => f.A,
                        i18nKey: N.Tr.DRAW_CROSS_LINE,
                        i18n: "Crose Line",
                        multiSelect: !1
                    }, {
                        key: l.X2.ParallelLine,
                        icon: () => y.A,
                        i18nKey: N.Tr.DRAW_PARRLLEL_LINE,
                        i18n: "Parallel Line",
                        multiSelect: !1
                    }, {
                        key: l.X2.RayLine,
                        icon: () => H,
                        i18nKey: N.Tr.DRAW_RAY_LINE,
                        i18n: "Ray",
                        multiSelect: !1
                    }, {
                        key: l.X2.PriceLine,
                        icon: () => b.A,
                        i18nKey: N.Tr.DRAW_PRICE_LINE,
                        i18n: "Price Line",
                        multiSelect: !1
                    }, {
                        key: l.X2.ArrowLine,
                        icon: () => v.A,
                        i18nKey: N.Tr.DRAW_ARROW_LINE,
                        i18n: "Arrow Line",
                        multiSelect: !1
                    }, {
                        key: l.X2.InfoLine,
                        icon: () => C.A,
                        i18nKey: N.Tr.DRAW_INFO_LINE,
                        i18n: "Info Line",
                        multiSelect: !1
                    }]
                }, {
                    key: 6,
                    activeKey: l.X2.RightArrow,
                    children: [{
                        key: l.X2.UpArrow,
                        icon: () => w.A,
                        i18nKey: N.Tr.DRAW_UP_ARROW,
                        i18n: "Up Arrow",
                        multiSelect: !1
                    }, {
                        key: l.X2.DownArrow,
                        icon: () => A.A,
                        i18nKey: N.Tr.DRAW_DOWN_ARROW,
                        i18n: "Down Arrow",
                        multiSelect: !1
                    }, {
                        key: l.X2.LeftArrow,
                        icon: () => S.A,
                        i18nKey: N.Tr.DRAW_LEFT_ARROW,
                        i18n: "Left Arrow",
                        multiSelect: !1
                    }, {
                        key: l.X2.RightArrow,
                        icon: () => T.A,
                        i18nKey: N.Tr.DRAW_RIGHT_ARROW,
                        i18n: "Right Arrow",
                        multiSelect: !1
                    }]
                }, {
                    key: l.X2.FibonacciLine,
                    icon: () => k.A,
                    i18nKey: N.Tr.DRAW_FIB_LINE,
                    i18n: "Fibonacci Retracement",
                    multiSelect: !1
                }, {
                    key: l.X2.Rectangle,
                    icon: () => L.A,
                    i18nKey: N.Tr.DRAW_RECTANGLE,
                    i18n: "Rectangle",
                    multiSelect: !1
                }, {
                    key: l.X2.Text,
                    icon: () => _.A,
                    i18nKey: N.Tr.DRAW_TEXT,
                    i18n: "Text",
                    multiSelect: !1
                }]
            }, {
                key: 2,
                children: [{
                    key: l.X2.Magnet,
                    icon: () => P.A,
                    i18nKey: N.Tr.DRAW_MAGNET,
                    i18n: "Magnet",
                    multiSelect: !0
                }, {
                    key: l.X2.KeepDrawing,
                    icon: () => D.A,
                    i18nKey: N.Tr.DRAW_CONTINUE,
                    i18n: "Keep Drawing",
                    multiSelect: !0
                }, {
                    key: l.X2.LockDraw,
                    icon: e => e ? I.A : V.A,
                    i18nKey: N.Tr.DRAW_LOCK,
                    i18n: "Lock Drawing Tools",
                    multiSelect: !0
                }, {
                    key: l.X2.ToggleVisible,
                    icon: e => e ? M.A : B.A,
                    i18nKey: N.Tr.DRAW_TOGGLE,
                    i18n: "Hide All Drawings",
                    multiSelect: !0
                }]
            }, {
                key: 3,
                children: [{
                    key: l.X2.Delete,
                    icon: () => E.A,
                    i18nKey: N.Tr.DRAW_DELETE_ALL,
                    i18n: "Delete All",
                    multiSelect: !1
                }]
            }];
            var F = i("xqbL"),
                z = i.n(F);
            const X = ({
                children: e,
                isHiddenDrawPanel: t
            }) => (0, r.jsx)("div", {
                className: z()("absolute justify-center h-full z-10 bg-BasicBg transition-all border-solid border-0 border-r-[1px] border-r-Line", {
                    "w-0": t,
                    "w-[48px]": !t
                }),
                children: e
            });
            var U = i("w0hl"),
                G = i("6B/c");
            const $ = "h-5 w-5 mx-auto text-IconNormal hover:text-PrimaryText",
                Y = ({
                    arrow: e,
                    visible: t,
                    onClick: i
                }) => (0, r.jsx)("div", {
                    className: z()("flex kline-draw-panel_down absolute w-full text-center bg-BasicBg h-5 left-0 z-20 cursor-pointer", e, {
                        "top-0": "up" === e,
                        "bottom-0": "down" === e,
                        "!hidden": !t
                    }),
                    onClick: i,
                    children: "up" === e ? (0, r.jsx)(U.A, {
                        className: $
                    }) : (0, r.jsx)(G.A, {
                        className: $
                    })
                });
            var Z = i("kcvK"),
                K = i("MKk+"),
                q = i("NEBA");
            const Q = ({
                    isHiddenDrawPanel: e,
                    onClick: t
                }) => {
                    const {
                        getI18n: i
                    } = (0, c.P3)(), s = (0, o.useMemo)((() => i("show-drawings-panel", {
                        defaultValue: "Show Drawings panel"
                    })), [i]), n = (0, o.useMemo)((() => z()("z-20 absolute bottom-[48px] transition-all", {
                        "left-[2px]": e,
                        "left-[42px]": !e
                    })), [e]), a = (0, o.useMemo)((() => e ? K.A : q.A), [e]), l = (0, o.useMemo)((() => !e), [e]);
                    return (0, r.jsx)(Z.A, {
                        open: !l && void 0,
                        arrow: !0,
                        useReactPopper: !0,
                        bubbleClassName: "text-SecondaryBg bg-PrimaryText typography-caption1 opacity-95 rounded-[8px]",
                        placement: "right",
                        tooltips: s,
                        className: n,
                        disabled: l,
                        children: (0, r.jsx)("div", {
                            className: "flex items-center justify-center w-[12px] h-[32px] cursor-pointer rounded bg-BasicBg hover:bg-Line text-IconNormal hover:text-PrimaryText border-Line border-solid border-[1px]",
                            onClick: t,
                            children: (0, r.jsx)(a, {
                                className: "min-w-[12px] h-[12px]"
                            })
                        })
                    })
                },
                J = ({
                    icon: e,
                    isActive: t,
                    onClick: i,
                    tooltips: s
                }) => {
                    const n = (0, o.useCallback)((e => {
                            i(e), e.nativeEvent.stopImmediatePropagation()
                        }), [i]),
                        a = (0, o.useMemo)((() => "h-[32px] w-[32px] p-[4px] cursor-pointer hover:text-PrimaryText " + (t ? "text-PrimaryText" : "text-IconNormal")), [t]);
                    return (0, r.jsx)(Z.A, {
                        arrow: !0,
                        enablePortal: !0,
                        useReactPopper: !0,
                        placement: "right",
                        tooltips: s,
                        className: a,
                        children: (0, r.jsx)(e, {
                            className: "w-[24px] h-[24px]",
                            onClick: n
                        })
                    })
                };
            var ee = i("1C1L"),
                te = i("vRrZ");
            const ie = ({
                    items: e
                }) => (0, r.jsx)("div", {
                    className: "py-[10px] bg-CardBg",
                    children: (0, r.jsx)("div", {
                        className: "max-h-80 overflow-auto",
                        children: e.map((({
                            onClick: e,
                            icon: t,
                            text: i,
                            active: o
                        }, s) => (0, r.jsxs)("div", {
                            className: "relative flex justify-between items-center h-[38px] min-w-[160px] px-[10px] hover:bg-Input cursor-pointer",
                            onClick: e,
                            children: [(0, r.jsxs)("div", {
                                className: "flex flex-row gap-[5px] items-center",
                                children: [(0, r.jsx)(t, {
                                    className: "h-[20px] w-[20px] " + (o ? "text-PrimaryText" : "text-IconNormal")
                                }), (0, r.jsx)("div", {
                                    className: "text-PrimaryText " + (o ? "typography-subtitle2" : "typography-body3"),
                                    children: i
                                })]
                            }), (0, r.jsx)(te.A, {
                                className: "text-PrimaryText w-4 h-full",
                                style: {
                                    visibility: o ? "visible" : "hidden"
                                }
                            })]
                        }, s)))
                    })
                }),
                re = ({
                    items: e,
                    onVisibleChange: t,
                    toggled: i,
                    children: s
                }) => {
                    const n = (0, o.useMemo)((() => i ? q.A : K.A), [i]);
                    return (0, r.jsxs)("div", {
                        className: "relative flex items-center justify-center",
                        children: [s, (0, r.jsx)(ee.A, {
                            once: !0,
                            enablePortal: !0,
                            useReactPopper: !0,
                            enableClickBubble: !0,
                            offset: 2,
                            trigger: "click",
                            placement: "right-start",
                            className: "absolute w-[12px] h-full rounded-[4px] justify-center items-center hover:bg-CardBg text-IconNormal hover:text-PrimaryText cursor-pointer left-[calc(100%-5px)]",
                            bubbleClassName: "border-Line border-solid border-[1px] rounded-xl !overflow-hidden",
                            reactPopperProps: {
                                offsetX: -15
                            },
                            onVisibleChange: t,
                            overlay: (0, r.jsx)(ie, {
                                items: e
                            }),
                            children: (0, r.jsx)(n, {
                                className: "h-3 w-3"
                            })
                        })]
                    })
                },
                oe = (0, o.memo)((({
                    candlestickInstance: e
                }) => {
                    const {
                        getI18n: t
                    } = (0, c.P3)(), [i, n] = (0, o.useState)(!0), [h, u] = (0, o.useState)(!1), [g, p] = (0, o.useState)(!1), [m, x] = (0, o.useState)(""), [f, y] = (0, o.useState)(!1), b = (0, o.useRef)(null), v = (0, o.useMemo)((() => t("delete-drawing", "All drawings will be permanently deleted")), [t]), C = (0, o.useCallback)((() => e.settingStore.getValue("@drawTool.currentAction")), [e]), [w, {
                        updateValue: A,
                        toggleValue: S,
                        getValue: T
                    }] = (0, c.YM)({
                        onlyKey: C()
                    }), k = (0, o.useCallback)((() => n((e => !e))), [n]), L = (0, o.useCallback)((() => {
                        b ? .current ? .scrollBy({
                            top: -60
                        })
                    }), [b.current]), _ = (0, o.useCallback)((() => {
                        b ? .current ? .scrollBy({
                            top: 60
                        })
                    }), [b.current]), P = (0, c._g)((() => {
                        const e = b.current,
                            {
                                lastElementChild: t
                            } = e || {};
                        if (e && t) {
                            const {
                                scrollTop: i,
                                offsetHeight: r
                            } = e, {
                                offsetHeight: o,
                                offsetTop: s
                            } = t;
                            u(i > 0), p(i < s - r + o)
                        }
                    }), 10), D = (0, o.useCallback)(((t, i) => {
                        i === R.MENU_CURSOR && e.settingStore.setValue("@drawTool.currentAction", t), e.fire("clickDrawingTool", {
                            data: t
                        });
                        const r = e.getEditor(),
                            o = C();
                        switch (i) {
                            case R.MENU_CURSOR:
                                !!T(l.X2.ToggleVisible) && e.toggleAnnotationsVisible(), A({
                                    onlyKey: t,
                                    [l.X2.ToggleVisible]: !1
                                }), e.fire("unSelectAnnotation"), r.reset();
                                break;
                            case R.MENU_TOOLS:
                                !!T(l.X2.ToggleVisible) && e.toggleAnnotationsVisible();
                                !!T(l.X2.LockDraw) && e.setAnnotationLockStatus(!1), A({
                                    onlyKey: t,
                                    [l.X2.ToggleVisible]: !1,
                                    [l.X2.LockDraw]: !1
                                }), r.setCompleteDrawCallback((() => {
                                    !!T(l.X2.KeepDrawing) || (A({
                                        onlyKey: o
                                    }), e.executeActionByType(o))
                                })), e.selectAnnotation(void 0, t);
                                break;
                            case R.MENU_CONTROL:
                                S(t), t === l.X2.ToggleVisible && (A({
                                    onlyKey: o
                                }), e.executeActionByType(o));
                                break;
                            case R.MENU_HANDLER:
                                r.setCompleteDrawCallback((() => {
                                    !!T(l.X2.KeepDrawing) || (A({
                                        onlyKey: o
                                    }), e.executeActionByType(o))
                                }))
                        }
                        if (t === l.X2.Delete) y(!0), e.getEditor().clearSelectAnnotation(), e.unSelectAnnotation();
                        else e.executeActionByType(t)
                    }), [e, C, T, A, S]), I = (0, o.useCallback)(((e, t, i, r) => {
                        t.activeKey = i, D(i, r), e.nativeEvent.stopImmediatePropagation()
                    }), [D]);
                    (0, o.useEffect)((() => {
                        const e = b.current;
                        if (!e) return;
                        const t = a()((() => {
                            const t = e.scrollTop < 1,
                                i = Math.abs(e.scrollHeight - e.scrollTop - e.clientHeight) < 1;
                            u(!t), p(!i)
                        }), 250);
                        e.addEventListener("scroll", t);
                        const i = new s.default(t);
                        return i.observe(e), () => {
                            e.removeEventListener("scroll", t), i.disconnect()
                        }
                    }), [b.current]), (0, o.useEffect)((() => {
                        e.getEditor().clearEvents()
                    }), [e]);
                    const V = C();
                    (0, o.useEffect)((() => {
                        A({
                            onlyKey: V
                        }), e.executeActionByType(V)
                    }), [V, e, A]);
                    const M = (0, o.useMemo)((() => W.map((({
                            key: e,
                            children: i
                        }) => (0, r.jsx)("div", {
                            className: "flex flex-col border-Line border-solid border-0 border-b-[1px] last:border-b-0 py-[4px] gap-[4px]",
                            children: i.map((i => {
                                const {
                                    children: o,
                                    activeKey: s,
                                    key: n
                                } = i;
                                if (o) {
                                    const a = o,
                                        l = a.find((({
                                            key: e
                                        }) => e === s));
                                    return (0, r.jsx)(re, {
                                        items: a.map((({
                                            key: r,
                                            icon: o,
                                            i18n: n,
                                            i18nKey: a
                                        }) => ({
                                            onClick: t => I(t, i, r, e),
                                            icon: o(),
                                            text: t(a, {
                                                defaultValue: n
                                            }) || "",
                                            active: s === r
                                        }))),
                                        onVisibleChange: e => x(e ? n : ""),
                                        toggled: m === n,
                                        children: l && (0, r.jsx)(J, {
                                            icon: l.icon(l.key === w.onlyKey),
                                            isActive: l.key === w.onlyKey,
                                            onClick: () => D(l.key, e),
                                            tooltips: t(l.i18nKey, {
                                                defaultValue: l.i18n
                                            })
                                        })
                                    }, n)
                                }
                                const {
                                    key: a,
                                    i18nKey: l,
                                    i18n: c,
                                    icon: d,
                                    multiSelect: h
                                } = i, u = h ? !!w[a] : a === w.onlyKey;
                                return (0, r.jsx)(J, {
                                    icon: d(u),
                                    isActive: u,
                                    onClick: () => D(a, e),
                                    tooltips: t(l, {
                                        defaultValue: c
                                    })
                                }, a)
                            }))
                        }, e)))), [w, t, m, I, D]),
                        B = (0, o.useCallback)((() => {
                            y(!1)
                        }), [y]),
                        E = (0, o.useCallback)((() => {
                            e.executeActionByType(l.X2.Delete), y(!1)
                        }), [e]);
                    return (0, r.jsxs)("div", {
                        className: "absolute h-full",
                        children: [(0, r.jsxs)(X, {
                            isHiddenDrawPanel: i,
                            children: [(0, r.jsx)(Y, {
                                arrow: "up",
                                visible: h,
                                onClick: L
                            }), (0, r.jsx)("div", {
                                ref: b,
                                className: "flex flex-col items-center bg-BasicBg absolute h-full w-full overflow-x-hidden overflow-y-auto scroll-smooth no-scrollbar",
                                onScroll: P,
                                children: M
                            }), (0, r.jsx)(Y, {
                                arrow: "down",
                                visible: g,
                                onClick: _
                            }), (0, r.jsx)(d.x, {
                                visible: f,
                                text: v,
                                onCancel: B,
                                onConfirm: E
                            })]
                        }), (0, r.jsx)(Q, {
                            isHiddenDrawPanel: i,
                            onClick: k
                        })]
                    })
                }))
        },
        jr6z: (e, t, i) => {
            i.d(t, {
                A: () => p,
                p: () => m
            });
            var r = i("DTvD"),
                o = i("8+PA"),
                s = i("f9BG"),
                n = i("fc5I"),
                a = i.n(n),
                l = i("Km4d"),
                c = i.n(l),
                d = i("aw40"),
                h = i("vHdC");
            const u = e => {
                    try {
                        return (0, s.A)(e).css()
                    } catch (t) {
                        return e
                    }
                },
                g = {
                    candlestickInstance: void 0,
                    modalVisible: !1,
                    closeModal: a(),
                    allIndicators: [],
                    selectedIndicators: [],
                    activeIndicatorId: d.R.MA,
                    setActiveIndicatorId: a(),
                    onReset: a(),
                    onSave: a(),
                    updateValue: a(),
                    updateValueNeedReload: a(),
                    updateColor: a(),
                    selectIndicator: a()
                },
                p = (0, r.createContext)(g),
                m = ({
                    candlestickInstance: e,
                    onClose: t
                }) => {
                    const i = (0, o.A)(),
                        [s, n] = (0, r.useState)(g.modalVisible),
                        [a, l] = (0, r.useState)(g.activeIndicatorId),
                        [d, p] = (0, r.useState)(g.allIndicators),
                        [m, x] = (0, r.useState)(g.selectedIndicators);
                    (0, r.useEffect)((() => {
                        const t = e.indicatorStore;
                        return t.subscribeValueChanged(i), () => t.unsubscribeValueChanged(i)
                    }), [e, i]), (0, r.useEffect)((() => {
                        const t = ({
                                id: e
                            }) => {
                                l(e), n(!0)
                            },
                            i = ({
                                data: e
                            }) => p(e),
                            r = ({
                                data: e
                            }) => x(e.map((({
                                id: e
                            }) => e)));
                        return e.on("showIndicatorDialog", t), e.on("allIndicatorsChange", i), e.on("selectIndicatorsChange", r), p(e.getAllIndicators()), x(e.getSelectIndicators().map((({
                            name: e
                        }) => e))), () => {
                            e.off("showIndicatorDialog", t), e.off("allIndicatorsChange", i), e.off("selectIndicatorsChange", r)
                        }
                    }), [e]);
                    const f = (0, r.useCallback)((({
                            id: t,
                            name: i,
                            isCustom: r,
                            isMain: o = !1
                        }) => {
                            e && (e.fire("indicatorAddedOrRemoved", {
                                data: i
                            }), e.hasIndicatorByName(t) ? e.closeIndicatorByName(t) : r ? e.fire("customIndicatorClick", {
                                data: {
                                    id: t,
                                    name: i,
                                    isMain: o
                                }
                            }) : e.addIndicatorByName(t))
                        }), [e]),
                        y = (0, r.useCallback)(((t, i = !1) => {
                            e && (i ? e.updateIndicatorParams(t) : (e.updateTitle(t), e.update()))
                        }), [e]),
                        b = (0, r.useCallback)((() => {
                            const t = e.indicatorStore,
                                r = t.getDefaultValue(a),
                                o = t.getValue(a),
                                s = c()({}, r, {
                                    showSeries: o ? .showSeries ? ? r.showSeries
                                });
                            t.setValue(a, s), y(a, !0), i(), e ? .fire("indicatorReset")
                        }), [e, a, y, i]),
                        v = (0, r.useCallback)((() => {
                            t ? .(m.join("_")), n(!1)
                        }), [t, m]),
                        C = (0, r.useCallback)((() => {
                            v(), e ? .fire("indicatorSaved")
                        }), [e, v]),
                        w = (0, r.useCallback)((({
                            id: t,
                            key: i,
                            value: r,
                            needReload: o = !1
                        }) => {
                            e && (e.indicatorStore.setValue(i, r), y(t, o))
                        }), [e, y]),
                        A = (0, r.useCallback)((({
                            id: e,
                            key: t,
                            value: i
                        }) => {
                            w({
                                id: e,
                                key: t,
                                value: i,
                                needReload: !0
                            })
                        }), [w]),
                        S = (0, r.useCallback)((({
                            id: t,
                            key: i,
                            value: r,
                            needReload: o = !1
                        }) => {
                            const s = e.indicatorStore,
                                n = s.getValue(i);
                            "object" === typeof n ? "color" === n ? .type ? (s.setValue(i, (0, h.Ou)({
                                value: r,
                                pristine: u(n.value) === u(r)
                            })), y(t, o)) : console.warn(`[candlestick] ${i} is not a color type`, n) : console.warn(`[candlestick] path to ${i} is not an object`, n)
                        }), [e, y]);
                    return {
                        candlestickInstance: e,
                        modalVisible: s,
                        allIndicators: d,
                        activeIndicatorId: a,
                        setActiveIndicatorId: l,
                        onReset: b,
                        onSave: C,
                        updateValue: w,
                        updateValueNeedReload: A,
                        updateColor: S,
                        closeModal: v,
                        selectIndicator: f,
                        selectedIndicators: m
                    }
                }
        },
        pOh6: (e, t, i) => {
            i.d(t, {
                x: () => c
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i("jwne"),
                n = i("Gz4J"),
                a = i("c6eW"),
                l = i("iFsL");
            const c = ({
                visible: e,
                text: t,
                onCancel: i,
                onConfirm: c
            }) => {
                const {
                    getI18n: d
                } = (0, l.P3)(), h = (0, o.useMemo)((() => d("color-picker-cancel", {
                    defaultValue: "Cancel"
                })), [d]), u = (0, o.useMemo)((() => d("color-picker-confirm", {
                    defaultValue: "Confirm"
                })), [d]);
                return (0, r.jsxs)(s.Ay, {
                    enablePortal: !0,
                    visible: e,
                    children: [(0, r.jsxs)(s.Ay.Content, {
                        className: "flex flex-col items-center gap-[16px]",
                        children: [(0, r.jsx)(a.A, {
                            className: "w-[96px] h-[96px]"
                        }), (0, r.jsx)("div", {
                            className: "typography-body3 text-PrimaryText text-center",
                            children: t
                        })]
                    }), (0, r.jsxs)(s.Ay.Footer, {
                        className: "p-[24px]",
                        children: [(0, r.jsx)(n.A, {
                            variant: "secondary",
                            className: "flex-1 cursor-pointer",
                            onClick: i,
                            children: h
                        }), (0, r.jsx)(n.A, {
                            variant: "primary",
                            className: "flex-1 cursor-pointer",
                            onClick: c,
                            children: u
                        })]
                    })]
                })
            }
        },
        oBze: (e, t, i) => {
            i.d(t, {
                A: () => wi,
                H: () => Ci
            });
            var r = i("jd1c"),
                o = i("bmS5"),
                s = i.n(o),
                n = i("T9sr"),
                a = i.n(n),
                l = i("VLTf"),
                c = i.n(l),
                d = i("K9aZ"),
                h = i.n(d),
                u = i("OlNZ"),
                g = i.n(u),
                p = i("7ekG"),
                m = i("c9uE"),
                x = (i("GCXA"), i("fwNI")),
                f = i.n(x);
            class y {}

            function b(e) {
                return e && "function" === typeof e.get
            }
            class v extends y {
                constructor(e) {
                    super(), this.get = e
                }
            }
            class C extends y {
                get(e) {
                    return e < (this.defaultStart || 0) && void 0 !== this.defaultValue ? this.defaultValue : this.cache[e]
                }
                set(e, t) {
                    return new v(t ? i => i < C.currentTick ? this.cache[i] : (this.cache[i] = e.get(i), t.get(i)) : t => t < C.currentTick ? this.cache[t] : (this.cache[t] = e.get(t), e.get(t)))
                }
                constructor(e, t) {
                    super(), this.defaultValue = e, this.defaultStart = t, this.cache = []
                }
            }
            C.currentTick = NaN;
            class w extends y {
                get(e) {
                    return this.source instanceof Array ? this.source[e] : this.source.get(e)
                }
                constructor(e) {
                    super(), this.source = e
                }
            }

            function A(e, t) {
                return new C(e, t)
            }

            function S(e) {
                return function(t) {
                    return b(t) ? new v((i => e(t.get(i)))) : e(t)
                }
            }

            function T(e) {
                return function(t, i) {
                    return b(t) ? b(i) ? new v((r => e(t.get(r), i.get(r)))) : new v((r => e(t.get(r), i))) : b(i) ? new v((r => e(t, i.get(r)))) : e(t, i)
                }
            }
            const k = T(((e, t) => e + t)),
                L = T(((e, t) => e - t)),
                _ = T(((e, t) => e * t)),
                P = T(((e, t) => e / t)),
                D = T(((e, t) => Math.max(e, t))),
                I = (T(((e, t) => Math.min(e, t))), S((e => void 0 === e || Number.isNaN(e) ? 0 : e))),
                V = S((e => void 0 === e ? NaN : e)),
                M = S((e => Math.abs(e))),
                B = (S((e => Math.acos(e))), S((e => Math.asin(e))), S((e => Math.atan(e))), S((e => Math.ceil(e))), S((e => Math.cos(e))), S((e => Math.exp(e))), S((e => Math.floor(e))), S((e => Math.log(e))), S((e => Math.round(e))), S((e => Math.sin(e))), S((e => Math.sqrt(e))), S((e => Math.tan(e))), S((e => Math.abs(e) <= 1e-10))),
                E = (S((e => isFinite(e) && !B(e))), S((e => Number.isNaN(e) || void 0 === e))),
                j = T(((e, t) => e && t)),
                O = (T(((e, t) => e || t)), S((e => !e)), T(((e, t) => e > t))),
                H = (T(((e, t) => e >= t)), T(((e, t) => e < t))),
                R = (T(((e, t) => e <= t)), T(((e, t) => e === t)));
            T(((e, t) => e !== t));

            function N(e, t, i) {
                return new v((r => {
                    const o = b(t) ? t.get(r) : t,
                        s = b(i) ? i.get(r) : i;
                    return e.get(r) ? o : s
                }))
            }

            function W(e, t) {
                return new v((i => e.get(i - t)))
            }

            function F(e) {
                return new v(e)
            }

            function z(e, t) {
                return F((i => {
                    let r = 0;
                    for (let o = i; o > i - t; o--) {
                        const t = e.get(o);
                        Number.isNaN(t) || (r += e.get(o))
                    }
                    return r
                }))
            }

            function X(e, t) {
                return N(E(W(e, t - 1)), NaN, P(z(e, t), t))
            }

            function U(e, t) {
                const i = z(e, t),
                    r = t - 1,
                    o = A(),
                    s = W(o, 1),
                    n = P(k(e, _(s, r)), t),
                    a = N(E(W(e, r)), NaN, N(E(s), P(i, t), n));
                return o.set(a)
            }

            function G(e, t) {
                const i = z(e, t),
                    r = A(),
                    o = W(r, 1),
                    s = k(P(_(2, L(e, o)), t + 1), o),
                    n = N(E(W(e, t - 1)), NaN, N(E(o), P(i, t), s));
                return r.set(n)
            }

            function $(e, t) {
                return t = Math.round(t), F((i => {
                    let r = 0;
                    for (let o = t; o >= 0; o--) {
                        r += (t - o) * e.get(i - o)
                    }
                    return 2 * r / (t * (t + 1))
                }))
            }

            function Y(e, t, i, r) {
                return F((o => {
                    let s = r;
                    for (let r = o; r > o - t; r--) s = i(s, e.get(r), r);
                    return s
                }))
            }

            function Z(e, t) {
                return Y(e, t, ((e, t) => isNaN(t) || void 0 === t ? e : Math.max(e, t)), Number.MIN_VALUE)
            }

            function K(e, t) {
                return Y(e, t, ((e, t) => isNaN(t) || void 0 === t ? e : Math.min(e, t)), Number.MAX_VALUE)
            }

            function q(e, t, i, r) {
                return function(e) {
                    const t = A();
                    return t.set(N(E(e), W(t, 1), e))
                }(P(_(100, L(e, K(i, r))), L(Z(t, r), K(i, r))))
            }

            function Q(e, t, i) {
                return F((r => {
                    const o = e.get(r);
                    return void 0 !== o ? t(o) : i
                }))
            }
            class J {
                isEmpty(e) {
                    for (let t = 0; t < this.seriesData.length; t++)
                        if (0 !== e.get(t)) return !1;
                    return !0
                }
                getResult(e) {
                    const t = [];
                    for (let i = 0; i < this.seriesData.length; i++) C.currentTick = i, t[i] = e.get(i);
                    return C.currentTick = NaN, t
                }
                updateResult(e, t, i = 0) {
                    for (let r = i; r < this.seriesData.length; r++) C.currentTick = r, t[r] = e.get(r);
                    C.currentTick = NaN
                }
                source(e) {
                    return V((t = this.sources(), i = e, Q(t, (e => e[i]), void 0)));
                    var t, i
                }
                sources() {
                    return new w(this.seriesData)
                }
                typicalPrice() {
                    return V(Q(this.sources(), (({
                        high: e,
                        low: t,
                        close: i
                    }) => (e + t + i) / 3), void 0))
                }
                plot(e) {
                    this.plots.push(e)
                }
                label(e) {
                    e.styles || (e.styles = {}), this.labels.push(e)
                }
                mobileLabel(e) {
                    this.mobileLabels.push(e)
                }
                constructor(e) {
                    this.seriesData = [], this.plots = [], this.labels = [], this.mobileLabels = [], this.candlestick = e
                }
            }
            i("irif");
            var ee = i("lCim"),
                te = i.n(ee),
                ie = i("HV0L"),
                re = i("jYFu"),
                oe = i("p7cX"),
                se = i("oHkN");
            const ne = Symbol("indicatorParam"),
                ae = Symbol("indicatorProps");
            Symbol("indicators");

            function le(e, t) {
                const i = e.length - t.length;
                return t.map(((t, r) => ({
                    time: e[r + i].time,
                    value: t
                })))
            }

            function ce(e, t, i, r) {
                return function(o, s, n) {
                    const a = Reflect.getOwnMetadata(ne, o, s) || [];
                    a[n] = {
                        label: e,
                        type: t,
                        defaultValue: i,
                        key: r || n.toString()
                    }, Reflect.defineMetadata(ne, a, o, s)
                }
            }

            function de(e) {
                return function(t, i, r) {
                    Reflect.defineMetadata(ae, e, t, i)
                }
            }

            function he({
                Collection: e,
                propertyName: t,
                candlestick: i
            }) {
                const r = e.prototype,
                    o = Reflect.getOwnMetadata(ae, r, t),
                    s = Reflect.getOwnMetadata(ne, r, t) || [],
                    n = new J(i),
                    a = new e(n),
                    l = new WeakMap,
                    c = new WeakMap,
                    d = new WeakMap,
                    h = e => d.get(e),
                    u = e => {
                        if ("undefined" === typeof e) return !0;
                        switch (e) {
                            case "@VOL.visibles[0]":
                            case "@BOLL.visibles[0]":
                            case "@BOLL.visibles[1]":
                            case "@BOLL.visibles[2]":
                                return !0;
                            default:
                                return i.indicatorStore.getValue(e)
                        }
                    },
                    g = e => {
                        const t = new Set;
                        n.plots.forEach((e => {
                            const {
                                series: i,
                                colorSeries: r,
                                labelColorSeries: o,
                                visible: s
                            } = e;
                            u(s) && (t.add(i), r && t.add(r), o && t.add(o), e.type === ie.NB.Area && e.borderSeries && t.add(e.borderSeries), e.type === ie.NB.Bar && e.styleTypeSeries && t.add(e.styleTypeSeries))
                        })), n.labels.forEach((e => {
                            u(e.visible) && e.series && t.add(e.series)
                        })), n.mobileLabels.forEach((e => {
                            e.series && t.add(e.series)
                        })), t.forEach((t => {
                            const i = d.get(t);
                            i ? n.updateResult(t, i, e) : d.set(t, n.getResult(t))
                        }))
                    };

                function p(e, t) {
                    l.has(e) || l.set(e, t)
                }
                return {
                    defaultProps: o,
                    paramMetas: s,
                    getResult(e, i, r) {
                        const o = s.map((e => {
                            if (void 0 !== e) {
                                let t = f()(i, e.key);
                                if (void 0 === t) return e.defaultValue;
                                switch (e.type) {
                                    case Se.INT:
                                        t = "number" !== typeof t ? parseInt(t) : t;
                                        break;
                                    case Se.FLOAT:
                                        t = "number" !== typeof t ? parseFloat(t) : t
                                }
                                return t
                            }
                        }));
                        n.seriesData = e, n.plots.splice(0), n.labels.splice(0), n.plots.splice(0);
                        a[t].apply(a, o), g(0);
                        const l = [];
                        n.plots.forEach((e => {
                            const {
                                type: t,
                                series: i,
                                colorSeries: r,
                                labelColorSeries: o,
                                styleTypeSeries: s,
                                color: a,
                                lineWidth: d,
                                zIndex: g = -1,
                                visible: m,
                                ...x
                            } = e;
                            if (!u(m)) return;
                            const f = r && h(r),
                                y = s && h(s),
                                b = y ? {
                                    styleTypes: y
                                } : {},
                                v = o && h(o),
                                C = { ...f ? {
                                        colors: f
                                    } : {
                                        color: a
                                    },
                                    ...v ? {
                                        labelColors: v
                                    } : {}
                                },
                                w = h(i),
                                A = le(n.seriesData, w);
                            if (e.type === ie.NB.Area)
                                if (e.borderSeries) {
                                    const i = h(e.borderSeries),
                                        r = le(n.seriesData, i);
                                    l.push({ ...x,
                                        chartType: t,
                                        lineWidth: d,
                                        data: A,
                                        borderData: r,
                                        visible: m,
                                        ...C,
                                        ...b,
                                        zIndex: g
                                    }), p(e.series, [l.length - 1]), p(e.borderSeries, [l.length - 1]), c.set(e, [l.length - 1])
                                } else l.push({ ...x,
                                    chartType: t,
                                    lineWidth: d,
                                    data: A,
                                    visible: m,
                                    ...C,
                                    ...b,
                                    histBase: e.histBase,
                                    zIndex: g
                                }), p(e.series, [l.length - 1]), c.set(e, [l.length - 1]);
                            else {
                                const r = { ...x,
                                    chartType: t,
                                    lineWidth: d,
                                    data: A,
                                    visible: m
                                };
                                l.push({ ...r,
                                    ...C,
                                    ...b,
                                    zIndex: g
                                }), p(i, [l.length - 1]), c.set(e, [l.length - 1])
                            }
                        })), r ? .(l)
                    },
                    updateResult(e, t, i) {
                        g(e), n.plots.forEach((i => {
                            const {
                                series: r,
                                colorSeries: o,
                                styleTypeSeries: s
                            } = i, a = o && h(o), l = s && h(s), d = c.get(i), u = h(r);
                            if (d && u)
                                if (i.type === ie.NB.Area) {
                                    const {
                                        data: r,
                                        borderData: o
                                    } = t[d[0]];
                                    for (let t = e; t < n.seriesData.length; t++) r[t] = {
                                        time: n.seriesData[t].time,
                                        value: u[t]
                                    };
                                    if (o && i.borderSeries) {
                                        const t = h(i.borderSeries);
                                        for (let i = e; i < n.seriesData.length; i++) o[i] = {
                                            time: n.seriesData[i].time,
                                            value: t[i]
                                        }
                                    }
                                } else {
                                    const {
                                        data: i
                                    } = t[d[0]];
                                    for (let t = e; t < n.seriesData.length; t++) i[t] = {
                                        time: n.seriesData[t].time,
                                        value: u[t],
                                        ...a ? {
                                            color: a[t]
                                        } : {},
                                        ...l ? {
                                            styleType: l[t]
                                        } : {}
                                    }
                                }
                        }))
                    },
                    getLabel: ({
                        results: e,
                        params: r,
                        time: s,
                        isDisabled: a = !1,
                        disabledText: c = ""
                    }) => {
                        const {
                            labels: d
                        } = n, {
                            precision: h,
                            formatter: u = te()
                        } = r;
                        if (a) {
                            const [e] = d;
                            return [{
                                label: `${String(t)} ${c}`,
                                key: `${o.id}`,
                                styles: { ...e.styles,
                                    display: "block"
                                }
                            }]
                        }
                        let g = d;
                        "@MA" !== o.id && "@EMA" !== o.id && "@WMA" !== o.id || (g = d.filter((e => void 0 !== e.visible && i.indicatorStore.getValue(e.visible))));
                        const p = g.reduce(((t, i, n) => {
                            if (i.series && void 0 !== s && e.length > 0) {
                                const a = l.get(i.series);
                                if (a) {
                                    const l = a.map((t => e[t])).map((({
                                        data: e,
                                        color: t,
                                        colors: i,
                                        labelColors: r,
                                        visible: o
                                    }) => {
                                        const n = function(e, t) {
                                                const i = (0, oe.El)(e, (e => {
                                                    const {
                                                        time: i
                                                    } = e;
                                                    return t - i
                                                }));
                                                return e[i] && e[i].time === t ? i : void 0
                                            }(e, s),
                                            a = void 0 !== n && e[n];
                                        let l = t;
                                        return void 0 !== n && (l = r ? r[n] : i ? i[n] : t), {
                                            item: a,
                                            color: l,
                                            visible: !!o
                                        }
                                    })).find((e => void 0 !== e.item));
                                    let c = l && !l.visible ? "none" : "block";
                                    if (i.forceShow && (c = "block"), i.title && t.push({
                                            label: i.title,
                                            key: `${o.title}[${n}]`,
                                            styles: { ...i.styles,
                                                display: c
                                            }
                                        }), l && l.item) {
                                        let e;
                                        if (i.formmater) e = u(i.formmater ? .(l.item.value));
                                        else if (i.formatNumber ? ? r.isFormatNum ? ? o.isFormatNum) e = (0, oe.GO)(l.item.value, 3);
                                        else if (void 0 !== i.precision || void 0 !== h) {
                                            const {
                                                value: t
                                            } = l.item, r = (0, se.Et)(i.precision) ? i.precision : h;
                                            e = u((0, oe.Mg)(t, r))
                                        } else e = u(l.item.value);
                                        t.push({
                                            label: e.toString(),
                                            key: `${o.title}[${n}]Series`,
                                            styles: {
                                                color: l.color,
                                                ...i.styles,
                                                display: c
                                            }
                                        })
                                    } else t.push({
                                        label: "NaN",
                                        key: `${o.title}[${n}]Series`,
                                        styles: { ...i.styles,
                                            display: c
                                        }
                                    })
                                }
                            } else i.title && t.push({
                                label: i.title,
                                key: `${o.title}[${n}]`,
                                styles: { ...i.styles
                                }
                            });
                            return t
                        }), []);
                        return p
                    },
                    getUnavailableText: () => "",
                    getSupportedIntervals: () => re.Q$
                }
            }
            var ue = i("wIZF");
            class ge {
                constructor(e) {
                    this.ctx = e
                }
            }
            var pe = i("vHdC");
            class me extends ge {
                MA(e, t, i, r, o, s, n, a, l, c, d, h, u, g, p, m, x, f, y, b) {
                    [{
                        series: X(this.ctx.source(t), e),
                        period: e
                    }, {
                        series: X(this.ctx.source(r), i),
                        period: i
                    }, {
                        series: X(this.ctx.source(s), o),
                        period: o
                    }, {
                        series: X(this.ctx.source(a), n),
                        period: n
                    }, {
                        series: X(this.ctx.source(c), l),
                        period: l
                    }, {
                        series: X(this.ctx.source(h), d),
                        period: d
                    }, {
                        series: X(this.ctx.source(g), u),
                        period: u
                    }, {
                        series: X(this.ctx.source(m), p),
                        period: p
                    }, {
                        series: X(this.ctx.source(f), x),
                        period: x
                    }, {
                        series: X(this.ctx.source(b), y),
                        period: y
                    }].forEach((({
                        series: e,
                        period: t
                    }, i) => {
                        this.ctx.plot({
                            series: e,
                            type: ie.NB.Line,
                            color: `@MA.colors[${i}].value`,
                            lineWidth: `@MA.lineWidths[${i}]`,
                            visible: `@MA.visibles[${i}]`
                        }), this.ctx.label({
                            title: `MA(${t}):`,
                            series: e,
                            visible: `@MA.visibles[${i}]`
                        })
                    }))
                }
                EMA(e, t, i, r, o, s, n, a, l, c, d, h, u, g, p, m, x, f, y, b) {
                    [{
                        series: G(this.ctx.source(t), e),
                        period: e
                    }, {
                        series: G(this.ctx.source(r), i),
                        period: i
                    }, {
                        series: G(this.ctx.source(s), o),
                        period: o
                    }, {
                        series: G(this.ctx.source(a), n),
                        period: n
                    }, {
                        series: G(this.ctx.source(c), l),
                        period: l
                    }, {
                        series: G(this.ctx.source(h), d),
                        period: d
                    }, {
                        series: G(this.ctx.source(g), u),
                        period: u
                    }, {
                        series: G(this.ctx.source(m), p),
                        period: p
                    }, {
                        series: G(this.ctx.source(f), x),
                        period: x
                    }, {
                        series: G(this.ctx.source(b), y),
                        period: y
                    }].forEach((({
                        series: e,
                        period: t
                    }, i) => {
                        this.ctx.plot({
                            series: e,
                            type: ie.NB.Line,
                            color: `@EMA.colors[${i}].value`,
                            lineWidth: `@EMA.lineWidths[${i}]`,
                            visible: `@EMA.visibles[${i}]`
                        }), this.ctx.label({
                            title: `EMA(${t}):`,
                            series: e,
                            visible: `@EMA.visibles[${i}]`
                        })
                    }))
                }
                WMA(e, t, i, r, o, s, n, a, l, c, d, h, u, g, p, m, x, f, y, b) {
                    [{
                        series: $(this.ctx.source(t), e),
                        period: e
                    }, {
                        series: $(this.ctx.source(r), i),
                        period: i
                    }, {
                        series: $(this.ctx.source(s), o),
                        period: o
                    }, {
                        series: $(this.ctx.source(a), n),
                        period: n
                    }, {
                        series: $(this.ctx.source(c), l),
                        period: l
                    }, {
                        series: $(this.ctx.source(h), d),
                        period: d
                    }, {
                        series: $(this.ctx.source(g), u),
                        period: u
                    }, {
                        series: $(this.ctx.source(m), p),
                        period: p
                    }, {
                        series: $(this.ctx.source(f), x),
                        period: x
                    }, {
                        series: $(this.ctx.source(b), y),
                        period: y
                    }].forEach((({
                        series: e,
                        period: t
                    }, i) => {
                        this.ctx.plot({
                            series: e,
                            type: ie.NB.Line,
                            color: `@WMA.colors[${i}].value`,
                            lineWidth: `@WMA.lineWidths[${i}]`,
                            visible: `@WMA.visibles[${i}]`
                        }), this.ctx.label({
                            title: `WMA(${t}):`,
                            series: e,
                            visible: `@WMA.visibles[${i}]`
                        })
                    }))
                }
                MACD(e, t, i, r) {
                    const o = this.ctx.candlestick.indicatorStore.getValue("@MACD.longGrowth.isBullishColor"),
                        s = this.ctx.candlestick.indicatorStore.getValue("@MACD.longFall.isBullishColor"),
                        n = this.ctx.candlestick.indicatorStore.getValue("@MACD.shortGrowth.isBullishColor"),
                        a = this.ctx.candlestick.indicatorStore.getValue("@MACD.shortFall.isBullishColor"),
                        l = "volume.upBarColor",
                        c = "volume.downBarColor",
                        d = this.ctx.source(r),
                        h = L(G(d, e), G(d, t)),
                        u = G(h, i),
                        g = L(h, u),
                        p = function(...e) {
                            return F((t => e.map((e => e.get(t)))))
                        }(W(g, 1), g),
                        m = ([e, t]) => t > 0 && e >= t ? s ? l : c : t < 0 && e >= t ? a ? l : c : t > 0 && e < t ? o ? l : c : n ? l : c;
                    this.ctx.plot({
                        series: g,
                        type: ie.NB.Bar,
                        colorSeries: Q(p, m, "defaultColor"),
                        labelColorSeries: Q(p, m, "defaultColor"),
                        styleTypeSeries: Q(p, (([e, t]) => t > 0 && e >= t ? "@MACD.longFall.style" : t < 0 && e >= t ? "@MACD.shortFall.style" : t > 0 && e < t ? "@MACD.longGrowth.style" : "@MACD.shortGrowth.style"), pe.Ow.Solid),
                        visible: "@MACD.visibles.MACD"
                    }), this.ctx.plot({
                        series: u,
                        type: ie.NB.Line,
                        color: "@MACD.colors.DEA.value",
                        lineWidth: "@MACD.lineWidths.DEA",
                        visible: "@MACD.visibles.DEA"
                    }), this.ctx.plot({
                        series: h,
                        type: ie.NB.Line,
                        color: "@MACD.colors.DIF.value",
                        lineWidth: "@MACD.lineWidths.DIF",
                        visible: "@MACD.visibles.DIF"
                    }), this.ctx.label({
                        title: `MACD(${e}, ${t}, ${i})`
                    }), this.ctx.label({
                        series: u
                    }), this.ctx.label({
                        series: h
                    }), this.ctx.label({
                        series: g
                    })
                }
                VOL(e, t) {
                    const i = this.ctx.source("volume"),
                        r = this.ctx.source("quantity"),
                        o = this.ctx.source("baseVolume"),
                        s = this.ctx.source("quoteQuantity"),
                        n = N(E(o), i, o),
                        a = N(E(s), r, s),
                        l = this.ctx.isEmpty(a);
                    let c, d;
                    this.ctx.plot({
                        series: n,
                        type: ie.NB.Bar,
                        colorSeries: Q(this.ctx.sources(), (({
                            open: e,
                            close: t
                        }) => t >= e ? "volume.upBarColor" : "volume.downBarColor"), "defaultColor"),
                        labelColorSeries: Q(this.ctx.sources(), (({
                            open: e,
                            close: t
                        }) => t >= e ? "volume.upTextColor" : "volume.downTextColor"), "defaultColor"),
                        styleTypeSeries: Q(this.ctx.sources(), (({
                            open: e,
                            close: t
                        }) => t >= e ? "@VOL.long.style" : "@VOL.short.style"), pe.Ow.Solid),
                        isScaleCenter: !1
                    }), l || this.ctx.plot({
                        series: a,
                        type: ie.NB.Bar,
                        labelColorSeries: Q(this.ctx.sources(), (({
                            open: e,
                            close: t
                        }) => t >= e ? "volume.upTextColor" : "volume.downTextColor"), "defaultColor"),
                        visible: "@VOL.visibles[0]",
                        isScaleCenter: !1,
                        yAxisIndex: "1"
                    }), e && (c = X(n, e), this.ctx.plot({
                        series: c,
                        type: ie.NB.Line,
                        color: "@VOL.maVol1.color.value",
                        lineWidth: "@VOL.maVol1.lineWidth",
                        visible: "@VOL.maVol1.visible"
                    })), t && (d = X(n, t), this.ctx.plot({
                        series: d,
                        type: ie.NB.Line,
                        color: "@VOL.maVol2.color.value",
                        lineWidth: "@VOL.maVol2.lineWidth",
                        visible: "@VOL.maVol2.visible"
                    })), this.ctx.label({
                        title: "Vol({{baseAsset}}):",
                        series: n
                    }), l || this.ctx.label({
                        title: "Vol({{quoteAsset}})",
                        series: a,
                        forceShow: !0
                    }), c && this.ctx.label({
                        series: c
                    }), d && this.ctx.label({
                        series: d
                    })
                }
                TRIX(e) {
                    const t = G(G(G(this.ctx.source("close"), e), e), e);
                    this.ctx.plot({
                        series: t,
                        type: ie.NB.Line,
                        color: "@TRIX.color.value",
                        lineWidth: "@TRIX.lineWidth"
                    }), this.ctx.label({
                        title: `TRIX(${e}):`,
                        series: t
                    })
                }
            }(0, ue.__decorate)([de({
                id: "@MA",
                title: "MA",
                isHistBase: !0,
                isScaleCenter: !0,
                categories: ["main"]
            }), (0, ue.__param)(0, ce("Length 0", "INT", 7, "periods[0]")), (0, ue.__param)(1, ce("Source 0", "SOURCE", "close", "sources[0]")), (0, ue.__param)(2, ce("Length 1", "INT", 25, "periods[1]")), (0, ue.__param)(3, ce("Source 1", "SOURCE", "close", "sources[1]")), (0, ue.__param)(4, ce("Length 2", "INT", 99, "periods[2]")), (0, ue.__param)(5, ce("Source 2", "SOURCE", "close", "sources[2]")), (0, ue.__param)(6, ce("Length 3", "INT", 120, "periods[3]")), (0, ue.__param)(7, ce("Source 3", "SOURCE", "close", "sources[3]")), (0, ue.__param)(8, ce("Length 4", "INT", 150, "periods[4]")), (0, ue.__param)(9, ce("Source 4", "SOURCE", "close", "sources[4]")), (0, ue.__param)(10, ce("Length 5", "INT", 0, "periods[5]")), (0, ue.__param)(11, ce("Source 5", "SOURCE", "close", "sources[5]")), (0, ue.__param)(12, ce("Length 6", "INT", 0, "periods[6]")), (0, ue.__param)(13, ce("Source 6", "SOURCE", "close", "sources[6]")), (0, ue.__param)(14, ce("Length 7", "INT", 0, "periods[7]")), (0, ue.__param)(15, ce("Source 7", "SOURCE", "close", "sources[7]")), (0, ue.__param)(16, ce("Length 8", "INT", 0, "periods[8]")), (0, ue.__param)(17, ce("Source 8", "SOURCE", "close", "sources[8]")), (0, ue.__param)(18, ce("Length 9", "INT", 0, "periods[9]")), (0, ue.__param)(19, ce("Source 9", "SOURCE", "close", "sources[9]")), (0, ue.__metadata)("design:type", Function), (0, ue.__metadata)("design:paramtypes", [Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te]), (0, ue.__metadata)("design:returntype", void 0)], me.prototype, "MA", null), (0, ue.__decorate)([de({
                id: "@EMA",
                title: "EMA",
                isHistBase: !0,
                isScaleCenter: !0,
                categories: ["main"]
            }), (0, ue.__param)(0, ce("Length 1", "INT", 7, "periods[0]")), (0, ue.__param)(1, ce("Source 1", "SOURCE", "close", "sources[0]")), (0, ue.__param)(2, ce("Length 2", "INT", 25, "periods[1]")), (0, ue.__param)(3, ce("Source 2", "SOURCE", "close", "sources[1]")), (0, ue.__param)(4, ce("Length 3", "INT", 99, "periods[2]")), (0, ue.__param)(5, ce("Source 3", "SOURCE", "close", "sources[2]")), (0, ue.__param)(6, ce("Length 4", "INT", 120, "periods[3]")), (0, ue.__param)(7, ce("Source 4", "SOURCE", "close", "sources[3]")), (0, ue.__param)(8, ce("Length 5", "INT", 120, "periods[4]")), (0, ue.__param)(9, ce("Source 5", "SOURCE", "close", "sources[4]")), (0, ue.__param)(10, ce("Length 6", "INT", 120, "periods[5]")), (0, ue.__param)(11, ce("Source 6", "SOURCE", "close", "sources[5]")), (0, ue.__param)(12, ce("Length 7", "INT", 0, "periods[6]")), (0, ue.__param)(13, ce("Source 7", "SOURCE", "close", "sources[6]")), (0, ue.__param)(14, ce("Length 8", "INT", 0, "periods[7]")), (0, ue.__param)(15, ce("Source 8", "SOURCE", "close", "sources[7]")), (0, ue.__param)(16, ce("Length 9", "INT", 0, "periods[8]")), (0, ue.__param)(17, ce("Source 9", "SOURCE", "close", "sources[8]")), (0, ue.__param)(18, ce("Length 10", "INT", 0, "periods[9]")), (0, ue.__param)(19, ce("Source 10", "SOURCE", "close", "sources[9]")), (0, ue.__metadata)("design:type", Function), (0, ue.__metadata)("design:paramtypes", [Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te]), (0, ue.__metadata)("design:returntype", void 0)], me.prototype, "EMA", null), (0, ue.__decorate)([de({
                id: "@WMA",
                title: "WMA",
                isHistBase: !0,
                isScaleCenter: !0,
                categories: ["main"]
            }), (0, ue.__param)(0, ce("Length 1", "INT", 7, "periods[0]")), (0, ue.__param)(1, ce("Source 1", "SOURCE", "close", "sources[0]")), (0, ue.__param)(2, ce("Length 2", "INT", 25, "periods[1]")), (0, ue.__param)(3, ce("Source 2", "SOURCE", "close", "sources[1]")), (0, ue.__param)(4, ce("Length 3", "INT", 99, "periods[2]")), (0, ue.__param)(5, ce("Source 3", "SOURCE", "close", "sources[2]")), (0, ue.__param)(6, ce("Length 4", "INT", 120, "periods[3]")), (0, ue.__param)(7, ce("Source 4", "SOURCE", "close", "sources[3]")), (0, ue.__param)(8, ce("Length 5", "INT", 120, "periods[4]")), (0, ue.__param)(9, ce("Source 5", "SOURCE", "close", "sources[4]")), (0, ue.__param)(10, ce("Length 6", "INT", 120, "periods[5]")), (0, ue.__param)(11, ce("Source 6", "SOURCE", "close", "sources[5]")), (0, ue.__param)(12, ce("Length 7", "INT", 0, "periods[6]")), (0, ue.__param)(13, ce("Source 7", "SOURCE", "close", "sources[6]")), (0, ue.__param)(14, ce("Length 8", "INT", 0, "periods[7]")), (0, ue.__param)(15, ce("Source 8", "SOURCE", "close", "sources[7]")), (0, ue.__param)(16, ce("Length 9", "INT", 0, "periods[8]")), (0, ue.__param)(17, ce("Source 9", "SOURCE", "close", "sources[8]")), (0, ue.__param)(18, ce("Length 10", "INT", 0, "periods[9]")), (0, ue.__param)(19, ce("Source 10", "SOURCE", "close", "sources[9]")), (0, ue.__metadata)("design:type", Function), (0, ue.__metadata)("design:paramtypes", [Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te, Number, "undefined" === typeof Te ? Object : Te]), (0, ue.__metadata)("design:returntype", void 0)], me.prototype, "WMA", null), (0, ue.__decorate)([de({
                id: "@MACD",
                title: "MACD",
                isHistBase: !1,
                isScaleCenter: !0,
                categories: ["sub"]
            }), (0, ue.__param)(0, ce("Fast Length", "INT", 12, "fastPeriod")), (0, ue.__param)(1, ce("Slow Length", "INT", 26, "slowPeriod")), (0, ue.__param)(2, ce("Signal Length", "INT", 9, "signalPeriod")), (0, ue.__param)(3, ce("Source", "SOURCE", "close", "source")), (0, ue.__metadata)("design:type", Function), (0, ue.__metadata)("design:paramtypes", [Number, Number, Number, "undefined" === typeof Te ? Object : Te]), (0, ue.__metadata)("design:returntype", void 0)], me.prototype, "MACD", null), (0, ue.__decorate)([de({
                id: "@VOL",
                title: "VOL",
                isHistBase: !1,
                isScaleCenter: !1,
                isFormatNum: !0,
                categories: ["sub"]
            }), (0, ue.__param)(0, ce("MAVOL1Period", "INT", 7, "maVol1.period")), (0, ue.__param)(1, ce("MAVOL2Period", "INT", 14, "maVol2.period")), (0, ue.__metadata)("design:type", Function), (0, ue.__metadata)("design:paramtypes", [Number, Number]), (0, ue.__metadata)("design:returntype", void 0)], me.prototype, "VOL", null), (0, ue.__decorate)([de({
                id: "@TRIX",
                title: "TRIX",
                isHistBase: !0,
                isScaleCenter: !0,
                categories: ["main"]
            }), (0, ue.__param)(0, ce("Length", "INT", 9, "period")), (0, ue.__metadata)("design:type", Function), (0, ue.__metadata)("design:paramtypes", [Number]), (0, ue.__metadata)("design:returntype", void 0)], me.prototype, "TRIX", null);
            class xe extends ge {
                RSI(e, t, i) {
                    const r = this.ctx.source("close"),
                        o = W(r, 1),
                        s = D(L(r, o), 0),
                        n = D(L(o, r), 0);
                    [e, t, i].forEach(((e, t) => {
                        const i = P(U(s, e), U(n, e)),
                            r = L(100, P(100, k(1, i)));
                        this.ctx.plot({
                            series: r,
                            type: ie.NB.Line,
                            color: `@RSI.colors[${t}].value`,
                            lineWidth: `@RSI.lineWidths[${t}]`,
                            visible: `@RSI.visibles[${t}]`
                        }), this.ctx.label({
                            title: `RSI(${e})`,
                            series: r
                        })
                    }))
                }
                MFI(e, t, i) {
                    const r = this.ctx.typicalPrice(),
                        o = this.ctx.source("volume"),
                        s = F((e => {
                            const t = r.get(e - 1);
                            if (isNaN(t)) return [0, 0];
                            const i = r.get(e),
                                s = i * o.get(e);
                            return i > t ? [s, 0] : [0, s]
                        })),
                        n = Q(s, (([e]) => e), 0),
                        a = Q(s, (([, e]) => e), 0);
                    [e, t, i].forEach(((e, t) => {
                        const i = z(n, e),
                            r = z(a, e),
                            o = P(i, r),
                            s = N(B(o), 0, L(100, P(100, k(1, o))));
                        this.ctx.plot({
                            series: s,
                            type: ie.NB.Line,
                            color: `@MFI.colors[${t}].value`,
                            lineWidth: `@MFI.lineWidths[${t}]`,
                            visible: `@MFI.visibles[${t}]`
                        }), this.ctx.label({
                            title: `MFI(${e})`,
                            series: s
                        })
                    }))
                }
                CCI(e) {
                    const t = this.ctx.typicalPrice(),
                        i = X(t, e),
                        r = function(e, t) {
                            const i = X(e, t);
                            return F((r => {
                                const o = i.get(r);
                                let s = 0;
                                for (let i = r; i > r - t; i--) s += Math.abs(e.get(i) - o);
                                return s / t
                            }))
                        }(t, e),
                        o = P(L(t, i), _(r, .015));
                    this.ctx.plot({
                        series: o,
                        type: ie.NB.Line,
                        color: "@CCI.color.value",
                        lineWidth: "@CCI.lineWidth"
                    }), this.ctx.label({
                        title: `CCI(${e})`,
                        series: o
                    })
                }
            }(0, ue.__decorate)([de({
                id: "@RSI",
                title: "RSI",
                isHistBase: !1,
                isScaleCenter: !0,
                categories: ["sub"]
            }), (0, ue.__param)(0, ce("Length 1", "INT", 6, "periods[0]")), (0, ue.__param)(1, ce("Length 2", "INT", 12, "periods[1]")), (0, ue.__param)(2, ce("Length 3", "INT", 24, "periods[2]")), (0, ue.__metadata)("design:type", Function), (0, ue.__metadata)("design:paramtypes", [Number, Number, Number]), (0, ue.__metadata)("design:returntype", void 0)], xe.prototype, "RSI", null), (0, ue.__decorate)([de({
                id: "@MFI",
                title: "MFI",
                isHistBase: !1,
                isScaleCenter: !0,
                categories: ["sub"]
            }), (0, ue.__param)(0, ce("Length 1", "INT", 7, "periods[0]")), (0, ue.__param)(1, ce("Length 2", "INT", 14, "periods[1]")), (0, ue.__param)(2, ce("Length 3", "INT", 21, "periods[2]")), (0, ue.__metadata)("design:type", Function), (0, ue.__metadata)("design:paramtypes", [Number, Number, Number]), (0, ue.__metadata)("design:returntype", void 0)], xe.prototype, "MFI", null), (0, ue.__decorate)([de({
                id: "@CCI",
                title: "CCI",
                isHistBase: !1,
                isScaleCenter: !0,
                categories: ["sub"]
            }), (0, ue.__param)(0, ce("Length", "INT", 20, "period")), (0, ue.__metadata)("design:type", Function), (0, ue.__metadata)("design:paramtypes", [Number]), (0, ue.__metadata)("design:returntype", void 0)], xe.prototype, "CCI", null);
            class fe extends ge {
                VWAP(e) {
                    const t = this.ctx.source("volume");
                    if (this.ctx.isEmpty(t)) return this.ctx.plot({
                        series: t,
                        type: ie.NB.Line,
                        color: "@VWAP.color",
                        lineWidth: "@VWAP.lineWidth"
                    }), void this.ctx.label({
                        title: `VWAP(${e})`,
                        series: t
                    });
                    const i = this.ctx.typicalPrice(),
                        r = P(z(_(i, t), e), z(t, e)),
                        o = F((e => {
                            const t = r.get(e);
                            if (t !== 1 / 0 && t !== -1 / 0 && !Number.isNaN(t)) return t;
                            for (let i = e; i > 0; i--) {
                                const e = r.get(i);
                                if (e !== 1 / 0 && e !== -1 / 0 && !Number.isNaN(e)) return e
                            }
                            return 0
                        }));
                    this.ctx.plot({
                        series: o,
                        type: ie.NB.Line,
                        color: "@VWAP.color.value",
                        lineWidth: "@VWAP.lineWidth"
                    }), this.ctx.label({
                        title: `VWAP(${e})`,
                        series: o
                    })
                }
                OBV(e, t) {
                    const i = this.ctx.source("volume"),
                        r = this.ctx.source("close"),
                        o = N(O(r, W(r, 1)), 1, N(H(r, W(r, 1)), -1, 0)),
                        s = A(),
                        n = s.set(k(I(W(s, 1)), _(o, i))),
                        a = X(n, e),
                        l = G(n, t);
                    this.ctx.plot({
                        series: n,
                        type: ie.NB.Line,
                        color: "@OBV.color.value",
                        lineWidth: "@OBV.lineWidth"
                    }), this.ctx.plot({
                        series: a,
                        type: ie.NB.Line,
                        visible: "@OBV.ma.visible",
                        color: "@OBV.ma.color.value",
                        lineWidth: "@OBV.ma.lineWidth"
                    }), this.ctx.plot({
                        series: l,
                        type: ie.NB.Line,
                        visible: "@OBV.ema.visible",
                        color: "@OBV.ema.color.value",
                        lineWidth: "@OBV.ema.lineWidth"
                    }), this.ctx.label({
                        title: "OBV",
                        series: n,
                        formatNumber: !0
                    }), this.ctx.label({
                        title: `MA(${e})`,
                        series: a,
                        formatNumber: !0
                    }), this.ctx.label({
                        title: `EMA(${t})`,
                        series: l,
                        formatNumber: !0
                    })
                }
                AVL() {
                    const e = this.ctx.source("volume");
                    if (this.ctx.isEmpty(e)) return this.ctx.plot({
                        series: e,
                        type: ie.NB.Line,
                        color: "@AVL.color.value",
                        lineWidth: "@AVL.lineWidth"
                    }), void this.ctx.label({
                        title: "AVL",
                        series: e
                    });
                    const t = this.ctx.source("quantity"),
                        i = P(t, e);
                    this.ctx.plot({
                        series: i,
                        type: ie.NB.Line,
                        color: "@AVL.color.value",
                        lineWidth: "@AVL.lineWidth"
                    }), this.ctx.label({
                        title: "AVL",
                        series: i
                    })
                }
            }(0, ue.__decorate)([de({
                id: "@VWAP",
                title: "VWAP",
                isHistBase: !0,
                isScaleCenter: !0,
                categories: ["main"]
            }), (0, ue.__param)(0, ce("Length", "INT", 14, "period")), (0, ue.__metadata)("design:type", Function), (0, ue.__metadata)("design:paramtypes", [Number]), (0, ue.__metadata)("design:returntype", void 0)], fe.prototype, "VWAP", null), (0, ue.__decorate)([de({
                id: "@OBV",
                title: "OBV",
                isHistBase: !1,
                isScaleCenter: !0,
                isFormatNum: !0,
                categories: ["sub"]
            }), (0, ue.__param)(0, ce("MAPeriod", "INT", 7, "ma.period")), (0, ue.__param)(1, ce("EMAPeriod", "INT", 7, "ema.period")), (0, ue.__metadata)("design:type", Function), (0, ue.__metadata)("design:paramtypes", [Number, Number]), (0, ue.__metadata)("design:returntype", void 0)], fe.prototype, "OBV", null), (0, ue.__decorate)([de({
                id: "@AVL",
                title: "AVL",
                isHistBase: !0,
                isScaleCenter: !0,
                categories: ["main"]
            }), (0, ue.__metadata)("design:type", Function), (0, ue.__metadata)("design:paramtypes", []), (0, ue.__metadata)("design:returntype", void 0)], fe.prototype, "AVL", null);
            class ye extends ge {
                KDJ(e, t, i) {
                    const r = this.ctx.source("close"),
                        o = this.ctx.source("low"),
                        s = this.ctx.source("high"),
                        n = K(o, e),
                        a = Z(s, e),
                        l = N(R(n, a), 0, _(100, P(L(r, n), L(a, n)))),
                        c = A(50, e - 1),
                        d = A(50, e - 1),
                        h = F((t => t < e - 1)),
                        u = c.set(k(_(1 - 1 / t, N(h, NaN, W(c, 1))), _(1 / t, l))),
                        g = d.set(k(_(1 - 1 / i, N(h, NaN, W(d, 1))), _(1 / i, u))),
                        p = L(_(u, 3), _(g, 2));
                    this.ctx.plot({
                        series: u,
                        type: ie.NB.Line,
                        color: "@KDJ.colors[0].value",
                        lineWidth: "@KDJ.lineWidths[0]",
                        visible: "@KDJ.visibles[0]"
                    }), this.ctx.plot({
                        series: g,
                        type: ie.NB.Line,
                        color: "@KDJ.colors[1].value",
                        lineWidth: "@KDJ.lineWidths[1]",
                        visible: "@KDJ.visibles[1]"
                    }), this.ctx.plot({
                        series: p,
                        type: ie.NB.Line,
                        color: "@KDJ.colors[2].value",
                        lineWidth: "@KDJ.lineWidths[2]",
                        visible: "@KDJ.visibles[2]"
                    }), this.ctx.label({
                        title: `KDJ(${e}, ${t}, ${i})`
                    }), this.ctx.label({
                        title: "K",
                        series: u
                    }), this.ctx.label({
                        title: "D",
                        series: g
                    }), this.ctx.label({
                        title: "J",
                        series: p
                    })
                }
            }(0, ue.__decorate)([de({
                id: "@KDJ",
                title: "KDJ",
                isHistBase: !1,
                isScaleCenter: !0,
                categories: ["sub"]
            }), (0, ue.__param)(0, ce("K%", "INT", 9, "period[0]")), (0, ue.__param)(1, ce("D%", "INT", 3, "period[1]")), (0, ue.__param)(2, ce("Length", "INT", 3, "period[2]")), (0, ue.__metadata)("design:type", Function), (0, ue.__metadata)("design:paramtypes", [Number, Number, Number]), (0, ue.__metadata)("design:returntype", void 0)], ye.prototype, "KDJ", null);
            class be extends ge {
                BOLL(e, t) {
                    const i = this.ctx.source("close"),
                        r = _(function(e, t) {
                            const i = X(e, t);
                            return F((r => {
                                const o = i.get(r);
                                let s = 0;
                                for (let i = r; i > r - t; i--) s += (e.get(i) - o) ** 2;
                                return Math.sqrt(s / t)
                            }))
                        }(i, e), t),
                        o = X(i, e),
                        s = k(o, r),
                        n = L(o, r);
                    this.ctx.plot({
                        series: s,
                        type: ie.NB.Line,
                        color: "@BOLL.colors[0].value",
                        lineWidth: "@BOLL.lineWidths[0]",
                        visible: "@BOLL.visibles[0]"
                    }), this.ctx.plot({
                        series: o,
                        type: ie.NB.Line,
                        color: "@BOLL.colors[1].value",
                        lineWidth: "@BOLL.lineWidths[1]",
                        visible: "@BOLL.visibles[1]"
                    }), this.ctx.plot({
                        series: n,
                        type: ie.NB.Line,
                        color: "@BOLL.colors[2].value",
                        lineWidth: "@BOLL.lineWidths[2]",
                        visible: "@BOLL.visibles[2]"
                    }), this.ctx.plot({
                        series: s,
                        borderSeries: n,
                        type: ie.NB.Area,
                        color: "@BOLL.background.value",
                        visible: "@BOLL.backgroundVisible"
                    }), this.ctx.label({
                        title: `BOLL(${e}, ${t})`
                    }), this.ctx.label({
                        title: "UP",
                        series: s
                    }), this.ctx.label({
                        title: "MB",
                        series: o
                    }), this.ctx.label({
                        title: "DN",
                        series: n
                    })
                }
            }(0, ue.__decorate)([de({
                id: "@BOLL",
                title: "BOLL",
                isHistBase: !0,
                isScaleCenter: !0,
                categories: ["main"]
            }), (0, ue.__param)(0, ce("Length", "INT", 21, "period")), (0, ue.__param)(1, ce("Multipler", "FLOAT", 2, "stdDev")), (0, ue.__metadata)("design:type", Function), (0, ue.__metadata)("design:paramtypes", [Number, Number]), (0, ue.__metadata)("design:returntype", void 0)], be.prototype, "BOLL", null);
            class ve extends ge {
                StochRSI(e, t, i, r) {
                    const o = function(e, t) {
                            const i = W(e, 1),
                                r = D(L(e, i), 0),
                                o = D(L(i, e), 0),
                                s = P(U(r, t), U(o, t));
                            return L(100, P(100, k(1, s)))
                        }(this.ctx.source("close"), e),
                        s = X(q(o, o, o, t), i),
                        n = X(s, r);
                    this.ctx.plot({
                        series: s,
                        type: ie.NB.Line,
                        color: "@Stoch RSI.colors.smoothK.value",
                        lineWidth: "@Stoch RSI.lineWidths.smoothK",
                        visible: "@Stoch RSI.visibles.smoothK"
                    }), this.ctx.plot({
                        series: n,
                        type: ie.NB.Line,
                        color: "@Stoch RSI.colors.smoothD.value",
                        lineWidth: "@Stoch RSI.lineWidths.smoothD",
                        visible: "@Stoch RSI.visibles.smoothD"
                    }), this.ctx.label({
                        title: `Stoch RSI(${e}, ${t}, ${i}, ${r})`
                    }), this.ctx.label({
                        series: s
                    }), this.ctx.label({
                        series: n
                    })
                }
                WR(e) {
                    const t = this.ctx.source("close"),
                        i = this.ctx.source("high"),
                        r = this.ctx.source("low"),
                        o = _(P(L(Z(i, e), t), L(Z(i, e), K(r, e))), -100);
                    this.ctx.plot({
                        series: o,
                        type: ie.NB.Line,
                        color: "@Wm %R.color.value",
                        lineWidth: "@Wm %R.lineWidth"
                    }), this.ctx.label({
                        title: `Wm %R(${e})`,
                        series: o
                    })
                }
                MTM(e, t) {
                    const i = this.ctx.source(t),
                        r = L(i, W(i, e));
                    this.ctx.plot({
                        series: r,
                        type: ie.NB.Line,
                        color: "@MTM.color.value",
                        lineWidth: "@MTM.lineWidth"
                    }), this.ctx.label({
                        title: `MTM(${e})`,
                        series: r
                    })
                }
            }(0, ue.__decorate)([de({
                id: "@Stoch RSI",
                title: "Stoch RSI",
                isHistBase: !1,
                isScaleCenter: !0,
                categories: ["sub"]
            }), (0, ue.__param)(0, ce("LengthRSI", "INT", 14, "rsiPeriod")), (0, ue.__param)(1, ce("LengthStoch", "INT", 14, "stochasticPeriod")), (0, ue.__param)(2, ce("SmoothK", "INT", 3, "kPeriod")), (0, ue.__param)(3, ce("SmoothD", "INT", 3, "dPeriod")), (0, ue.__metadata)("design:type", Function), (0, ue.__metadata)("design:paramtypes", [Number, Number, Number, Number]), (0, ue.__metadata)("design:returntype", void 0)], ve.prototype, "StochRSI", null), (0, ue.__decorate)([de({
                id: "@Wm %R",
                title: "Wm %R",
                isHistBase: !1,
                isScaleCenter: !0,
                categories: ["sub"]
            }), (0, ue.__param)(0, ce("Length", "INT", 14, "period")), (0, ue.__metadata)("design:type", Function), (0, ue.__metadata)("design:paramtypes", [Number]), (0, ue.__metadata)("design:returntype", void 0)], ve.prototype, "WR", null), (0, ue.__decorate)([de({
                id: "@MTM",
                title: "MTM",
                isHistBase: !1,
                isScaleCenter: !0,
                categories: ["sub"]
            }), (0, ue.__param)(0, ce("Length", "INT", 14, "period")), (0, ue.__param)(1, ce("Source", "SOURCE", "close", "source")), (0, ue.__metadata)("design:type", Function), (0, ue.__metadata)("design:paramtypes", [Number, "undefined" === typeof Te ? Object : Te]), (0, ue.__metadata)("design:returntype", void 0)], ve.prototype, "MTM", null);
            class Ce extends ge {
                DMI(e) {
                    const t = this.ctx.source("high"),
                        i = this.ctx.source("low"),
                        r = this.ctx.source("close"),
                        o = L(t, W(t, 1)),
                        s = L(W(i, 1), i),
                        n = N(j(O(o, s), O(o, 0)), o, 0),
                        a = N(j(O(s, o), O(s, 0)), s, 0),
                        l = D(L(t, i), D(M(L(t, W(r, 1))), M(L(i, W(r, 1))))),
                        c = U(n, e),
                        d = U(a, e),
                        h = U(l, e),
                        u = _(P(c, h), 100),
                        g = _(P(d, h), 100),
                        p = U(_(M(P(L(u, g), k(u, g))), 100), e);
                    this.ctx.plot({
                        type: ie.NB.Line,
                        series: u,
                        color: "@DMI.colors.pDI.value",
                        lineWidth: "@DMI.lineWidths.pDI",
                        visible: "@DMI.visibles.pDI"
                    }), this.ctx.plot({
                        type: ie.NB.Line,
                        series: g,
                        color: "@DMI.colors.nDI.value",
                        lineWidth: "@DMI.lineWidths.nDI",
                        visible: "@DMI.visibles.nDI"
                    }), this.ctx.plot({
                        type: ie.NB.Line,
                        series: p,
                        color: "@DMI.colors.dx.value",
                        lineWidth: "@DMI.lineWidths.dx",
                        visible: "@DMI.visibles.dx"
                    }), this.ctx.label({
                        title: `DMI(${e})`
                    }), this.ctx.label({
                        series: u,
                        precision: 4
                    }), this.ctx.label({
                        series: g,
                        precision: 4
                    }), this.ctx.label({
                        series: p,
                        precision: 4
                    })
                }
                EMV(e, t) {
                    const i = this.ctx.source("high"),
                        r = this.ctx.source("low"),
                        o = this.ctx.source("volume"),
                        s = L(P(k(i, r), 2), P(k(W(i, 1), W(r, 1)), 2)),
                        n = P(P(o, t), L(i, r)),
                        a = X(P(s, n), e);
                    this.ctx.plot({
                        type: ie.NB.Line,
                        series: a,
                        color: "@EMV.color.value",
                        lineWidth: "@EMV.lineWidth"
                    }), this.ctx.label({
                        title: `EMV(${t}, ${e})`
                    }), this.ctx.label({
                        series: a,
                        precision: 4
                    })
                }
                SAR(e, t) {
                    const i = this.ctx.source("low"),
                        r = this.ctx.source("high"),
                        o = [],
                        s = [],
                        n = [],
                        a = [],
                        l = F((l => (l > 1 ? (s[l] = s[l - 1] + a[l - 1] * (n[l - 1] - s[l - 1]), n[l] = n[l - 1], a[l] = a[l - 1], o[l] = o[l - 1], o[l] ? (s[l] = Math.min(s[l], i.get(l - 2), i.get(l - 1)), r.get(l) > n[l] && (n[l] = r.get(l), a[l] = Math.min(a[l] + e, t))) : (s[l] = Math.max(s[l], r.get(l - 2), r.get(l - 1)), i.get(l) < n[l] && (n[l] = i.get(l), a[l] = Math.min(a[l] + e, t))), (o[l] && i.get(l) < s[l] || !o[l] && r.get(l) > s[l]) && (a[l] = e, s[l] = n[l], o[l] = !o[l], n[l] = o[l] ? r.get(l) : i.get(l))) : (s[l] = i.get(l), n[l] = r.get(l), a[l] = e, o[l] = !0), s[l])));
                    this.ctx.plot({
                        type: ie.NB.Point,
                        series: l,
                        color: "@SAR.color.value"
                    }), this.ctx.label({
                        title: `SAR(${e}, ${t})`
                    }), this.ctx.label({
                        series: l
                    })
                }
            }(0, ue.__decorate)([de({
                id: "@DMI",
                title: "DMI",
                isHistBase: !1,
                isScaleCenter: !0,
                categories: ["sub"]
            }), (0, ue.__param)(0, ce("Length", "INT", 14, "period")), (0, ue.__metadata)("design:type", Function), (0, ue.__metadata)("design:paramtypes", [Number]), (0, ue.__metadata)("design:returntype", void 0)], Ce.prototype, "DMI", null), (0, ue.__decorate)([de({
                id: "@EMV",
                title: "EMV",
                isHistBase: !1,
                isScaleCenter: !0,
                categories: ["sub"]
            }), (0, ue.__param)(0, ce("Length", "INT", 14, "period")), (0, ue.__param)(1, ce("Divisor", "FLOAT", 1e4, "x")), (0, ue.__metadata)("design:type", Function), (0, ue.__metadata)("design:paramtypes", [Number, Number]), (0, ue.__metadata)("design:returntype", void 0)], Ce.prototype, "EMV", null), (0, ue.__decorate)([de({
                id: "@SAR",
                title: "SAR",
                isHistBase: !0,
                isScaleCenter: !0,
                categories: ["main"]
            }), (0, ue.__param)(0, ce("Start", "FLOAT", .02, "step")), (0, ue.__param)(1, ce("Maximum", "FLOAT", .2, "x")), (0, ue.__metadata)("design:type", Function), (0, ue.__metadata)("design:paramtypes", [Number, Number]), (0, ue.__metadata)("design:returntype", void 0)], Ce.prototype, "SAR", null);
            const we = e => {
                let t, i = [],
                    r = null,
                    o = "",
                    s = "",
                    n = [],
                    a = !1,
                    l = !1;
                const d = (0, oe.sg)(((t = {}) => {
                    h(t, !0),
                        function() {
                            r && r();
                            const t = {
                                    symbol: o,
                                    interval: s
                                },
                                i = g(t);
                            r = e.subscribe(t, (e => {
                                if (!i({
                                        symbol: o,
                                        interval: s
                                    })) return;
                                const {
                                    length: t
                                } = n;
                                if (t > 0) {
                                    const i = n[t - 1] ? .time;
                                    e.time > i ? n.push(e) : n.splice(t - 1, 1, e), u()
                                }
                            }))
                        }()
                }), 100);

                function h(i = {}, r = !1) {
                    if (a) return;
                    if (i.endTime) {
                        if (i.startTime = i.startTime || i.endTime - 500 * (0, re.OH)(s), i.endTime = t ? Math.min(t, i.endTime) : i.endTime, t = Math.min(i.startTime, t), i.endTime < i.startTime) throw new Error("custom indicator fetch data occured time error");
                        i.limit = Math.ceil((i.endTime - i.startTime) / (0, re.OH)(s) + 1)
                    }
                    const c = { ...i,
                            symbol: o,
                            interval: s
                        },
                        d = g(c);
                    l = !0, e.getData(c, (({
                        data: e,
                        isLoadAll: t
                    }) => {
                        d({ ...c,
                            symbol: o,
                            interval: s
                        }) && (n = r ? e : (e => {
                            const t = {};
                            return e.filter((({
                                time: e
                            }) => !t[e] && (t[e] = 1, !0))).sort(((e, t) => e.time - t.time))
                        })(n.concat(e)), a = t, l = !1, u())
                    }))
                }

                function u() {
                    i.forEach((e => {
                        e()
                    }))
                }

                function g(e) {
                    return t => c()(e, t)
                }
                return { ...e,
                    init: (e, i, l) => {
                        o = e, s = i, n.length = 0, t = 0, a = !1, r && r(), d(l)
                    },
                    getResult: function(t, i, r) {
                        e.getResult(n, {}, (e => {
                            r(e)
                        }))
                    },
                    subscribe: function(e) {
                        -1 === i.indexOf(e) && i.push(e)
                    },
                    unSusbcribe: function() {
                        r && r(), r = null, i.length = 0
                    },
                    loadData: (e = {}) => h(e),
                    isFetchingData: l,
                    reset: () => {
                        n.length = 0, a = !1
                    }
                }
            };
            var Ae, Se, Te;
            ! function(e) {
                e.INPUT = "INPUT", e.SELECT = "SELECT"
            }(Ae || (Ae = {})),
            function(e) {
                e.INT = "INT", e.FLOAT = "FLOAT", e.SOURCE = "SOURCE", e.SELECT = "SELECT", e.STRING = "STRING"
            }(Se || (Se = {})),
            function(e) {
                e.HIGH = "high", e.LOW = "low", e.OPEN = "open", e.CLOSE = "close"
            }(Te || (Te = {}));
            const ke = {
                    VOL: e => he({
                        Collection: me,
                        propertyName: "VOL",
                        candlestick: e
                    }),
                    MA: e => he({
                        Collection: me,
                        propertyName: "MA",
                        candlestick: e
                    }),
                    EMA: e => he({
                        Collection: me,
                        propertyName: "EMA",
                        candlestick: e
                    }),
                    WMA: e => he({
                        Collection: me,
                        propertyName: "WMA",
                        candlestick: e
                    }),
                    MACD: e => he({
                        Collection: me,
                        propertyName: "MACD",
                        candlestick: e
                    }),
                    RSI: e => he({
                        Collection: xe,
                        propertyName: "RSI",
                        candlestick: e
                    }),
                    MFI: e => he({
                        Collection: xe,
                        propertyName: "MFI",
                        candlestick: e
                    }),
                    BOLL: e => he({
                        Collection: be,
                        propertyName: "BOLL",
                        candlestick: e
                    }),
                    KDJ: e => he({
                        Collection: ye,
                        propertyName: "KDJ",
                        candlestick: e
                    }),
                    OBV: e => he({
                        Collection: fe,
                        propertyName: "OBV",
                        candlestick: e
                    }),
                    CCI: e => he({
                        Collection: xe,
                        propertyName: "CCI",
                        candlestick: e
                    }),
                    VWAP: e => he({
                        Collection: fe,
                        propertyName: "VWAP",
                        candlestick: e
                    }),
                    StochRSI: e => he({
                        Collection: ve,
                        propertyName: "StochRSI",
                        candlestick: e
                    }),
                    WR: e => he({
                        Collection: ve,
                        propertyName: "WR",
                        candlestick: e
                    }),
                    AVL: e => he({
                        Collection: fe,
                        propertyName: "AVL",
                        candlestick: e
                    }),
                    DMI: e => he({
                        Collection: Ce,
                        propertyName: "DMI",
                        candlestick: e
                    }),
                    MTM: e => he({
                        Collection: ve,
                        propertyName: "MTM",
                        candlestick: e
                    }),
                    TRIX: e => he({
                        Collection: me,
                        propertyName: "TRIX",
                        candlestick: e
                    }),
                    EMV: e => he({
                        Collection: Ce,
                        propertyName: "EMV",
                        candlestick: e
                    }),
                    SAR: e => he({
                        Collection: Ce,
                        propertyName: "SAR",
                        candlestick: e
                    })
                },
                Le = ["@VOL", "@EMV", "@VWAP", "@OBV", "@AVL"],
                _e = e => Object.keys(ke).reduce(((t, i) => {
                    const r = ke[i];
                    if (!r) return console.warn("[candlestick] fn is not found"), t;
                    const o = r(e);
                    if (!o) return console.warn("[candlestick] indicatorBase is not found"), t;
                    const s = o ? .defaultProps ? .id;
                    return s ? (t[s] = o, t) : (console.warn("[candlestick] id is not found"), t)
                }), {});
            var Pe = i("GS//"),
                De = i.n(Pe),
                Ie = i("CKB+"),
                Ve = i("5L7L");
            const Me = ({
                    ranges: e,
                    startTime: t,
                    offsetTime: i,
                    isFixed: r = !1
                }) => {
                    let o = t + i,
                        s = 0;
                    if (i < 0)
                        for (let n = e.length - 1; n >= 0; n--) {
                            const i = e[n];
                            if (o <= i[1] && t >= i[1] && (r || (o -= i[1] - i[0]), s += i[1] - i[0]), o > i[1]) break
                        }
                    if (i > 0)
                        for (let n = 0; n < e.length; n++) {
                            const i = e[n];
                            if (o >= i[0] && t <= i[0] && (r || (o += i[1] - i[0]), s += i[1] - i[0]), o < i[0]) break
                        }
                    return {
                        time: o,
                        sliceTimeLength: s
                    }
                },
                Be = ({
                    start: e,
                    end: t
                }) => {
                    if (t - e <= 7 * re.b1.Day) return 0;
                    const i = new Date(e),
                        [r, o] = [i.getUTCFullYear(), i.getUTCMonth()],
                        s = new Date(t),
                        [n, a] = [s.getUTCFullYear(), s.getUTCMonth()];
                    return 12 * (n - r) + a - o + 1
                },
                Ee = ({
                    data: e
                }) => [e[0] ? .time, e[e.length - 1] ? .time],
                je = e => 10 / e,
                Oe = ({
                    viewWidth: e,
                    scale: t
                }) => e / je(t),
                He = ({
                    viewWidth: e,
                    scale: t,
                    interval: i
                }) => Oe({
                    viewWidth: e,
                    scale: t
                }) * i,
                Re = ({
                    startTime: e,
                    endTime: t,
                    viewWidth: i,
                    scale: r,
                    interval: o,
                    ranges: s,
                    isFixed: n = !1
                }) => {
                    const a = He({
                        viewWidth: i,
                        scale: r,
                        interval: o
                    });
                    return {
                        min: Math.floor(Me({
                            ranges: s,
                            startTime: e,
                            offsetTime: -a,
                            isFixed: n
                        }).time),
                        max: Math.floor(Me({
                            ranges: s,
                            startTime: t,
                            offsetTime: a,
                            isFixed: n
                        }).time)
                    }
                };
            let Ne = class {
                goToRange({
                    startTime: e,
                    endTime: t
                }) {
                    const i = Math.abs(t - e),
                        r = Math.floor(i / this.getTimeUnitValue()),
                        o = 10 / (this.coord.getInterval() / r);
                    this.setScaleCoeff(o);
                    const s = this.getDomainInterval(),
                        {
                            time: n
                        } = this.getEasedSliceTime(t, -s);
                    this.setDomain({
                        min: n,
                        max: t
                    })
                }
                getTimeLengthByPixelCount({
                    count: e
                }) {
                    const [t, i] = this.domain.getExtent();
                    return (i - t) / this.coord.getInterval() * e
                }
                setScaleCoeff(e) {
                    this._scaleCoeff = s()(e, .2, 5)
                }
                getScaleCoeff() {
                    return this._scaleCoeff
                }
                getCoordOfValue(e) {
                    const t = this.coord.getMinValue(),
                        i = this.domain.getMinValue(),
                        {
                            sliceTimeLength: r
                        } = this.getEasedSliceTime(i, e - i, !0);
                    return t + (e - i - r) / this.getTimeUnitValue() * this.unitWidth
                }
                getValueOfCoord(e) {
                    const t = this.getTimeUnitValue(),
                        i = this.domain.getMinValue(),
                        r = (this._maxTimeValue - i) % this._timeUnitValue,
                        o = r / t * this.unitWidth,
                        s = e - this.coord.getMinValue() - o,
                        n = r + Math.round(s / this.unitWidth) * t,
                        {
                            time: a
                        } = this.getEasedSliceTime(i, n);
                    if (this.getTimeScaleType() === ie.Wx.Month) {
                        const e = new Date(a),
                            t = new Date(a + re.b1.Day);
                        if (e.getUTCMonth() !== t.getUTCMonth()) return a + re.b1.Day
                    }
                    return a
                }
                get unitWidth() {
                    return je(this.getScaleCoeff())
                }
                get sliceRanges() {
                    return a()(this._sliceRanges)
                }
                getTimeUnitValue() {
                    return this._timeUnitValue
                }
                getTickScale() {
                    return De()(re.bw, (({
                        type: e,
                        number: t
                    }) => {
                        const i = this.getTimeInterval(e),
                            r = i * t;
                        return Math.floor(r / this._timeUnitValue) * this.unitWidth >= 50 && i >= this._timeUnitValue
                    })) || {
                        type: ie.Wx.Month,
                        number: 12
                    }
                }
                setDomain({
                    min: e,
                    max: t
                }) {
                    this.domain.setMinValue(e).setMaxValue(t)
                }
                getDomain() {
                    return this.domain.getExtent()
                }
                getRange() {
                    return this.coord.getExtent()
                }
                domainContains(e) {
                    return this.domain.contain(e)
                }
                getTimeScaleType() {
                    if (this._isSeriesDataLengthLessThanMonths) return ie.Wx.Month;
                    const e = re.bw.find((({
                        type: e
                    }) => this._timeUnitValue % re.b1[e] === 0));
                    return e ? .type || ie.Wx.Day
                }
                getAxisData() {
                    const [e] = this.domain.getExtent();
                    let t = e,
                        i = this.coord.getMinValue();
                    const r = Oe({
                            viewWidth: this.coord.getInterval(),
                            scale: this.getScaleCoeff()
                        }),
                        o = this.getTimeUnitValue(),
                        s = [],
                        n = {
                            lastTime: 0,
                            pos: Number.MIN_SAFE_INTEGER
                        };
                    for (let a = 0; a <= r; a++) {
                        if (0 === a) {
                            const e = (this._maxTimeValue - t) % this._timeUnitValue;
                            i += e / o * this.unitWidth, t += e
                        }
                        let {
                            time: e
                        } = this.getEasedSliceTime(t, a * o);
                        if (this.getTimeScaleType() === ie.Wx.Month) {
                            const t = new Date(e),
                                i = new Date(e + re.b1.Day);
                            t.getUTCMonth() !== i.getUTCMonth() && (e += re.b1.Day)
                        }
                        this.isShowTicks(e, n) && s.push({
                            p: i + a * this.unitWidth,
                            v: e
                        })
                    }
                    return s
                }
                scaleAroundTimestamp(e, t) {
                    this._scaleCoeff * t > 5 || this._scaleCoeff * t < .2 || (this.setScaleCoeff(this.getScaleCoeff() * t), this._scaleAroundPoint(e, t))
                }
                scaleAroundRight(e) {
                    this.setScaleCoeff(this.getScaleCoeff() * e);
                    const [, t] = this.getDomain(), i = this.getDomainInterval(), {
                        time: r
                    } = this.getEasedSliceTime(t, -i);
                    this.setDomain({
                        min: r,
                        max: t
                    })
                }
                updateSliceTimeInterval(e) {
                    const t = 2 * this._timeUnitValue;
                    for (let i = 1; i < e.length; i++) {
                        const r = e[i - 1].time,
                            o = e[i].time;
                        o - r >= t && this._sliceRanges.push([r + this._timeUnitValue, o])
                    }
                }
                shiftTime(e) {
                    if (!(this._sliceRanges.length > 0)) return void this.domain.shift(e);
                    const t = this.getDomainInterval(),
                        i = this.domain.getMinValue(),
                        {
                            time: r
                        } = this.getEasedSliceTime(i, e),
                        {
                            time: o
                        } = this.getEasedSliceTime(r, t);
                    this.domain.setMinValue(r).setMaxValue(o)
                }
                reposition({
                    time: e,
                    type: t
                }) {
                    const i = this.getDomainInterval() / 2;
                    switch (t) {
                        case "left":
                            {
                                const {
                                    time: t
                                } = this.getEasedSliceTime(e, 2 * i);this.domain.setMinValue(e).setMaxValue(t);
                                break
                            }
                        case "right":
                            {
                                const {
                                    time: t
                                } = this.getEasedSliceTime(e, 2 * -i);this.domain.setMinValue(t).setMaxValue(e);
                                break
                            }
                        default:
                            {
                                const {
                                    time: t
                                } = this.getEasedSliceTime(e, -i),
                                {
                                    time: r
                                } = this.getEasedSliceTime(e, i);this.domain.setMinValue(t).setMaxValue(r)
                            }
                    }
                }
                getTimeShiftedBy({
                    time: e,
                    left: t = 0,
                    right: i = 0
                }) {
                    const r = this.getTimeUnitValue();
                    return e + i * r - t * r
                }
                getEasedSliceTime(e, t, i = !1) {
                    return Me({
                        ranges: this._sliceRanges,
                        startTime: e,
                        offsetTime: t,
                        isFixed: i
                    })
                }
                getDomainInterval() {
                    return He({
                        viewWidth: this.coord.getInterval(),
                        scale: this.getScaleCoeff(),
                        interval: this.getTimeUnitValue()
                    })
                }
                getMinMaxDomainByTime({
                    startTime: e,
                    endTime: t
                }) {
                    return Re({
                        startTime: e,
                        endTime: t,
                        viewWidth: this.coord.getInterval(),
                        scale: this.getScaleCoeff(),
                        interval: this._timeUnitValue,
                        ranges: this.sliceRanges
                    })
                }
                getVisibleSeriesData(e) {
                    return this.domain.sliceArray(e, (e => e.time)) || []
                }
                isShowTicks(e, t) {
                    const i = (e => {
                            const t = new Date(e);
                            return {
                                [ie.Wx.Year]: t.getUTCFullYear(),
                                [ie.Wx.Month]: t.getUTCMonth(),
                                [ie.Wx.Week]: t.getUTCDay(),
                                [ie.Wx.Day]: t.getUTCDate(),
                                [ie.Wx.Hour]: t.getUTCHours(),
                                [ie.Wx.Minute]: t.getUTCMinutes(),
                                [ie.Wx.Second]: t.getUTCSeconds()
                            }
                        })(e),
                        r = this.getCoordOfValue(e),
                        {
                            type: o,
                            number: s
                        } = this.getTickScale(),
                        n = this.getTimeInterval(o) * s,
                        a = r - t.pos;
                    let l = !1;
                    if (o === ie.Wx.Month) {
                        const r = Be({
                            start: t.lastTime,
                            end: e
                        }) - 1;
                        l = a >= 50 && this.isShowMonthOrYear(i, r, s)
                    } else e - t.lastTime >= n && a + .01 >= 50 && (l = o === ie.Wx.Hour ? this.isShowHour(i) : o === ie.Wx.Day ? this.isShowDay(i) : i[o] % s === 0);
                    return l && (t.lastTime = e, t.pos = r), l
                }
                isShowMonthOrYear(e, t, i) {
                    const r = Math.floor(i / 12);
                    return (!(i > 12) || e[ie.Wx.Year] % r === 0) && e[ie.Wx.Day] <= this._timeUnitValue / re.b1.Day + 1 && t >= i && e[ie.Wx.Month] % i === 0
                }
                isShowHour(e) {
                    let t = !1;
                    const {
                        number: i
                    } = this.getTickScale();
                    if (0 !== e[ie.Wx.Minute]) return !1;
                    if (this._timeUnitValue >= re.b1.Hour) {
                        const r = e[ie.Wx.Hour] % (this._timeUnitValue / re.b1.Hour);
                        0 !== r && r * re.b1.Hour <= this._timeUnitValue && (t = (e[ie.Wx.Hour] - r) % i === 0)
                    }
                    return e[ie.Wx.Hour] % i === 0 && (t = !0), t
                }
                isShowDay(e) {
                    const {
                        type: t,
                        number: i
                    } = this.getTickScale(), r = e[ie.Wx.Hour] * re.b1.Hour;
                    return i % 7 === 0 ? r <= this._timeUnitValue && 0 === e[ie.Wx.Week] : r < this._timeUnitValue && e[t] % i === 0
                }
                getTimeInterval(e) {
                    return e === ie.Wx.Month && this._isSeriesDataLengthLessThanMonths ? this._timeUnitValue : re.b1[e]
                }
                resetTimeDomainRange() {
                    const e = this.domain.getMaxValue(),
                        t = this.getDomainInterval(),
                        {
                            time: i
                        } = this.getEasedSliceTime(e, -t);
                    this.domain.setMinValue(i)
                }
                _scaleAroundPoint(e, t) {
                    const i = this.coord.getInterval(),
                        [r, o] = this.coord.getExtent(),
                        s = this.getCoordOfValue(e);
                    if (s < r || s > o) return;
                    const n = (s - r) / i,
                        a = this.getDomainInterval(),
                        l = a * n,
                        c = a - l,
                        {
                            time: d
                        } = this.getEasedSliceTime(e, -l * t),
                        {
                            time: h
                        } = this.getEasedSliceTime(e, c * t);
                    this.domain.setMinValue(d).setMaxValue(h)
                }
                constructor({
                    domain: e,
                    range: t,
                    data: i,
                    scaleCoeff: r = 1.5,
                    isLessThanMonths: o,
                    timeUnitValue: s
                }) {
                    this._scaleCoeff = 1.5, this._timeUnitValue = re.b1.Day, this._sliceRanges = [];
                    const [n, a] = e;
                    this._isSeriesDataLengthLessThanMonths = o, this.domain = new Ie.A(n, a), this.coord = new Ie.A(t[0], t[1]), this._timeUnitValue = s, this.setScaleCoeff(r), this.resetTimeDomainRange(), this._maxTimeValue = this.domain.getMaxValue(), this.updateSliceTimeInterval(i)
                }
            };
            var We = i("ynAk"),
                Fe = i("hpT2");
            const ze = e => e < .5 ? 8 * e * e * e * e : 1 - (-2 * e + 2) ** 4 / 2;
            var Xe = i("wwoD"),
                Ue = i("Af4x"),
                Ge = i("ym1p"),
                $e = i("UfNb"),
                Ye = i("F3xh"),
                Ze = i("WhNg");
            let Ke = class extends Ze.Ay {
                draw(e, t) {
                    const {
                        width: i
                    } = t;
                    Fe.A.fillRect(e, 0, 0, i, 1)
                }
            };
            var qe = i("O0kw");
            let Qe = class extends Ye.A {
                    get frontPanel() {
                        return this._frontPanel
                    }
                    set frontPanel(e) {
                        this._frontPanel = e
                    }
                    get nextPanel() {
                        return this._nextPanel
                    }
                    set nextPanel(e) {
                        this._nextPanel = e
                    }
                    clear() {
                        const e = this.getRoot().getContext(),
                            {
                                x: t,
                                y: i,
                                width: r
                            } = this.getClearBound();
                        Fe.A.clearRect(e, {
                            x: t,
                            y: i,
                            width: r,
                            height: 1
                        })
                    }
                    render() {
                        const e = this.getRoot(),
                            t = e.getContext();
                        t.save(), this.setCanvasTransform(t);
                        const i = e.getColorFromColorTable("frame.borderLineColor");
                        (0, oe.jS)(t, {
                            fillStyle: i
                        }), this.renderer.draw(t, this.bound), t.restore()
                    }
                    setViewBound() {
                        const e = this._frontPanel.getBound();
                        this.setBound({ ...e,
                            height: 0
                        })
                    }
                    contain(e) {
                        const {
                            x: t,
                            y: i,
                            width: r,
                            height: o
                        } = this.bound, s = new qe.A(t, 0, r, o), n = [e.x, i - e.y];
                        return s.expand(0, 5).contain(n)
                    }
                    _initEvents() {
                        this.on("mousedown", this._onmousedown), this.on("mousemove", this._onmousemove), this.on("mouseout", this._onmouseout)
                    }
                    _onmousemove(e) {
                        e.isDealed = !0;
                        this.getRoot().setCursor({
                            config: {
                                style: re.SE.NSRESIZE
                            },
                            weight: 1e3,
                            isRecord: !1,
                            key: "gap"
                        })
                    }
                    _onmouseout() {
                        this.getRoot().setCursor({
                            key: "gap",
                            isClear: !0,
                            config: {},
                            weight: 1e3
                        })
                    }
                    _onmousedown(e) {
                        let {
                            point: {
                                y: t
                            },
                            originEvent: i
                        } = e;
                        const r = this.getRoot();
                        this._clearDragEvent(), this._frontPanel.setAttr("isAbleTriggerMove", !1), this._nextPanel.setAttr("isAbleTriggerMove", !1);
                        let o = !1;
                        r.on("mousemove", "gap", (e => {
                            const {
                                y: i
                            } = e.point, r = i - t, {
                                height: s
                            } = this._frontPanel.getBound(), {
                                height: n
                            } = this._nextPanel.getBound();
                            s + r <= 30 || n - r <= 30 || (o = !0, this._frontPanel.updateViewBoundHeight(r, r), this.setBound({ ...this.bound,
                                y: this.bound.y + r
                            }), this._nextPanel.updateViewBoundHeight(-r, 0), this._frontPanel.update(ie.OQ.Resize), this._nextPanel.update(ie.OQ.Resize), t = i)
                        })), r.on("mouseup", "gap", (() => {
                            this._frontPanel.setAttr("isAbleTriggerMove", !0), this._nextPanel.setAttr("isAbleTriggerMove", !0), this._clearDragEvent(), o && (this._frontPanel.save({
                                type: "indicator"
                            }), this._nextPanel.save({
                                type: "indicator"
                            }))
                        })), i.preventDefault()
                    }
                    _clearDragEvent() {
                        const e = this.getRoot();
                        e.off("mousemove", "gap"), e.off("mouseup", "gap")
                    }
                    constructor(e, t) {
                        super(), this.config = { ...a()(Ye.A.defaultConfig),
                            zIndex: 100
                        }, this.renderer = new Ke, this._frontPanel = e, this._nextPanel = t, this._initEvents()
                    }
                },
                Je = class extends Ge.A {
                    get indicatorViews() {
                        return Array.from(this._indicatorViews.values())
                    }
                    registerModule(e, t) {
                        t && this.moduleManager[e] !== t && (this.moduleManager[e] = t)
                    }
                    getModule(e) {
                        return this.moduleManager[e]
                    }
                    getIndicatorParams(e) {
                        return this.indicatorStore.getValues()[e]
                    }
                    getIndicatorViewByName(e) {
                        return this._indicatorViews.get(e)
                    }
                    setIndicatorView(e, t) {
                        this._indicatorViews.set(e, t)
                    }
                    deleteIndicatorViewByName(e) {
                        this._indicatorViews.delete(e)
                    }
                    getPanels(e) {
                        return e ? this.panels.filter((t => e(t))) : this.panels
                    }
                    getIPanels() {
                        return this.panels.filter((e => e instanceof $e.A))
                    }
                    getFrontGapOfIPanel(e) {
                        const t = this.getPanels();
                        let i = !1;
                        for (let r = t.length - 1; r >= 0; r--) {
                            const o = t[r];
                            if (i && o instanceof Qe) return o;
                            i = o === e
                        }
                    }
                    addPanels(e) {
                        return e.forEach((e => {
                            this.setWidgetParent(e), this.panels.push(e)
                        })), this
                    }
                    addElement(e) {
                        const t = this.getAttr("container");
                        t && e && t.appendChild(e)
                    }
                    addElemens(e) {
                        const t = this.getAttr("container");
                        t && e.forEach((e => t.appendChild(e)))
                    }
                    eachPanels(e, t) {
                        void 0 === t ? this.panels.forEach(((t, i) => {
                            e.call(this, t, i)
                        })) : t ? this.panels.slice(0).sort(((e, t) => t.getAttr("zIndex") - e.getAttr("zIndex"))).forEach((t => {
                            e.call(this, t)
                        })) : this.panels.slice(0).sort(((e, t) => e.getAttr("zIndex") - t.getAttr("zIndex"))).forEach((t => {
                            e.call(this, t)
                        }))
                    }
                    update(e = ie.OQ.All) {
                        !this._isWaiting && this._isLoaded && (this._isWaiting = !0, this._lastRenderTimer = requestAnimationFrame((() => {
                            cancelAnimationFrame(this._lastRenderTimer), this._lastRenderTimer = null, this.renderImmediate(e), this._isWaiting = !1
                        })))
                    }
                    renderImmediate(e = ie.OQ.All) {
                        this._isLoaded && (this._lastRenderTimer && cancelAnimationFrame(this._lastRenderTimer), this.eachPanels((t => {
                            t.updateImmediate(e)
                        }), !1), this._isWaiting = !1)
                    }
                    removePanel(e) {
                        for (let t = 0; t < this.panels.length; t++)
                            if (this.panels[t] === e) {
                                this.panels.splice(t, 1), e instanceof $e.A && (this._indicatorViews.delete(e.getAttr("indicatorType")), e.destroy());
                                break
                            }
                        return this
                    }
                    removePanels(e) {
                        for (let t = this.panels.length - 1; t >= 0; t--) {
                            const i = this.panels[t];
                            if (e.has(i) && (this.panels.splice(t, 1), e.delete(i), i instanceof $e.A && (this._indicatorViews.delete(i.getAttr("indicatorType")), i.destroy()), 0 === e.size)) return
                        }
                    }
                    initPanelBound(e = ie.dp.All) {
                        this.eachPanels((t => {
                            t.setViewBound(e)
                        }))
                    }
                    updatePanelBound() {
                        this.eachPanels((e => {
                            e instanceof $e.A && e.updateViewBound(), e instanceof Qe && e.setViewBound()
                        }))
                    }
                    resizeAllPanelBound() {
                        this.eachPanels((e => {
                            e instanceof $e.A ? e.updateViewBound() : e.setViewBound()
                        }))
                    }
                    initPanelYAxis() {
                        this.eachPanels((e => {
                            e instanceof $e.A && e.setYAxis()
                        }))
                    }
                    getLongestYAxisWidth() {
                        const e = [];
                        return this.eachPanels((t => {
                            t instanceof $e.A && e.push(t.axisPane.getLongestTickWidth())
                        })), Math.max(...e)
                    }
                    filterPanels(e) {
                        return this.panels.filter((t => e.call(this, t)))
                    }
                    getPanel(e) {
                        return this.panels.find(e)
                    }
                    hasPanel(e) {
                        return this.panels.some((t => t === e))
                    }
                    setIsLoaded(e) {
                        this._isLoaded = e
                    }
                    isLoaded() {
                        return this._isLoaded
                    }
                    getColorTable() {
                        return this._colorTable
                    }
                    setColorTable(e) {
                        this._colorTable = e
                    }
                    registerI18n(e) {
                        this.getI18n = e
                    }
                    constructor(...e) {
                        super(...e), this.panels = [], this._indicatorViews = new Map, this._isLoaded = !1, this._isWaiting = !1, this._colorTable = re.MT, this.indicatorStore = new Xe.A({
                            colorTable: re.MT
                        }), this.settingStore = new Ue.A({
                            colorTable: re.MT
                        }), this.getI18n = (e, t) => t, this.moduleManager = {}
                    }
                };
            var et = i("Fc4K"),
                tt = i("c6Y9"),
                it = i("sqaW"),
                rt = i("tNHi");
            let ot = class extends it.A {
                    updateImmediate() {
                        const e = this.getParent();
                        if (!e) return;
                        const {
                            mainPane: t,
                            axisPane: i,
                            timeAxisPane: r,
                            xAxis: o
                        } = e, s = i.bound.width, n = r.bound.height, {
                            p1: a,
                            p2: l
                        } = this.getData(), {
                            x: c,
                            y: d
                        } = e.getPosition(a), {
                            x: h,
                            y: u
                        } = e.getPosition(l);
                        this.line.setData({
                            p1: {
                                x: c,
                                y: -d
                            },
                            p2: {
                                x: h,
                                y: -u
                            }
                        }), this.xLabel1.setAttrs({
                            data: {
                                x: c,
                                y: -n
                            },
                            text: (0, oe.Ni)(a.time, o.getTimeScaleType()),
                            fixHeight: n
                        }), this.xLabel2.setAttrs({
                            data: {
                                x: h,
                                y: -n
                            },
                            text: (0, oe.Ni)(l.time, o.getTimeScaleType()),
                            fixHeight: n
                        }), this.yLabel1.setAttrs({
                            data: {
                                x: 0,
                                y: -d
                            },
                            text: e.formatterValue(a.value),
                            fixWidth: s
                        }), this.yLabel2.setAttrs({
                            data: {
                                x: 0,
                                y: -u
                            },
                            text: e.formatterValue(l.value),
                            fixWidth: s
                        }), this.xRange.setAttrs({
                            data: {
                                x: Math.min(c, h),
                                y: -n
                            },
                            width: Math.abs(c - h),
                            height: r.bound.height
                        }), this.yRange.setAttrs({
                            data: {
                                x: 0,
                                y: -Math.max(d, u)
                            },
                            width: i.bound.width,
                            height: Math.abs(d - u)
                        }), this.dragVertex1.setAttrs({
                            data: {
                                x: c,
                                y: -d
                            }
                        }), this.dragVertex2.setAttrs({
                            data: {
                                x: h,
                                y: -u
                            }
                        }), this.addWidgetShapes(t, [this.line, this.dragVertex1, this.dragVertex2]), this.addWidgetShapes(r, [this.xRange, this.xLabel1, this.xLabel2]), this.addWidgetShapes(i, [this.yRange, this.yLabel1, this.yLabel2]), this.setAnnotationToWidgets([t, r, i])
                    }
                    getShapes() {
                        return [this.line, this.dragVertex1, this.dragVertex2, this.xRange, this.xLabel1, this.xLabel2, this.yRange, this.yLabel1, this.yLabel2]
                    }
                    initCustomEvents() {
                        this.on("mousedown", this._onmousedown.bind(this)), this.on("mousemove", ie.X2.TrendLine, this._highlightVertex.bind(this)), this.watch("data", this.updateImmediate.bind(this))
                    }
                    updateColor(e) {
                        this.line.setAttr("strokeStyle", e)
                    }
                    updateLineWidth(e) {
                        this.line.setAttr("lineWidth", e)
                    }
                    updateLineStyle(e) {
                        this.line.setAttr("lineDash", e)
                    }
                    isHover(e) {
                        return this.line.isHover(e) || !!this.getDragVertex(e)
                    }
                    setVisibleShapes() {
                        const {
                            isEdit: e,
                            isHover: t
                        } = this.getConfig();
                        this.xLabel1.setAttr("isVisible", e), this.xLabel2.setAttr("isVisible", e), this.xRange.setAttr("isVisible", e), this.yLabel1.setAttr("isVisible", e), this.yLabel2.setAttr("isVisible", e), this.yRange.setAttr("isVisible", e), this.dragVertex1.setAttrs({
                            isVisible: t || e,
                            radius: it.F.radius,
                            lineWidth: e ? it.F.border_width : it.F.hover_border_width
                        }), this.dragVertex2.setAttrs({
                            isVisible: t || e,
                            radius: it.F.radius,
                            lineWidth: e ? it.F.border_width : it.F.hover_border_width
                        })
                    }
                    getVertexs() {
                        return [this.dragVertex1, this.dragVertex2]
                    }
                    getDragVertex(e) {
                        return this.dragVertex1.isHover(e) ? this.dragVertex1 : this.dragVertex2.isHover(e) ? this.dragVertex2 : this.line.isHover(e) ? this.line : void 0
                    }
                    _highlightVertex(e) {
                        const {
                            isEdit: t,
                            isHover: i
                        } = this.getConfig();
                        if (t || i) {
                            const {
                                mainPane: t
                            } = this.parent, {
                                x: i,
                                y: r
                            } = t.transformPointToView(e.point), o = {
                                x: i,
                                y: -r
                            }, s = this.updateHighlightVertexBorderWidth(this.dragVertex1, this.dragVertex1.isHover(o)), n = this.updateHighlightVertexBorderWidth(this.dragVertex2, this.dragVertex2.isHover(o));
                            (s || n) && this.update()
                        }
                    }
                    _onmousedown(e) {
                        const t = this.getParent();
                        if (e.isDealed || !t) return;
                        if (this.isDisableDrag()) return;
                        const {
                            x: i,
                            y: r
                        } = t.transformPointToView(e.point), o = {
                            x: i,
                            y: -r
                        };
                        let s = this.getDragVertex(o);
                        s && (this.setAttr("isEdit", !0), this.startDraw(), e.isDealed = !0, s === this.line ? this._dragLine(t, t.transformPointToView(e.point)) : (this.updateVertexBorderAndVisible(this.dragVertex1, s === this.dragVertex1), this.updateVertexBorderAndVisible(this.dragVertex2, s === this.dragVertex2), this._dragVertex(t, s)))
                    }
                    _dragVertex(e, t) {
                        const {
                            mainPane: i
                        } = e;
                        let r;
                        t === this.dragVertex1 ? (this.dragVertex2.setAttr("strokeStyle", it.F.hover_border_color), r = "p1") : (this.dragVertex1.setAttr("strokeStyle", it.F.hover_border_color), r = "p2"), i.on("mousemove", ie.X2.TrendLine, (e => {
                            const t = this.getPoint(e.point),
                                i = this.getAttr("data");
                            this.setData({ ...i,
                                [r]: t
                            }), this.update()
                        })), i.on("mouseup", ie.X2.TrendLine, (() => {
                            i.off(ie.X2.TrendLine), this.recoverDragVertexts(), this.compeleDraw()
                        }))
                    }
                    _dragLine(e, {
                        x: t,
                        y: i
                    }) {
                        const {
                            mainPane: r
                        } = e, {
                            p1: o,
                            p2: s
                        } = this.getData(), {
                            x: n,
                            y: a
                        } = e.getPosition(o), {
                            x: l,
                            y: c
                        } = e.getPosition(s);
                        let d = 0,
                            h = 0;
                        r.on("mousemove", ie.X2.TrendLine, (r => {
                            const {
                                x: o,
                                y: s
                            } = e.transformPointToView(r.point);
                            d = o - t, h = s - i;
                            const u = e.getPlotItemByPosition(n + d, a + h),
                                g = e.getPlotItemByPosition(l + d, c + h);
                            this.setData({
                                p1: u,
                                p2: g
                            }), this.update()
                        })), r.on("mouseup", ie.X2.TrendLine, (() => {
                            r.off(ie.X2.TrendLine), this.compeleDraw()
                        }))
                    }
                    constructor(...e) {
                        super(...e), this.config = { ...a()(it.A.defaultConfig),
                            type: ie.X2.TrendLine
                        }, this.line = new rt.N1({
                            strokeStyle: it.F.default_line_color,
                            lineWidth: 1
                        }), this.yLabel1 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Right,
                            fill: !0,
                            padding: 6
                        }), this.yLabel2 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Right,
                            fill: !0,
                            padding: 6
                        }), this.xLabel1 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Down,
                            fill: !0,
                            padding: [6, 2]
                        }), this.xLabel2 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Down,
                            fill: !0,
                            padding: [6, 2]
                        }), this.xRange = new rt.rw({
                            fillStyle: "#2f3f59",
                            stroke: !1,
                            globalAlpha: .6
                        }), this.yRange = new rt.rw({
                            fillStyle: "#2f3f59",
                            stroke: !1,
                            globalAlpha: .6
                        }), this.dragVertex1 = it.A.dragVertex.clone(["fillStyle", "strokeStyle"]), this.dragVertex2 = it.A.dragVertex.clone(["fillStyle", "strokeStyle"]).setAttr("isVisible", !1)
                    }
                },
                st = class extends it.A {
                    updateImmediate() {
                        const e = this.getParent();
                        if (!e) return;
                        const {
                            mainPane: t,
                            axisPane: i,
                            timeAxisPane: r,
                            xAxis: o
                        } = e, s = i.bound.width, n = r.bound.height, {
                            p1: a,
                            p2: l
                        } = this.getData(), {
                            x: c,
                            y: d
                        } = e.getPosition(a), {
                            x: h,
                            y: u
                        } = e.getPosition(l);
                        this.line.setData({
                            p1: {
                                x: c,
                                y: -d
                            },
                            p2: {
                                x: h,
                                y: -u
                            }
                        }), this.xLabel1.setAttrs({
                            data: {
                                x: c,
                                y: -n
                            },
                            text: (0, oe.Ni)(a.time, o.getTimeScaleType()),
                            fixHeight: n
                        }), this.xLabel2.setAttrs({
                            data: {
                                x: h,
                                y: -n
                            },
                            text: (0, oe.Ni)(l.time, o.getTimeScaleType()),
                            fixHeight: n
                        }), this.yLabel1.setAttrs({
                            data: {
                                x: 0,
                                y: -d
                            },
                            text: e.formatterValue(a.value),
                            fixWidth: s
                        }), this.yLabel2.setAttrs({
                            data: {
                                x: 0,
                                y: -u
                            },
                            text: e.formatterValue(l.value),
                            fixWidth: s
                        }), this.xRange.setAttrs({
                            data: {
                                x: Math.min(c, h),
                                y: -n
                            },
                            width: Math.abs(c - h),
                            height: r.bound.height
                        }), this.yRange.setAttrs({
                            data: {
                                x: 0,
                                y: -Math.max(d, u)
                            },
                            width: i.bound.width,
                            height: Math.abs(d - u)
                        }), this.dragVertex1.setAttrs({
                            data: {
                                x: c,
                                y: -d
                            }
                        }), this.dragVertex2.setAttrs({
                            data: {
                                x: h,
                                y: -u
                            }
                        }), this.addWidgetShapes(t, [this.line, this.dragVertex1, this.dragVertex2]), this.addWidgetShapes(r, [this.xRange, this.xLabel1, this.xLabel2]), this.addWidgetShapes(i, [this.yRange, this.yLabel1, this.yLabel2]), this.setAnnotationToWidgets([t, r, i])
                    }
                    getShapes() {
                        return [this.line, this.dragVertex1, this.dragVertex2, this.xRange, this.xLabel1, this.xLabel2, this.yRange, this.yLabel1, this.yLabel2]
                    }
                    initCustomEvents() {
                        this.on("mousedown", this._onmousedown.bind(this)), this.on("mousemove", ie.X2.HorizontalExtendedLine, this._highlightVertex.bind(this)), this.watch("data", this.updateImmediate.bind(this))
                    }
                    updateColor(e) {
                        this.line.setAttr("strokeStyle", e)
                    }
                    updateLineWidth(e) {
                        this.line.setAttr("lineWidth", e)
                    }
                    updateLineStyle(e) {
                        this.line.setAttr("lineDash", e)
                    }
                    isHover(e) {
                        return this.line.isHover(e) || !!this.getDragVertex(e)
                    }
                    setVisibleShapes() {
                        const {
                            isEdit: e,
                            isHover: t
                        } = this.getConfig();
                        this.xLabel1.setAttr("isVisible", e), this.xLabel2.setAttr("isVisible", e), this.xRange.setAttr("isVisible", e), this.yLabel1.setAttr("isVisible", e), this.yLabel2.setAttr("isVisible", e), this.yRange.setAttr("isVisible", e), this.dragVertex1.setAttrs({
                            isVisible: t || e,
                            radius: it.F.radius,
                            lineWidth: e ? it.F.border_width : it.F.hover_border_width
                        }), this.dragVertex2.setAttrs({
                            isVisible: t || e,
                            radius: it.F.radius,
                            lineWidth: e ? it.F.border_width : it.F.hover_border_width
                        })
                    }
                    getVertexs() {
                        return [this.dragVertex1, this.dragVertex2]
                    }
                    getDragVertex(e) {
                        return this.dragVertex1.isHover(e) ? this.dragVertex1 : this.dragVertex2.isHover(e) ? this.dragVertex2 : this.line.isHover(e) ? this.line : void 0
                    }
                    _highlightVertex(e) {
                        const {
                            isEdit: t,
                            isHover: i
                        } = this.getConfig();
                        if (t || i) {
                            const {
                                mainPane: t
                            } = this.parent, {
                                x: i,
                                y: r
                            } = t.transformPointToView(e.point), o = {
                                x: i,
                                y: -r
                            }, s = this.updateHighlightVertexBorderWidth(this.dragVertex1, this.dragVertex1.isHover(o)), n = this.updateHighlightVertexBorderWidth(this.dragVertex2, this.dragVertex2.isHover(o));
                            (s || n) && this.update()
                        }
                    }
                    _onmousedown(e) {
                        if (e.isDealed) return;
                        const t = this.getParent();
                        if (this.isDisableDrag()) return;
                        const {
                            x: i,
                            y: r
                        } = t.transformPointToView(e.point), o = {
                            x: i,
                            y: -r
                        };
                        let s = this.getDragVertex(o);
                        s && (this.setAttr("isEdit", !0), this.startDraw(), e.isDealed = !0, s === this.line ? this._dragLine(t, t.transformPointToView(e.point)) : (this.updateVertexBorderAndVisible(this.dragVertex1, s === this.dragVertex1), this.updateVertexBorderAndVisible(this.dragVertex2, s === this.dragVertex2), this._dragVertex(t, s)))
                    }
                    _dragVertex(e, t) {
                        const {
                            mainPane: i
                        } = e;
                        let r;
                        t === this.dragVertex1 ? (this.dragVertex2.setAttr("strokeStyle", it.F.hover_border_color), r = "p1") : (this.dragVertex1.setAttr("strokeStyle", it.F.hover_border_color), r = "p2"), i.on("mousemove", ie.X2.HorizontalExtendedLine, (t => {
                            const {
                                time: i
                            } = e.transformAbsoluteXYToPlotItem(t.point), o = this.getAttr("data"), s = "p1" === r ? {
                                p1: { ...o.p1,
                                    time: i
                                }
                            } : {
                                p2: { ...o.p2,
                                    time: i
                                }
                            };
                            this.setData({ ...o,
                                ...s
                            }), this.update()
                        })), i.on("mouseup", ie.X2.HorizontalExtendedLine, (() => {
                            i.off(ie.X2.HorizontalExtendedLine), this.recoverDragVertexts(), this.compeleDraw()
                        }))
                    }
                    _dragLine(e, {
                        x: t,
                        y: i
                    }) {
                        const {
                            mainPane: r
                        } = e, {
                            p1: o,
                            p2: s
                        } = this.getData(), {
                            x: n,
                            y: a
                        } = e.getPosition(o), {
                            x: l,
                            y: c
                        } = e.getPosition(s);
                        let d = 0,
                            h = 0;
                        r.on("mousemove", ie.X2.HorizontalExtendedLine, (r => {
                            const {
                                x: o,
                                y: s
                            } = e.transformPointToView(r.point);
                            d = o - t, h = s - i;
                            const u = e.getPlotItemByPosition(n + d, a + h),
                                g = e.getPlotItemByPosition(l + d, c + h);
                            this.setData({
                                p1: u,
                                p2: g
                            }), this.update()
                        })), r.on("mouseup", ie.X2.HorizontalExtendedLine, (() => {
                            r.off(ie.X2.HorizontalExtendedLine), this.compeleDraw()
                        }))
                    }
                    constructor(...e) {
                        super(...e), this.config = { ...a()(it.A.defaultConfig),
                            type: ie.X2.HorizontalExtendedLine
                        }, this.line = new rt.N1({
                            strokeStyle: it.F.default_line_color,
                            lineWidth: 1
                        }), this.yLabel1 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Right,
                            fill: !0,
                            padding: 6
                        }), this.yLabel2 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Right,
                            fill: !0,
                            padding: 6
                        }), this.xLabel1 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Down,
                            fill: !0,
                            padding: [6, 2]
                        }), this.xLabel2 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Down,
                            fill: !0,
                            padding: [6, 2]
                        }), this.xRange = new rt.rw({
                            fillStyle: "#2f3f59",
                            stroke: !1,
                            globalAlpha: .6
                        }), this.yRange = new rt.rw({
                            fillStyle: "#2f3f59",
                            stroke: !1,
                            globalAlpha: .6
                        }), this.dragVertex1 = it.A.dragVertex.clone(["fillStyle", "strokeStyle"]), this.dragVertex2 = it.A.dragVertex.clone(["fillStyle", "strokeStyle"]).setAttr("isVisible", !1)
                    }
                };
            var nt = i("hpQW");
            let at = class extends ot {
                updateImmediate() {
                    const e = this.getParent();
                    if (!e) return;
                    const {
                        mainPane: t,
                        axisPane: i,
                        timeAxisPane: r,
                        xAxis: o
                    } = e, s = i.bound.width, n = r.bound.height, {
                        p1: a,
                        p2: l
                    } = this.getData(), c = e.getPosition(a), {
                        x: d,
                        y: h
                    } = c, u = e.getPosition(l), {
                        x: g,
                        y: p
                    } = u, {
                        width: m,
                        height: x
                    } = t.getBound();
                    if (nt.A.Algorith.isSamePoint(c, u)) this.line.setData({
                        p1: {
                            x: d,
                            y: -h
                        },
                        p2: {
                            x: g,
                            y: -p
                        }
                    });
                    else {
                        const e = new nt.A.Bound(0, 0, m, x),
                            t = nt.A.Line.getIntersectWidthBound(c, u, e);
                        2 === t.length ? this.line.setData({
                            p1: {
                                x: t[0].x,
                                y: -t[0].y
                            },
                            p2: {
                                x: t[1].x,
                                y: -t[1].y
                            }
                        }) : this.line.setData(null)
                    }
                    this.xLabel1.setAttrs({
                        data: {
                            x: d,
                            y: -n
                        },
                        text: (0, oe.Ni)(a.time, o.getTimeScaleType()),
                        fixHeight: n
                    }), this.xLabel2.setAttrs({
                        data: {
                            x: g,
                            y: -n
                        },
                        text: (0, oe.Ni)(l.time, o.getTimeScaleType()),
                        fixHeight: n
                    }), this.yLabel1.setAttrs({
                        data: {
                            x: 0,
                            y: -h
                        },
                        text: e.formatterValue(a.value),
                        fixWidth: s
                    }), this.yLabel2.setAttrs({
                        data: {
                            x: 0,
                            y: -p
                        },
                        text: e.formatterValue(l.value),
                        fixWidth: s
                    }), this.xRange.setAttrs({
                        data: {
                            x: Math.min(d, g),
                            y: -n
                        },
                        width: Math.abs(d - g),
                        height: r.bound.height
                    }), this.yRange.setAttrs({
                        data: {
                            x: 0,
                            y: -Math.max(h, p)
                        },
                        width: i.bound.width,
                        height: Math.abs(h - p)
                    }), this.dragVertex1.setAttrs({
                        data: {
                            x: d,
                            y: -h
                        }
                    }), this.dragVertex2.setAttrs({
                        data: {
                            x: g,
                            y: -p
                        }
                    }), this.addWidgetShapes(t, [this.line, this.dragVertex1, this.dragVertex2]), this.addWidgetShapes(r, [this.xRange, this.xLabel1, this.xLabel2]), this.addWidgetShapes(i, [this.yRange, this.yLabel1, this.yLabel2]), this.setAnnotationToWidgets([t, r, i])
                }
                constructor() {
                    super(), this.setAttr("type", ie.X2.ExtendTrendLine)
                }
            };
            var lt = i("GKEL"),
                ct = i("eY1w");
            let dt = class extends ot {
                updateImmediate() {
                    this.barImage.getAttr("imageSource") || this.barImage.getAttr("isLoading") || (this.barImage.setAttr("isLoading", !0), (0, lt.WZ)(ct.XE).then((e => {
                        this.barImage.setImage(e)
                    }))), this.priceDiffImage.getAttr("imageSource") || this.priceDiffImage.getAttr("isLoading") || (this.priceDiffImage.setAttr("isLoading", !0), (0, lt.WZ)(ct.YB).then((e => {
                        this.priceDiffImage.setImage(e)
                    })));
                    const e = this.getParent();
                    if (!e) return;
                    const {
                        mainPane: t,
                        axisPane: i,
                        timeAxisPane: r,
                        xAxis: o
                    } = e, s = i.bound.width, n = r.bound.height, {
                        p1: a,
                        p2: l
                    } = this.getData(), {
                        x: c,
                        y: d
                    } = e.getPosition(a), {
                        x: h,
                        y: u
                    } = e.getPosition(l);
                    this.line.setData({
                        p1: {
                            x: c,
                            y: -d
                        },
                        p2: {
                            x: h,
                            y: -u
                        }
                    });
                    const g = this.barImage.getAttr("width"),
                        p = this.barImage.getAttr("height"),
                        m = this.priceDiffImage.getAttr("width"),
                        x = this.priceDiffImage.getAttr("height"),
                        f = Math.max(180, this._textWidth + 16 + Math.max(g, m) + 5);
                    let y = 8,
                        b = -80;
                    const v = (c - h) * (d - u) > 0;
                    (0, oe.be)(c - h, 10) ? (y = 8, b = -36) : (0, oe.be)(d - u, 10) ? (y = .5 * -f, b = -80) : v && (y = -f - 8, b = -80);
                    const C = .5 * (c + h) + y;
                    let w = .5 * -(d + u) + b;
                    this.rect.setAttrs({
                        data: {
                            x: C,
                            y: w
                        },
                        width: f,
                        height: 72
                    }), w += 12, this.barImage.setData({
                        x: C + 8,
                        y: w
                    }), this.text1.setData({
                        x: C + 8 + g + 5,
                        y: w + .5 * p
                    }), w += 24, this.priceDiffImage.setData({
                        x: C + 8,
                        y: w
                    }), this.text2.setData({
                        x: C + 8 + m + 5,
                        y: w + .5 * x
                    }), this.xLabel1.setAttrs({
                        data: {
                            x: c,
                            y: -n
                        },
                        text: (0, oe.Ni)(a.time, o.getTimeScaleType()),
                        fixHeight: n
                    }), this.xLabel2.setAttrs({
                        data: {
                            x: h,
                            y: -n
                        },
                        text: (0, oe.Ni)(l.time, o.getTimeScaleType()),
                        fixHeight: n
                    }), this.yLabel1.setAttrs({
                        data: {
                            x: 0,
                            y: -d
                        },
                        text: e.formatterValue(a.value),
                        fixWidth: s
                    }), this.yLabel2.setAttrs({
                        data: {
                            x: 0,
                            y: -u
                        },
                        text: e.formatterValue(l.value),
                        fixWidth: s
                    }), this.xRange.setAttrs({
                        data: {
                            x: Math.min(c, h),
                            y: -n
                        },
                        width: Math.abs(c - h),
                        height: r.bound.height
                    }), this.yRange.setAttrs({
                        data: {
                            x: 0,
                            y: -Math.max(d, u)
                        },
                        width: i.bound.width,
                        height: Math.abs(d - u)
                    }), this.dragVertex1.setAttrs({
                        data: {
                            x: c,
                            y: -d
                        }
                    }), this.dragVertex2.setAttrs({
                        data: {
                            x: h,
                            y: -u
                        }
                    }), this.addWidgetShapes(t, [this.line, this.dragVertex1, this.dragVertex2, this.rect, this.barImage, this.priceDiffImage, this.text1, this.text2]), this.addWidgetShapes(r, [this.xRange, this.xLabel1, this.xLabel2]), this.addWidgetShapes(i, [this.yRange, this.yLabel1, this.yLabel2]), this.setAnnotationToWidgets([t, r, i])
                }
                getShapes() {
                    return [this.line, this.dragVertex1, this.dragVertex2, this.xRange, this.xLabel1, this.xLabel2, this.yRange, this.yLabel1, this.yLabel2, this.rect, this.barImage, this.priceDiffImage, this.text1, this.text2]
                }
                updateColor(e) {
                    this.line.setAttr("strokeStyle", e), this.text1.setAttr("fillStyle", e), this.text2.setAttr("fillStyle", e)
                }
                _updateInfo({
                    newVal: {
                        p1: e,
                        p2: t
                    }
                }) {
                    const i = this.getParent();
                    if (!i) return;
                    const r = i.getParent(),
                        [o, s] = r.getTimeExtent(),
                        {
                            xAxis: n
                        } = i,
                        {
                            unitWidth: a
                        } = n;
                    let l = Math.min(e.time, t.time),
                        c = Math.max(e.time, t.time);
                    l = Math.min(s, Math.max(o, l)), c = Math.max(o, Math.min(s, c));
                    const {
                        x: d
                    } = i.getPosition({ ...e,
                        time: l
                    }), {
                        x: h
                    } = i.getPosition({ ...e,
                        time: c
                    });
                    this.text1.setAttr("content", `${Math.round((h-d)/a)} ${i.getI18n(re.Tr.DRAW_BAR,"bars")}(${this._getFormatInterval(l,c,i)})`), this.text2.setAttr("content", `${i.formatterValue(t.value-e.value)}(${(0,oe.e8)((t.value-e.value)/e.value)})`);
                    const u = this.text1.getAttr("textWidth"),
                        g = this.text2.getAttr("textWidth");
                    this._textWidth = Math.ceil(Math.max(u, g))
                }
                _getFormatInterval(e, t, i) {
                    const r = t - e;
                    if (0 === r) return "no data";
                    const o = [],
                        s = Math.floor(r / re.b1.Day);
                    let n = r % re.b1.Day;
                    s > 0 && o.push(`${s}${i.getI18n(re.Tr.DRAW_DAY,"D")}`);
                    const a = Math.floor(n / re.b1.Hour);
                    n = r % re.b1.Hour, a > 0 && o.push(`${a}${i.getI18n(re.Tr.DRAW_HOUR,"h")}`);
                    const l = Math.floor(n / re.b1.Minute);
                    return l > 0 && o.push(`${l}${i.getI18n(re.Tr.DRAW_MINUTE,"m")}`), o.join(", ")
                }
                constructor() {
                    super(), this.rect = new rt.rw({
                        fillStyle: "rgba(42, 47, 55, 0.75)",
                        stroke: !1
                    }), this.barImage = new rt._V({
                        width: 16,
                        height: 16
                    }), this.priceDiffImage = new rt._V({
                        width: 16,
                        height: 16
                    }), this.text1 = it.A.text.clone().setAttrs({
                        fillStyle: "#E6E8EA",
                        textBaseline: "middle"
                    }), this.text2 = it.A.text.clone().setAttrs({
                        fillStyle: "#E6E8EA",
                        textBaseline: "middle"
                    }), this._textWidth = 0, this.setAttr("type", ie.X2.InfoLine), this.watch(["data"], this._updateInfo.bind(this))
                }
            };
            let ht = class extends it.A {
                updateImmediate() {
                    const e = this.getParent();
                    if (!e) return;
                    const {
                        mainPane: t,
                        axisPane: i,
                        timeAxisPane: r,
                        xAxis: o
                    } = e, s = i.bound.width, n = r.bound.height, {
                        width: a,
                        height: l
                    } = t.getBound(), c = this.getData(), {
                        x: d,
                        y: h
                    } = e.getPosition(c), u = this.getAttr("type");
                    u === ie.X2.VerticalLine ? this.line1.setData({
                        p1: {
                            x: d,
                            y: 0
                        },
                        p2: {
                            x: d,
                            y: -l
                        }
                    }) : u === ie.X2.HorizontalLine ? this.line1.setData({
                        p1: {
                            x: 0,
                            y: -h
                        },
                        p2: {
                            x: a,
                            y: -h
                        }
                    }) : u === ie.X2.CrossLine && (this.line1.setData({
                        p1: {
                            x: d,
                            y: 0
                        },
                        p2: {
                            x: d,
                            y: -l
                        }
                    }), this.line2.setData({
                        p1: {
                            x: 0,
                            y: -h
                        },
                        p2: {
                            x: a,
                            y: -h
                        }
                    })), this.xLabel.setAttrs({
                        data: {
                            x: d,
                            y: -n
                        },
                        text: (0, oe.Ni)(c.time, o.getTimeScaleType()),
                        fixHeight: n
                    }), this.yLabel.setAttrs({
                        data: {
                            x: 0,
                            y: -h
                        },
                        text: e.formatterValue(c.value),
                        fixWidth: s
                    }), this.dragVertex.setAttrs({
                        data: {
                            x: d - 6,
                            y: -h - 6
                        }
                    }), u === ie.X2.CrossLine ? this.addWidgetShapes(t, [this.line1, this.line2, this.dragVertex]) : this.addWidgetShapes(t, [this.line1, this.dragVertex]), this.addWidgetShapes(r, [this.xLabel]), this.addWidgetShapes(i, [this.yLabel]), this.setAnnotationToWidgets([t, r, i])
                }
                isCross() {
                    return this.getAttr("type") === ie.X2.CrossLine
                }
                getShapes() {
                    const e = [this.line1, this.dragVertex, this.xLabel, this.yLabel];
                    return this.isCross() && e.push(this.line2), e
                }
                updateColor(e) {
                    this.line1.setAttr("strokeStyle", e), this.line2.setAttr("strokeStyle", e)
                }
                updateLineWidth(e) {
                    this.line1.setAttr("lineWidth", e), this.line2.setAttr("lineWidth", e)
                }
                updateLineStyle(e) {
                    this.line1.setAttr("lineDash", e), this.line2.setAttr("lineDash", e)
                }
                initCustomEvents() {
                    this.on("mousedown", this._onmousedown.bind(this)), this.on("mousemove", ie.X2.HorizontalLine, this._highlightVertex.bind(this)), this.watch("data", this.updateImmediate.bind(this))
                }
                isHover(e) {
                    const t = this.getAttr("type");
                    return this.line1.isHover(e) || t === ie.X2.CrossLine && this.line2.isHover(e) || !!this.getDragVertex(e)
                }
                setVisibleShapes() {
                    const {
                        isEdit: e,
                        isHover: t
                    } = this.getConfig();
                    this.xLabel.setAttr("isVisible", e), this.yLabel.setAttr("isVisible", e), this.dragVertex.setAttrs({
                        isVisible: t || e,
                        lineWidth: e ? it.F.border_width : it.F.hover_border_width
                    })
                }
                getVertexs() {
                    return [this.dragVertex]
                }
                getDescription() {
                    const {
                        data: e,
                        type: t,
                        background: i,
                        color: r,
                        lineWidth: o,
                        lineStyle: s,
                        isLock: n
                    } = this.getConfig();
                    return {
                        data: e,
                        type: t,
                        color: r,
                        background: i,
                        isLock: n,
                        lineWidth: o,
                        lineStyle: s
                    }
                }
                _highlightVertex(e) {
                    const {
                        isEdit: t,
                        isHover: i
                    } = this.getConfig();
                    if (t || i) {
                        const {
                            mainPane: t
                        } = this.parent, {
                            x: i,
                            y: r
                        } = t.transformPointToView(e.point), o = {
                            x: i,
                            y: -r
                        };
                        this.updateHighlightVertexBorderWidth(this.dragVertex, this.dragVertex.isHover(o)) && this.update()
                    }
                }
                getDragVertex(e) {
                    const t = this.getAttr("type");
                    return this.dragVertex.isHover(e) ? this.dragVertex : this.line1.isHover(e) ? this.line1 : t === ie.X2.CrossLine && this.line2.isHover(e) ? this.line2 : void 0
                }
                _onmousedown(e) {
                    if (e.isDealed) return;
                    const t = this.getParent();
                    if (this.isDisableDrag()) return;
                    const {
                        x: i,
                        y: r
                    } = t.transformPointToView(e.point), o = {
                        x: i,
                        y: -r
                    };
                    let s = this.getDragVertex(o);
                    s && (this.setAttr("isEdit", !0), this.startDraw(), e.isDealed = !0, s instanceof rt.N1 ? this._dragLine(t, t.transformPointToView(e.point)) : (this.updateVertexBorderAndVisible(this.dragVertex, !0), this._dragVertex(t)))
                }
                _dragVertex(e) {
                    const {
                        mainPane: t
                    } = e;
                    t.on("mousemove", ie.X2.HorizontalLine, (e => {
                        const t = this.getPoint(e.point);
                        this.setData(t), this.update()
                    })), t.on("mouseup", ie.X2.HorizontalLine, (() => {
                        t.off(ie.X2.HorizontalLine), this.recoverDragVertexts(), this.compeleDraw()
                    }))
                }
                _dragLine(e, {
                    x: t,
                    y: i
                }) {
                    const {
                        mainPane: r
                    } = e, o = this.getData(), {
                        x: s,
                        y: n
                    } = e.getPosition(o), a = this.getAttr("type");
                    r.on("mousemove", ie.X2.HorizontalLine, (r => {
                        const {
                            x: o,
                            y: l
                        } = e.transformPointToView(r.point), c = o - t, d = l - i;
                        if (a === ie.X2.VerticalLine) {
                            if ((0, oe.be)(c)) return;
                            this.setData(e.getPlotItemByPosition(s + c, n))
                        } else if (a === ie.X2.HorizontalLine) {
                            if ((0, oe.be)(d)) return;
                            this.setData(e.getPlotItemByPosition(s, n + d))
                        } else if (a === ie.X2.CrossLine) {
                            if ((0, oe.be)(c) && (0, oe.be)(d)) return;
                            this.setData(e.getPlotItemByPosition(s + c, n + d))
                        }
                        this.update()
                    })), r.on("mouseup", ie.X2.HorizontalLine, (() => {
                        r.off(ie.X2.HorizontalLine), this.compeleDraw()
                    }))
                }
                constructor(...e) {
                    super(...e), this.config = { ...a()(it.A.defaultConfig),
                        type: ie.X2.HorizontalLine
                    }, this.line1 = it.A.line.clone(), this.line2 = it.A.line.clone(), this.yLabel = new rt.JU({
                        background: ie._j.Blue3,
                        color: ie._j.White,
                        dir: ie.OP.Right,
                        fill: !0,
                        padding: 6
                    }), this.xLabel = new rt.JU({
                        background: ie._j.Blue3,
                        color: ie._j.White,
                        dir: ie.OP.Down,
                        fill: !0,
                        padding: [6, 2]
                    }), this.dragVertex = it.A.dragRect.clone(["fillStyle", "strokeStyle"]).setAttrs({
                        width: 12,
                        height: 12
                    })
                }
            };
            var ut = i("0x5b");
            let gt = class extends it.A {
                    updateImmediate() {
                        const e = this.getParent();
                        if (!e) return;
                        const {
                            mainPane: t,
                            axisPane: i,
                            timeAxisPane: r,
                            xAxis: o
                        } = e, s = i.bound.width, n = r.bound.height, {
                            p1: a,
                            p2: l
                        } = this.getData(), {
                            x: c,
                            y: d
                        } = e.getPosition(a), {
                            x: h,
                            y: u
                        } = e.getPosition(l);
                        this.rect.setData({
                            x: c,
                            y: -d
                        }).setAnnotherVertex({
                            x: h,
                            y: -u
                        }), this.xLabel1.setAttrs({
                            data: {
                                x: c,
                                y: -n
                            },
                            text: (0, oe.Ni)(a.time, o.getTimeScaleType()),
                            fixHeight: n
                        }), this.xLabel2.setAttrs({
                            data: {
                                x: h,
                                y: -n
                            },
                            text: (0, oe.Ni)(l.time, o.getTimeScaleType()),
                            fixHeight: n
                        }), this.yLabel1.setAttrs({
                            data: {
                                x: 0,
                                y: -d
                            },
                            text: e.formatterValue(a.value),
                            fixWidth: s
                        }), this.yLabel2.setAttrs({
                            data: {
                                x: 0,
                                y: -u
                            },
                            text: e.formatterValue(l.value),
                            fixWidth: s
                        }), this.xRange.setAttrs({
                            data: {
                                x: Math.min(c, h),
                                y: -n
                            },
                            width: Math.abs(c - h),
                            height: r.bound.height
                        }), this.yRange.setAttrs({
                            data: {
                                x: 0,
                                y: -Math.max(d, u)
                            },
                            width: i.bound.width,
                            height: Math.abs(d - u)
                        }), this.dragVertex1.setAttrs({
                            data: {
                                x: c,
                                y: -d
                            }
                        }), this.dragVertex2.setAttrs({
                            data: {
                                x: h,
                                y: -d
                            }
                        }), this.dragVertex3.setAttrs({
                            data: {
                                x: h,
                                y: -u
                            }
                        }), this.dragVertex4.setAttrs({
                            data: {
                                x: c,
                                y: -u
                            }
                        }), this.addWidgetShapes(t, [this.rect, this.dragVertex1, this.dragVertex2, this.dragVertex3, this.dragVertex4]), this.addWidgetShapes(r, [this.xRange, this.xLabel1, this.xLabel2]), this.addWidgetShapes(i, [this.yRange, this.yLabel1, this.yLabel2]), this.setAnnotationToWidgets([t, r, i])
                    }
                    getShapes() {
                        return [this.rect, this.dragVertex1, this.dragVertex2, this.dragVertex3, this.dragVertex4, this.xRange, this.xLabel1, this.xLabel2, this.yRange, this.yLabel1, this.yLabel2]
                    }
                    initCustomEvents() {
                        this.on("mousedown", this._onmousedown.bind(this)), this.on("mousemove", ie.X2.Rectangle, this._highlightVertex.bind(this)), this.watch("data", this.updateImmediate.bind(this))
                    }
                    updateColor(e) {
                        this.rect.setAttrs({
                            stroke: !0,
                            strokeStyle: e
                        })
                    }
                    updateBackground(e) {
                        this.rect.setAttr("fillStyle", e)
                    }
                    updateLineWidth(e) {
                        this.rect.setAttrs({
                            stroke: !0,
                            lineWidth: e
                        })
                    }
                    updateLineStyle(e) {
                        this.rect.setAttrs({
                            stroke: !0,
                            lineDash: e
                        })
                    }
                    isHover(e) {
                        return this.rect.isHover(e) || !!this.getDragVertex(e)
                    }
                    setVisibleShapes() {
                        const {
                            isEdit: e,
                            isHover: t
                        } = this.getConfig();
                        this.xLabel1.setAttr("isVisible", e), this.xLabel2.setAttr("isVisible", e), this.xRange.setAttr("isVisible", e), this.yLabel1.setAttr("isVisible", e), this.yLabel2.setAttr("isVisible", e), this.yRange.setAttr("isVisible", e);
                        const i = {
                            isVisible: t || e,
                            radius: ut.F.radius,
                            lineWidth: e ? ut.F.border_width : ut.F.hover_border_width
                        };
                        this.updateVertex(this.getVertexs(), i)
                    }
                    getEditAttribute() {
                        const {
                            color: e,
                            lineWidth: t,
                            lineStyle: i,
                            background: r,
                            isLock: o
                        } = this.getConfig();
                        return {
                            showColor: !0,
                            color: e,
                            showWidth: !0,
                            lineWidth: t,
                            showStyle: !0,
                            lineStyle: i,
                            showBg: !0,
                            background: r,
                            isLock: o,
                            showTextColor: !1,
                            textColor: "",
                            showFontSize: !1,
                            textFontSize: 16,
                            showTextBold: !1,
                            isTextBold: !1,
                            showTextEdit: !1,
                            isTextEdit: !1,
                            showLock: !0,
                            showDelete: !0
                        }
                    }
                    _highlightVertex(e) {
                        const {
                            isEdit: t,
                            isHover: i
                        } = this.getConfig();
                        if (t || i) {
                            const {
                                mainPane: t
                            } = this.parent, {
                                x: i,
                                y: r
                            } = t.transformPointToView(e.point), o = {
                                x: i,
                                y: -r
                            }, s = this.updateHighlightVertexBorderWidth(this.dragVertex1, this.dragVertex1.isHover(o)), n = this.updateHighlightVertexBorderWidth(this.dragVertex2, this.dragVertex2.isHover(o)), a = this.updateHighlightVertexBorderWidth(this.dragVertex3, this.dragVertex3.isHover(o)), l = this.updateHighlightVertexBorderWidth(this.dragVertex4, this.dragVertex4.isHover(o));
                            (s || n || a || l) && this.update()
                        }
                    }
                    getVertexs() {
                        return [this.dragVertex1, this.dragVertex2, this.dragVertex3, this.dragVertex4]
                    }
                    getDragVertex(e) {
                        return this.dragVertex1.isHover(e) ? this.dragVertex1 : this.dragVertex2.isHover(e) ? this.dragVertex2 : this.dragVertex3.isHover(e) ? this.dragVertex3 : this.dragVertex4.isHover(e) ? this.dragVertex4 : this.rect.isHover(e) ? this.rect : void 0
                    }
                    _onmousedown(e) {
                        if (e.isDealed) return;
                        const t = this.getParent();
                        if (this.isDisableDrag() || !t) return;
                        const {
                            x: i,
                            y: r
                        } = t.transformPointToView(e.point), o = {
                            x: i,
                            y: -r
                        };
                        let s = this.getDragVertex(o);
                        s && (this.setAttr("isEdit", !0), this.startDraw(), e.isDealed = !0, s === this.rect ? this._dragRect(t, t.transformPointToView(e.point)) : (this.updateVertexBorderAndVisible(s, !0), this.updateVertexBorderAndVisible(this.getNoDragVertexs(s), !1), this._dragVertex(t, s)))
                    }
                    _dragVertex(e, t) {
                        const {
                            mainPane: i
                        } = e;
                        this.updateVertex(this.getNoDragVertexs(t), {
                            strokeStyle: ut.F.hover_border_color
                        }), i.on("mousemove", ie.X2.Rectangle, (e => {
                            const i = this.getPoint(e.point),
                                {
                                    p1: r,
                                    p2: o
                                } = this.getAttr("data");
                            t === this.dragVertex1 && this.setData({
                                p1: i,
                                p2: o
                            }), t === this.dragVertex2 && this.setData({
                                p1: {
                                    time: r.time,
                                    value: i.value
                                },
                                p2: {
                                    time: i.time,
                                    value: o.value
                                }
                            }), t === this.dragVertex3 && this.setData({
                                p1: r,
                                p2: i
                            }), t === this.dragVertex4 && this.setData({
                                p1: {
                                    time: i.time,
                                    value: r.value
                                },
                                p2: {
                                    time: o.time,
                                    value: i.value
                                }
                            }), this.update()
                        })), i.on("mouseup", ie.X2.Rectangle, (() => {
                            i.off(ie.X2.Rectangle), this.recoverDragVertexts(), this.compeleDraw()
                        }))
                    }
                    _dragRect(e, {
                        x: t,
                        y: i
                    }) {
                        const {
                            mainPane: r
                        } = e, {
                            p1: o,
                            p2: s
                        } = this.getData(), {
                            x: n,
                            y: a
                        } = e.getPosition(o), {
                            x: l,
                            y: c
                        } = e.getPosition(s);
                        let d = 0,
                            h = 0;
                        r.on("mousemove", ie.X2.Rectangle, (r => {
                            const {
                                x: o,
                                y: s
                            } = e.transformPointToView(r.point);
                            d = o - t, h = s - i;
                            const u = e.getPlotItemByPosition(n + d, a + h),
                                g = e.getPlotItemByPosition(l + d, c + h);
                            this.setData({
                                p1: u,
                                p2: g
                            }), this.update()
                        })), r.on("mouseup", ie.X2.Rectangle, (() => {
                            r.off(ie.X2.Rectangle), this.compeleDraw()
                        }))
                    }
                    constructor(...e) {
                        super(...e), this.config = { ...a()(it.A.defaultConfig),
                            type: ie.X2.Rectangle
                        }, this.rect = new rt.rw({
                            fillStyle: ut.F.default_area_color,
                            stroke: !1
                        }), this.yLabel1 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Right,
                            fill: !0,
                            padding: 6
                        }), this.yLabel2 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Right,
                            fill: !0,
                            padding: 6
                        }), this.xLabel1 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Down,
                            fill: !0,
                            padding: [6, 2]
                        }), this.xLabel2 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Down,
                            fill: !0,
                            padding: [6, 2]
                        }), this.xRange = new rt.rw({
                            fillStyle: "#2f3f59",
                            stroke: !1,
                            globalAlpha: .6
                        }), this.yRange = new rt.rw({
                            fillStyle: "#2f3f59",
                            stroke: !1,
                            globalAlpha: .6
                        }), this.dragVertex1 = it.A.dragVertex.clone(["fillStyle", "strokeStyle"]), this.dragVertex2 = it.A.dragVertex.clone(["fillStyle", "strokeStyle"]).setAttr("isVisible", !1), this.dragVertex3 = it.A.dragVertex.clone(["fillStyle", "strokeStyle"]).setAttr("isVisible", !1), this.dragVertex4 = it.A.dragVertex.clone(["fillStyle", "strokeStyle"]).setAttr("isVisible", !1)
                    }
                },
                pt = class extends it.A {
                    updateImmediate() {
                        const e = this.getParent();
                        if (!e) return;
                        const {
                            mainPane: t,
                            axisPane: i,
                            timeAxisPane: r,
                            xAxis: o
                        } = e, s = i.bound.width, n = r.bound.height;
                        let {
                            p1: a,
                            p2: l,
                            p3: c
                        } = this.getData();
                        const {
                            x: d,
                            y: h
                        } = e.getPosition(a), {
                            x: u,
                            y: g
                        } = e.getPosition(l), {
                            x: p,
                            y: m
                        } = e.getPosition(c), x = new nt.A.Vector2(u - d, g - h), f = new nt.A.Vector2(p - d, m - h), y = nt.A.Algorith.getCrossMultiply(x, f), b = (0, oe.be)(d - u), v = g - h + y / (u - d) + h, C = y / (u - d) + h, w = Math.min(h, g, m), A = Math.max(h, g, m);
                        if (this.path.setData([{
                                x: d,
                                y: -h
                            }, {
                                x: u,
                                y: -g
                            }, {
                                x: u,
                                y: -v
                            }, {
                                x: d,
                                y: -C
                            }]).setAttr("isVisible", !b), this.line1.setData({
                                p1: {
                                    x: d,
                                    y: -h
                                },
                                p2: {
                                    x: u,
                                    y: -g
                                }
                            }), this.line2.setData({
                                p1: {
                                    x: d,
                                    y: -C
                                },
                                p2: {
                                    x: u,
                                    y: -v
                                }
                            }).setAttr("isVisible", !b), this.xLabel1.setAttrs({
                                data: {
                                    x: d,
                                    y: -n
                                },
                                text: (0, oe.Ni)(a.time, o.getTimeScaleType()),
                                fixHeight: n
                            }), this.xLabel2.setAttrs({
                                data: {
                                    x: u,
                                    y: -n
                                },
                                text: (0, oe.Ni)(l.time, o.getTimeScaleType()),
                                fixHeight: n
                            }), this.yLabel1.setAttrs({
                                data: {
                                    x: 0,
                                    y: -h
                                },
                                text: e.formatterValue(a.value),
                                fixWidth: s
                            }), this.yLabel2.setAttrs({
                                data: {
                                    x: 0,
                                    y: -g
                                },
                                text: e.formatterValue(l.value),
                                fixWidth: s
                            }), this.yLabel3.setAttrs({
                                data: {
                                    x: 0,
                                    y: -m
                                },
                                text: e.formatterValue(c.value),
                                fixWidth: s
                            }), this.xRange.setAttrs({
                                data: {
                                    x: Math.min(d, u),
                                    y: -n
                                },
                                width: Math.abs(d - u),
                                height: r.bound.height
                            }), this.yRange.setAttrs({
                                data: {
                                    x: 0,
                                    y: -A
                                },
                                width: i.bound.width,
                                height: A - w
                            }), this.dragVertex1.setAttrs({
                                data: {
                                    x: d,
                                    y: -h
                                }
                            }), this.dragVertex2.setAttrs({
                                data: {
                                    x: u,
                                    y: -g
                                }
                            }), this.dragVertex3.setAttrs({
                                data: {
                                    x: .5 * (d + u),
                                    y: .5 * -(v + C)
                                }
                            }), this.getAttr("isEdit") && this.getAttr("isComplete") && !(0, oe.be)(d - u)) {
                            const t = e.getPlotItemByPosition(d, C);
                            this._diffPrice = t.value - a.value
                        }
                        this.addWidgetShapes(t, [this.path, this.line1, this.line2, this.dragVertex1, this.dragVertex2, this.dragVertex3]), this.addWidgetShapes(r, [this.xRange, this.xLabel1, this.xLabel2]), this.addWidgetShapes(i, [this.yRange, this.yLabel1, this.yLabel2, this.yLabel3]), this.setAnnotationToWidgets([t, r, i])
                    }
                    getShapes() {
                        return [this.path, this.line1, this.line2, this.dragVertex1, this.dragVertex2, this.dragVertex3, this.xRange, this.xLabel1, this.xLabel2, this.yRange, this.yLabel1, this.yLabel2, this.yLabel3]
                    }
                    updateColor(e) {
                        [this.line1, this.line2].forEach((t => {
                            t.setAttr("strokeStyle", e)
                        })), this.path.setAttrs({
                            stroke: !0,
                            strokeStyle: e
                        })
                    }
                    updateLineWidth(e) {
                        [this.line1, this.line2].forEach((t => {
                            t.setAttr("lineWidth", e)
                        })), this.path.setAttrs({
                            stroke: !0,
                            lineWidth: e
                        })
                    }
                    updateLineStyle(e) {
                        [this.line1, this.line2].forEach((t => {
                            t.setAttr("lineDash", e)
                        })), this.path.setAttrs({
                            stroke: !0,
                            lineDash: e
                        })
                    }
                    updateBackground(e) {
                        this.path.setAttr("fillStyle", e)
                    }
                    initCustomEvents() {
                        this.on("mousedown", this._onmousedown.bind(this)), this.on("mousemove", ie.X2.ParallelLine, this._highlightVertex.bind(this)), this.watch("data", this.updateImmediate.bind(this))
                    }
                    isHover(e) {
                        return this.path.isHover(e) || !!this.getDragVertex(e)
                    }
                    setVisibleShapes() {
                        const {
                            isEdit: e,
                            isHover: t
                        } = this.getConfig();
                        this.xLabel1.setAttr("isVisible", e), this.xLabel2.setAttr("isVisible", e), this.xRange.setAttr("isVisible", e), this.yLabel1.setAttr("isVisible", e), this.yLabel2.setAttr("isVisible", e), this.yLabel3.setAttr("isVisible", e), this.yRange.setAttr("isVisible", e);
                        const i = {
                            isVisible: t || e,
                            radius: ut.F.radius,
                            lineWidth: e ? ut.F.border_width : ut.F.hover_border_width
                        };
                        this.updateVertex(this.getVertexs(), i)
                    }
                    isValid() {
                        const {
                            p1: e,
                            p2: t,
                            p3: i
                        } = this.getData() || {};
                        return !!(e && t && i)
                    }
                    getEditAttribute() {
                        const {
                            color: e,
                            lineWidth: t,
                            lineStyle: i,
                            background: r,
                            isLock: o
                        } = this.getConfig();
                        return {
                            showColor: !0,
                            color: e,
                            showWidth: !0,
                            lineWidth: t,
                            showStyle: !0,
                            lineStyle: i,
                            showBg: !0,
                            background: r,
                            isLock: o,
                            showTextColor: !1,
                            textColor: "",
                            showFontSize: !1,
                            textFontSize: 16,
                            showTextBold: !1,
                            isTextBold: !1,
                            showTextEdit: !1,
                            isTextEdit: !1,
                            showLock: !0,
                            showDelete: !0
                        }
                    }
                    _highlightVertex(e) {
                        const {
                            isEdit: t,
                            isHover: i
                        } = this.getConfig();
                        if (t || i) {
                            const {
                                mainPane: t
                            } = this.parent, {
                                x: i,
                                y: r
                            } = t.transformPointToView(e.point), o = {
                                x: i,
                                y: -r
                            }, s = this.updateHighlightVertexBorderWidth(this.dragVertex1, this.dragVertex1.isHover(o)), n = this.updateHighlightVertexBorderWidth(this.dragVertex2, this.dragVertex2.isHover(o)), a = this.updateHighlightVertexBorderWidth(this.dragVertex3, this.dragVertex3.isHover(o));
                            (s || n || a) && this.update()
                        }
                    }
                    getVertexs() {
                        return [this.dragVertex1, this.dragVertex2, this.dragVertex3]
                    }
                    getDragVertex(e) {
                        return this.dragVertex1.isHover(e) ? this.dragVertex1 : this.dragVertex2.isHover(e) ? this.dragVertex2 : this.dragVertex3.isHover(e) ? this.dragVertex3 : this.line1.isHover(e) ? this.line1 : this.line2.isHover(e) ? this.line2 : void 0
                    }
                    _onmousedown(e) {
                        if (e.isDealed) return;
                        const t = this.getParent();
                        if (this.isDisableDrag() || !t) return;
                        const {
                            x: i,
                            y: r
                        } = t.transformPointToView(e.point), o = {
                            x: i,
                            y: -r
                        };
                        let s = this.getDragVertex(o);
                        s && (this.setAttr("isEdit", !0), this.startDraw(), e.isDealed = !0, s instanceof rt.N1 ? this._dragLine(t, {
                            x: i,
                            y: r
                        }) : (this.updateVertexBorderAndVisible(s, !0), this.updateVertexBorderAndVisible(this.getNoDragVertexs(s), !1), this._dragVertex(t, s)))
                    }
                    _dragVertex(e, t) {
                        const {
                            mainPane: i
                        } = e;
                        this.updateVertex(this.getNoDragVertexs(t), {
                            strokeStyle: ut.F.hover_border_color
                        }), i.on("mousemove", ie.X2.ParallelLine, (e => {
                            const i = this.getPoint(e.point),
                                {
                                    p1: r,
                                    p2: o
                                } = this.getAttr("data");
                            t === this.dragVertex1 && this.setData({
                                p1: i,
                                p2: o,
                                p3: {
                                    time: i.time,
                                    value: i.value + this._diffPrice
                                }
                            }), t === this.dragVertex2 && this.setData({
                                p1: r,
                                p2: i,
                                p3: {
                                    time: r.time,
                                    value: r.value + this._diffPrice
                                }
                            }), t === this.dragVertex3 && (this.setData({
                                p1: r,
                                p2: o,
                                p3: i
                            }), this._diffPrice = i.value - r.value), this.update()
                        })), i.on("mouseup", ie.X2.ParallelLine, (() => {
                            i.off(ie.X2.ParallelLine), this.recoverDragVertexts(), this.compeleDraw()
                        }))
                    }
                    _dragLine(e, {
                        x: t,
                        y: i
                    }) {
                        const {
                            mainPane: r
                        } = e, {
                            p1: o,
                            p2: s,
                            p3: n
                        } = this.getData(), {
                            x: a,
                            y: l
                        } = e.getPosition(o), {
                            x: c,
                            y: d
                        } = e.getPosition(s), {
                            x: h,
                            y: u
                        } = e.getPosition(n);
                        let g = 0,
                            p = 0;
                        r.on("mousemove", ie.X2.ParallelLine, (r => {
                            const {
                                x: o,
                                y: s
                            } = e.transformPointToView(r.point);
                            g = o - t, p = s - i;
                            const n = e.getPlotItemByPosition(a + g, l + p),
                                m = e.getPlotItemByPosition(c + g, d + p),
                                x = e.getPlotItemByPosition(h + g, u + p);
                            this.setData({
                                p1: n,
                                p2: m,
                                p3: x
                            }), this.update()
                        })), r.on("mouseup", ie.X2.ParallelLine, (() => {
                            r.off(ie.X2.ParallelLine), this.compeleDraw(), this.recoverDragVertexts(), this.update()
                        }))
                    }
                    constructor(...e) {
                        super(...e), this.config = { ...a()(it.A.defaultConfig),
                            type: ie.X2.ParallelLine
                        }, this.path = new rt.wA({
                            fillStyle: ut.F.default_area_color,
                            stroke: !1
                        }), this.line1 = it.A.line.clone(), this.line2 = it.A.line.clone(), this.yLabel1 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Right,
                            fill: !0,
                            padding: 6
                        }), this.yLabel2 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Right,
                            fill: !0,
                            padding: 6
                        }), this.yLabel3 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Right,
                            fill: !0,
                            padding: 6
                        }), this.xLabel1 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Down,
                            fill: !0,
                            padding: [6, 2]
                        }), this.xLabel2 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Down,
                            fill: !0,
                            padding: [6, 2]
                        }), this.xRange = new rt.rw({
                            fillStyle: "#2f3f59",
                            stroke: !1,
                            globalAlpha: .6
                        }), this.yRange = new rt.rw({
                            fillStyle: "#2f3f59",
                            stroke: !1,
                            globalAlpha: .6
                        }), this.dragVertex1 = it.A.dragVertex.clone(["fillStyle", "strokeStyle"]), this.dragVertex2 = it.A.dragVertex.clone(["fillStyle", "strokeStyle"]).setAttr("isVisible", !1), this.dragVertex3 = it.A.dragVertex.clone(["fillStyle", "strokeStyle"]).setAttr("isVisible", !1)
                    }
                },
                mt = class extends it.A {
                    updateImmediate() {
                        const e = this.getParent();
                        if (!e) return;
                        const {
                            mainPane: t,
                            axisPane: i,
                            timeAxisPane: r,
                            xAxis: o
                        } = e, s = i.bound.width, n = r.bound.height, {
                            p1: a,
                            p2: l
                        } = this.getData(), {
                            x: c,
                            y: d
                        } = e.getPosition(a), {
                            x: h,
                            y: u
                        } = e.getPosition(l), g = d - u, p = a.value - l.value, m = Math.min(c, h) - 10;
                        this.rect.setData({
                            x: c,
                            y: -d
                        }).setAnnotherVertex({
                            x: h,
                            y: -u
                        });
                        let x = -u,
                            f = l.value;
                        this.line1.setAttrs({
                            data: {
                                p1: {
                                    x: c,
                                    y: x
                                },
                                p2: {
                                    x: h,
                                    y: x
                                }
                            }
                        }), this.text1.setAttrs({
                            content: `0(${e.formatterValue(f)})`,
                            data: {
                                x: m,
                                y: -u
                            }
                        }), x = -(u + .382 * g), f = l.value + .382 * p, this.line2.setAttrs({
                            data: {
                                p1: {
                                    x: c,
                                    y: x
                                },
                                p2: {
                                    x: h,
                                    y: x
                                }
                            }
                        }), this.text2.setAttrs({
                            content: `0.382(${e.formatterValue(f)})`,
                            data: {
                                x: m,
                                y: x
                            }
                        }), x = -(u + .5 * g), f = l.value + .5 * p, this.line3.setData({
                            p1: {
                                x: c,
                                y: x
                            },
                            p2: {
                                x: h,
                                y: x
                            }
                        }), this.text3.setAttrs({
                            content: `0.5(${e.formatterValue(f)})`,
                            data: {
                                x: m,
                                y: x
                            }
                        }), x = -(u + .618 * g), f = l.value + .618 * p, this.line4.setData({
                            p1: {
                                x: c,
                                y: x
                            },
                            p2: {
                                x: h,
                                y: x
                            }
                        }), this.text4.setAttrs({
                            content: `0.618(${e.formatterValue(f)})`,
                            data: {
                                x: m,
                                y: x
                            }
                        }), x = -d, f = a.value, this.line5.setData({
                            p1: {
                                x: c,
                                y: x
                            },
                            p2: {
                                x: h,
                                y: x
                            }
                        }), this.text5.setAttrs({
                            content: `1(${e.formatterValue(f)})`,
                            data: {
                                x: m,
                                y: x
                            }
                        }), this.line6.setData({
                            p1: {
                                x: c,
                                y: -d
                            },
                            p2: {
                                x: h,
                                y: -u
                            }
                        }), this.xLabel1.setAttrs({
                            data: {
                                x: c,
                                y: -n
                            },
                            text: (0, oe.Ni)(a.time, o.getTimeScaleType()),
                            fixHeight: n
                        }), this.xLabel2.setAttrs({
                            data: {
                                x: h,
                                y: -n
                            },
                            text: (0, oe.Ni)(l.time, o.getTimeScaleType()),
                            fixHeight: n
                        }), this.yLabel1.setAttrs({
                            data: {
                                x: 0,
                                y: -d
                            },
                            text: e.formatterValue(a.value),
                            fixWidth: s
                        }), this.yLabel2.setAttrs({
                            data: {
                                x: 0,
                                y: -u
                            },
                            text: e.formatterValue(l.value),
                            fixWidth: s
                        }), this.xRange.setAttrs({
                            data: {
                                x: Math.min(c, h),
                                y: -n
                            },
                            width: Math.abs(c - h),
                            height: r.bound.height
                        }), this.yRange.setAttrs({
                            data: {
                                x: 0,
                                y: -Math.max(d, u)
                            },
                            width: i.bound.width,
                            height: Math.abs(d - u)
                        }), this.dragVertex1.setAttrs({
                            data: {
                                x: c,
                                y: -d
                            }
                        }), this.dragVertex2.setAttrs({
                            data: {
                                x: h,
                                y: -u
                            }
                        }), this.addWidgetShapes(t, [this.rect, this.line1, this.line2, this.line3, this.line4, this.line5, this.line6, this.text1, this.text2, this.text3, this.text4, this.text5, this.dragVertex1, this.dragVertex2]), this.addWidgetShapes(r, [this.xRange, this.xLabel1, this.xLabel2]), this.addWidgetShapes(i, [this.yRange, this.yLabel1, this.yLabel2]), this.setAnnotationToWidgets([t, r, i])
                    }
                    getShapes() {
                        return [this.rect, this.line1, this.line2, this.line3, this.line4, this.line5, this.line6, this.text1, this.text2, this.text3, this.text4, this.text5, this.dragVertex1, this.dragVertex2, this.xRange, this.xLabel1, this.xLabel2, this.yRange, this.yLabel1, this.yLabel2]
                    }
                    updateColor(e) {
                        [this.line1, this.line2, this.line3, this.line4, this.line5, this.line6].forEach((t => {
                            t.setAttr("strokeStyle", e)
                        }));
                        [this.text1, this.text2, this.text3, this.text4, this.text5].forEach((t => {
                            t.setAttr("fillStyle", e)
                        })), this.rect.setAttrs({
                            stroke: !0,
                            strokeStyle: e
                        })
                    }
                    updateLineWidth(e) {
                        [this.line1, this.line2, this.line3, this.line4, this.line5, this.line6].forEach((t => {
                            t.setAttr("lineWidth", e)
                        })), this.rect.setAttrs({
                            stroke: !0,
                            lineWidth: e
                        })
                    }
                    updateLineStyle(e) {
                        [this.line1, this.line2, this.line3, this.line4, this.line5, this.line6].forEach((t => {
                            t.setAttr("lineDash", e)
                        })), this.rect.setAttrs({
                            stroke: !0,
                            lineDash: e
                        })
                    }
                    updateBackground(e) {
                        this.rect.setAttr("fillStyle", e)
                    }
                    initCustomEvents() {
                        this.on("mousedown", this._onmousedown.bind(this)), this.on("mousemove", ie.X2.FibonacciLine, this._highlightVertex.bind(this)), this.watch("data", this.updateImmediate.bind(this))
                    }
                    isHover(e) {
                        return this.rect.isHover(e) || !!this.getDragVertex(e)
                    }
                    setVisibleShapes() {
                        const {
                            isEdit: e,
                            isHover: t
                        } = this.getConfig();
                        this.xLabel1.setAttr("isVisible", e), this.xLabel2.setAttr("isVisible", e), this.xRange.setAttr("isVisible", e), this.yLabel1.setAttr("isVisible", e), this.yLabel2.setAttr("isVisible", e), this.yRange.setAttr("isVisible", e);
                        const i = {
                            isVisible: t || e,
                            radius: it.F.radius,
                            lineWidth: e ? it.F.border_width : it.F.hover_border_width
                        };
                        this.updateVertex(this.getVertexs(), i)
                    }
                    getEditAttribute() {
                        const {
                            color: e,
                            lineWidth: t,
                            lineStyle: i,
                            background: r,
                            isLock: o
                        } = this.getConfig();
                        return {
                            showColor: !0,
                            color: e,
                            showWidth: !0,
                            lineWidth: t,
                            showStyle: !0,
                            lineStyle: i,
                            showBg: !0,
                            background: r,
                            isLock: o,
                            showTextColor: !1,
                            textColor: "",
                            showFontSize: !1,
                            textFontSize: 16,
                            showTextBold: !1,
                            isTextBold: !1,
                            showTextEdit: !1,
                            isTextEdit: !1,
                            showLock: !0,
                            showDelete: !0
                        }
                    }
                    _highlightVertex(e) {
                        const {
                            isEdit: t,
                            isHover: i
                        } = this.getConfig();
                        if (t || i) {
                            const {
                                mainPane: t
                            } = this.parent, {
                                x: i,
                                y: r
                            } = t.transformPointToView(e.point), o = {
                                x: i,
                                y: -r
                            }, s = this.updateHighlightVertexBorderWidth(this.dragVertex1, this.dragVertex1.isHover(o)), n = this.updateHighlightVertexBorderWidth(this.dragVertex2, this.dragVertex2.isHover(o));
                            (s || n) && this.update()
                        }
                    }
                    getVertexs() {
                        return [this.dragVertex1, this.dragVertex2]
                    }
                    getDragVertex(e) {
                        return this.dragVertex1.isHover(e) ? this.dragVertex1 : this.dragVertex2.isHover(e) ? this.dragVertex2 : this.rect.isHover(e) ? this.rect : void 0
                    }
                    _onmousedown(e) {
                        const t = this.getParent();
                        if (this.isDisableDrag() || !t) return;
                        const {
                            x: i,
                            y: r
                        } = t.transformPointToView(e.point), o = {
                            x: i,
                            y: -r
                        };
                        let s = this.getDragVertex(o);
                        s && (this.setAttr("isEdit", !0), this.startDraw(), e.isDealed = !0, s === this.rect ? this._dragRect(t, t.transformPointToView(e.point)) : (this.updateVertexBorderAndVisible(s, !0), this.updateVertexBorderAndVisible(this.getNoDragVertexs(s), !1), this._dragVertex(t, s)))
                    }
                    _dragVertex(e, t) {
                        const {
                            mainPane: i
                        } = e;
                        this.updateVertex(this.getNoDragVertexs(t), {
                            strokeStyle: it.F.hover_border_color
                        }), i.on("mousemove", ie.X2.FibonacciLine, (e => {
                            const i = this.getPoint(e.point),
                                {
                                    p1: r,
                                    p2: o
                                } = this.getAttr("data");
                            t === this.dragVertex1 && this.setData({
                                p1: i,
                                p2: o
                            }), t === this.dragVertex2 && this.setData({
                                p1: r,
                                p2: i
                            }), this.update()
                        })), i.on("mouseup", ie.X2.FibonacciLine, (() => {
                            i.off(ie.X2.FibonacciLine), this.recoverDragVertexts(), this.compeleDraw()
                        }))
                    }
                    _dragRect(e, {
                        x: t,
                        y: i
                    }) {
                        const {
                            mainPane: r
                        } = e, {
                            p1: o,
                            p2: s
                        } = this.getData(), {
                            x: n,
                            y: a
                        } = e.getPosition(o), {
                            x: l,
                            y: c
                        } = e.getPosition(s);
                        let d = 0,
                            h = 0;
                        r.on("mousemove", ie.X2.FibonacciLine, (r => {
                            const {
                                x: o,
                                y: s
                            } = e.transformPointToView(r.point);
                            d = o - t, h = s - i;
                            const u = e.getPlotItemByPosition(n + d, a + h),
                                g = e.getPlotItemByPosition(l + d, c + h);
                            this.setData({
                                p1: u,
                                p2: g
                            }), this.update()
                        })), r.on("mouseup", ie.X2.FibonacciLine, (() => {
                            r.off(ie.X2.FibonacciLine), this.compeleDraw()
                        }))
                    }
                    constructor(...e) {
                        super(...e), this.config = { ...a()(it.A.defaultConfig),
                            type: ie.X2.FibonacciLine
                        }, this.rect = new rt.rw({
                            fillStyle: it.F.default_line_color,
                            strokeStyle: it.F.default_line_color,
                            stroke: !1
                        }), this.line1 = it.A.line.clone(), this.line2 = it.A.line.clone(), this.line3 = it.A.line.clone(), this.line4 = it.A.line.clone(), this.line5 = it.A.line.clone(), this.line6 = it.A.line.clone().setAttrs({
                            lineDash: [3, 3]
                        }), this.text1 = it.A.text.clone(["fillStyle"]).setAttrs({
                            textAlign: "right",
                            textBaseline: "middle"
                        }), this.text2 = it.A.text.clone(["fillStyle"]).setAttrs({
                            textAlign: "right",
                            textBaseline: "middle"
                        }), this.text3 = it.A.text.clone(["fillStyle"]).setAttrs({
                            textAlign: "right",
                            textBaseline: "middle"
                        }), this.text4 = it.A.text.clone(["fillStyle"]).setAttrs({
                            textAlign: "right",
                            textBaseline: "middle"
                        }), this.text5 = it.A.text.clone(["fillStyle"]).setAttrs({
                            textAlign: "right",
                            textBaseline: "middle"
                        }), this.yLabel1 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Right,
                            fill: !0,
                            padding: 6
                        }), this.yLabel2 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Right,
                            fill: !0,
                            padding: 6
                        }), this.xLabel1 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Down,
                            fill: !0,
                            padding: [6, 2]
                        }), this.xLabel2 = new rt.JU({
                            background: ie._j.Blue3,
                            color: ie._j.White,
                            dir: ie.OP.Down,
                            fill: !0,
                            padding: [6, 2]
                        }), this.xRange = new rt.rw({
                            fillStyle: "#2f3f59",
                            stroke: !1
                        }), this.yRange = new rt.rw({
                            fillStyle: "#2f3f59",
                            stroke: !1
                        }), this.dragVertex1 = it.A.dragVertex.clone(["fillStyle", "strokeStyle"]), this.dragVertex2 = it.A.dragVertex.clone(["fillStyle", "strokeStyle"]).setAttr("isVisible", !1)
                    }
                };
            var xt, ft = i("jg2Q");
            ! function(e) {
                e.Up = "UP", e.Down = "DOWN", e.Right = "RIGHT", e.Left = "LEFT"
            }(xt || (xt = {}));
            let yt = class e {
                static createArrowData(t, i = "RIGHT") {
                    const r = "RIGHT" === i ? -this.Arrow_Offset : this.Arrow_Offset,
                        o = new ft.A(t.x + r, t.y),
                        s = new ft.A(0, 1).rotate(120),
                        n = new ft.A(0, 0),
                        a = n.clone().add(s.clone().scale(e.Arrow_Len)),
                        l = n.clone().substract(new ft.A(e.Arrow_Len / 2, 0)),
                        c = l.clone().substract(new ft.A(e.Arrow_Len, 0)),
                        d = new ft.A(a.x, -a.y);
                    return [l, a, n, d, l, c].map("RIGHT" === i ? e => e.clone().add(o).toXY() : e => e.clone().rotate(180).add(o).toXY())
                }
                static createArrowPath(e, t, i = {
                    arrowLen: 12,
                    len: 27,
                    arrowAngle: 45
                }) {
                    const r = i.arrowLen || 12,
                        o = i.len || 27,
                        s = i.arrowAngle || 45,
                        n = new ft.A(e.x, e.y),
                        a = n.clone().add(t.clone().rotate(s).scale(r)).toXY(),
                        l = n.clone().add(t.clone().rotate(-s).scale(r)).toXY(),
                        c = n.clone().add(t.clone().scale(o)).toXY(),
                        d = n.toXY();
                    return [
                        [a, d, l],
                        [d, c]
                    ]
                }
            };
            yt.Arrow_Len = 8, yt.Arrow_Offset = 5;
            let bt = class extends it.A {
                    updateImmediate() {
                        const e = this.getParent();
                        if (!e) return;
                        const {
                            mainPane: t
                        } = e, i = this.getData(), {
                            x: r,
                            y: o
                        } = e.getPosition(i), s = this._getDirVector(), n = yt.createArrowPath({
                            x: r,
                            y: -o
                        }, s);
                        this.paths.setData(n), this.dragVertex.setAttrs({
                            data: new nt.A.Vector2(r, -o).add(s.clone().rotate(180).scale(15)).toXY()
                        }), this.addWidgetShapes(t, [this.paths, this.dragVertex]), this.setAnnotationToWidgets([t])
                    }
                    getShapes() {
                        return [this.paths, this.dragVertex]
                    }
                    getDescription() {
                        const {
                            data: e,
                            type: t,
                            color: i,
                            isLock: r
                        } = this.getConfig();
                        return {
                            data: e,
                            type: t,
                            color: i,
                            isLock: r
                        }
                    }
                    getRenderPanes() {
                        const e = this.getParent();
                        if (!e) return [];
                        const {
                            mainPane: t
                        } = e;
                        return [t]
                    }
                    initCustomEvents() {
                        this.on("mousedown", this._onmousedown.bind(this)), this.on("mousemove", `${ie.X2.LeftArrow}-${re.Io.MOUSE}`, this._highlightVertex.bind(this)), this.watch("data", this.updateImmediate.bind(this))
                    }
                    isHover(e) {
                        return this.paths.isHover(e, 20) || !!this.getDragVertex(e)
                    }
                    setVisibleShapes() {
                        const {
                            isEdit: e,
                            isHover: t
                        } = this.getConfig();
                        this.dragVertex.setAttrs({
                            isVisible: t || e,
                            radius: it.F.radius,
                            lineWidth: e ? it.F.border_width : it.F.hover_border_width
                        })
                    }
                    getVertexs() {
                        return [this.dragVertex]
                    }
                    getEditAttribute() {
                        const {
                            color: e,
                            isLock: t
                        } = this.getConfig();
                        return {
                            showColor: !0,
                            color: e,
                            showWidth: !1,
                            lineWidth: 1,
                            showStyle: !1,
                            lineStyle: "",
                            showBg: !1,
                            background: "",
                            isLock: t,
                            showTextColor: !1,
                            textColor: "",
                            showFontSize: !1,
                            textFontSize: 16,
                            showTextBold: !1,
                            isTextBold: !1,
                            showTextEdit: !1,
                            isTextEdit: !1,
                            showLock: !0,
                            showDelete: !0
                        }
                    }
                    updateColor(e) {
                        this.paths.setAttr("strokeStyle", e)
                    }
                    _highlightVertex(e) {
                        const {
                            isEdit: t,
                            isHover: i
                        } = this.getConfig();
                        if (t || i) {
                            const {
                                mainPane: t
                            } = this.parent, {
                                x: i,
                                y: r
                            } = t.transformPointToView(e.point), o = {
                                x: i,
                                y: -r
                            };
                            this.updateHighlightVertexBorderWidth(this.dragVertex, this.dragVertex.isHover(o)) && this.update()
                        }
                    }
                    getDragVertex(e) {
                        return this.dragVertex.isHover(e) ? this.dragVertex : this.paths.isHover(e) ? this.paths : void 0
                    }
                    _onmousedown(e) {
                        if (e.isDealed) return;
                        const t = this.getParent();
                        if (this.isDisableDrag() || !t) return;
                        const {
                            x: i,
                            y: r
                        } = t.transformPointToView(e.point), o = {
                            x: i,
                            y: -r
                        };
                        let s = this.getDragVertex(o);
                        s && (this.setAttr("isEdit", !0), this.startDraw(), e.isDealed = !0, s instanceof rt.Jh ? this._dragPaths(t) : (this.updateVertexBorderAndVisible(this.dragVertex, !0), this._dragVertex(t, t.transformPointToView(e.point))))
                    }
                    _getDirVector() {
                        const e = this.getAttr("type"),
                            t = new nt.A.Vector2(1, 0);
                        return e === ie.X2.DownArrow && t.rotate(-90), e === ie.X2.UpArrow && t.rotate(90), e === ie.X2.RightArrow && t.rotate(180), t
                    }
                    _dragVertex(e, t) {
                        const {
                            mainPane: i
                        } = e, r = this.getAttr("type"), o = this.getData(), s = e.getPosition(o);
                        i.on("mousemove", `${r}-${re.Io.MOUSE}`, (i => {
                            const r = e.transformPointToView(i.point).x - t.x,
                                o = this.getPoint({
                                    x: s.x + r,
                                    y: i.point.y
                                });
                            this.setData(o), this.update()
                        })), i.on("mouseup", `${r}-${re.Io.MOUSE}`, (() => {
                            i.off(`${r}-${re.Io.MOUSE}`), this.recoverDragVertexts(), this.compeleDraw()
                        }))
                    }
                    _dragPaths(e) {
                        const {
                            mainPane: t
                        } = e, i = this.getAttr("type");
                        t.on("mousemove", `${i}-${re.Io.MOUSE}`, (e => {
                            const t = this.getPoint(e.point);
                            this.setData(t), this.update()
                        })), t.on("mouseup", `${i}-${re.Io.MOUSE}`, (() => {
                            t.off(`${i}-${re.Io.MOUSE}`), this.compeleDraw()
                        }))
                    }
                    constructor(...e) {
                        super(...e), this.config = { ...a()(it.A.defaultConfig),
                            type: ie.X2.LeftArrow
                        }, this.paths = (new rt.Jh).setAttrs({
                            strokeStyle: it.F.default_line_color,
                            lineWidth: 4,
                            fill: !1,
                            lineJoin: "bevel"
                        }), this.dragVertex = it.A.dragVertex.clone(["fillStyle", "strokeStyle"])
                    }
                },
                vt = class extends ot {
                    updateImmediate() {
                        const e = this.getParent();
                        if (!e) return;
                        const {
                            mainPane: t,
                            axisPane: i,
                            timeAxisPane: r,
                            xAxis: o
                        } = e, s = i.bound.width, n = r.bound.height, {
                            p1: a,
                            p2: l
                        } = this.getData(), c = e.getPosition(a), {
                            x: d,
                            y: h
                        } = c, u = e.getPosition(l), {
                            x: g,
                            y: p
                        } = u, {
                            width: m,
                            height: x
                        } = t.getBound();
                        if (nt.A.Algorith.isSamePoint(c, u)) this.line.setData({
                            p1: {
                                x: d,
                                y: -h
                            },
                            p2: {
                                x: g,
                                y: -p
                            }
                        });
                        else {
                            const e = new nt.A.Bound(0, 0, m, x),
                                t = nt.A.Line.getIntersectWidthBound(c, u, e);
                            if (2 === t.length) {
                                const e = new nt.A.Vector2(g - d, p - h),
                                    i = new nt.A.Vector2(t[0].x - d, t[0].y - h),
                                    r = new nt.A.Vector2(t[1].x - d, t[1].y - h),
                                    o = nt.A.Algorith.getDotMultiply(e, i) > 0,
                                    s = nt.A.Algorith.getDotMultiply(e, r) > 0;
                                if (o && s) {
                                    const e = i.getSquareLength() > r.getSquareLength() ? t[0] : t[1];
                                    this.line.setData({
                                        p1: {
                                            x: d,
                                            y: -h
                                        },
                                        p2: {
                                            x: e.x,
                                            y: -e.y
                                        }
                                    })
                                } else s ? this.line.setData({
                                    p1: {
                                        x: d,
                                        y: -h
                                    },
                                    p2: {
                                        x: t[1].x,
                                        y: -t[1].y
                                    }
                                }) : this.line.setData({
                                    p1: {
                                        x: d,
                                        y: -h
                                    },
                                    p2: {
                                        x: t[0].x,
                                        y: -t[0].y
                                    }
                                })
                            }
                        }
                        this.xLabel1.setAttrs({
                            data: {
                                x: d,
                                y: -n
                            },
                            text: (0, oe.Ni)(a.time, o.getTimeScaleType()),
                            fixHeight: n
                        }), this.xLabel2.setAttrs({
                            data: {
                                x: g,
                                y: -n
                            },
                            text: (0, oe.Ni)(l.time, o.getTimeScaleType()),
                            fixHeight: n
                        }), this.yLabel1.setAttrs({
                            data: {
                                x: 0,
                                y: -h
                            },
                            text: e.formatterValue(a.value),
                            fixWidth: s
                        }), this.yLabel2.setAttrs({
                            data: {
                                x: 0,
                                y: -p
                            },
                            text: e.formatterValue(l.value),
                            fixWidth: s
                        }), this.xRange.setAttrs({
                            data: {
                                x: Math.min(d, g),
                                y: -n
                            },
                            width: Math.abs(d - g),
                            height: r.bound.height
                        }), this.yRange.setAttrs({
                            data: {
                                x: 0,
                                y: -Math.max(h, p)
                            },
                            width: i.bound.width,
                            height: Math.abs(h - p)
                        }), this.dragVertex1.setAttrs({
                            data: {
                                x: d,
                                y: -h
                            }
                        }), this.dragVertex2.setAttrs({
                            data: {
                                x: g,
                                y: -p
                            }
                        }), this.addWidgetShapes(t, [this.line, this.dragVertex1, this.dragVertex2]), this.addWidgetShapes(r, [this.xRange, this.xLabel1, this.xLabel2]), this.addWidgetShapes(i, [this.yRange, this.yLabel1, this.yLabel2]), this.setAnnotationToWidgets([t, r, i])
                    }
                    constructor() {
                        super(), this.setAttr("type", ie.X2.RayLine)
                    }
                };
            let Ct = class extends it.A {
                    updateImmediate() {
                        const e = this.getParent();
                        if (!e) return;
                        const {
                            mainPane: t
                        } = e, i = this.getData(), {
                            x: r,
                            y: o
                        } = e.getPosition(i), {
                            width: s
                        } = t.getBound();
                        this.line.setData({
                            p1: {
                                x: r,
                                y: -o
                            },
                            p2: {
                                x: s,
                                y: -o
                            }
                        }), this.text.setData({
                            x: r,
                            y: -(o + 10)
                        }).setText(`${e.formatterValue(i.value)}`), this.dragVertex.setData({
                            x: r,
                            y: -o
                        }), this.addWidgetShapes(t, [this.line, this.dragVertex, this.text]), this.setAnnotationToWidgets([t])
                    }
                    getShapes() {
                        return [this.line, this.dragVertex, this.text]
                    }
                    updateColor(e) {
                        this.line.setAttr("strokeStyle", e), this.text.setAttr("fillStyle", e)
                    }
                    updateLineWidth(e) {
                        this.line.setAttr("lineWidth", e)
                    }
                    updateLineStyle(e) {
                        this.line.setAttr("lineDash", e)
                    }
                    initCustomEvents() {
                        this.on("mousedown", this._onmousedown.bind(this)), this.on("mousemove", ie.X2.HorizontalLine, this._highlightVertex.bind(this)), this.watch("data", this.updateImmediate.bind(this))
                    }
                    isHover(e) {
                        return this.line.isHover(e) || !!this.getDragVertex(e)
                    }
                    setVisibleShapes() {
                        const {
                            isEdit: e,
                            isHover: t
                        } = this.getConfig();
                        this.dragVertex.setAttrs({
                            isVisible: t || e,
                            lineWidth: e ? it.F.border_width : it.F.hover_border_width
                        })
                    }
                    getVertexs() {
                        return [this.dragVertex]
                    }
                    _highlightVertex(e) {
                        const {
                            isEdit: t,
                            isHover: i
                        } = this.getConfig();
                        if (t || i) {
                            const {
                                mainPane: t
                            } = this.parent, {
                                x: i,
                                y: r
                            } = t.transformPointToView(e.point), o = {
                                x: i,
                                y: -r
                            };
                            this.updateHighlightVertexBorderWidth(this.dragVertex, this.dragVertex.isHover(o)) && this.update()
                        }
                    }
                    getDragVertex(e) {
                        return this.dragVertex.isHover(e) ? this.dragVertex : this.line.isHover(e) ? this.line : void 0
                    }
                    _onmousedown(e) {
                        if (e.isDealed) return;
                        const t = this.getParent();
                        if (this.isDisableDrag() || !t) return;
                        const {
                            x: i,
                            y: r
                        } = t.transformPointToView(e.point), o = {
                            x: i,
                            y: -r
                        };
                        let s = this.getDragVertex(o);
                        s && (this.setAttr("isEdit", !0), this.startDraw(), e.isDealed = !0, s instanceof rt.N1 ? this._dragLine(t, t.transformPointToView(e.point)) : (this.updateVertexBorderAndVisible(this.dragVertex, !0), this._dragVertex(t)))
                    }
                    _dragVertex(e) {
                        const {
                            mainPane: t
                        } = e;
                        t.on("mousemove", ie.X2.HorizontalLine, (e => {
                            const t = this.getPoint(e.point);
                            this.setData(t), this.update()
                        })), t.on("mouseup", ie.X2.HorizontalLine, (() => {
                            t.off(ie.X2.HorizontalLine), this.recoverDragVertexts(), this.compeleDraw()
                        }))
                    }
                    _dragLine(e, {
                        x: t,
                        y: i
                    }) {
                        const {
                            mainPane: r
                        } = e, o = this.getData(), {
                            x: s,
                            y: n
                        } = e.getPosition(o);
                        r.on("mousemove", ie.X2.HorizontalLine, (r => {
                            const {
                                x: o,
                                y: a
                            } = e.transformPointToView(r.point), l = o - t, c = a - i;
                            (0, oe.be)(l) && (0, oe.be)(c) || (this.setData(e.getPlotItemByPosition(s + l, n + c)), this.update())
                        })), r.on("mouseup", ie.X2.HorizontalLine, (() => {
                            r.off(ie.X2.HorizontalLine), this.compeleDraw()
                        }))
                    }
                    constructor() {
                        super(), this.config = { ...a()(it.A.defaultConfig),
                            type: ie.X2.PriceLine
                        }, this.line = it.A.line.clone(), this.text = it.A.text.clone().setAttrs({
                            textAlign: "left",
                            textBaseline: "bottom"
                        }), this.dragVertex = it.A.dragVertex.clone(["fillStyle", "strokeStyle"]), this.setAttr("type", ie.X2.PriceLine)
                    }
                },
                wt = class extends ot {
                    updateImmediate() {
                        const e = this.getParent();
                        if (!e) return;
                        const {
                            mainPane: t,
                            axisPane: i,
                            timeAxisPane: r,
                            xAxis: o
                        } = e, s = i.bound.width, n = r.bound.height, {
                            p1: a,
                            p2: l
                        } = this.getData(), c = e.getPosition(a), {
                            x: d,
                            y: h
                        } = c, u = e.getPosition(l), {
                            x: g,
                            y: p
                        } = u, [m] = yt.createArrowPath({
                            x: g,
                            y: p
                        }, new nt.A.Vector2(d - g, h - p).normalize(), {
                            arrowAngle: 30
                        });
                        this.path.setData(m.map((({
                            x: e,
                            y: t
                        }) => ({
                            x: e,
                            y: -t
                        })))), this.line.setData({
                            p1: {
                                x: d,
                                y: -h
                            },
                            p2: {
                                x: g,
                                y: -p
                            }
                        }), this.xLabel1.setAttrs({
                            data: {
                                x: d,
                                y: -n
                            },
                            text: (0, oe.Ni)(a.time, o.getTimeScaleType()),
                            fixHeight: n
                        }), this.xLabel2.setAttrs({
                            data: {
                                x: g,
                                y: -n
                            },
                            text: (0, oe.Ni)(l.time, o.getTimeScaleType()),
                            fixHeight: n
                        }), this.yLabel1.setAttrs({
                            data: {
                                x: 0,
                                y: -h
                            },
                            text: e.formatterValue(a.value),
                            fixWidth: s
                        }), this.yLabel2.setAttrs({
                            data: {
                                x: 0,
                                y: -p
                            },
                            text: e.formatterValue(l.value),
                            fixWidth: s
                        }), this.xRange.setAttrs({
                            data: {
                                x: Math.min(d, g),
                                y: -n
                            },
                            width: Math.abs(d - g),
                            height: r.bound.height
                        }), this.yRange.setAttrs({
                            data: {
                                x: 0,
                                y: -Math.max(h, p)
                            },
                            width: i.bound.width,
                            height: Math.abs(h - p)
                        }), this.dragVertex1.setAttrs({
                            data: {
                                x: d,
                                y: -h
                            }
                        }), this.dragVertex2.setAttrs({
                            data: {
                                x: g,
                                y: -p
                            }
                        }), this.addWidgetShapes(t, [this.line, this.path, this.dragVertex1, this.dragVertex2]), this.addWidgetShapes(r, [this.xRange, this.xLabel1, this.xLabel2]), this.addWidgetShapes(i, [this.yRange, this.yLabel1, this.yLabel2]), this.setAnnotationToWidgets([t, r, i])
                    }
                    getShapes() {
                        return [this.line, this.path, this.dragVertex1, this.dragVertex2, this.xRange, this.xLabel1, this.xLabel2, this.yRange, this.yLabel1, this.yLabel2]
                    }
                    getDragVertex(e) {
                        return this.dragVertex1.isHover(e) ? this.dragVertex1 : this.dragVertex2.isHover(e) ? this.dragVertex2 : this.line.isHover(e) || this.path.isHover(e) ? this.line : void 0
                    }
                    updateColor(e) {
                        this.line.setAttr("strokeStyle", e), this.path.setAttr("strokeStyle", e)
                    }
                    updateLineWidth(e) {
                        this.line.setAttr("lineWidth", e), this.path.setAttr("lineWidth", e)
                    }
                    updateLineStyle(e) {
                        this.line.setAttr("lineDash", e), this.path.setAttr("lineDash", e)
                    }
                    constructor() {
                        super(), this.path = new rt.wA({
                            strokeStyle: it.F.default_line_color,
                            lineWidth: 1,
                            fill: !1
                        }), this.setAttr("type", ie.X2.ArrowLine)
                    }
                };
            var At = i("qIYA");
            let St = class extends it.A {
                updateImmediate() {
                    const e = this.getParent();
                    if (!e) return;
                    !this._textArea && this.createTextAreaElement();
                    const {
                        mainPane: t,
                        axisPane: i,
                        timeAxisPane: r,
                        xAxis: o
                    } = e, s = i.bound.width, n = r.bound.height, a = this.getData(), {
                        x: l,
                        y: c
                    } = e.getPosition(a);
                    this.setTextAreaPosition(e.transformXYToAbsoluteXY({
                        x: l,
                        y: c
                    })), this.text.setData(this.transformYPoint({
                        x: l,
                        y: c
                    })), this.xLabel.setAttrs({
                        data: {
                            x: l,
                            y: -n
                        },
                        text: (0, oe.Ni)(a.time, o.getTimeScaleType()),
                        fixHeight: n
                    }), this.yLabel.setAttrs({
                        data: {
                            x: 0,
                            y: -c
                        },
                        text: e.formatterValue(a.value),
                        fixWidth: s
                    }), this.addWidgetShapes(t, [this.text]), this.setAnnotationToWidgets([t]), this.addWidgetShapes(r, [this.xLabel]), this.addWidgetShapes(i, [this.yLabel]), this.setAnnotationToWidgets([t, r, i])
                }
                getShapes() {
                    return [this.text, this.xLabel, this.yLabel]
                }
                updateBackground(e) {
                    this.text.setAttrs({
                        fill: !0,
                        background: e
                    })
                }
                updateTextColor(e) {
                    this.text.setAttr("fillStyle", e)
                }
                updateTextSize(e) {
                    this.text.setAttr("fontSize", e)
                }
                updateTextBold(e) {
                    this.text.setAttr("fontVariant", e)
                }
                getDescription() {
                    const {
                        data: e,
                        type: t,
                        text: i,
                        isLock: r,
                        textColor: o,
                        background: s,
                        textFontSize: n,
                        isTextBold: a
                    } = this.getConfig();
                    return {
                        data: e,
                        type: t,
                        text: i,
                        textColor: o,
                        background: s,
                        textFontSize: n,
                        isTextBold: a,
                        isLock: r
                    }
                }
                getEditAttribute() {
                    const {
                        textColor: e,
                        textFontSize: t,
                        isTextBold: i,
                        background: r,
                        isTextEdit: o,
                        isLock: s
                    } = this.getConfig();
                    return {
                        showColor: !1,
                        color: "",
                        showWidth: !1,
                        lineWidth: 1,
                        showStyle: !1,
                        lineStyle: ie.Sc.SOLID,
                        showTextColor: !0,
                        textColor: e,
                        showFontSize: !0,
                        textFontSize: t,
                        showTextBold: !0,
                        isTextBold: i,
                        showBg: !0,
                        background: r,
                        isLock: s,
                        showTextEdit: !0,
                        isTextEdit: o,
                        showLock: !0,
                        showDelete: !0
                    }
                }
                getRenderPanes() {
                    const e = this.getParent();
                    if (!e) return [];
                    const {
                        mainPane: t,
                        axisPane: i,
                        timeAxisPane: r
                    } = e;
                    return [t, i, r]
                }
                initCustomEvents() {
                    this.on("mousedown", this._onmousedown.bind(this)), this.on("dblclick", `${ie.X2.Text}-${re.Io.MOUSE}`, this._dblclick.bind(this)), this.watch("data", this.updateImmediate.bind(this)), this.watch("text", (({
                        newVal: e = ""
                    }) => {
                        const t = e.split("\n").filter((e => !!e));
                        this.text.setText(t)
                    })), this.watch("isTextEdit", (({
                        newVal: e
                    }) => {
                        e && this._activateEdit(), this.setVisibleShapes()
                    }))
                }
                isHover(e) {
                    const {
                        isTextEdit: t
                    } = this.getConfig();
                    return !t && this.text.isHover(e)
                }
                setVisibleShapes() {
                    const {
                        isEdit: e,
                        isTextEdit: t
                    } = this.getConfig();
                    this.xLabel.setAttr("isVisible", e), this.yLabel.setAttr("isVisible", e), this.text.setAttr("isVisible", !t), !t && this._textArea && this._textArea.remove()
                }
                getVertexs() {
                    return []
                }
                setTextAreaPosition(e) {
                    const t = this.getAttr("isTextEdit"),
                        i = this.text.getWidth(),
                        r = this.text.getHeight();
                    (0, oe.EM)(this._textArea, {
                        width: `${Math.max(150,Math.min(200,i))}px`,
                        height: `${Math.max(100,Math.min(150,r))}px`,
                        transform: `translate(${e.x}px, ${e.y}px)`,
                        visibility: t ? "visible" : "hidden",
                        fontVariant: this.getAttr("isTextBold") ? "bold" : "normal",
                        color: this.getAttr("textColor")
                    })
                }
                _activateEdit() {
                    const e = this.getParent();
                    if (!e) return;
                    const t = e.getParent();
                    (0, oe.EM)(this._textArea, {
                        visibility: "visible"
                    }), t.addElement(this._textArea), this._textArea.value = this.getAttr("text") || "", this.setAttr("isTextEdit", !0), this.setVisibleShapes(), this.update()
                }
                _dblclick(e) {
                    const t = this.getParent();
                    if (!t) return;
                    const {
                        x: i,
                        y: r
                    } = t.transformPointToView(e.point);
                    this.text.isHover({
                        x: i,
                        y: -r
                    }) && !this._textArea.parentNode && (this.setAttr("isTextEdit", !0), this.setAttr("isEdit", !0))
                }
                getDragVertex(e) {
                    if (this.text.isHover(e)) return this.text
                }
                _onmousedown(e) {
                    if (e.isDealed) return;
                    const t = this.getParent();
                    if (this.isDisableDrag() || !t) return;
                    const {
                        x: i,
                        y: r
                    } = t.transformPointToView(e.point), o = {
                        x: i,
                        y: -r
                    };
                    let s = this.getDragVertex(o);
                    s && (this.setAttr("isEdit", !0), this.startDraw(), e.isDealed = !0, s instanceof rt.EY && this._dragText({
                        parent: t,
                        initialPoint: t.transformPointToView(e.point)
                    }))
                }
                _dragText({
                    parent: e,
                    initialPoint: t
                }) {
                    const {
                        mainPane: i
                    } = e, r = this.getData(), o = e.getPosition(r);
                    i.on("mousemove", `${ie.X2.Text}-${re.Io.MOUSE}`, (i => {
                        const r = e.transformPointToView(i.point).x - t.x,
                            s = this.getPoint({
                                x: o.x + r,
                                y: i.point.y
                            });
                        this.setData(s), this.update()
                    })), i.on("mouseup", `${ie.X2.Text}-${re.Io.MOUSE}`, (() => {
                        i.off(`${ie.X2.Text}-${re.Io.MOUSE}`), this.setAttrs({
                            isTextEdit: !1,
                            isComplete: !0
                        })
                    }))
                }
                createTextAreaElement() {
                    const e = this.getParent();
                    if (this._textArea = (0, oe.n)("textarea", {
                            visibility: "hidden"
                        }, "text-area-wrap"), e) {
                        e.getParent().addElement(this._textArea)
                    }
                    this._textArea.addEventListener("input", (0, oe.nF)((() => {
                        const {
                            value: e = ""
                        } = this._textArea;
                        this.setAttr("text", e)
                    }), 10)), At.A.on(document, "mousedown", (e => {
                        const t = this.getAttr("isTextEdit"),
                            {
                                originEvent: i
                            } = e;
                        t && i && !i.target.contains(this._textArea) && (this._textArea.remove(), this.compeleDraw(), this.update())
                    }), !0)
                }
                compeleDraw() {
                    this.setAttrs({
                        isTextEdit: !1,
                        isComplete: !0
                    }), this.syncStorage()
                }
                constructor(...e) {
                    super(...e), this.config = { ...a()(it.A.defaultConfig),
                        isTextEdit: !1,
                        type: ie.X2.Text,
                        text: ""
                    }, this.text = it.A.text.clone().setAttrs({
                        fillStyle: "#848E9C",
                        fontSize: 16,
                        textBaseline: "top",
                        padding: 4,
                        isCustomized: !0,
                        isVisible: !1
                    }), this.xLabel = new rt.JU({
                        background: ie._j.Blue3,
                        color: ie._j.White,
                        dir: ie.OP.Down,
                        fill: !0,
                        padding: [6, 2]
                    }), this.yLabel = new rt.JU({
                        background: ie._j.Blue3,
                        color: ie._j.White,
                        dir: ie.OP.Right,
                        fill: !0,
                        padding: 6
                    })
                }
            };
            var Tt = i("sR6W"),
                kt = i.n(Tt),
                Lt = i("QeOg"),
                _t = i.n(Lt),
                Pt = i("nbv6"),
                Dt = i.n(Pt),
                It = i("JGBb");
            let Vt = class extends it.A {
                isIndependent() {
                    return !0
                }
                updateImmediate() {
                    const e = this.getParent();
                    if (!e) return;
                    const {
                        mainPane: t,
                        axisPane: i
                    } = e, r = [];
                    this.instances.forEach((o => {
                        o.draw({
                            panel: e
                        }), this.addWidgetShapes(t, o.getMainPaneShapes()), this.addWidgetShapes(i, o.getPriceAxisPaneShapes()), r.push(...o.getTooltipShapes())
                    })), this.addWidgetShapes(t, r), this.setAnnotationToWidgets([t, i])
                }
                getShapes() {
                    return Dt()(this.instances, (e => e.getShapes()))
                }
                getDescription() {
                    const {
                        type: e,
                        isNeedStore: t
                    } = this.getConfig();
                    return {
                        type: e,
                        isNeedStore: t
                    }
                }
                getEditAttribute() {
                    const {
                        textColor: e,
                        textFontSize: t,
                        isTextBold: i,
                        background: r,
                        isTextEdit: o,
                        isLock: s
                    } = this.getConfig();
                    return {
                        showColor: !1,
                        color: "",
                        showWidth: !1,
                        lineWidth: 1,
                        showStyle: !1,
                        lineStyle: ie.Sc.SOLID,
                        showTextColor: !1,
                        textColor: e,
                        showFontSize: !1,
                        textFontSize: t,
                        showTextBold: !1,
                        isTextBold: i,
                        showBg: !1,
                        background: r,
                        isLock: s,
                        showTextEdit: !1,
                        isTextEdit: o,
                        showLock: !1,
                        showDelete: !1
                    }
                }
                getRenderPanes() {
                    const e = this.getParent();
                    if (!e) return [];
                    const {
                        mainPane: t,
                        axisPane: i
                    } = e;
                    return [t, i]
                }
                initCustomEvents() {
                    this.on("mousedown", this._onmousedown.bind(this)), this.on("mousemove", ie.X2.OpenOrders, this._onMousemove.bind(this)), this.watch("data", this.updateImmediate.bind(this)), this.watch("orders", (({
                        newVal: e
                    }) => {
                        this.clearShapes();
                        const t = e.map((e => e.id)),
                            i = this.instances.map((e => e.id)),
                            r = kt()(i, t),
                            o = _t()(i, r),
                            s = _t()(r, t);
                        r.forEach((t => {
                            const i = e.find((e => e.id === t)),
                                r = this.instances.find((e => e.id === t));
                            i && r && r.update(i)
                        })), o.forEach((e => {
                            const t = this.instances.findIndex((t => t.id === e));
                            t < 0 || this.instances.splice(t, 1)
                        })), s.forEach((t => {
                            const i = e.find((e => e.id === t));
                            i && this.instances.push(new It.d(i))
                        })), this.forceUpdate()
                    }))
                }
                isHover(e) {
                    return this.instances.some((t => t.isHovered(e)))
                }
                isHoverDragable(e) {
                    const t = this.getTopmostHoveredInstance(e);
                    return Boolean(t ? .dragIconBorder.isHover(e) || t ? .priceLabel.isHover(e))
                }
                isDragging() {
                    return this.instances.some((e => e.isDragging()))
                }
                updateBackground() {}
                setVisibleShapes() {}
                getVertexs() {
                    return []
                }
                _onmousedown(e) {
                    const t = this.getParent();
                    if (e.isDealed || !t) return;
                    const {
                        x: i,
                        y: r
                    } = t.transformPointToView(e.point), o = {
                        x: i,
                        y: -r
                    }, s = this.getTopmostHoveredInstance(o);
                    s ? .handleMouseDown({
                        pt: o,
                        panel: t,
                        setDealed: () => e.isDealed = !0
                    })
                }
                _onMousemove(e) {
                    const t = this.getParent();
                    if (!t) return;
                    const {
                        x: i,
                        y: r
                    } = t.transformPointToView(e.point), o = {
                        x: i,
                        y: -r
                    }, s = this.getTopmostHoveredInstance(o);
                    this.instances.forEach((e => {
                        e !== s && e.hideTooltip()
                    })), s ? .handleShowTooltip(o), this.update()
                }
                getTopmostHoveredInstance(e) {
                    let t;
                    for (let i = this.instances.length - 1; i > -1; i--)
                        if (this.instances[i].isHovered(e)) {
                            t = this.instances[i];
                            break
                        }
                    return t
                }
                forceUpdate() {
                    this.setAttr("data", []), this.update()
                }
                constructor(...e) {
                    super(...e), this.config = { ...a()(it.A.defaultConfig),
                        orders: [],
                        isNeedStore: !1
                    }, this.instances = []
                }
            };
            var Mt = i("7N5u"),
                Bt = i.n(Mt),
                Et = i("g6+1"),
                jt = i.n(Et),
                Ot = i("mQ6W"),
                Ht = i.n(Ot),
                Rt = i("0Igy"),
                Nt = i.n(Rt);
            const Wt = e => ({ ...e,
                    buySell: {
                        upArrow: new rt.Ge({
                            width: 8,
                            height: 4,
                            path: "M8.5 4L0.5 4L4.5 0L8.5 4Z",
                            fillStyle: "#848E9C",
                            strokeStyle: "#474D57",
                            fill: !0,
                            stroke: !1
                        }),
                        downArrow: new rt.Ge({
                            width: 8,
                            height: 4,
                            path: "M8.5 0 L4.5 4 L0.5 0 L8.5 0Z",
                            fillStyle: "#848E9C",
                            strokeStyle: "#474D57",
                            fill: !0,
                            stroke: !1
                        }),
                        rect: new rt.rw({
                            width: 14,
                            height: 14,
                            borderRadius: 4
                        }),
                        sign: new rt.EY
                    },
                    arrow: {
                        upArrow: new rt.Ge({
                            width: 8,
                            height: 12,
                            path: "M4.35355 0.646446C4.15829 0.451184 3.84171 0.451184 3.64645 0.646446L0.464466 3.82843C0.269204 4.02369 0.269204 4.34027 0.464466 4.53553C0.659728 4.7308 0.97631 4.7308 1.17157 4.53553L4 1.70711L6.82843 4.53553C7.02369 4.7308 7.34027 4.7308 7.53553 4.53553C7.7308 4.34027 7.7308 4.02369 7.53553 3.82843L4.35355 0.646446ZM4.5 11L4.5 1L3.5 1L3.5 11L4.5 11Z",
                            fillStyle: "#848E9C",
                            strokeStyle: "#474D57",
                            fill: !0,
                            stroke: !1
                        }),
                        downArrow: new rt.Ge({
                            width: 8,
                            height: 12,
                            path: "M3.64645 10.3536C3.84171 10.5488 4.15829 10.5488 4.35355 10.3536L7.53553 7.17157C7.7308 6.97631 7.7308 6.65973 7.53553 6.46447C7.34027 6.2692 7.02369 6.2692 6.82843 6.46447L4 9.29289L1.17157 6.46447C0.97631 6.2692 0.659728 6.2692 0.464466 6.46447C0.269204 6.65973 0.269204 6.97631 0.464466 7.17157L3.64645 10.3536ZM3.5 -2.18557e-08L3.5 10L4.5 10L4.5 2.18557e-08L3.5 -2.18557e-08Z",
                            fillStyle: "#848E9C",
                            strokeStyle: "#474D57",
                            fill: !0,
                            stroke: !1
                        })
                    },
                    tooltipContainer: {
                        tooltip: new rt.JU({
                            background: "gray",
                            color: ie._j.White,
                            borderColor: "gray",
                            dir: ie.OP.Right,
                            fill: !0,
                            stroke: !0,
                            padding: [12, 8],
                            fontSize: 14,
                            lineWidth: 1,
                            borderRadius: 8,
                            isVisible: !1,
                            font: "400 14px BinancePlex",
                            arrowHeight: 4
                        })
                    }
                }),
                Ft = ({
                    startX: e,
                    startY: t,
                    isBuy: i,
                    text: r,
                    textColor: o,
                    borderColor: s,
                    backgroundColor: n,
                    tooltipBackgroundColor: a,
                    tooltipBorderColor: l,
                    tooltipTextColor: c,
                    buySell: {
                        upArrow: d,
                        downArrow: h,
                        sign: u,
                        rect: g
                    },
                    arrow: p,
                    tooltipContainer: {
                        tooltip: m
                    },
                    inverted: x
                }, f) => {
                    Object.keys(p).forEach((e => {
                        p[e].setAttrs({
                            isVisible: !1
                        })
                    }));
                    const y = e - g.getWidth() / 2,
                        b = (g.getHeight() - u.getHeight()) / 2,
                        v = -(6 + g.getHeight()) * (f + 1),
                        C = 6 * (f + 1) + g.getHeight() * f,
                        w = t + (x ? i ? v : C : i ? C : v),
                        A = e - u.getWidth() / 2,
                        S = w + b,
                        T = e - d.getWidth() / 2,
                        k = w - d.getHeight() + 1,
                        L = w + g.getHeight() - 1,
                        _ = e - m.getWidth() / 2,
                        P = w - d.getHeight() - 14 - 4;
                    g.setAttrs({
                        data: {
                            x: y,
                            y: w
                        },
                        fillStyle: n,
                        strokeStyle: s,
                        isVisible: !0
                    }), u.setAttrs({
                        data: {
                            x: A,
                            y: S
                        },
                        content: i ? "B" : "S",
                        fillStyle: o,
                        isVisible: !0
                    }), d.setAttrs({
                        data: {
                            x: T,
                            y: k
                        },
                        fillStyle: n,
                        strokeStyle: s,
                        isVisible: x ? !i : i
                    }), h.setAttrs({
                        data: {
                            x: T,
                            y: L
                        },
                        fillStyle: n,
                        strokeStyle: s,
                        isVisible: x ? i : !i
                    }), m.setAttrs({
                        data: {
                            x: _,
                            y: P
                        },
                        text: r,
                        borderColor: l,
                        background: a,
                        color: c
                    })
                },
                zt = ({
                    startX: e,
                    startY: t,
                    isBuy: i,
                    text: r,
                    borderColor: o,
                    backgroundColor: s,
                    tooltipBackgroundColor: n,
                    tooltipBorderColor: a,
                    tooltipTextColor: l,
                    arrow: {
                        upArrow: c,
                        downArrow: d
                    },
                    buySell: h,
                    tooltipContainer: {
                        tooltip: u
                    },
                    inverted: g
                }, p) => {
                    Object.keys(h).forEach((e => {
                        h[e].setAttrs({
                            isVisible: !1
                        })
                    }));
                    const m = e - c.getWidth() / 2,
                        x = -(5 + c.getHeight()) * (p + 1),
                        f = 5 * (p + 1) + c.getHeight() * p,
                        y = t + (g ? i ? x : f : i ? f : x),
                        b = e - u.getWidth() / 2,
                        v = y - c.getHeight() - 14 - 4;
                    c.setAttrs({
                        data: {
                            x: m,
                            y: y
                        },
                        fillStyle: s,
                        strokeStyle: o,
                        isVisible: g ? !i : i
                    }), d.setAttrs({
                        data: {
                            x: m,
                            y: y
                        },
                        fillStyle: s,
                        strokeStyle: o,
                        isVisible: g ? i : !i
                    }), u.setAttrs({
                        data: {
                            x: b,
                            y: v
                        },
                        text: r,
                        borderColor: a,
                        background: n,
                        color: l
                    })
                };
            let Xt = class extends it.A {
                isIndependent() {
                    return !0
                }
                updateImmediate() {
                    const e = this.getParent();
                    if (!e) return;
                    const {
                        mainPane: t,
                        xAxis: i
                    } = e, r = e.getParent(), o = r.settingStore.getValue("@symbol.candlestick.executionOrderStyle"), s = r.settingStore.getValue("@contextMenu.invertedScale"), n = this.executionOrders.map((t => {
                        const {
                            time: r = t.time,
                            high: o = 0,
                            low: n = 0,
                            close: a = 0
                        } = this.getCurrentItemByTime(t.time) || {}, {
                            h: l,
                            l: c
                        } = this.getHighLow({
                            high: o,
                            low: n,
                            close: a
                        }), d = i ? .getCoordOfValue(r);
                        return {
                            candlestickTime: r,
                            high: o,
                            low: n,
                            startX: d,
                            startY: -e.getYPos(t.isBuy ? c : l),
                            inverted: s,
                            ...t
                        }
                    })), a = Bt()(n, "candlestickTime");
                    Object.keys(a).forEach((e => {
                        Ht()(a[e], "isBuy").forEach((e => {
                            const t = jt()(e, "time");
                            o === pe.Jy.BuySell ? t.forEach(Ft) : t.forEach(zt)
                        }))
                    })), this.addWidgetShapes(t, this.getShapes()), this.setAnnotationToWidgets([t])
                }
                getShapes() {
                    const e = Nt()(this.executionOrders.map((e => [e.buySell.upArrow, e.buySell.downArrow, e.arrow.upArrow, e.arrow.downArrow]))),
                        t = this.executionOrders.map((e => e.buySell.sign));
                    return [...this.executionOrders.map((e => e.buySell.rect)), ...t, ...e, ...this.executionOrders.map((e => e.tooltipContainer.tooltip))]
                }
                getDescription() {
                    const {
                        data: e,
                        type: t,
                        isNeedStore: i
                    } = this.getConfig();
                    return {
                        id: this.id,
                        data: e,
                        type: t,
                        isNeedStore: i
                    }
                }
                getRenderPanes() {
                    const e = this.getParent();
                    if (!e) return [];
                    const {
                        mainPane: t
                    } = e;
                    return [t]
                }
                initCustomEvents() {
                    this.on("mousemove", ie.X2.ExecutionOrders, this._onMousemove.bind(this)), this.watch("data", this.updateImmediate.bind(this)), this.watch("orders", (({
                        newVal: e
                    }) => {
                        this.clearShapes(), this.executionOrders = e.map(Wt), this.forceUpdate()
                    }))
                }
                isHover(e) {
                    return this.executionOrders.reduce(((t, i) => t && (i.buySell.upArrow.isHover(e) || i.buySell.downArrow.isHover(e) || i.arrow.upArrow.isHover(e) || i.arrow.downArrow.isHover(e))), !1)
                }
                setVisibleShapes() {}
                getVertexs() {
                    return []
                }
                _onMousemove(e) {
                    const t = this.getParent();
                    if (!t) return;
                    const i = t.getParent().settingStore.getValue("@symbol.candlestick.executionOrderStyle"),
                        {
                            x: r,
                            y: o
                        } = t.transformPointToView(e.point),
                        s = {
                            x: r,
                            y: -o
                        };
                    this.executionOrders.forEach((({
                        buySell: e,
                        arrow: t,
                        tooltipContainer: r
                    }) => {
                        const o = i === pe.Jy.BuySell ? e.upArrow.isHover(s) || e.downArrow.isHover(s) || e.rect.isHover(s) : t.upArrow.isHover(s) || t.downArrow.isHover(s),
                            n = !!r.tooltip.getAttr("text") && o;
                        r.tooltip.setAttrs({
                            isVisible: n
                        })
                    })), this.update()
                }
                compeleDraw() {
                    this.setAttrs({
                        isComplete: !0
                    })
                }
                forceUpdate() {
                    this.setAttr("data", []), this.update()
                }
                getHighLow(e) {
                    const t = this.getParent() ? .getParent(),
                        i = t ? .settingStore.getValue("@symbol.candlestick.type");
                    return (0, We.l5)({
                        chartType: i,
                        candlestickItem: e
                    })
                }
                getCurrentItemByTime(e) {
                    const t = this.getParent();
                    if (!t) return;
                    const {
                        xAxis: i
                    } = t;
                    if (!i) return;
                    const r = t.getParent(),
                        o = i.getTimeUnitValue(),
                        s = r.getVisibleSeriesData();
                    if (s && !(s.length < 1))
                        for (let n = 0; n < s.length; n++) {
                            const t = e - s[n].time;
                            if (t < 0) return;
                            if (t < o) return s[n]
                        }
                }
                constructor(...e) {
                    super(...e), this.config = { ...a()(it.A.defaultConfig),
                        type: ie.X2.ExecutionOrders,
                        isNeedStore: !1,
                        orders: []
                    }, this.executionOrders = []
                }
            };
            const Ut = class {
                getShapes() {
                    return [this.label, this.priceLabel, this.line]
                }
                getWidth() {
                    const e = Fe.A.measureTextWidth(this.text),
                        t = Fe.A.measureTextWidth(this.priceText);
                    return Math.max(e, t) + 10
                }
                getHeight() {
                    return this.height
                }
                draw(e, t) {
                    const i = e.getYPos(this.price),
                        r = this.getWidth();
                    let o = t;
                    this.label.setAttrs({
                        data: {
                            x: o,
                            y: -i - this.label.getHeight() / 2 + 1
                        },
                        text: this.text,
                        fixWidth: r
                    }), this.priceLabel.setAttrs({
                        data: {
                            x: o,
                            y: -i + this.priceLabel.getHeight() / 2
                        },
                        text: this.priceText,
                        fixWidth: r
                    }), o += r, this.line.setAttrs({
                        data: {
                            p1: {
                                x: o,
                                y: -i
                            },
                            p2: {
                                x: e.mainPane.getBound().width,
                                y: -i
                            }
                        }
                    })
                }
                isHover(e) {
                    return this.label.isHover(e)
                }
                constructor({
                    price: e,
                    text: t,
                    textBackground: i = "#0ECB81",
                    textColor: r = ie._j.White,
                    textBorderColor: o = "#474D57",
                    priceText: s,
                    priceBackground: n = "#0ECB81",
                    priceColor: a = ie._j.White,
                    priceBorderColor: l = "#474D57",
                    lineColor: c = "#0ECB81",
                    lineDash: d = [1, 1],
                    group: h = ""
                }) {
                    this.price = e, this.text = t, this.priceText = s, this.height = 36, this.group = h, this.label = new rt.JU({
                        background: i,
                        color: r,
                        borderColor: o,
                        dir: ie.OP.Right,
                        stroke: !0,
                        fill: !0,
                        fixHeight: this.height / 2,
                        lineWidth: 1,
                        borderRadius: [4, 4, 0, 0]
                    }), this.priceLabel = new rt.JU({
                        background: n,
                        color: a,
                        borderColor: l,
                        dir: ie.OP.Right,
                        stroke: !0,
                        fill: !0,
                        fixHeight: this.height / 2,
                        lineWidth: 1,
                        borderRadius: [0, 0, 4, 4]
                    }), this.line = new rt.N1({
                        strokeStyle: c,
                        lineDash: d
                    })
                }
            };
            let Gt = class extends it.A {
                    isIndependent() {
                        return !0
                    }
                    updateImmediate() {
                        const e = this.getParent();
                        if (!e || !e.yAxis) return;
                        const {
                            mainPane: t
                        } = e;
                        Object.keys(this.labelLines).forEach((t => {
                            const i = this.labelLines[t];
                            t.length > 0 ? i.forEach(((t, r) => {
                                const o = i[r - 1];
                                if (o) {
                                    const i = e.getYPos(o.price),
                                        r = e.getYPos(t.price),
                                        s = t.getHeight(),
                                        n = t.getWidth(),
                                        a = i - r < s / 2 ? n : 0;
                                    t.draw(e, a)
                                } else t.draw(e, 0)
                            })) : i.forEach((t => {
                                t.draw(e, 0)
                            }))
                        })), this.addWidgetShapes(t, this.getShapes()), this.setAnnotationToWidgets([t])
                    }
                    getShapes() {
                        return Object.keys(this.labelLines).reduce(((e, t) => [...e, ...Dt()(this.labelLines[t], (e => e.getShapes()))]), [])
                    }
                    getDescription() {
                        const {
                            type: e,
                            isNeedStore: t
                        } = this.getConfig();
                        return {
                            id: this.id,
                            type: e,
                            isNeedStore: t
                        }
                    }
                    getEditAttribute() {
                        const {
                            textColor: e,
                            textFontSize: t,
                            isTextBold: i,
                            background: r,
                            isTextEdit: o,
                            isLock: s
                        } = this.getConfig();
                        return {
                            showColor: !1,
                            color: "",
                            showWidth: !1,
                            lineWidth: 1,
                            showStyle: !1,
                            lineStyle: ie.Sc.SOLID,
                            showTextColor: !1,
                            textColor: e,
                            showFontSize: !1,
                            textFontSize: t,
                            showTextBold: !1,
                            isTextBold: i,
                            showBg: !1,
                            background: r,
                            isLock: s,
                            showTextEdit: !1,
                            isTextEdit: o,
                            showLock: !1,
                            showDelete: !1
                        }
                    }
                    getRenderPanes() {
                        const e = this.getParent();
                        return e ? [e.mainPane] : []
                    }
                    initCustomEvents() {
                        this.watch("data", this.updateImmediate.bind(this)), this.watch("labels", (({
                            newVal: e
                        }) => {
                            this.clearShapes();
                            const t = e.map((e => new Ut(e)));
                            this.labelLines = Bt()(t, (({
                                group: e
                            }) => e)), Object.keys(this.labelLines).forEach((e => {
                                this.labelLines[e].sort(((e, t) => t.price - e.price))
                            })), this.updateImmediate()
                        }))
                    }
                    isHover(e) {
                        return Object.keys(this.labelLines).reduce(((t, i) => t || this.labelLines[i].some((t => t.isHover(e)))), !1)
                    }
                    setVisibleShapes() {}
                    getVertexs() {
                        return []
                    }
                    constructor(...e) {
                        super(...e), this.labelLines = {}, this.config = { ...a()(it.A.defaultConfig),
                            type: ie.X2.LabelLines,
                            labels: [],
                            isNeedStore: !1
                        }
                    }
                },
                $t = class {
                    getMainPaneShapes() {
                        return [this.label, this.line]
                    }
                    draw({
                        panel: e
                    }) {
                        const t = e.getYPos(+this.price);
                        let i = 0;
                        this.label.setAttrs({
                            data: {
                                x: i,
                                y: -t
                            },
                            text: this.text,
                            color: this.textColor,
                            background: this.textBackground,
                            borderColor: this.textBorderColor
                        }), i += this.label.getWidth(), this.line.setAttrs({
                            data: {
                                p1: {
                                    x: i,
                                    y: -t
                                },
                                p2: {
                                    x: e.mainPane.getBound().width,
                                    y: -t
                                }
                            },
                            strokeStyle: this.lineColor,
                            lineDash: this.lineDash
                        })
                    }
                    isHover(e) {
                        return this.label.isHover(e)
                    }
                    update(e) {
                        this.id = e.id, this.price = e.price, this.text = e.text, this.textBackground = e.textBackground, this.textColor = e.textColor, this.textBorderColor = e.textBorderColor, this.lineColor = e.lineColor, this.lineDash = e.lineDash
                    }
                    constructor(e) {
                        this.update(e), this.label = new rt.JU({
                            text: this.text,
                            color: this.textColor,
                            background: this.textBackground,
                            borderColor: this.textBorderColor,
                            dir: ie.OP.Right,
                            stroke: !0,
                            fill: !0,
                            fixHeight: 20,
                            lineWidth: 1,
                            padding: [5, 0],
                            borderRadius: 4,
                            fontSize: 12,
                            fontStyle: "400",
                            fontFamily: "BinancePlex"
                        }), this.line = new rt.N1({
                            strokeStyle: this.lineColor,
                            lineDash: this.lineDash
                        })
                    }
                },
                Yt = class extends it.A {
                    isIndependent() {
                        return !0
                    }
                    updateImmediate() {
                        const e = this.getParent();
                        if (!e || !e.yAxis) return;
                        const {
                            mainPane: t
                        } = e;
                        this.instances.forEach((i => {
                            i.draw({
                                panel: e
                            }), this.addWidgetShapes(t, i.getMainPaneShapes())
                        })), this.setAnnotationToWidgets([t])
                    }
                    getShapes() {
                        return Dt()(this.instances, (e => e.getMainPaneShapes()))
                    }
                    getDescription() {
                        const {
                            type: e,
                            isNeedStore: t
                        } = this.getConfig();
                        return {
                            id: this.id,
                            type: e,
                            isNeedStore: t
                        }
                    }
                    getEditAttribute() {
                        const {
                            textColor: e,
                            textFontSize: t,
                            isTextBold: i,
                            background: r,
                            isTextEdit: o,
                            isLock: s
                        } = this.getConfig();
                        return {
                            showColor: !1,
                            color: "",
                            showWidth: !1,
                            lineWidth: 1,
                            showStyle: !1,
                            lineStyle: ie.Sc.SOLID,
                            showTextColor: !1,
                            textColor: e,
                            showFontSize: !1,
                            textFontSize: t,
                            showTextBold: !1,
                            isTextBold: i,
                            showBg: !1,
                            background: r,
                            isLock: s,
                            showTextEdit: !1,
                            isTextEdit: o,
                            showLock: !1,
                            showDelete: !1
                        }
                    }
                    getRenderPanes() {
                        const e = this.getParent();
                        return e ? [e.mainPane] : []
                    }
                    initCustomEvents() {
                        this.watch("data", this.updateImmediate.bind(this)), this.watch("labels", (({
                            newVal: e
                        }) => {
                            this.clearShapes();
                            const t = e.map((e => e.id)),
                                i = this.instances.map((e => e.id)),
                                r = kt()(i, t),
                                o = _t()(i, r),
                                s = _t()(r, t);
                            r.forEach((t => {
                                const i = e.find((e => e.id === t)),
                                    r = this.instances.find((e => e.id === t));
                                i && r && r.update(i)
                            })), o.forEach((e => {
                                const t = this.instances.findIndex((t => t.id === e));
                                t < 0 || this.instances.splice(t, 1)
                            })), s.forEach((t => {
                                const i = e.find((e => e.id === t));
                                i && this.instances.push(new $t(i))
                            })), this.forceUpdate()
                        }))
                    }
                    isHover(e) {
                        return this.instances.some((t => t.isHover(e)))
                    }
                    setVisibleShapes() {}
                    getVertexs() {
                        return []
                    }
                    forceUpdate() {
                        this.setAttr("data", []), this.update()
                    }
                    constructor(...e) {
                        super(...e), this.instances = [], this.config = { ...a()(it.A.defaultConfig),
                            type: ie.X2.SingleLabelLines,
                            labels: [],
                            isNeedStore: !1
                        }
                    }
                };
            let Zt = class extends it.A {
                isIndependent() {
                    return !0
                }
                updateImmediate() {
                    const e = this.getParent(),
                        t = e.getParent(),
                        {
                            mainPane: i,
                            yAxis: r,
                            xAxis: o
                        } = e;
                    if (e && r) {
                        const {
                            data: i,
                            text: r
                        } = this.getConfig(), s = t.getCloseItemByTime(i);
                        if (s) {
                            const t = 4,
                                i = e.getYPos(+s.high) + t,
                                n = o.getCoordOfValue(s.time),
                                a = o.getTimeScaleType();
                            this.tooltipLabel.setAttrs({
                                data: {
                                    x: n,
                                    y: -i - 5 + 1
                                },
                                text: r || (0, oe.Ni)(s.time, a)
                            }), this.arrowIcon.setData([{
                                x: n,
                                y: -i
                            }, {
                                x: n + 5,
                                y: -i - 5
                            }, {
                                x: n - 5,
                                y: -i - 5
                            }])
                        }
                    }
                    this.addWidgetShapes(i, [this.tooltipLabel, this.arrowIcon]), this.setAnnotationToWidgets([i])
                }
                getShapes() {
                    return [this.tooltipLabel, this.arrowIcon]
                }
                getDescription() {
                    const {
                        type: e,
                        data: t,
                        isNeedStore: i
                    } = this.getConfig();
                    return {
                        id: this.id,
                        type: e,
                        data: t,
                        isNeedStore: i
                    }
                }
                setVisibleShapes() {}
                getEditAttribute() {
                    const {
                        textColor: e,
                        textFontSize: t,
                        isTextBold: i,
                        background: r,
                        isTextEdit: o,
                        isLock: s
                    } = this.getConfig();
                    return {
                        showColor: !1,
                        color: "",
                        showWidth: !1,
                        lineWidth: 1,
                        showStyle: !1,
                        lineStyle: ie.Sc.SOLID,
                        showTextColor: !1,
                        textColor: e,
                        showFontSize: !1,
                        textFontSize: t,
                        showTextBold: !1,
                        isTextBold: i,
                        showBg: !1,
                        background: r,
                        isLock: s,
                        showTextEdit: !1,
                        isTextEdit: o,
                        showLock: !1,
                        showDelete: !1
                    }
                }
                getRenderPanes() {
                    const e = this.getParent();
                    if (!e) return [];
                    const {
                        mainPane: t,
                        axisPane: i
                    } = e;
                    return [t, i]
                }
                initCustomEvents() {
                    this.watch("data", this.updateImmediate.bind(this)), At.A.on(document, `mousedown.${ie.X2.ToolTip}`, (() => {
                        this.remove()
                    }))
                }
                afterDestroy() {
                    At.A.off(document, `mousedown.${ie.X2.ToolTip}`)
                }
                isHover(e) {
                    const {
                        isTextEdit: t
                    } = this.getConfig();
                    return !t && this.tooltipLabel.isHover(e)
                }
                getVertexs() {
                    return []
                }
                compeleDraw() {
                    this.setAttrs({
                        isTextEdit: !1,
                        isComplete: !0
                    })
                }
                constructor(...e) {
                    super(...e), this.config = { ...a()(it.A.defaultConfig),
                        isTextEdit: !1,
                        type: ie.X2.ToolTip,
                        isNeedStore: !1,
                        text: ""
                    }, this.tooltipLabel = new rt.JU({
                        background: "#5E6673",
                        color: ie._j.White,
                        dir: ie.OP.Up,
                        fill: !0,
                        borderRadius: 4,
                        padding: [12, 8],
                        fixHeight: 36,
                        fontSize: 14
                    }), this.arrowIcon = new rt.wA({
                        fillStyle: "#5E6673",
                        stroke: !1
                    })
                }
            };
            var Kt = i("T6nY"),
                qt = i.n(Kt),
                Qt = i("NdlK"),
                Jt = i("52IT");
            const ei = ({
                iconHeight: e,
                delta: t
            }) => 30 + (e + 5) * t;
            let ti = class {
                isHoveringIcons(e) {
                    return this.icons.reduce(((t, i) => i.isHover(e) || t), !1)
                }
                isHoveringArrowIcon(e) {
                    return this.arrowIcon.isHover(e)
                }
                isHovering(e) {
                    return this.isHoveringIcons(e) || this.isHoveringArrowIcon(e)
                }
                containsToggled() {
                    return this.icons.reduce(((e, t) => "toggled" === t.bodyIcon.state || e), !1)
                }
                handleHover(e) {
                    switch (this.state) {
                        case "single":
                        case "multipleExpanded":
                            return this.icons.reduce(((t, i) => {
                                const r = i.hover(e);
                                return r === Jt.x.None ? t : {
                                    id: i.id,
                                    state: i.bodyIcon.state,
                                    target: r
                                }
                            }), null);
                        default:
                            return null
                    }
                }
                handleMouseDown({
                    mousePoint: e,
                    translatedPoint: t,
                    onExpand: i,
                    onCollapse: r
                }) {
                    if ("multipleCollapsed" === this.state && this.isHoveringIcons(t)) this.state = "multipleExpanded", this.arrowIcon.setAttr("isVisible", !0), this.icons.forEach((e => e.bodyIcon.icon.setAttr("isVisible", !0))), i ? .();
                    else if ("multipleExpanded" === this.state && this.isHoveringArrowIcon(t)) this.state = "multipleCollapsed", this.arrowIcon.setAttr("isVisible", !1), this.icons.slice(2).forEach((e => e.bodyIcon.icon.setAttr("isVisible", !1))), this.icons.forEach((e => e.idle())), r ? .();
                    else if ("multipleExpanded" === this.state || "single" === this.state) return this.icons.reduce(((i, r, o) => {
                        const s = r.bodyIcon.icon.getHeight(),
                            n = this.icons.length - +o,
                            a = { ...e,
                                y: e.y - ei({
                                    iconHeight: s,
                                    delta: n - 1
                                })
                            },
                            l = r.toggle(t);
                        return l === Jt.x.None ? i : {
                            id: r.id,
                            state: r.bodyIcon.state,
                            target: l,
                            point: a,
                            toggled: "toggled" === r.bodyIcon.state
                        }
                    }), null);
                    return null
                }
                draw({
                    timeX: e,
                    baseY: t
                }) {
                    switch (this.state) {
                        case "single":
                            this.icons.forEach((i => {
                                const r = e - i.bodyIcon.icon.getWidth() / 2,
                                    o = t - 30,
                                    s = r + i.bodyIcon.icon.getWidth();
                                i.bodyIcon.icon.setData({
                                    x: r,
                                    y: o
                                }), i.bodyIcon.redDot.setData({
                                    x: s - 0,
                                    y: o + 0
                                }), i.closeIcon.icon.setData({
                                    x: s - 4,
                                    y: o - 7
                                })
                            }));
                            break;
                        case "multipleCollapsed":
                            {
                                const [i, r] = [this.icons[0].bodyIcon.icon, this.icons[0].bodyIcon.redDot],
                                [o, s] = [this.icons[1].bodyIcon.icon, this.icons[1].bodyIcon.redDot],
                                n = e - i.getWidth() / 2,
                                a = t - 30;o.setData({
                                    x: n,
                                    y: a
                                }),
                                r.setData({
                                    x: n + i.getWidth() - 0,
                                    y: a + 0
                                }),
                                i.setData({
                                    x: n,
                                    y: a - 5
                                }),
                                s.setData({
                                    x: n + o.getWidth() - 0,
                                    y: a - 5 + 0
                                });
                                break
                            }
                        case "multipleExpanded":
                            {
                                const i = this.icons[0].bodyIcon.icon.getHeight();this.icons.forEach(((r, o) => {
                                    const s = e - r.bodyIcon.icon.getWidth() / 2,
                                        n = this.icons.length - +o,
                                        a = t - ei({
                                            iconHeight: i,
                                            delta: n - 1
                                        });
                                    r.bodyIcon.icon.setData({
                                        x: s,
                                        y: a
                                    }), r.bodyIcon.redDot.setData({
                                        x: s + r.bodyIcon.icon.getWidth() - 0,
                                        y: a + 0
                                    })
                                })),
                                this.arrowIcon.setData({
                                    x: e - this.arrowIcon.getWidth() / 2,
                                    y: t - ei({
                                        iconHeight: i,
                                        delta: this.icons.length - 1
                                    }) - this.arrowIcon.getWidth() - 5
                                });
                                break
                            }
                    }
                }
                getShapes() {
                    return [...Dt()(this.icons, (e => e.getShapes())).reverse(), this.arrowIcon]
                }
                updateIcon(e) {
                    const t = this.icons.findIndex((t => t.id === e.id));
                    if (t < 0) this.icons.push(new Jt.A(e)), this.updateState();
                    else {
                        const i = this.icons[t];
                        i.bodyIcon.setShowRedDot(e.showRedDot), i.setIcons({
                            normalIconUrl: e.normalIconUrl,
                            hoveredIconUrl: e.hoveredIconUrl,
                            toggledIconUrl: e.toggledIconUrl,
                            theme: e.theme
                        })
                    }
                }
                removeIcon(e) {
                    const t = this.icons.findIndex((t => t.id === e));
                    t < 0 || (this.icons.splice(t, 1), this.updateState())
                }
                isEmpty() {
                    return 0 === this.icons.length
                }
                updateState() {
                    this.state = this.icons.length < 2 ? "single" : "multipleCollapsed", this.arrowIcon.setAttr("isVisible", !1)
                }
                constructor({
                    icons: e = []
                }) {
                    this.arrowIcon = new Qt.A({
                        width: 16,
                        height: 16,
                        fillStyle: "#EAECEF",
                        fill: !0,
                        path: "M7.92598 8.11823L5.33333 5.52558L4.15482 6.70409L7.92606 10.4753L9.10457 9.29682L9.10449 9.29674L11.6973 6.70396L10.5188 5.52545L7.92598 8.11823Z"
                    }), this.icons = e, this.updateState()
                }
            };
            let ii = class extends it.A {
                isIndependent() {
                    return !0
                }
                updateImmediate() {
                    this.clearShapes();
                    const e = this.getParent();
                    if (!e) return;
                    const {
                        mainPane: t,
                        xAxis: i
                    } = e;
                    this.groupPairs.forEach((([e, t]) => {
                        const r = (i ? .getCoordOfValue(e) || 0) + 12;
                        t.draw({
                            timeX: r,
                            baseY: 0
                        })
                    })), this.addWidgetShapes(t, this.getShapes()), this.setAnnotationToWidgets([t])
                }
                getShapes() {
                    if (this.lastMousePosition) {
                        const e = jt()(this.groupPairs, (([, e]) => e.containsToggled() || e.isHovering(this.lastMousePosition)));
                        return this.flatGroupPairsToShapes(e, (([, e]) => e.getShapes()))
                    }
                    return this.flatGroupPairsToShapes(this.groupPairs, (([, e]) => e.getShapes()))
                }
                getDescription() {
                    const {
                        data: e,
                        type: t,
                        isNeedStore: i
                    } = this.getConfig();
                    return {
                        id: this.id,
                        data: e,
                        type: t,
                        isNeedStore: i
                    }
                }
                getRenderPanes() {
                    const e = this.getParent();
                    if (!e) return [];
                    const {
                        mainPane: t
                    } = e;
                    return [t]
                }
                initCustomEvents() {
                    this.on("mousedown", ie.X2.InformationMines, this._onMousedown.bind(this)), this.on("mousemove", ie.X2.InformationMines, this._onMousemove.bind(this)), this.watch("data", this.updateImmediate.bind(this)), this.watch("timetable", (({
                        newVal: e
                    }) => {
                        this.clearShapes();
                        const t = Object.keys(e);
                        t.forEach((t => {
                            const i = +t,
                                r = e[i],
                                o = this.groups[i] || new ti({});
                            r.forEach((e => o.updateIcon(e)));
                            const s = r.map((e => e.id)),
                                n = o.icons.map((e => e.id));
                            _t()(n, s).forEach((e => o.removeIcon(e))), this.groups[i] = o, this.groups[i].isEmpty() && delete this.groups[i]
                        }));
                        const i = Object.keys(this.groups);
                        _t()(i, t).forEach((e => delete this.groups[e]));
                        const r = qt()(this.groups).map((([e, t]) => [+e, t]));
                        this.groupPairs = jt()(r), this.forceUpdate()
                    }))
                }
                isHover(e) {
                    return this.groupPairs.some((([, t]) => t.isHovering(e)))
                }
                setVisibleShapes() {}
                getVertexs() {
                    return []
                }
                blurInformationMines() {
                    this._onMousedown({
                        point: {
                            x: -999,
                            y: -999
                        },
                        originEvent: {
                            pageY: 0
                        }
                    })
                }
                _onMousedown(e) {
                    const {
                        xAxis: t
                    } = this.getParent() || {}, {
                        onToggled: i,
                        onExpand: r,
                        onCollapse: o
                    } = this.getConfig(), s = this.getTranslatedPoint(e.point), n = this.groupPairs.reduce(((i, [n, a]) => {
                        const l = (t ? .getCoordOfValue(n) || 0) + 12,
                            c = e.originEvent.pageY + Math.abs(s.y);
                        return a.handleMouseDown({
                            translatedPoint: s,
                            mousePoint: {
                                x: l,
                                y: c
                            },
                            onExpand: r,
                            onCollapse: o
                        }) || i
                    }), null);
                    n && i ? .(n), this.update()
                }
                _onMousemove(e) {
                    const {
                        onHovered: t
                    } = this.getConfig(), i = this.getTranslatedPoint(e.point), r = this.groupPairs.reduce(((e, [, t]) => t.handleHover(i) || e), null);
                    r && t ? .(r), this.lastMousePosition = i, this.update()
                }
                compeleDraw() {
                    this.setAttrs({
                        isComplete: !0
                    })
                }
                forceUpdate() {
                    this.setAttr("data", []), this.update()
                }
                getTranslatedPoint(e) {
                    const t = this.getParent();
                    if (!t) return {
                        x: 0,
                        y: 0
                    };
                    const {
                        x: i,
                        y: r
                    } = t.transformPointToView(e);
                    return {
                        x: i,
                        y: -r
                    }
                }
                flatGroupPairsToShapes(e, t) {
                    return e.map(t).reduce(((e, t) => e.concat(t)), [])
                }
                constructor(...e) {
                    super(...e), this.config = { ...a()(it.A.defaultConfig),
                        type: ie.X2.InformationMines,
                        isNeedStore: !1,
                        timetable: {},
                        onToggled: void 0,
                        onUntoggled: void 0,
                        onExpand: void 0,
                        onCollapse: void 0
                    }, this.groups = {}, this.groupPairs = []
                }
            };
            const ri = "M6.20711 1.70711C5.81658 1.31658 5.18342 1.31658 4.79289 1.70711L1.70711 4.79289C1.31658 5.18342 1.31658 5.81658 1.70711 6.20711L4.79289 9.29289C5.18342 9.68342 5.81658 9.68342 6.20711 9.29289L9.29289 6.20711C9.68342 5.81658 9.68342 5.18342 9.29289 4.79289L6.20711 1.70711Z",
                oi = "tpsl-drag-event",
                si = `mousemove.${oi}`,
                ni = `mouseup.${oi}`,
                ai = ({
                    status: e,
                    candlestick: t
                }) => "loss" === e ? t.getI18n("expected-loss", "Expected Loss") : t.getI18n("expected-profit", "Expected Profit");
            class li {
                draw({
                    panel: e
                }) {
                    const {
                        mainPane: t
                    } = e, i = e.getParent(), r = i.settingStore.getValue("@contextMenu.percentageScale"), o = e.getYPos(+this.price);
                    let s = 0;
                    this.priceLabel.setAttrs({
                        background: this.priceBackgroundColor,
                        color: this.priceColor,
                        borderColor: this.priceBorderColor,
                        data: {
                            x: s,
                            y: .5 - o
                        },
                        text: `${this.positionTypeText}${this.pnl}`
                    }), s += this.priceLabel.getWidth() - .5, this.quantityLabel.setAttrs({
                        background: this.quantityBackgroundColor,
                        color: this.quantityColor,
                        borderColor: this.quantityBorderColor,
                        data: {
                            x: s,
                            y: -o
                        },
                        text: this.quantity.toString(),
                        borderRadius: this.showReverse ? 0 : [0, 4, 4, 0]
                    }), s += this.quantityLabel.getWidth() - 1, this.reverseIcon.setAttrs({
                        fillStyle: this.reverseIconColor,
                        data: {
                            x: s + (this.reverseIconBorder.getWidth() - this.reverseIcon.getWidth()) / 2,
                            y: -o - this.reverseIcon.getHeight() / 2
                        },
                        isVisible: this.showReverse
                    }), this.reverseIconBorder.setAttrs({
                        strokeStyle: this.reverseBorderColor,
                        fillStyle: this.reverseBackgroundColor,
                        data: {
                            x: s,
                            y: -o - this.reverseIconBorder.getHeight() / 2
                        },
                        isVisible: this.showReverse,
                        borderRadius: this.showClose ? 0 : [0, 4, 4, 0]
                    }), s += this.showReverse ? this.reverseIconBorder.getWidth() - 1 : 0, this.closeIcon.setAttrs({
                        fillStyle: this.closeIconColor,
                        data: {
                            x: s + (this.closeIconBorder.getWidth() - this.closeIcon.getWidth()) / 2,
                            y: -o - this.closeIcon.getHeight() / 2
                        },
                        isVisible: this.showClose
                    }), this.closeIconBorder.setAttrs({
                        strokeStyle: this.closeIconBorderColor,
                        fillStyle: this.closeIconBackgroundColor,
                        data: {
                            x: s,
                            y: -o - this.closeIconBorder.getHeight() / 2
                        },
                        isVisible: this.showClose
                    }), s += this.showClose ? this.closeIconBorder.getWidth() : 0, this.horizontalLine.setAttrs({
                        strokeStyle: this.lineColor,
                        lineDash: this.lineDash,
                        data: {
                            p1: {
                                x: s,
                                y: -o
                            },
                            p2: {
                                x: t.getBound().width,
                                y: -o
                            }
                        }
                    }), s += 16, this.tpslLabel.setAttrs({
                        background: this.tpslLabelBackgroundColor,
                        color: this.tpslLabelColor,
                        borderColor: this.tpslLabelBorderColor,
                        data: {
                            x: s,
                            y: .5 - o
                        },
                        isVisible: this.showTPSL
                    });
                    if (this._isDraggingTPSL && this.draggableTPSL) {
                        const s = t.getBound().width,
                            n = +(this._tpslPrice || this.price),
                            a = e.getYPos(n) || o;
                        this.tpslHorizontalLine.setAttrs({
                            strokeStyle: this.tpslDraggingTextLabelBorderColor,
                            lineDash: this.lineDash,
                            data: {
                                p1: {
                                    x: 0,
                                    y: -a
                                },
                                p2: {
                                    x: s,
                                    y: -a
                                }
                            },
                            isVisible: !0
                        });
                        const l = this.onComputeTPSLLabel ? .({
                            initialPrice: this.price,
                            currentPrice: this._tpslPrice
                        });
                        let c = 0;
                        this.tpslDraggingTextLabel.setAttrs({
                            text: ai({
                                status: l ? .priceStatus,
                                candlestick: i
                            }),
                            color: this.tpslDraggingTextLabelColor,
                            borderColor: this.tpslDraggingTextLabelBorderColor,
                            background: this.tpslDraggingTextLabelBackgroundColor,
                            data: {
                                x: c,
                                y: -a
                            },
                            isVisible: !0
                        }), c += this.tpslDraggingTextLabel.getWidth() - 1, this.tpslDraggingPriceLabel.setAttrs({
                            text: l ? .price,
                            color: this.getPriceTPSLPriceColor(l ? .priceStatus),
                            borderColor: this.tpslDraggingPriceLabelBorderColor,
                            background: this.tpslDraggingPriceLabelBackgroundColor,
                            data: {
                                x: c,
                                y: -a
                            },
                            isVisible: !0
                        });
                        const d = s / 2;
                        this.tpslDistanceLine.setAttrs({
                            strokeStyle: this.tpslDraggingTextLabelBorderColor,
                            lineDash: this.lineDash,
                            data: {
                                p1: {
                                    x: d,
                                    y: -o
                                },
                                p2: {
                                    x: d,
                                    y: -a
                                }
                            },
                            isVisible: !0
                        }), this.diamond1.setAttrs({
                            fillStyle: this.diamond1Color,
                            strokeStyle: this.diamond1Color,
                            data: {
                                x: d - this.diamond1.getWidth() / 2,
                                y: -o - this.diamond1.getHeight() / 2
                            },
                            isVisible: !0
                        }), this.diamond2.setAttrs({
                            fillStyle: this.diamond2Color,
                            strokeStyle: this.diamond2Color,
                            data: {
                                x: d - this.diamond2.getWidth() / 2,
                                y: -a - this.diamond2.getHeight() / 2
                            },
                            isVisible: !0
                        }), this.tpslYLabel.setAttrs({
                            background: this.tpslYLabelBackgroundColor,
                            color: this.tpslYLabelColor,
                            borderColor: this.tpslYLabelBorderColor,
                            data: {
                                x: 1,
                                y: -a
                            },
                            text: r ? i.getFirstVisibleSeriesDataAsRelativePercentage({
                                value: n
                            }) : e.formatterValue(n),
                            isVisible: !0
                        })
                    } else this.tpslHorizontalLine.setAttrs({
                        isVisible: !1
                    }), this.diamond1.setAttrs({
                        isVisible: !1
                    }), this.diamond2.setAttrs({
                        isVisible: !1
                    }), this.tpslDistanceLine.setAttrs({
                        isVisible: !1
                    }), this.tpslDraggingTextLabel.setAttrs({
                        isVisible: !1
                    }), this.tpslDraggingPriceLabel.setAttrs({
                        isVisible: !1
                    }), this.tpslYLabel.setAttrs({
                        isVisible: !1
                    });
                    this.yLabel.setAttrs({
                        background: this.priceLabelBackgroundColor,
                        color: this.priceLabelColor,
                        borderColor: this.priceLabelBorderColor,
                        data: {
                            x: 1,
                            y: -o
                        },
                        text: r ? i.getFirstVisibleSeriesDataAsRelativePercentage({
                            value: +this.price
                        }) : e.formatterValue(+this.price)
                    });
                    const n = this.reverseIconBorder.getAttr("data");
                    this.reverseTooltip.setAttrs({
                        background: this.tooltipBackgroundColor,
                        color: this.tooltipTextColor,
                        borderColor: this.tooltipBorderColor,
                        text: this.reverseOrderTooltipText,
                        data: {
                            x: n.x + (this.reverseIconBorder.getWidth() - this.reverseTooltip.getWidth()) / 2,
                            y: n.y - this.reverseIconBorder.getHeight() - 0
                        }
                    });
                    const a = this.tpslLabel.getAttr("data");
                    this.tpslTooltip.setAttrs({
                        background: this.tooltipBackgroundColor,
                        color: this.tooltipTextColor,
                        borderColor: this.tooltipBorderColor,
                        text: i.getI18n("tpsl-tooltip", "Drag to set TP/SL"),
                        data: {
                            x: a.x + (this.tpslLabel.getWidth() - this.tpslTooltip.getWidth()) / 2,
                            y: a.y - this.tpslLabel.getHeight() - 0 - 10
                        }
                    });
                    const l = this.closeIconBorder.getAttr("data");
                    this.closeTooltip.setAttrs({
                        background: this.tooltipBackgroundColor,
                        color: this.tooltipTextColor,
                        borderColor: this.tooltipBorderColor,
                        text: this.closeTooltipText,
                        data: {
                            x: l.x + (this.closeIconBorder.getWidth() - this.closeTooltip.getWidth()) / 2,
                            y: l.y - this.closeIconBorder.getHeight() - 0
                        }
                    })
                }
                getShapes() {
                    return [...this.getMainPaneShapes(), ...this.getPriceAxisPaneShapes(), ...this.getTooltipShapes()]
                }
                getMainPaneShapes() {
                    return [this.priceLabel, this.quantityLabel, this.reverseIconBorder, this.reverseIcon, this.closeIconBorder, this.closeIcon, this.horizontalLine, this.tpslHorizontalLine, this.tpslDistanceLine, this.diamond1, this.diamond2, this.tpslLabel, this.tpslDraggingTextLabel, this.tpslDraggingPriceLabel]
                }
                getTooltipShapes() {
                    return [this.reverseTooltip, this.closeTooltip, this.tpslTooltip]
                }
                getPriceAxisPaneShapes() {
                    return [this.yLabel, this.tpslYLabel]
                }
                isHovered(e) {
                    return this.tpslLabel.isHover(e) || this.reverseIconBorder.isHover(e) || this.closeIconBorder.isHover(e)
                }
                handleMouseMove({
                    pt: e,
                    isTopmost: t
                }) {
                    this.reverseTooltip.setAttrs({
                        isVisible: this.showReverse && !!this.reverseTooltip.getAttr("text") && this.reverseIconBorder.isHover(e) && t
                    }), this.closeTooltip.setAttrs({
                        isVisible: this.showClose && !!this.closeTooltip.getAttr("text") && this.closeIconBorder.isHover(e) && t
                    }), this.tpslTooltip.setAttrs({
                        isVisible: this.showTPSL && this.tpslLabel.isHover(e) && t
                    })
                }
                handleMouseDown({
                    pt: e,
                    panel: t,
                    setDealed: i
                }) {
                    if (this.reverseIconBorder.isHover(e)) return this.onClickReverse ? .();
                    if (this.closeIconBorder.isHover(e)) return this.onClickClose ? .();
                    if (this.tpslLabel.isHover(e)) {
                        if (!this.draggableTPSL) return this.onClickTPSL ? .();
                        const e = t.getParent();
                        i();
                        const r = e.getAttr("crossHair");
                        e.setAttr("crossHair", { ...r,
                            show: !1
                        }), this._tpslPrice = this.price, t.mainPane.on("mousemove", si, (e => {
                            const {
                                y: i
                            } = t.transformPointToView(e.point), r = t.formatterValue(t.getPriceOfYPos(i));
                            this._tpslPrice = r, this._isDraggingTPSL = !0
                        })), At.A.on(document, ni, (() => {
                            t.mainPane.off("mousemove", si), At.A.off(document, ni), e.setAttr("crossHair", { ...r,
                                show: !0
                            });
                            const i = this._tpslPrice !== this.price;
                            if (!this._isDraggingTPSL || !i) return this.onClickTPSL ? .();
                            this._isDraggingTPSL = !1, this.onDropTPSL ? .({
                                price: this._tpslPrice
                            })
                        }))
                    }
                }
                update(e) {
                    this.id = e.id, this.price = e.price, this.quantity = e.quantity, this.positionTypeText = e.positionTypeText, this.pnl = e.pnl, this.showReverse = e.showReverse, this.showTPSL = e.showTPSL, this.draggableTPSL = e.draggableTPSL, this.showClose = e.showClose, this.priceColor = e.priceColor, this.priceBackgroundColor = e.priceBackgroundColor, this.priceBorderColor = e.priceBorderColor, this.quantityColor = e.quantityColor, this.quantityBackgroundColor = e.quantityBackgroundColor, this.quantityBorderColor = e.quantityBorderColor, this.priceLabelColor = e.priceLabelColor, this.priceLabelBackgroundColor = e.priceLabelBackgroundColor, this.priceLabelBorderColor = e.priceLabelBorderColor, this.tpslYLabelColor = e.tpslYLabelColor, this.tpslYLabelBackgroundColor = e.tpslYLabelBackgroundColor, this.tpslYLabelBorderColor = e.tpslYLabelBorderColor, this.reverseIconColor = e.reverseIconColor, this.reverseBackgroundColor = e.reverseBackgroundColor, this.reverseBorderColor = e.reverseBorderColor, this.tpslLabelColor = e.tpslLabelColor, this.tpslLabelBackgroundColor = e.tpslLabelBackgroundColor, this.tpslLabelBorderColor = e.tpslLabelBorderColor, this.tpslDraggingTextLabelColor = e.tpslDraggingTextLabelColor, this.tpslDraggingTextLabelBorderColor = e.tpslDraggingTextLabelBorderColor, this.tpslDraggingTextLabelBackgroundColor = e.tpslDraggingTextLabelBackgroundColor, this.tpslDraggingPriceLabelProfitColor = e.tpslDraggingPriceLabelProfitColor, this.tpslDraggingPriceLabelLossColor = e.tpslDraggingPriceLabelLossColor, this.tpslDraggingPriceLabelFlatColor = e.tpslDraggingPriceLabelFlatColor, this.tpslDraggingPriceLabelBorderColor = e.tpslDraggingPriceLabelBorderColor, this.tpslDraggingPriceLabelBackgroundColor = e.tpslDraggingPriceLabelBackgroundColor, this.lineColor = e.lineColor, this.lineDash = e.lineDash, this.tooltipBorderColor = e.tooltipBorderColor, this.tooltipBackgroundColor = e.tooltipBackgroundColor, this.tooltipTextColor = e.tooltipTextColor, this.reverseOrderTooltipText = e.reverseOrderTooltipText, this.closeIconBackgroundColor = e.closeIconBackgroundColor, this.closeIconBorderColor = e.closeIconBorderColor, this.closeIconColor = e.closeIconColor, this.diamond1Color = e.diamond1Color, this.diamond2Color = e.diamond2Color, this.onClickTPSL = e.onClickTPSL, this.onClickReverse = e.onClickReverse, this.onClickClose = e.onClickClose, this.onDropTPSL = e.onDropTPSL, this.onComputeTPSLLabel = e.onComputeTPSLLabel
                }
                getPriceTPSLPriceColor(e) {
                    switch (e) {
                        case "profit":
                            return this.tpslDraggingPriceLabelProfitColor;
                        case "loss":
                            return this.tpslDraggingPriceLabelLossColor;
                        default:
                            return this.tpslDraggingPriceLabelFlatColor
                    }
                }
                constructor(e) {
                    this.draggableTPSL = !1, this._isDraggingTPSL = !1, this.update(e), this.priceLabel = new rt.JU({
                        background: this.priceBackgroundColor,
                        color: this.priceColor,
                        borderColor: this.priceBorderColor,
                        dir: ie.OP.Right,
                        stroke: !0,
                        fill: !0,
                        padding: [12, 2],
                        fixHeight: 21,
                        lineWidth: 1,
                        borderRadius: [4, 0, 0, 4],
                        fontSize: 12
                    }), this.quantityLabel = new rt.JU({
                        background: this.quantityBackgroundColor,
                        color: this.quantityColor,
                        borderColor: this.quantityBorderColor,
                        dir: ie.OP.Right,
                        fill: !0,
                        stroke: !0,
                        padding: [12, 2],
                        fixHeight: 20,
                        lineWidth: 1,
                        fontSize: 12
                    }), this.reverseIcon = new rt.Ge({
                        fillStyle: this.reverseIconColor,
                        path: ct.x1,
                        width: 10,
                        height: 10,
                        fill: !0,
                        stroke: !1
                    }), this.reverseIconBorder = new rt.rw({
                        fill: !0,
                        strokeStyle: this.reverseBorderColor,
                        fillStyle: this.reverseBackgroundColor,
                        lineWidth: 1,
                        width: 22,
                        height: 20
                    }), this.reverseTooltip = new rt.JU({
                        background: this.tooltipBackgroundColor,
                        color: this.tooltipTextColor,
                        borderColor: this.tooltipBorderColor,
                        text: this.reverseOrderTooltipText,
                        dir: ie.OP.Right,
                        fill: !0,
                        stroke: !0,
                        padding: [12, 8],
                        fixHeight: 34,
                        arrowHeight: 4,
                        borderRadius: 8,
                        lineWidth: 1,
                        isVisible: !1,
                        fontSize: 12,
                        fontStyle: "400",
                        fontFamily: "BinancePlex"
                    }), this.tpslTooltip = new rt.JU({
                        background: this.tooltipBackgroundColor,
                        color: this.tooltipTextColor,
                        borderColor: this.tooltipBorderColor,
                        dir: ie.OP.Right,
                        fill: !0,
                        stroke: !0,
                        padding: [12, 8],
                        fixHeight: 34,
                        arrowHeight: 4,
                        borderRadius: 8,
                        lineWidth: 1,
                        isVisible: !1,
                        fontSize: 12,
                        fontStyle: "400",
                        fontFamily: "BinancePlex"
                    }), this.tpslLabel = new rt.JU({
                        text: "TP/SL",
                        background: this.tpslLabelBackgroundColor,
                        color: this.tpslLabelColor,
                        borderColor: this.tpslLabelBorderColor,
                        dir: ie.OP.Right,
                        fill: !0,
                        stroke: !0,
                        padding: [5, 2],
                        fixHeight: 21,
                        lineWidth: 1,
                        borderRadius: 4,
                        fontSize: 12,
                        fontStyle: "400",
                        fontFamily: "BinancePlex"
                    }), this.horizontalLine = new rt.N1({
                        strokeStyle: this.lineColor,
                        lineDash: this.lineDash
                    }), this.tpslHorizontalLine = new rt.N1({
                        strokeStyle: this.lineColor,
                        lineDash: this.lineDash,
                        isVisible: !1
                    }), this.tpslDistanceLine = new rt.N1({
                        strokeStyle: this.lineColor,
                        lineDash: this.lineDash,
                        isVisible: !1
                    }), this.tpslDraggingTextLabel = new rt.JU({
                        color: this.tpslDraggingTextLabelColor,
                        borderColor: this.tpslDraggingTextLabelBorderColor,
                        background: this.tpslDraggingTextLabelBackgroundColor,
                        fill: !0,
                        stroke: !0,
                        padding: [6, 0],
                        borderRadius: [4, 0, 0, 4],
                        fixHeight: 20,
                        lineWidth: 1,
                        fontSize: 12,
                        fontStyle: "400",
                        fontFamily: "BinancePlex",
                        isVisible: !1
                    }), this.tpslDraggingPriceLabel = new rt.JU({
                        borderColor: this.tpslDraggingPriceLabelBorderColor,
                        background: this.tpslDraggingPriceLabelBackgroundColor,
                        fill: !0,
                        stroke: !0,
                        padding: [6, 0],
                        borderRadius: [0, 4, 4, 0],
                        fixHeight: 20,
                        lineWidth: 1,
                        fontSize: 12,
                        fontStyle: "400",
                        fontFamily: "BinancePlex",
                        isVisible: !1
                    }), this.yLabel = new rt.JU({
                        background: this.priceLabelBackgroundColor,
                        color: this.priceLabelColor,
                        borderColor: this.priceLabelBorderColor,
                        dir: ie.OP.Right,
                        fill: !0,
                        stroke: !0,
                        padding: [5, 0],
                        borderRadius: 4,
                        fixHeight: 22,
                        lineWidth: 1,
                        fontSize: 12,
                        fontStyle: "400",
                        fontFamily: "BinancePlex"
                    }), this.tpslYLabel = new rt.JU({
                        background: this.priceLabelBackgroundColor,
                        color: this.priceLabelColor,
                        borderColor: this.priceLabelBorderColor,
                        dir: ie.OP.Right,
                        fill: !0,
                        stroke: !0,
                        padding: [5, 0],
                        borderRadius: 4,
                        fixHeight: 22,
                        lineWidth: 1,
                        fontSize: 12,
                        fontStyle: "400",
                        fontFamily: "BinancePlex",
                        isVisible: !1
                    }), this.closeIcon = new rt.Ge({
                        path: ct.K1,
                        width: 10,
                        height: 11,
                        fillStyle: this.closeIconColor,
                        fill: !0,
                        stroke: !1
                    }), this.closeIconBorder = new rt.rw({
                        fill: !0,
                        strokeStyle: this.closeIconBorderColor,
                        fillStyle: this.closeIconBackgroundColor,
                        lineWidth: 1,
                        width: 22,
                        height: 19,
                        borderRadius: [0, 4, 4, 0]
                    }), this.closeTooltip = new rt.JU({
                        background: this.tooltipBackgroundColor,
                        color: this.tooltipTextColor,
                        borderColor: this.tooltipBorderColor,
                        text: this.closeTooltipText,
                        dir: ie.OP.Right,
                        fill: !0,
                        stroke: !0,
                        padding: [12, 8],
                        fixHeight: 34,
                        arrowHeight: 4,
                        borderRadius: 8,
                        lineWidth: 1,
                        isVisible: !1
                    }), this.diamond1 = new rt.Ge({
                        width: 11,
                        height: 11,
                        path: ri,
                        fill: !0,
                        stroke: !0,
                        fillStyle: this.diamond1Color,
                        strokeStyle: this.diamond1Color,
                        isVisible: !1
                    }), this.diamond2 = new rt.Ge({
                        width: 11,
                        height: 11,
                        path: ri,
                        fill: !0,
                        stroke: !0,
                        fillStyle: this.diamond2Color,
                        strokeStyle: this.diamond2Color,
                        isVisible: !1
                    })
                }
            }
            let ci = class extends it.A {
                updateImmediate() {
                    const e = this.getParent();
                    if (!e) return;
                    const {
                        mainPane: t,
                        axisPane: i
                    } = e, r = [];
                    this.instances.forEach((o => {
                        o.draw({
                            panel: e
                        }), this.addWidgetShapes(t, o.getMainPaneShapes()), this.addWidgetShapes(i, o.getPriceAxisPaneShapes()), r.push(...o.getTooltipShapes())
                    })), this.addWidgetShapes(t, r), this.setAnnotationToWidgets([t, i])
                }
                getShapes() {
                    return Dt()(this.instances, (e => e.getShapes()))
                }
                isIndependent() {
                    return !0
                }
                getDescription() {
                    const {
                        type: e,
                        isNeedStore: t
                    } = this.getConfig();
                    return {
                        id: this.id,
                        type: e,
                        isNeedStore: t
                    }
                }
                getEditAttribute() {
                    const {
                        textColor: e,
                        textFontSize: t,
                        isTextBold: i,
                        background: r,
                        isTextEdit: o,
                        isLock: s
                    } = this.getConfig();
                    return {
                        showColor: !1,
                        color: "",
                        showWidth: !1,
                        lineWidth: 1,
                        showStyle: !1,
                        lineStyle: ie.Sc.SOLID,
                        showTextColor: !1,
                        textColor: e,
                        showFontSize: !1,
                        textFontSize: t,
                        showTextBold: !1,
                        isTextBold: i,
                        showBg: !1,
                        background: r,
                        isLock: s,
                        showTextEdit: !1,
                        isTextEdit: o,
                        showLock: !1,
                        showDelete: !1
                    }
                }
                getRenderPanes() {
                    const e = this.getParent();
                    if (!e) return [];
                    const {
                        mainPane: t,
                        axisPane: i
                    } = e;
                    return [t, i]
                }
                initCustomEvents() {
                    this.on("mousemove", this._onMousemove.bind(this)), this.on("mousedown", this._onMousedown.bind(this)), this.watch("data", this.updateImmediate.bind(this)), this.watch("positions", (({
                        newVal: e
                    }) => {
                        this.clearShapes();
                        const t = e.map((e => e.id)),
                            i = this.instances.map((e => e.id)),
                            r = kt()(i, t),
                            o = _t()(i, r),
                            s = _t()(r, t);
                        r.forEach((t => {
                            const i = e.find((e => e.id === t)),
                                r = this.instances.find((e => e.id === t));
                            i && r && r.update(i)
                        })), o.forEach((e => {
                            const t = this.instances.findIndex((t => t.id === e));
                            t < 0 || this.instances.splice(t, 1)
                        })), s.forEach((t => {
                            const i = e.find((e => e.id === t));
                            i && this.instances.push(new li(i))
                        })), this.forceUpdate()
                    }))
                }
                isHover(e) {
                    return this.instances.some((t => t.isHovered(e)))
                }
                updateBackground() {}
                setVisibleShapes() {}
                getVertexs() {
                    return []
                }
                forceUpdate() {
                    this.setAttr("data", []), this.update()
                }
                _onMousemove(e) {
                    const t = this.getParent();
                    if (!t) return;
                    const {
                        x: i,
                        y: r
                    } = t.transformPointToView(e.point), o = {
                        x: i,
                        y: -r
                    }, s = this.getTopmostInstance(o);
                    this.instances.forEach((e => e.handleMouseMove({
                        pt: o,
                        isTopmost: e.id === s ? .id
                    }))), this.update()
                }
                _onMousedown(e) {
                    const t = this.getParent();
                    if (e.isDealed || !t) return;
                    const {
                        x: i,
                        y: r
                    } = t.transformPointToView(e.point), o = {
                        x: i,
                        y: -r
                    }, s = this.getTopmostInstance(o);
                    s ? .handleMouseDown({
                        pt: o,
                        panel: t,
                        setDealed: () => e.isDealed = !0
                    })
                }
                getTopmostInstance(e) {
                    return this.instances.reduce(((t, i) => i.isHovered(e) ? i : t), void 0)
                }
                constructor(...e) {
                    super(...e), this.config = { ...a()(it.A.defaultConfig),
                        type: ie.X2.Positions,
                        positions: [],
                        isNeedStore: !1
                    }, this.instances = []
                }
            };
            var di = i("JF0F"),
                hi = i.n(di);
            const ui = class {
                update({
                    id: e,
                    price: t,
                    text: i,
                    textBackground: r,
                    textColor: o,
                    textBorderColor: s,
                    closeBackground: n,
                    closeColor: a,
                    closeBorderColor: l,
                    lineColor: c,
                    lineDash: d,
                    arrowColor: h,
                    showCloseButton: u,
                    onClose: g,
                    isPriceChangeable: p,
                    onPriceChanged: m,
                    onClick: x
                }) {
                    this.id = e, this.initialPrice = t, this.currentPrice = t, this.text = i, this.textBackground = r, this.textColor = o, this.textBorderColor = s, this.closeBackground = n, this.closeColor = a, this.closeBorderColor = l, this.lineColor = c, this.lineDash = d, this.arrowColor = h, this.showCloseButton = u, this.onClose = g, this.isPriceChangeable = p, this.onPriceChanged = m, this.onClick = x
                }
                getMainPaneShapes() {
                    return [this._line, this._label, this._closeButton, this._closeButtonIcon]
                }
                getPriceAxisPaneShapes() {
                    return [this._arrow]
                }
                getShapes() {
                    return [...this.getMainPaneShapes(), ...this.getPriceAxisPaneShapes()]
                }
                _getStatusColor(e) {
                    return this._isDragging ? (0, oe.No)(e, .7) : e
                }
                draw(e) {
                    const t = e.getYPos(this.currentPrice),
                        i = -t,
                        {
                            width: r
                        } = e.getMainBound(),
                        o = this._isHovered || this._isDragging;
                    this._line.setAttrs({
                        data: {
                            p1: {
                                x: 0,
                                y: i
                            },
                            p2: {
                                x: e.mainPane.getBound().width,
                                y: i
                            }
                        },
                        strokeStyle: this.lineColor,
                        lineDash: this.lineDash
                    });
                    let s = e.getParent().getAttr("isMobile") ? 0 : .25 * r;
                    this._label.setAttrs({
                        data: {
                            x: s,
                            y: i
                        },
                        text: this.text,
                        background: this._getStatusColor(this.textBackground),
                        color: this._getStatusColor(this.textColor),
                        borderColor: this._getStatusColor(this.textBorderColor),
                        borderRadius: this.showCloseButton ? [4, 0, 0, 4] : [4, 4, 4, 4],
                        isVisible: o
                    }), s += this.showCloseButton ? this._label.getWidth() - 1 : 0, this._closeButton.setAttrs({
                        data: {
                            x: s,
                            y: -t - this._closeButton.getHeight() / 2
                        },
                        strokeStyle: this._getStatusColor(this.closeBorderColor),
                        fillStyle: this._getStatusColor(this.closeBackground),
                        isVisible: this.showCloseButton && o
                    }), this._closeButtonIcon.setAttrs({
                        data: {
                            x: s + (this._closeButton.getWidth() - this._closeButtonIcon.getWidth()) / 2,
                            y: -t - this._closeButtonIcon.getHeight() / 2
                        },
                        fillStyle: this._getStatusColor(this.closeColor),
                        isVisible: this.showCloseButton && o
                    });
                    const n = i - 3;
                    this._arrow.setData([{
                        x: 0,
                        y: n
                    }, {
                        x: 5,
                        y: n + 3
                    }, {
                        x: 0,
                        y: n + 6
                    }])
                }
                isHovered(e) {
                    const t = this._line.isHover(e);
                    return this._isHovered = t, t
                }
                handleMouseDown({
                    pt: e,
                    panel: t,
                    setDealed: i
                }) {
                    (this._closeButton.isHover(e) || this._label.isHover(e) || this._line.isHover(e)) && this.onClick ? .(), this.showCloseButton && this._closeButton.isHover(e) ? (i(), this.onClose ? .({
                        id: this.id,
                        initialPrice: this.initialPrice,
                        currentPrice: this.currentPrice
                    })) : this.isPriceChangeable && (this._line.isHover(e) || this._label.isHover(e)) && (i(), t.mainPane.on("mousemove", `${ie.X2.Alerts}`, (e => {
                        const {
                            y: i
                        } = t.transformPointToView(e.point), r = t.getPriceOfYPos(i);
                        this.currentPrice = r, this._isDragging = !0
                    })), At.A.on(document, `mouseup.${ie.X2.Alerts}`, (() => {
                        if (t.mainPane.off("mousemove", `${ie.X2.Alerts}`), At.A.off(document, `mouseup.${ie.X2.Alerts}`), this._isDragging = !1, this.initialPrice === this.currentPrice) return;
                        const e = t.getParent().getAttr("precision"),
                            i = hi()(this.initialPrice, e),
                            r = hi()(this.currentPrice, e);
                        this.onPriceChanged ? .({
                            id: this.id,
                            initialPrice: i,
                            currentPrice: r
                        })
                    })))
                }
                constructor(e) {
                    this.textBackground = "#0ECB81", this.textColor = ie._j.White, this.textBorderColor = "#474D57", this.closeBackground = "#0ECB81", this.closeColor = ie._j.White, this.closeBorderColor = "#474D57", this.lineColor = "#0ECB81", this.lineDash = [1, 1], this.arrowColor = "#0ECB81", this.showCloseButton = !1, this.isPriceChangeable = !1, this._isHovered = !1, this._isDragging = !1, this.update(e), this._label = new rt.JU({
                        background: e.textBackground,
                        color: e.textColor,
                        borderColor: e.textBorderColor,
                        dir: ie.OP.Right,
                        stroke: !0,
                        fill: !0,
                        padding: [5, 1],
                        fixHeight: 21,
                        lineWidth: 1,
                        borderRadius: [4, 0, 0, 4]
                    }), this._line = new rt.N1({
                        strokeStyle: e.lineColor,
                        lineDash: e.lineDash
                    }), this._arrow = new rt.wA({
                        fillStyle: e.arrowColor,
                        stroke: !1
                    }), this._closeButtonIcon = new rt.Ge({
                        path: ct.K1,
                        width: 12,
                        height: 12,
                        fillStyle: e.closeColor,
                        fill: !0
                    }), this._closeButton = new rt.rw({
                        fill: !0,
                        strokeStyle: e.closeBorderColor,
                        fillStyle: e.closeBackground,
                        lineWidth: 1,
                        width: 20,
                        height: 20,
                        borderRadius: [0, 4, 4, 0]
                    })
                }
            };
            let gi = class extends it.A {
                isIndependent() {
                    return !0
                }
                updateImmediate() {
                    const e = this.getParent();
                    if (!e) return;
                    const {
                        mainPane: t,
                        axisPane: i
                    } = e;
                    this.instances.forEach((r => {
                        r.draw(e), this.addWidgetShapes(t, r.getMainPaneShapes()), this.addWidgetShapes(i, r.getPriceAxisPaneShapes())
                    })), this.setAnnotationToWidgets([t, i])
                }
                getShapes() {
                    return Dt()(this.instances, (e => e.getShapes()))
                }
                getDescription() {
                    const {
                        type: e,
                        isNeedStore: t
                    } = this.getConfig();
                    return {
                        id: this.id,
                        type: e,
                        isNeedStore: t
                    }
                }
                getEditAttribute() {
                    const {
                        textColor: e,
                        textFontSize: t,
                        isTextBold: i,
                        background: r,
                        isTextEdit: o,
                        isLock: s
                    } = this.getConfig();
                    return {
                        showColor: !1,
                        color: "",
                        showWidth: !1,
                        lineWidth: 1,
                        showStyle: !1,
                        lineStyle: ie.Sc.SOLID,
                        showTextColor: !1,
                        textColor: e,
                        showFontSize: !1,
                        textFontSize: t,
                        showTextBold: !1,
                        isTextBold: i,
                        showBg: !1,
                        background: r,
                        isLock: s,
                        showTextEdit: !1,
                        isTextEdit: o,
                        showLock: !1,
                        showDelete: !1
                    }
                }
                getRenderPanes() {
                    const e = this.getParent();
                    return e ? [e.mainPane, e.axisPane] : []
                }
                initCustomEvents() {
                    this.on("mousedown", this.handleMouseDown.bind(this)), this.watch("data", this.updateImmediate.bind(this)), this.watch("alerts", (({
                        newVal: e
                    }) => {
                        this.clearShapes();
                        const t = e.map((e => e.id)),
                            i = this.instances.map((e => e.id)),
                            r = kt()(i, t),
                            o = _t()(i, r),
                            s = _t()(r, t);
                        r.forEach((t => {
                            const i = e.find((e => e.id === t)),
                                r = this.instances.find((e => e.id === t));
                            i && r && r.update(i)
                        })), o.forEach((e => {
                            const t = this.instances.findIndex((t => t.id === e));
                            t < 0 || this.instances.splice(t, 1)
                        })), s.forEach((t => {
                            const i = e.find((e => e.id === t));
                            i && this.instances.push(new ui(i))
                        })), this.updateImmediate()
                    }))
                }
                isHover(e) {
                    return this.instances.some((t => t.isHovered(e)))
                }
                handleMouseDown(e) {
                    const t = this.getParent();
                    if (e.isDealed || !t) return;
                    const {
                        x: i,
                        y: r
                    } = t.transformPointToView(e.point), o = {
                        x: i,
                        y: -r
                    }, s = this.getTopmostHoveredInstance(o);
                    s ? .handleMouseDown({
                        pt: o,
                        panel: t,
                        setDealed: () => e.isDealed = !0
                    })
                }
                getTopmostHoveredInstance(e) {
                    let t;
                    for (let i = this.instances.length - 1; i > -1; i--)
                        if (this.instances[i].isHovered(e)) {
                            t = this.instances[i];
                            break
                        }
                    return t
                }
                setVisibleShapes() {}
                getVertexs() {
                    return []
                }
                constructor(...e) {
                    super(...e), this.instances = [], this.config = { ...a()(it.A.defaultConfig),
                        type: ie.X2.Alerts,
                        alerts: [],
                        isNeedStore: !1
                    }
                }
            };
            const pi = {
                    [ie.X2.TrendLine]: ot,
                    [ie.X2.HorizontalExtendedLine]: st,
                    [ie.X2.ExtendTrendLine]: at,
                    [ie.X2.RayLine]: vt,
                    [ie.X2.FibonacciLine]: mt,
                    [ie.X2.InfoLine]: dt,
                    [ie.X2.ParallelLine]: pt,
                    [ie.X2.Rectangle]: gt,
                    [ie.X2.Text]: St,
                    [ie.X2.PriceLine]: Ct,
                    [ie.X2.ArrowLine]: wt,
                    [ie.X2.HorizontalLine]: ht,
                    [ie.X2.VerticalLine]: ht,
                    [ie.X2.CrossLine]: ht,
                    [ie.X2.LeftArrow]: bt,
                    [ie.X2.RightArrow]: bt,
                    [ie.X2.UpArrow]: bt,
                    [ie.X2.DownArrow]: bt,
                    [ie.X2.OpenOrders]: Vt,
                    [ie.X2.Positions]: ci,
                    [ie.X2.LabelLines]: Gt,
                    [ie.X2.SingleLabelLines]: Yt,
                    [ie.X2.Alerts]: gi,
                    [ie.X2.ExecutionOrders]: Xt,
                    [ie.X2.ToolTip]: Zt,
                    [ie.X2.InformationMines]: ii
                },
                mi = "DRAW_EVENT";
            let xi = class extends Ge.A {
                setCompleteDrawCallback(e) {
                    this._completeDrawCallback = e
                }
                reset() {
                    if (this._isAbort) {
                        const e = this.getSelectAnnotation();
                        e && !e.getAttr("isComplete") && e.remove(), this._candleInstance.setAnnotationLockStatus(!1)
                    }
                    this.clearEvents()
                }
                disAbleDragAnnotations() {
                    this._isAbort = !0, this._candleInstance.setAnnotationLockStatus(!0)
                }
                completeCallbackHook(e) {
                    this._isAbort = !1, this._candleInstance.setAnnotationLockStatus(!1), e && this._candleInstance.selectAnnotation(e, e.getAttr("type")), this._completeDrawCallback && this._completeDrawCallback();
                    if (this.getAttr("isKeepDrawing")) {
                        const e = this.getAttr("nextAction"),
                            t = this.getActionByType(e);
                        t && t()
                    } else this.setAttr("nextAction", ie.X2.CrossHairCursor), this._completeDrawCallback = null
                }
                transformJSONToAnnotation(e, t) {
                    const {
                        type: i
                    } = e;
                    if (!i) return;
                    const r = pi[i];
                    if (!r) return;
                    const o = new r,
                        s = (e => {
                            switch (e) {
                                case ie.X2.TrendLine:
                                case ie.X2.HorizontalExtendedLine:
                                case ie.X2.ExtendTrendLine:
                                case ie.X2.RayLine:
                                case ie.X2.FibonacciLine:
                                case ie.X2.InfoLine:
                                case ie.X2.ParallelLine:
                                case ie.X2.Rectangle:
                                case ie.X2.Text:
                                case ie.X2.PriceLine:
                                case ie.X2.ArrowLine:
                                case ie.X2.HorizontalLine:
                                case ie.X2.VerticalLine:
                                case ie.X2.CrossLine:
                                case ie.X2.LeftArrow:
                                case ie.X2.RightArrow:
                                case ie.X2.UpArrow:
                                case ie.X2.DownArrow:
                                    return !0;
                                case ie.X2.OpenOrders:
                                case ie.X2.Positions:
                                case ie.X2.LabelLines:
                                case ie.X2.SingleLabelLines:
                                case ie.X2.Alerts:
                                case ie.X2.ExecutionOrders:
                                case ie.X2.ToolTip:
                                case ie.X2.InformationMines:
                                default:
                                    return !1
                            }
                        })(i);
                    return o.setParent(t || this._getEditorPanel()).setAttrs({
                        isComplete: !0,
                        ...e,
                        isSaveable: s,
                        isEdit: !1
                    }), o
                }
                initHotkeys() {
                    (0, et.A)("backspace, del", (() => {
                        this.deleteCurrentAnnotation()
                    })), (0, et.A)("esc", (() => {
                        this.clear()
                    }))
                }
                initEvents() {
                    this.watch("magnetEnabled", (({
                        newVal: e
                    }) => {
                        if (e) {
                            const e = this._candleInstance.getI18n(re.Tr.NOTIFICATION_MAGNET_ENABLED, "Magnet mode enabled. Drawings will be anchored to the closest OHLC value");
                            this._candleInstance.addNotification({
                                id: (0, tt.v4)(),
                                text: e,
                                lifetime: 3e3,
                                iconType: "warning"
                            })
                        }
                    }))
                }
                clear() {
                    this.clearEvents(), this.makeAnnotationsDestroy(), this.completeCallbackHook()
                }
                clearEvents() {
                    const e = this._getEditorPanel();
                    if (e) {
                        const {
                            mainPane: t
                        } = e;
                        t.off("mousedown", mi), t.off("mousemove", mi), t.off("mouseup", mi), t.off("click", mi), t.off("dbclick", mi)
                    }
                }
                registerActions() {
                    const e = this._getEditorPanel();
                    if (e) {
                        const t = {
                            [ie.X2.TrendLine]: this._drawExtendLine.bind(this, e, ot, ie.X2.TrendLine),
                            [ie.X2.HorizontalExtendedLine]: this._drawHorizontalExtendedLine.bind(this, e, st, ie.X2.HorizontalExtendedLine),
                            [ie.X2.ExtendTrendLine]: this._drawExtendLine.bind(this, e, at, ie.X2.ExtendTrendLine),
                            [ie.X2.RayLine]: this._drawExtendLine.bind(this, e, vt, ie.X2.RayLine),
                            [ie.X2.InfoLine]: this._drawExtendLine.bind(this, e, dt, ie.X2.InfoLine),
                            [ie.X2.ArrowLine]: this._drawExtendLine.bind(this, e, wt, ie.X2.ArrowLine),
                            [ie.X2.HorizontalLine]: this._drawStraightLine.bind(this, e, ie.X2.HorizontalLine),
                            [ie.X2.VerticalLine]: this._drawStraightLine.bind(this, e, ie.X2.VerticalLine),
                            [ie.X2.CrossLine]: this._drawStraightLine.bind(this, e, ie.X2.CrossLine),
                            [ie.X2.Rectangle]: this._drawRectangle.bind(this, e),
                            [ie.X2.ParallelLine]: this._drawParallelChannel.bind(this, e),
                            [ie.X2.FibonacciLine]: this._drawFibLine.bind(this, e),
                            [ie.X2.LeftArrow]: this._drawArrow.bind(this, e, ie.X2.LeftArrow),
                            [ie.X2.RightArrow]: this._drawArrow.bind(this, e, ie.X2.RightArrow),
                            [ie.X2.UpArrow]: this._drawArrow.bind(this, e, ie.X2.UpArrow),
                            [ie.X2.DownArrow]: this._drawArrow.bind(this, e, ie.X2.DownArrow),
                            [ie.X2.Text]: this._drawText.bind(this, e),
                            [ie.X2.PriceLine]: this._drawPriceLine.bind(this, e)
                        };
                        Object.keys(t).forEach((e => {
                            this._actionsMapping.set(e, (() => {
                                e !== ie.X2.KeepDrawing && (this.clearEvents(), this.disAbleDragAnnotations()), t[e]()
                            }))
                        }))
                    }
                }
                getActionByType(e) {
                    return this._actionsMapping.get(e)
                }
                setNextAction(e) {
                    this.setAttr("nextAction", e)
                }
                getShapeById(e) {
                    return this._getEditorPanel().getAnnotations().find((t => t.id === e))
                }
                manageOrders(e) {
                    this._openOrders.setAttrs({
                        orders: e
                    }), this._getEditorPanel().update(ie.OQ.Marks)
                }
                managePositions(e) {
                    this._positions.setAttrs({
                        positions: e
                    }), this._getEditorPanel().update(ie.OQ.Marks)
                }
                manageExecutionOrders(e) {
                    this._executionOrders.setAttr("orders", e), this._getEditorPanel().update(ie.OQ.Marks)
                }
                manageInformationMines(e) {
                    this._informationMines.setAttrs(e), this._getEditorPanel().update(ie.OQ.Marks)
                }
                manageLabelLines(e) {
                    this._labelLines.setAttrs({
                        labels: e
                    }), this._getEditorPanel().update(ie.OQ.Marks)
                }
                manageSingleLabelLines(e) {
                    this._singleLabelLines.setAttrs({
                        labels: e
                    }), this._getEditorPanel().update(ie.OQ.Marks)
                }
                manageAlerts(e) {
                    this._alerts.setAttrs({
                        alerts: e
                    }), this._getEditorPanel().update(ie.OQ.Marks)
                }
                getSelectAnnotation() {
                    const e = this._getEditorPanel().getAnnotations();
                    for (let t = 0, i = e.length; t < i; t++)
                        if (e[t].getAttr("isEdit")) return e[t]
                }
                clearSelectAnnotation() {
                    const e = this._getEditorPanel().getAnnotations();
                    for (let t = 0, i = e.length; t < i; t++) {
                        const {
                            isEdit: i
                        } = e[t].getConfig();
                        i && e[t].setAttr("isEdit", !1)
                    }
                }
                deleteAllAnnotation() {
                    const e = this._getEditorPanel(),
                        t = e.getAnnotations();
                    for (let i = 0, r = t.length; i < r; i++) t[i].isIndependent() || t[i].remove(!1);
                    t.length > 0 && e.update(ie.OQ.Marks)
                }
                deleteCurrentAnnotation() {
                    const e = this._getEditorPanel().getAnnotations().find((e => e.getAttr("isEdit")));
                    e && e.remove()
                }
                makeAnnotationsDestroy() {
                    const e = this._getEditorPanel().getAnnotations();
                    for (let t = 0, i = e.length; t < i; t++) e[t].destroy();
                    this._candleInstance.unSelectAnnotation()
                }
                keepDraw() {
                    const e = this.getAttr("isKeepDrawing");
                    this.setAttr("isKeepDrawing", !e)
                }
                toggleMagnet() {
                    const e = this.getAttr("magnetEnabled");
                    this.setAttr("magnetEnabled", !e)
                }
                blurInformationMines() {
                    this._informationMines.blurInformationMines()
                }
                shouldMagnet() {
                    const e = this.getAttr("magnetEnabled"),
                        t = this.getSelectAnnotation(),
                        i = !!t ? .getAttr("isEdit");
                    return ((e => {
                        switch (e) {
                            case ie.X2.TrendLine:
                            case ie.X2.HorizontalExtendedLine:
                            case ie.X2.ExtendTrendLine:
                            case ie.X2.RayLine:
                            case ie.X2.FibonacciLine:
                            case ie.X2.InfoLine:
                            case ie.X2.ParallelLine:
                            case ie.X2.Rectangle:
                            case ie.X2.Text:
                            case ie.X2.PriceLine:
                            case ie.X2.ArrowLine:
                            case ie.X2.HorizontalLine:
                            case ie.X2.VerticalLine:
                            case ie.X2.CrossLine:
                            case ie.X2.LeftArrow:
                            case ie.X2.RightArrow:
                            case ie.X2.UpArrow:
                            case ie.X2.DownArrow:
                                return !0;
                            default:
                                return !1
                        }
                    })(this.getAttr("nextAction")) || i) && e
                }
                _drawExtendLine(e, t, i) {
                    const r = (new t).setParent(e);
                    let o = null,
                        s = null;
                    const {
                        mainPane: n
                    } = e;
                    n.on("mousedown", mi, (t => {
                        t.isDealed = !0, o || (r.setAttrs({
                            color: it.A.getCacheStyle(i, "color"),
                            lineWidth: it.A.getCacheStyle(i, "lineWidth"),
                            lineStyle: it.A.getCacheStyle(i, "lineStyle"),
                            isSaveable: !0
                        }), o = this.getPoint({
                            panel: e,
                            point: t.point
                        })), n.off("mousemove", mi), n.on("mousemove", mi, (t => {
                            t.isDealed = !0, s = this.getPoint({
                                panel: e,
                                point: t.point
                            }), r.setData({
                                p1: o,
                                p2: s
                            }), r.update()
                        })), n.once("mouseup", mi, (() => {
                            !o || !s || (0, oe.be)(o.time - s.time) && (0, oe.be)(o.value - s.value) || (n.off(mi), r.compeleDraw(), r.recoverDragVertexts(), this.completeCallbackHook(r))
                        }))
                    }), !0)
                }
                _drawHorizontalExtendedLine(e, t, i) {
                    const r = (new t).setParent(e);
                    let o = null,
                        s = null;
                    const {
                        mainPane: n
                    } = e;
                    n.on("mousedown", mi, (t => {
                        t.isDealed = !0, o || (r.setAttrs({
                            color: it.A.getCacheStyle(i, "color"),
                            lineWidth: it.A.getCacheStyle(i, "lineWidth"),
                            lineStyle: it.A.getCacheStyle(i, "lineStyle"),
                            isSaveable: !0
                        }), o = this.getPoint({
                            panel: e,
                            point: t.point
                        })), n.off("mousemove", mi), n.on("mousemove", mi, (t => {
                            t.isDealed = !0, s = e.transformAbsoluteXYToPlotItem(t.point), r.setData({
                                p1: o,
                                p2: { ...s,
                                    value: o ? .value
                                }
                            }), r.update()
                        })), n.once("mouseup", mi, (() => {
                            !o || !s || (0, oe.be)(o.time - s.time) && (0, oe.be)(o.value - s.value) || (n.off(mi), r.compeleDraw(), r.recoverDragVertexts(), this.completeCallbackHook(r))
                        }))
                    }), !0)
                }
                _drawStraightLine(e, t) {
                    const i = (new ht).setParent(e),
                        {
                            mainPane: r
                        } = e;
                    r.once("click", mi, (r => {
                        i.setAttrs({
                            type: t,
                            color: it.A.getCacheStyle(t, "color"),
                            lineWidth: it.A.getCacheStyle(t, "lineWidth"),
                            lineStyle: it.A.getCacheStyle(t, "lineStyle"),
                            isSaveable: !0
                        }), i.setData(this.getPoint({
                            panel: e,
                            point: r.point
                        })), i.compeleDraw(), this.completeCallbackHook(i)
                    }))
                }
                _drawPriceLine(e) {
                    const t = (new Ct).setParent(e),
                        {
                            mainPane: i
                        } = e;
                    i.once("click", mi, (i => {
                        t.setAttrs({
                            color: it.A.getCacheStyle(ie.X2.PriceLine, "color"),
                            lineWidth: it.A.getCacheStyle(ie.X2.PriceLine, "lineWidth"),
                            lineStyle: it.A.getCacheStyle(ie.X2.PriceLine, "lineStyle"),
                            isSaveable: !0
                        }), t.setData(this.getPoint({
                            panel: e,
                            point: i.point
                        })), t.compeleDraw(), this.completeCallbackHook(t)
                    }))
                }
                _drawRectangle(e) {
                    const t = (new gt).setParent(e);
                    let i = null,
                        r = null;
                    const {
                        mainPane: o
                    } = e;
                    o.on("mousedown", mi, (s => {
                        s.isDealed = !0, i || (t.setAttrs({
                            color: it.A.getCacheStyle(ie.X2.Rectangle, "color"),
                            lineWidth: it.A.getCacheStyle(ie.X2.Rectangle, "lineWidth"),
                            lineStyle: it.A.getCacheStyle(ie.X2.Rectangle, "lineStyle"),
                            background: it.A.getCacheStyle(ie.X2.Rectangle, "background"),
                            isSaveable: !0
                        }), i = this.getPoint({
                            panel: e,
                            point: s.point
                        })), r || (r = this.getPoint({
                            panel: e,
                            point: s.point
                        })), o.off("mousemove", mi), o.on("mousemove", mi, (o => {
                            o.isDealed = !0, r = this.getPoint({
                                panel: e,
                                point: o.point
                            }), t.setData({
                                p1: i,
                                p2: r
                            }), t.update()
                        })), o.once("mouseup", mi, (() => {
                            !i || !r || (0, oe.be)(i.time - r.time) && (0, oe.be)(i.value - r.value) || (o.off(mi), t.compeleDraw(), t.recoverDragVertexts(), this.completeCallbackHook(t))
                        }))
                    }), !0)
                }
                _drawParallelChannel(e) {
                    const t = (new pt).setParent(e);
                    let i = null,
                        r = null,
                        o = null;
                    const {
                        mainPane: s
                    } = e;
                    s.on("mousedown", mi, (n => {
                        n.isDealed = !0;
                        const a = this.getPoint({
                            panel: e,
                            point: n.point
                        });
                        i ? r ? o || (o = a) : r = a : (t.setAttrs({
                            color: it.A.getCacheStyle(ie.X2.ParallelLine, "color"),
                            lineWidth: it.A.getCacheStyle(ie.X2.ParallelLine, "lineWidth"),
                            lineStyle: it.A.getCacheStyle(ie.X2.ParallelLine, "lineStyle"),
                            background: it.A.getCacheStyle(ie.X2.ParallelLine, "background"),
                            isSaveable: !0
                        }), i = a), s.off("mousemove", mi), s.on("mousemove", mi, (s => {
                            s.isDealed = !0;
                            const n = this.getPoint({
                                panel: e,
                                point: s.point
                            });
                            r ? o || t.setData({
                                p1: i,
                                p2: r,
                                p3: n
                            }) : t.setData({
                                p1: i,
                                p2: n,
                                p3: n
                            }), t.update()
                        })), s.once("mouseup", mi, (() => {
                            i && r && o && (s.off(mi), t.compeleDraw(), t.recoverDragVertexts(), this.completeCallbackHook(t))
                        }))
                    }), !0)
                }
                _drawFibLine(e) {
                    const t = (new mt).setParent(e);
                    let i = null,
                        r = null;
                    const {
                        mainPane: o
                    } = e;
                    o.on("mousedown", mi, (s => {
                        s.isDealed = !0, i || (t.setAttrs({
                            color: it.A.getCacheStyle(ie.X2.FibonacciLine, "color"),
                            lineWidth: it.A.getCacheStyle(ie.X2.FibonacciLine, "lineWidth"),
                            lineStyle: it.A.getCacheStyle(ie.X2.FibonacciLine, "lineStyle"),
                            background: it.A.getCacheStyle(ie.X2.FibonacciLine, "background"),
                            isSaveable: !0
                        }), i = this.getPoint({
                            panel: e,
                            point: s.point
                        })), o.off("mousemove", mi), o.on("mousemove", mi, (o => {
                            o.isDealed = !0, r = this.getPoint({
                                panel: e,
                                point: o.point
                            }), t.setData({
                                p1: i,
                                p2: r
                            }), t.update()
                        })), o.once("mouseup", mi, (() => {
                            !i || !r || (0, oe.be)(i.time - r.time) && (0, oe.be)(i.value - r.value) || (o.off(mi), t.compeleDraw(), t.recoverDragVertexts(), this.completeCallbackHook(t))
                        }))
                    }), !0)
                }
                _drawArrow(e, t) {
                    const i = (new bt).setParent(e),
                        {
                            mainPane: r
                        } = e;
                    r.once("mousedown", mi, (r => {
                        i.setAttrs({
                            type: t,
                            color: it.A.getCacheStyle(t, "color"),
                            isSaveable: !0
                        }), i.setData(this.getPoint({
                            panel: e,
                            point: r.point
                        })), i.compeleDraw(), this.completeCallbackHook(i)
                    }))
                }
                _drawText(e) {
                    const t = (new St).setParent(e);
                    t.createTextAreaElement();
                    const {
                        mainPane: i
                    } = e;
                    i.once("click", mi, (i => {
                        t.setAttrs({
                            textColor: it.A.getCacheStyle(ie.X2.Text, "textColor"),
                            textFontSize: it.A.getCacheStyle(ie.X2.Text, "textFontSize"),
                            isTextBold: it.A.getCacheStyle(ie.X2.Text, "isTextBold"),
                            background: it.A.getCacheStyle(ie.X2.Text, "background"),
                            isSaveable: !0
                        }), t.setAttr("isTextEdit", !0).setData(this.getPoint({
                            panel: e,
                            point: i.point
                        })), i.originEvent.stopPropagation(), this.completeCallbackHook(t), i.isDealed = !0
                    }))
                }
                _getEditorPanel() {
                    return this._candleInstance.getPanel((e => e instanceof $e.A && e.panelType === ie.HP.BASE))
                }
                getPoint({
                    point: e,
                    panel: t
                }) {
                    const i = t.transformAbsoluteXYToPlotItem(e),
                        r = t.transformPointToView(e);
                    return { ...i,
                        value: t.magnetizeY({
                            y: r.y
                        }).price
                    }
                }
                constructor(e) {
                    super(), this.config = { ...a()(Ge.A.defaultConfig),
                        isKeepDrawing: !1,
                        magnetEnabled: !1,
                        nextAction: ie.X2.CrossHairCursor
                    }, this._actionsMapping = new Map, this._isAbort = !1, this._candleInstance = e, this.initEvents(), this.initHotkeys(), this.registerActions(), this._informationMines = this.transformJSONToAnnotation({
                        timetable: {},
                        type: ie.X2.InformationMines
                    }), this._openOrders = this.transformJSONToAnnotation({
                        timetable: {},
                        type: ie.X2.OpenOrders
                    }), this._positions = this.transformJSONToAnnotation({
                        timetable: {},
                        type: ie.X2.Positions
                    }), this._executionOrders = this.transformJSONToAnnotation({
                        orders: [],
                        type: ie.X2.ExecutionOrders
                    }), this._labelLines = this.transformJSONToAnnotation({
                        labels: [],
                        type: ie.X2.LabelLines
                    }), this._singleLabelLines = this.transformJSONToAnnotation({
                        labels: [],
                        type: ie.X2.SingleLabelLines
                    }), this._alerts = this.transformJSONToAnnotation({
                        alerts: [],
                        type: ie.X2.Alerts
                    })
                }
            };
            const fi = {
                theme: "",
                margin: {
                    left: 0,
                    right: 0,
                    top: 0,
                    bottom: 8
                },
                xAxis: {
                    height: 32,
                    scaleRatio: .0025
                },
                yAxis: {
                    width: 40,
                    isFloat: !1
                },
                crossHair: {
                    show: !0,
                    style: re.SE.CROSSHAIR
                },
                grid: {
                    show: !0
                },
                candlestick: {
                    barWeight: .8,
                    dataFormatter: ie.lw.Normal
                },
                indicators: []
            };
            let yi = class extends Ze.Ay {
                    draw(e, t) {
                        this.drawBorder(e, t)
                    }
                    constructor(...e) {
                        super(...e), this.drawBorder = (e, t) => {
                            const {
                                width: i,
                                height: r
                            } = t;
                            e.beginPath(), Fe.A.drawLine(e, 0, -r, i, -r), Fe.A.drawLine(e, i - 1, 0, i - 1, -r), e.stroke()
                        }, this.drawTicks = (e, {
                            tickData: t,
                            bound: i,
                            type: r
                        }) => {
                            t.forEach((t => {
                                const o = (0, oe.yQ)(t.v, r);
                                if (o) {
                                    const r = e.measureText(o),
                                        s = r.actualBoundingBoxAscent + r.actualBoundingBoxDescent,
                                        n = (i.height + s) / 2;
                                    Fe.A.drawText(e, o, t.p, -n)
                                }
                            }))
                        }
                    }
                },
                bi = class extends Ye.A {
                    getCtxsByDrawMode(e) {
                        const t = this.getRoot(),
                            i = t.getContext(),
                            r = t.getMarkContext();
                        return {
                            [ie.OQ.All]: [i, r],
                            [ie.OQ.Resize]: [i, r],
                            [ie.OQ.Marks]: [r]
                        }[e] || []
                    }
                    clear(e = []) {
                        const t = this.getClearBound();
                        e.forEach((e => Fe.A.clearRect(e, t)))
                    }
                    render(e) {
                        const t = this.getRoot(),
                            i = t.getContext(),
                            r = t.getMarkContext(),
                            o = this.getCtxsByDrawMode(e);
                        if (this.clear(o), this.initialCtxs(o), e === ie.OQ.All || e === ie.OQ.Resize) {
                            this.createClipBound(i);
                            const e = t.getColorFromColorTable("frame.borderLineColor");
                            (0, oe.jS)(i, {
                                strokeStyle: e
                            }), this.renderer.draw(i, this.bound);
                            const r = this.getRoot().getXAxis(),
                                o = this.getTicksData(),
                                s = r.getTickScale(),
                                n = t.getColorFromColorTable("axis.tickLineColor"),
                                a = t.getColorFromColorTable("axis.tickTextColor");
                            (0, oe.jS)(i, {
                                strokeStyle: n,
                                fillStyle: a,
                                textBaseline: ie.Tf.Top,
                                textAlign: ie.nO.Center,
                                font: "400 12px BinancePlex"
                            }), this.renderer.drawTicks(i, {
                                tickData: o,
                                bound: this.bound,
                                type: s.type,
                                showTick: !1
                            })
                        }
                        this.createClipBound(r);
                        t.getAttr("annotationVisible") && this.plotShapes(r), this.restoreCtxs(o)
                    }
                    setViewBound() {
                        const e = this.getRoot(),
                            {
                                xAxis: t,
                                margin: i,
                                width: r,
                                height: o
                            } = e.getConfig();
                        this.setBound({
                            x: i.left,
                            y: o - i.bottom,
                            width: r - i.right + 1,
                            height: t.height
                        })
                    }
                    getTicksData() {
                        const e = this.getRoot();
                        if (e) {
                            return e.getXAxis().getAxisData()
                        }
                        return []
                    }
                    onmouseout() {
                        const e = this.getRoot(),
                            t = e.getHitContext();
                        Fe.A.clearRect(t), this.clearDragEvent(), e.setCursor({
                            key: "gap",
                            isClear: !0,
                            config: {},
                            weight: 1e3
                        })
                    }
                    onmousedown(e) {
                        const t = this.getRoot();
                        let {
                            x: i
                        } = e.point, r = !1;
                        this.on("mousemove", "mousedown", (e => {
                            r = !0;
                            const {
                                x: t
                            } = e.point;
                            this.getRoot().shiftTimeLine(i - t), i = t
                        })), this.on("mouseup", "mousedown", (() => {
                            this.clearDragEvent(), r && t.fireAfterTimeShifted()
                        }))
                    }
                    clearDragEvent() {
                        this.off("mousemove", "mousedown"), this.off("mouseup", "mousedown")
                    }
                    onmousemove(e) {
                        e.isDealed = !0;
                        this.getRoot().setCursor({
                            config: {
                                style: re.SE.EWRESIZE
                            },
                            weight: 1e3,
                            isRecord: !1
                        })
                    }
                    constructor() {
                        super(), this.config = { ...a()(Ye.A.defaultConfig),
                            zIndex: 1e3
                        }, this.renderer = new yi, this.on("mousemove", this.onmousemove), this.on("mouseout", this.onmouseout), this.on("mousedown", this.onmousedown)
                    }
                };
            var vi = i("Xbxo");
            const Ci = ({
                type: e,
                min: t,
                max: i,
                defaultDate: r
            }) => {
                switch (e) {
                    case "right":
                        return i;
                    case "center":
                        return Math.floor((i + t) / 2);
                    case "left":
                        return t;
                    case "date":
                        return r;
                    default:
                        return 0
                }
            };
            let wi = class e extends Je {
                get currentTimeDomain() {
                    return this._xAxis ? .getDomain() || [0, 0]
                }
                get lastDataTime() {
                    return this._lastDataTime
                }
                get visibleViewHeight() {
                    const {
                        margin: e,
                        xAxis: t,
                        height: i
                    } = this.getConfig();
                    return i - e.top - e.bottom - t.height
                }
                get viewWidth() {
                    const {
                        margin: e,
                        width: t
                    } = this.getConfig();
                    return t - e.left - e.right
                }
                get gapWidgetsLength() {
                    return this.filterPanels((e => e instanceof Qe)).length
                }
                get iPanels() {
                    return this.filterPanels((e => e instanceof $e.A))
                }
                get titleContainer() {
                    return this._titleContainer
                }
                get regContetxt() {
                    return this._regContext
                }
                determineGetDateType({
                    isFirstFetch: e,
                    changeType: t,
                    interval: i,
                    timeAnchorDate: r
                }) {
                    const o = this.settingStore.getValue("@timeTool.timeAnchor"),
                        s = re.YN[i],
                        n = o && r,
                        a = this.settingStore.getValue("@timeTool.acrossTokens"),
                        l = this.getSeriesData();
                    if (e) return {
                        type: "default",
                        params: {
                            seriesData: l,
                            mode: "first-fetch"
                        }
                    };
                    if (n && "interval" === t && this._xAxis) {
                        const e = this._xAxis.getScaleCoeff(),
                            {
                                min: t,
                                max: i
                            } = Re({
                                startTime: r,
                                endTime: r,
                                viewWidth: this.viewWidth,
                                scale: e,
                                interval: s,
                                ranges: []
                            });
                        return {
                            type: "time-anchor",
                            params: {
                                seriesData: l,
                                startTime: t,
                                endTime: i,
                                mode: "time-range"
                            }
                        }
                    }
                    if (a && "symbol" === t && this._xAxis) {
                        const e = this._xAxis.getScaleCoeff(),
                            [t, i] = this._xAxis.getDomain(),
                            {
                                min: r,
                                max: o
                            } = Re({
                                startTime: t,
                                endTime: i,
                                viewWidth: this.viewWidth,
                                scale: e,
                                interval: s,
                                ranges: []
                            });
                        return {
                            type: "across-token",
                            params: {
                                seriesData: l,
                                startTime: r,
                                endTime: o,
                                mode: "time-range"
                            }
                        }
                    }
                    return {
                        type: "default",
                        params: {
                            seriesData: l,
                            mode: "first-fetch"
                        }
                    }
                }
                changeSource({
                    symbol: e,
                    interval: t,
                    dataProvider: i
                }) {
                    const r = this.settingStore.getValue("@timeTool.anchorPoint"),
                        o = this.settingStore.getValue("@timeTool.timeAnchorDate.value"),
                        s = a()(this._xAxis),
                        n = a()(s ? .getDomain()),
                        [l, d] = n || [0, 0],
                        h = s ? .getTimeLengthByPixelCount({
                            count: vi.m
                        }) || 0,
                        u = Ci({
                            type: r,
                            min: l + h,
                            max: d - h,
                            defaultDate: o
                        }),
                        {
                            max: g
                        } = s ? .getMinMaxDomainByTime({
                            startTime: l,
                            endTime: d
                        }) || {},
                        p = this.getAttr("symbol"),
                        m = this.getAttr("interval"),
                        x = !c()(e, p),
                        f = !c()(t, m);
                    this.setAttr("symbol", e), this.setAttr("interval", t);
                    const y = this.getAttr("dataFeed");
                    try {
                        y.unSubcribe(), y.setDataProvider(i), y.triggerLoading(!0), y.disableSubscription(), y.setSymbol(e), y.setInterval(t), x && this.resetChart();
                        const o = "" === p,
                            s = x ? "symbol" : f ? "interval" : "none",
                            {
                                type: a,
                                params: l
                            } = this.determineGetDateType({
                                isFirstFetch: o,
                                changeType: s,
                                interval: t,
                                timeAnchorDate: u
                            });
                        y.getData(l, (e => {
                            if (this.setSeriesData({
                                    data: e
                                }), "time-anchor" === a) {
                                const t = this._xAxis.getTimeLengthByPixelCount({
                                        count: vi.m
                                    }),
                                    i = (e => {
                                        switch (e) {
                                            case "left":
                                                return "left";
                                            case "right":
                                                return "right";
                                            default:
                                                return "center"
                                        }
                                    })(r);
                                switch (r) {
                                    case "right":
                                        {
                                            const r = e[e.length - 1];u <= r.time && this.repositionTimeAxis({
                                                time: u + t,
                                                forceAutoScale: !0,
                                                type: i
                                            });
                                            break
                                        }
                                    case "left":
                                        {
                                            const [r] = e,
                                            o = this.getCurrentItemByTime(u - t),
                                            s = Number.isNaN(o ? .close) || void 0 === o ? .close ? r ? .time : u;this.repositionTimeAxis({
                                                time: s,
                                                forceAutoScale: !0,
                                                type: i
                                            });
                                            break
                                        }
                                    default:
                                        {
                                            const [t] = e,
                                            r = this.getCurrentItemByTime(u),
                                            o = Number.isNaN(r ? .close) || void 0 === r ? .close ? t ? .time : u;this.repositionTimeAxis({
                                                time: o,
                                                forceAutoScale: !0,
                                                type: i
                                            })
                                        }
                                }
                            } else if ("across-token" === a && n && g) {
                                const [e, t] = n;
                                this.handleGoneTimeRange({
                                    startTime: e,
                                    endTime: t,
                                    shiftedMaxTime: g
                                })
                            }
                            y.subcribe((e => this.setNextData(e))), y.enableSubscription(), y.triggerLoading(!1), this.fire("doneDataFetching")
                        }), !0)
                    } catch (b) {
                        console.error("[candlestick] fetch data errors: ", b), y.triggerLoading(!1)
                    }
                }
                getEditor() {
                    return this._editor
                }
                getCanvasCollection() {
                    return [this._canvas, this._hitCanvas, this._frameCanvas, this._markCanvas, this._infoCanvas]
                }
                getCanvas() {
                    return this._canvas
                }
                setCanvas(e) {
                    return this._canvas = e, this
                }
                getHitCanvas() {
                    return this._hitCanvas
                }
                setHitCanvas(e) {
                    return this._hitCanvas = e, this
                }
                getMarkCanvas() {
                    return this._markCanvas
                }
                setMarkCanvas(e) {
                    return this._markCanvas = e, this
                }
                getInfoCanvas() {
                    return this._infoCanvas
                }
                setInfoCanvas(e) {
                    return this._infoCanvas = e, this
                }
                getFrameCanvas() {
                    return this._frameCanvas
                }
                setFrameCanvas(e) {
                    return this._frameCanvas = e, this
                }
                getContext() {
                    return this._ctx || this.setContext(this._canvas.getContext("2d")), this._ctx
                }
                setContext(e) {
                    return this._ctx = e, this
                }
                getHitContext() {
                    return this._hitCtx || this.setHitContext(this._hitCanvas.getContext("2d")), this._hitCtx
                }
                setHitContext(e) {
                    return this._hitCtx = e, this
                }
                getMarkContext() {
                    return this._markCtx || this.setMarkContext(this._markCanvas.getContext("2d")), this._markCtx
                }
                setMarkContext(e) {
                    return this._markCtx = e, this
                }
                getInfoContext() {
                    return this._infoCtx || this.setInfoContext(this._infoCanvas.getContext("2d")), this._infoCtx
                }
                setInfoContext(e) {
                    return this._infoCtx = e, this
                }
                getFrameContext() {
                    return this._frameCtx || this.setFrameContext(this._frameCanvas.getContext("2d")), this._frameCtx
                }
                setFrameContext(e) {
                    return this._frameCtx = e, this
                }
                getXAxis() {
                    return this._xAxis
                }
                getTimeAxisWidget() {
                    return this._timeAxisWidget
                }
                getMaxTimestamp() {
                    return this._maxTimestamp
                }
                getSeriesData() {
                    const {
                        seriesData: e = []
                    } = this.getConfig();
                    return e
                }
                getVisibleSeriesData() {
                    return this._xAxis ? this._xAxis.getVisibleSeriesData(this.getSeriesData()) : []
                }
                setCurrentItemByTime(e) {
                    const t = this.getCurrentItemByTime(e);
                    t && this.setAttr("currentItem", t)
                }
                getCurrentItemByTime(e, t) {
                    if (!this._xAxis) return;
                    if (isNaN(e)) return;
                    const i = this.getAttr("seriesData"),
                        r = this.getVisibleSeriesData();
                    if (i && i.length > 0) {
                        const o = i[0].time,
                            s = r[r.length - 1];
                        if (e < o) return {
                            time: e,
                            open: NaN,
                            high: NaN,
                            low: NaN,
                            close: NaN,
                            volume: NaN,
                            change: "NaN",
                            amplitude: "NaN"
                        };
                        if (s && e >= s.time) {
                            const e = i[i.length - 1],
                                t = i[i.length - 2],
                                r = e && t ? (0, oe.e8)((e.close - t.close) / t.close) : "",
                                o = e && t ? (0, oe.e8)((e.high - e.low) / t.close) : "";
                            return { ...e,
                                change: r,
                                amplitude: o
                            }
                        }
                        const n = t || this._xAxis.getTimeUnitValue() / 2,
                            a = (0, oe.El)(i, (t => Math.abs(e - t.time) < n ? 0 : e - t.time)),
                            l = i[a],
                            c = i[a - 1],
                            d = l && c ? (0, oe.e8)((l.close - c.close) / c.close) : "",
                            h = l && c ? (0, oe.e8)((l.high - l.low) / c.close) : "";
                        return { ...l,
                            change: d,
                            amplitude: h
                        }
                    }
                }
                getIndicatorHelperByName(e) {
                    let t = this.getAttr("indicatorHelper") ? .[e];
                    return "function" === typeof t && (t = t()), t
                }
                onResize() {
                    const e = this.getAttr("container");
                    if (!e) return;
                    const {
                        width: t,
                        height: i
                    } = this.getConfig(), r = Math.min(e.clientWidth, 15e3), o = Math.min(e.clientHeight, 15e3);
                    0 !== r && 0 !== o && (this.setAttrs({
                        width: r,
                        height: o
                    }), t === r && i === o && this._oldDevicePixelRatio === this.devicePixelRatio || (this._oldDevicePixelRatio = this.devicePixelRatio, this.resize()), this.fire("resize"))
                }
                resize() {
                    this._oldDevicePixelRatio = this.devicePixelRatio, this.updateContainerSize(), this.refreshTimeAxis({
                        data: this.getSeriesData()
                    }), this.resizeAllPanelBound(), this.renderImmediate(ie.OQ.Resize)
                }
                clearPanel() {
                    const e = this.getContext(),
                        t = this.getMarkContext();
                    Fe.A.clearRect(e), Fe.A.clearRect(t)
                }
                setWidgetParent(e) {
                    e.setParent(this), e.afterSetParent()
                }
                getVisibleTimeExtent() {
                    const e = this.getVisibleSeriesData(),
                        t = e[0] ? .time,
                        i = e[e.length - 1] ? .time;
                    return {
                        min: t,
                        max: i
                    }
                }
                getTimeExtent() {
                    const e = this.getSeriesData();
                    return [e[0] ? .time, e[e.length - 1] ? .time]
                }
                initializeTimeAxis({
                    scale: e,
                    data: t,
                    domain: [i, r]
                }) {
                    if (!r) return null;
                    if (!i) return null;
                    const o = this.getAttr("interval");
                    this._maxTimestamp = r;
                    const s = r - i,
                        n = Be({
                            start: i,
                            end: r
                        }),
                        a = s / (n - 1),
                        l = t.length <= n && "1M" === o,
                        c = l ? a : (e => {
                            const t = e.reduce(((t, i, r) => {
                                    const o = e[r + 1];
                                    return o ? (t.push(o.time - i.time), t) : t
                                }), []),
                                i = (0, Ve.countBy)(t),
                                [r] = (0, Ve.maxBy)(Object.entries(i), (([e, t]) => t)),
                                o = +r;
                            if (o) return +o;
                            const [s, n] = e;
                            return s ? .time && n ? .time ? Math.abs(n.time - s.time) : null
                        })(t);
                    return new Ne({
                        domain: [i, r],
                        range: [0, this.viewWidth],
                        data: t,
                        scaleCoeff: e,
                        isLessThanMonths: l,
                        timeUnitValue: c || re.b1.Day
                    })
                }
                updateTimeAxisView({
                    isReady: e,
                    maxTime: t,
                    sameUnitTime: i,
                    updateType: r = "replace"
                }) {
                    const o = this._xAxis.getDomainInterval();
                    if (e && t && i && "concat" === r) {
                        const {
                            time: e
                        } = this._xAxis.getEasedSliceTime(t, .5 * -o);
                        this.repositionTimeAxis({
                            time: e,
                            forceAutoScale: !1
                        });
                        const i = this.getAttr("currentItem");
                        i && this.setCurrentItemByTime(i.time)
                    } else {
                        const [, e] = this._xAxis.getDomain(), {
                            time: t
                        } = this._xAxis.getEasedSliceTime(e, -o * (.95 - .5));
                        this.repositionTimeAxis({
                            time: t + 5 * this._xAxis.getTimeUnitValue(),
                            forceAutoScale: !0
                        }), this.setCurrentItemByTime(this._maxTimestamp)
                    }
                }
                initContainer() {
                    const e = this.getAttr("container");
                    if (!e) return;
                    const t = e.clientWidth,
                        i = e.clientHeight;
                    this.setAttrs({
                        width: t,
                        height: i
                    });
                    const r = {
                        position: "absolute",
                        left: "0",
                        top: "0",
                        width: "100%",
                        height: "100%"
                    };
                    this.setHitCanvas((0, oe.lP)(t, i, {
                        className: "hit",
                        style: { ...r,
                            zIndex: "1000"
                        }
                    })), this.setMarkCanvas((0, oe.lP)(t, i, {
                        className: "mark",
                        style: { ...r,
                            zIndex: "900"
                        }
                    })), this.setCanvas((0, oe.lP)(t, i, {
                        className: "scene",
                        style: { ...r,
                            zIndex: "200"
                        }
                    })), this.setFrameCanvas((0, oe.lP)(t, i, {
                        className: "frame",
                        style: { ...r,
                            zIndex: "100"
                        }
                    })), this.setInfoCanvas((0, oe.lP)(t, i, {
                        className: "info",
                        style: { ...r,
                            zIndex: "910"
                        }
                    })), this._titleContainer = (0, oe.n)("div", { ...r,
                        height: "0",
                        zIndex: "2000"
                    }, "kline-title-wrap"), this.addElemens([this.getCanvas(), this.getFrameCanvas(), this.getMarkCanvas(), this.getInfoCanvas(), this.getHitCanvas(), this._titleContainer])
                }
                initPanels() {
                    this.initIndicatorViews();
                    const e = new $e.A(ie.HP.BASE, {
                        id: ie._b.CANDLE,
                        indicatorType: ie._b.CANDLE,
                        isScaleCenter: !0
                    });
                    this._timeAxisWidget = new bi;
                    const t = this.getIndicatorPanels(e);
                    this.addPanels([this._timeAxisWidget, e, ...t]), this.initPanelBound()
                }
                getChartTitleRowStyle() {
                    return {
                        padding: this.getAttr("isMobile") ? "2px 4px" : "4px 4px"
                    }
                }
                initIndicatorViews() {
                    (this.getAttr("indicators") || []).forEach((e => {
                        const t = e.type,
                            i = this.getIndicatorHelperByName(t);
                        if (!i) return;
                        const {
                            defaultProps: r
                        } = i, o = (0, oe.n)("div", {}, "chart-title-row");
                        o.addEventListener("mouseenter", (() => {
                            o.classList.add("active")
                        })), o.addEventListener("mouseleave", (() => {
                            o.classList.remove("active")
                        }));
                        const s = {
                            params: {},
                            styles: {},
                            ...e,
                            indicatorType: t,
                            ...r,
                            visible: !0,
                            subElement: o
                        };
                        this.setIndicatorView(e.type, s)
                    }))
                }
                getIndicatorPanels(e) {
                    const t = [];
                    let i = e;
                    return this.indicatorViews.forEach((e => {
                        const {
                            isHistBase: r
                        } = e;
                        if (!r) {
                            const r = new $e.A(ie.HP.EXT, e),
                                o = new Qe(i, r);
                            t.push(o, r), i = r
                        }
                    })), t
                }
                updateContainerSize() {
                    const e = this.getCanvasCollection(),
                        {
                            width: t,
                            height: i
                        } = this.getConfig();
                    this.setAttrs({
                        width: t,
                        height: i
                    });
                    const r = {
                        width: `${t}px`,
                        height: `${i}px`
                    };
                    e.forEach((e => {
                        e.width = t * this.devicePixelRatio, e.height = i * this.devicePixelRatio, (0, oe.EM)(e, r)
                    }))
                }
                shiftTimeLine(e) {
                    const t = this.getXAxis();
                    if (0 === e || !t) return;
                    const i = e / t.unitWidth * t.getTimeUnitValue();
                    this.shiftTimeLineByTime(i)
                }
                shiftTimeLineByTime(e) {
                    const t = this.getXAxis(),
                        [i, r] = this.getTimeExtent(),
                        o = t.getDomainInterval(),
                        s = 6 * t.getTimeUnitValue(),
                        [n] = t.getDomain(),
                        {
                            time: a
                        } = t.getEasedSliceTime(n, e + o),
                        {
                            time: l
                        } = t.getEasedSliceTime(n, e);
                    r < l + s && e > 0 || i + s > a && e < 0 || (t.shiftTime(e), this.updateYAxisWidth({
                        data: this.getSeriesData()
                    }), this.fireAfterTimeShifted(), this.update())
                }
                fireAfterTimeShifted() {
                    if (!this._xAxis) return;
                    const [e, t] = this.getTimeExtent(), [i, r] = this._xAxis.getDomain(), o = {
                        minTime: e,
                        maxTime: t,
                        shiftedMinTime: Math.floor(i),
                        shiftedMaxTime: Math.floor(r),
                        interval: this._xAxis.getDomainInterval()
                    };
                    this.fire("afterTimeShifted", o)
                }
                zoom(e, t) {
                    if (isNaN(e) || e <= 0 || isNaN(t)) return;
                    const {
                        scaleRatio: i
                    } = this.getAttr("xAxis"), r = 2 ** (t * i);
                    this.zoomByCoeff(r, e)
                }
                zoomIn(e = 300) {
                    this.zoomAroundRight(e)
                }
                zoomOut(e = -300) {
                    this.zoomAroundRight(e)
                }
                zoomAroundRight(e) {
                    const {
                        scaleRatio: t
                    } = this.getAttr("xAxis"), i = 2.5 ** (-e * t);
                    this.zoomByCoeff(i), this.updateCurrentItem()
                }
                zoomByCoeff(e, t) {
                    const i = this._xAxis,
                        r = i.getScaleCoeff();
                    void 0 !== t ? i.scaleAroundTimestamp(t, e) : i.scaleAroundRight(e);
                    const o = this.getTimeExtent(),
                        [s, n] = i.getDomain(),
                        a = 6 * i.getTimeUnitValue(),
                        l = i.getDomainInterval();
                    if (s > o[1]) {
                        const {
                            time: e
                        } = i.getEasedSliceTime(o[1], .5 * -l), {
                            time: t
                        } = i.getEasedSliceTime(o[1], .5 * l);
                        i.setDomain({
                            min: e,
                            max: t
                        })
                    }
                    if (o[1] < s + a) {
                        const {
                            time: e
                        } = i.getEasedSliceTime(o[1], -a), {
                            time: t
                        } = i.getEasedSliceTime(o[1], l - a);
                        i.setDomain({
                            min: e,
                            max: t
                        })
                    }
                    if (n < o[0]) {
                        const {
                            time: e
                        } = i.getEasedSliceTime(o[0], -l);
                        i.setDomain({
                            min: e,
                            max: o[0]
                        })
                    }
                    const c = i.getScaleCoeff();
                    (0, oe.be)(r - c) || (this.updateTimeAxis(), this.fireAfterTimeShifted(), this.update())
                }
                setNextData(e) {
                    const t = [{ ...e
                    }];
                    this.setAttr("nextData", t), t.forEach((e => this.addOrUpdateLastData(e))), this.updateCurrentItem(), this.fire("receivedNewCandlestickItem", {
                        data: e
                    })
                }
                addOrUpdateLastData(e) {
                    const t = this.getSeriesData();
                    if (0 === t.length) return this.setSeriesData({
                        data: [e]
                    }), this.update(), void(this._maxTimestamp = e.time);
                    if (!this._xAxis) return;
                    this._checkValid(e), this.formatItem(e), this.setAttr("lastUpdateItem", { ...e
                    });
                    const i = t.slice(t.length - 3),
                        r = h()(i, "time")[e.time],
                        o = t[t.length - 1].time,
                        s = this._xAxis.getTimeUnitValue();
                    if (s !== re.b1[ie.Wx.Second] && e.time - o >= 2 * s) return;
                    if (r) Object.assign(r || {}, e), t.length >= 2 && this.updatePanels(t.length - 1), this.updateYAxis();
                    else if (o < e.time) {
                        if (t.push(e), 2 === t.length) return void this.setSeriesData({
                            data: [...t],
                            updateType: "concat"
                        });
                        this.updatePanels(t.length - 1);
                        const i = this._xAxis.getTimeUnitValue();
                        this._xAxis.domainContains(o - .5 * i) && this._xAxis.shiftTime(i), this.updateTimeAxis()
                    }
                    this.update();
                    const n = this.getAttr("currentItem");
                    if (n && n.time === this._maxTimestamp) {
                        const i = t[t.length - 2],
                            r = i ? (0, oe.e8)((n.close - i.close) / i.close) : "",
                            o = i ? (0, oe.e8)((e.high - e.low) / i.close) : "";
                        this.setAttr("currentItem", { ...e,
                            change: r,
                            amplitude: o
                        })
                    }
                    this._maxTimestamp = e.time
                }
                repositionTimeAxis({
                    time: e,
                    forceAutoScale: t,
                    type: i = "center"
                }) {
                    this._xAxis.reposition({
                        time: e,
                        type: i
                    }), this.updateTimeAxis({
                        forceAutoScale: t
                    })
                }
                refreshTimeAxis({
                    data: e,
                    forceAutoScale: t = !1
                }) {
                    if (!this._xAxis) return;
                    const i = this._xAxis,
                        r = i.getScaleCoeff(),
                        [, o] = i.getDomain(),
                        s = this.initializeTimeAxis({
                            data: e,
                            domain: Ee({
                                data: e
                            }),
                            scale: r
                        });
                    if (!s) return;
                    this._xAxis = s;
                    const n = this._xAxis.getDomainInterval(),
                        {
                            time: a
                        } = this._xAxis.getEasedSliceTime(o, -n);
                    this._xAxis.setDomain({
                        min: a,
                        max: o
                    }), this.updateTimeAxis({
                        forceAutoScale: t
                    })
                }
                executeActionByType(e) {
                    const t = this._editor.getActionByType(e);
                    if (t) return this.clearSelectAnnotation(), this._editor.setNextAction(e), void t();
                    switch (e) {
                        case ie.X2.DefaultCursor:
                            this.setCursor({
                                config: {
                                    show: !1,
                                    style: re.SE.DEFAULT
                                },
                                weight: 100
                            });
                            break;
                        case ie.X2.CrossHairCursor:
                            this.setCursor({
                                config: {
                                    show: !0,
                                    style: re.SE.CROSSHAIR
                                },
                                weight: 100
                            });
                            break;
                        case ie.X2.ToggleVisible:
                            this.toggleAnnotationsVisible();
                            break;
                        case ie.X2.Delete:
                            this._editor.deleteAllAnnotation();
                            break;
                        case ie.X2.KeepDrawing:
                            this._editor.keepDraw();
                            break;
                        case ie.X2.Magnet:
                            this._editor.toggleMagnet();
                            break;
                        case ie.X2.LockDraw:
                            this.setAnnotationLockStatus()
                    }
                }
                updateTimeAxis(e = {
                    forceAutoScale: !1
                }) {
                    this.updateYAxis(e), this.update()
                }
                updateYAxis(e = {
                    forceAutoScale: !1
                }) {
                    this.eachPanels((t => {
                        t instanceof $e.A && t.updateYExtend(e)
                    }))
                }
                closeIndicatorByName(e) {
                    const t = this.getIndicatorViewByName(e);
                    if (!t) return;
                    const i = this.indicatorViews.find((({
                        isHistBase: e
                    }) => e));
                    if (this.deleteIndicatorViewByName(e), t.subElement ? .remove(), t.isHistBase) this._removeIndicatorFromBaseView(t.id, i ? .id === t.id);
                    else {
                        const t = this.getPanel((t => t instanceof $e.A && t.getPanelId() === e));
                        t && (this._removeIndicatorView(t), this.renderImmediate(ie.OQ.Resize))
                    }
                    t.subElement ? .remove(), this.fire("selectIndicatorsChange", {
                        data: this.getSelectIndicators()
                    })
                }
                addIndicatorByName(e, {
                    styles: t = {},
                    isTriggeredByClick: i = !1,
                    weight: r = 0
                } = {
                    styles: {},
                    isTriggeredByClick: !1,
                    weight: 0
                }) {
                    const o = this.getIndicatorHelperByName(e),
                        s = this.indicatorStore.getValues()[e] || {};
                    if (!o || this._indicatorViews.has(e) || !o.getResult) return;
                    const {
                        defaultProps: n
                    } = o, a = (0, oe.n)("div", {}, "chart-title-row");
                    a.addEventListener("mouseenter", (() => {
                        a.classList.add("active")
                    })), a.addEventListener("mouseleave", (() => {
                        a.classList.remove("active")
                    }));
                    const l = {
                        indicatorType: e,
                        id: e,
                        params: s,
                        styles: t,
                        ...n,
                        subElement: a,
                        isTriggeredByClick: i,
                        weight: r
                    };
                    this.setIndicatorView(e, l), l.isHistBase ? this._addIndicatorFromBaseView(l) : this._addIndicatorView(l), this.fire("selectIndicatorsChange", {
                        data: this.getSelectIndicators()
                    })
                }
                setIndicatorVisibleByName(e, t) {
                    if (!this._indicatorViews.has(e)) return;
                    const i = this.getIPanels();
                    for (let r = 0; r < i.length; r++) {
                        const o = i[r];
                        if (o.hasIndicator(e)) return void o.setIndicatorVisible(e, t)
                    }
                }
                showIndicatorsDialog() {
                    this.fire("showIndicatorDialog", {
                        id: ""
                    })
                }
                showTimeTool() {
                    this.fire("showTimeTool")
                }
                showSettingDialog() {
                    this.fire("showSettingDialog")
                }
                handleClassicFeatureToggle({
                    feature: e,
                    key: t
                }) {
                    const i = !this.settingStore.getValue(t);
                    this.settingStore.setValue(t, i), this.fire("featureToggled", {
                        feature: e,
                        enabled: i
                    })
                }
                toggleFeature(e) {
                    switch (e) {
                        case re.O5.ChartTrading:
                            this.handleClassicFeatureToggle({
                                feature: e,
                                key: "@contextMenu.chartTrading"
                            });
                            break;
                        case re.O5.Countdown:
                            this.handleClassicFeatureToggle({
                                feature: e,
                                key: "@contextMenu.countDown"
                            });
                            break;
                        case re.O5.PriceLine:
                            this.handleClassicFeatureToggle({
                                feature: e,
                                key: "@contextMenu.priceLine"
                            });
                            break;
                        case re.O5.AskBid:
                            this.handleClassicFeatureToggle({
                                feature: e,
                                key: "@contextMenu.bidAsk"
                            });
                            break;
                        case re.O5.PercentageScale:
                            {
                                const t = "@contextMenu.percentageScale",
                                    i = "@contextMenu.logarithmicScale",
                                    r = !this.settingStore.getValue(t);this.settingStore.setValue(t, r),
                                this.settingStore.setValue(i, !1),
                                this.updateBasePanel(),
                                this.fire("featureToggled", {
                                    feature: e,
                                    enabled: r
                                });
                                break
                            }
                        case re.O5.LogarithmicScale:
                            {
                                const t = "@contextMenu.percentageScale",
                                    i = "@contextMenu.logarithmicScale",
                                    r = !this.settingStore.getValue(i);this.settingStore.setValue(i, r),
                                this.settingStore.setValue(t, !1),
                                this.updateBasePanel(),
                                this.fire("featureToggled", {
                                    feature: e,
                                    enabled: r
                                });
                                break
                            }
                        case re.O5.InvertedScale:
                            this.handleClassicFeatureToggle({
                                feature: e,
                                key: "@contextMenu.invertedScale"
                            }), this.updateBasePanel();
                            break;
                        case re.O5.InformationMines:
                            this.handleClassicFeatureToggle({
                                feature: e,
                                key: "@contextMenu.informationMines"
                            }), this.updateBasePanel()
                    }
                    this.update()
                }
                enableFeature(e) {
                    const t = this.getAttr("enabledFeatures");
                    t.add(e), this.fire("enabledFeatureChanged", {
                        features: t
                    })
                }
                disableFeature(e) {
                    const t = this.getAttr("enabledFeatures");
                    t.delete(e), this.fire("enabledFeatureChanged", {
                        features: t
                    })
                }
                getFeatureToggleState(e) {
                    const {
                        settingStore: t
                    } = this;
                    switch (e) {
                        case re.O5.QuickOrderFloatingWindow:
                            return t.getValue("@contextMenu.quickOrderFloatingWindow");
                        case re.O5.ChartTrading:
                            return t.getValue("@contextMenu.chartTrading");
                        case re.O5.AskBid:
                            return t.getValue("@contextMenu.bidAsk");
                        case re.O5.PriceLine:
                            return t.getValue("@contextMenu.priceLine");
                        case re.O5.Countdown:
                            return t.getValue("@contextMenu.countDown");
                        case re.O5.PercentageScale:
                            return t.getValue("@contextMenu.percentageScale");
                        case re.O5.LogarithmicScale:
                            return t.getValue("@contextMenu.logarithmicScale");
                        case re.O5.InvertedScale:
                            return t.getValue("@contextMenu.invertedScale");
                        case re.O5.InformationMines:
                            return t.getValue("@contextMenu.informationMines");
                        default:
                            return console.warn(`[candlestick] unknown feature ${e}`), !1
                    }
                }
                resetChart() {
                    this.clearData(), this.getEditor().clear()
                }
                clearData() {
                    this.clearPanel(), this.setIsLoaded(!1), this.setAttr("lastUpdateItem", null)
                }
                setSymbolInfo(e, t) {
                    (0, se.Gv)(e) ? this._regContext = { ...this._regContext,
                        ...e
                    }: t && (this._regContext[e] = t)
                }
                appendVolIndicators(e) {
                    const t = this.getAttr("indicatorHelper"),
                        i = (e => {
                            const t = _e(e);
                            return Le.reduce(((e, i) => (e[i] = t[i], e)), {})
                        })(this);
                    Le.forEach((r => {
                        t[r] || (t[r] = i[r], e.forEach((({
                            indicators: e = [],
                            weight: t
                        }) => {
                            e.forEach((({
                                id: e,
                                styles: i,
                                isTriggeredByClick: o
                            }) => {
                                e === r && this.addIndicatorByName(e, {
                                    styles: i,
                                    isTriggeredByClick: o,
                                    weight: t
                                })
                            }))
                        })))
                    })), this.fire("allIndicatorsChange", {
                        data: this.getAllIndicators()
                    })
                }
                removeVolIndicators() {
                    const e = this.getAttr("indicatorHelper");
                    Le.forEach((t => {
                        delete e[t], this.closeIndicatorByName(t)
                    })), this.fire("allIndicatorsChange", {
                        data: this.getAllIndicators()
                    })
                }
                getAllIndicators() {
                    const e = this.getAttr("indicatorHelper") || {},
                        t = Object.keys(e),
                        i = [],
                        r = {};
                    for (let o = 0, s = t.length; o < s; o++) {
                        const e = this.getIndicatorHelperByName(t[o]);
                        if (e) {
                            const {
                                defaultProps: t
                            } = e, {
                                id: o = "",
                                title: s,
                                isHistBase: n,
                                isCustom: a,
                                isBacktest: l,
                                categories: c = []
                            } = t;
                            r[o] || (i.push({
                                id: o,
                                name: s,
                                isMain: n,
                                isCustom: !!a,
                                isBacktest: !!l,
                                categories: c
                            }), r[o] = 1)
                        }
                    }
                    return i
                }
                getSelectIndicators() {
                    return this.indicatorViews.map((({
                        id: e,
                        indicatorType: t,
                        isHistBase: i,
                        isCustom: r,
                        categories: o
                    }) => ({
                        id: e,
                        name: t,
                        categories: o,
                        isMain: !!i,
                        isCustom: !!r
                    })))
                }
                hasIndicatorByName(e) {
                    return this._indicatorViews.has(e)
                }
                updateIndicatorParams(e) {
                    const t = this.getIndicatorViewByName(e);
                    if (t) {
                        const i = { ...t
                        };
                        i.params = this.getIndicatorParams(e), this.setIndicatorView(e, i);
                        const {
                            isHistBase: r
                        } = t, o = this.getPanel((t => t instanceof $e.A && (r ? t.panelType === ie.HP.BASE : t.getPanelId() === e)));
                        o.updateParams(e, i.params, (() => {
                            o.save({
                                type: "indicator"
                            }), o.update()
                        }))
                    }
                }
                registerCustomIndicator(e, t = {}) {
                    const i = this.getAttr("indicatorHelper");
                    t.defaultProps.isDiffSource && (t = we(t)), i[e] = t, this.fire("allIndicatorsChange", {
                        data: this.getAllIndicators()
                    })
                }
                removeCustomIndicatorByName(e) {
                    const t = this.getAttr("indicatorHelper");
                    this.hasIndicatorByName(e) && this.closeIndicatorByName(e), delete t[e], this.fire("allIndicatorsChange", {
                        data: this.getAllIndicators()
                    })
                }
                registerCustomIndicatorCallback({
                    onAdd: e,
                    onEdit: t,
                    onRemove: i
                }) {
                    e && this.setAttr("onAddCustomIndicator", e), t && this.setAttr("onEditCustomIndicator", t), i && this.setAttr("onRemoveCustomIndicator", i)
                }
                getColorFromColorTable(e, t) {
                    const i = this.settingStore.getValue(e),
                        r = this.indicatorStore.getValue(e);
                    return i || r || this.getColorTable()[e] || t || e
                }
                selectAnnotation(e, t) {
                    this.fire("selectAnnotation", {
                        data: e,
                        action: t
                    })
                }
                getSave() {
                    const e = this.indicatorStore.getValues(),
                        t = this.settingStore.getValues(),
                        i = [];
                    return this.eachPanels((e => {
                        e instanceof $e.A && (e.updateStorageData(), i.push({
                            type: e.getAttr("indicatorType"),
                            ...e.getSavedData()
                        }))
                    })), {
                        storeData: i,
                        indicatorSetting: e,
                        setting: t
                    }
                }
                fireSave(e) {
                    if (this.getAttr("isSaveReady")) try {
                        const {
                            storeData: t
                        } = this.getSave();
                        this.fire("saveChartNeeded", {
                            data: t,
                            action: e.type
                        })
                    } catch (t) {
                        console.warn(`[candlestick] save annotations occurred error: ${t.message}`)
                    }
                }
                async loadChart({
                    data: e,
                    reload: t = !1
                }) {
                    this._editor.deleteAllAnnotation();
                    const i = t || this.getAttr("needToReloadIndicator");
                    try {
                        if (i) {
                            this.removeAllIndicators();
                            for (let t = 0; t < e.length; t++) {
                                const {
                                    indicators: i = [],
                                    weight: r
                                } = e[t];
                                for (let e = 0; e < i.length; e++) {
                                    await (0, p.a)();
                                    const {
                                        id: t,
                                        styles: o,
                                        isTriggeredByClick: s
                                    } = i[e];
                                    t && this.addIndicatorByName(t, {
                                        styles: o,
                                        isTriggeredByClick: s,
                                        weight: r
                                    })
                                }
                            }
                        }
                        const t = this.filterPanels((e => e instanceof $e.A));
                        for (let i = 0; i < t.length; i++) {
                            const r = t[i];
                            if (e[i] && r) {
                                const {
                                    annotations: t = []
                                } = e[i];
                                for (let e = 0, i = t.length; e < i; e++) this.getEditor().transformJSONToAnnotation(t[e], r)
                            }
                        }
                        return await (0, p.a)(), this.fire("chartLoaded"), Promise.resolve({})
                    } catch (r) {
                        return console.error("[candlestick] basicKline loadChart occurred error:", r), Promise.reject({
                            error: r.message
                        })
                    }
                }
                setAnnotationLockStatus(e) {
                    if (void 0 === e) {
                        const e = this.getAttr("annotationLock");
                        this.setAttr("annotationLock", !e)
                    } else this.setAttr("annotationLock", e)
                }
                toggleAnnotationsVisible() {
                    const e = this.getAttr("annotationVisible");
                    this.setAttr("annotationVisible", !e), e && this.getEditor().clearEvents(), this.update()
                }
                clearSelectAnnotation() {
                    this.eachPanels((e => {
                        const t = e.getAnnotations();
                        for (let i = 0, r = t.length; i < r; i++) t[i].setAttr("isEdit", !1)
                    }))
                }
                manageInformationMines(e) {
                    this._editor.manageInformationMines({ ...e,
                        onToggled: t => {
                            this.fire("informationMineIconToggled", t), e.onToggled ? .(t)
                        }
                    })
                }
                manageOrderLines(e) {
                    this._editor.manageOrders(e)
                }
                managePositionLines(e) {
                    this._editor.managePositions(e)
                }
                manageExecutionOrders(e) {
                    this._editor.manageExecutionOrders(e)
                }
                manageLabelLines(e) {
                    this._editor.manageLabelLines(e)
                }
                manageSingleLabelLines(e) {
                    this._editor.manageSingleLabelLines(e)
                }
                manageAlerts(e) {
                    this._editor.manageAlerts(e)
                }
                getShapeById(e) {
                    return this._editor.getShapeById(e)
                }
                updateCurrentItem() {
                    const e = this.getPanel((e => e instanceof $e.A && e.mainPane.getAttr("isMouseover")));
                    e && e.mainPane.drawFeatures()
                }
                updateTitle(e) {
                    if (e) {
                        const t = this.getPanel((e => e instanceof $e.A && e.panelType === ie.HP.BASE)),
                            i = this.getPanel((t => t instanceof $e.A && t.getPanelId() === e)) || t;
                        i ? .updateTitleLabel()
                    } else this.getIPanels().forEach((e => {
                        e.updateTitleLabel()
                    }))
                }
                goForward() {
                    const {
                        unitWidth: e
                    } = this._xAxis;
                    this.shiftTimeLine(-e);
                    const t = this.getAttr("currentItem");
                    if (t) {
                        const e = this._xAxis.getTimeUnitValue();
                        this.setCurrentItemByTime(t.time - e), this.updateCurrentItem()
                    }
                }
                goNext() {
                    const {
                        unitWidth: e
                    } = this._xAxis;
                    this.shiftTimeLine(e);
                    const t = this.getAttr("currentItem");
                    if (t) {
                        const e = this._xAxis.getTimeUnitValue();
                        this.setCurrentItemByTime(t.time + e), this.updateCurrentItem()
                    }
                }
                getCloseItemByTime(e) {
                    return (0, We.rN)({
                        time: e,
                        tolerance: this._xAxis.getTimeUnitValue() / 2,
                        seriesData: this.getAttr("seriesData") || []
                    })
                }
                getPositionOfCandlestickItem(e) {
                    const t = this.getBasePanel();
                    return {
                        x: t.xAxis.getCoordOfValue(e.time),
                        y: t.transformXYToAbsoluteXY({
                            x: 0,
                            y: t.getYPos(+e.high)
                        }).y
                    }
                }
                isWithinSeriesData({
                    startTime: e,
                    endTime: t
                }) {
                    const [i, r] = this.getTimeExtent();
                    return t <= r + this._xAxis.getTimeUnitValue() && e >= i
                }
                getDateText(e) {
                    const t = this.getBasePanel();
                    return (0, oe.Ni)(e, t.xAxis.getTimeScaleType())
                }
                refreshChart({
                    cb: e
                }) {
                    const t = Date.now(),
                        {
                            max: i
                        } = this._xAxis.getMinMaxDomainByTime({
                            startTime: t,
                            endTime: t
                        }),
                        r = this.getAttr("dataFeed");
                    r.triggerLoading(!0), r.disableSubscription(), this.setSeriesData({
                        data: []
                    }), this.update(), r.reset(), r.getData({
                        mode: "first-fetch",
                        seriesData: this.getSeriesData()
                    }, (t => {
                        this.setSeriesData({
                            data: t,
                            scale: 1.5
                        }), r.triggerLoading(!1), r.enableSubscription(), e ? .({
                            shiftedMaxTime: i,
                            isLast: !1
                        })
                    }), !0)
                }
                goToTheLatestDate({
                    time: e,
                    cb: t
                }) {
                    this.isWithinSeriesData({
                        startTime: e,
                        endTime: e
                    }) ? this.animateGoToDate({
                        time: e,
                        cb: t
                    }) : this.refreshChart({
                        cb: t
                    })
                }
                goDate({
                    time: e
                }) {
                    const {
                        min: t,
                        max: i
                    } = this._xAxis.getMinMaxDomainByTime({
                        startTime: e,
                        endTime: e
                    });
                    if (this.isWithinSeriesData({
                            startTime: e,
                            endTime: e
                        })) {
                        const t = this.getCloseItemByTime(e);
                        if (!t) return;
                        this.repositionTimeAxis({
                            time: t.time,
                            forceAutoScale: !0
                        }), this.fire("onDateTooltip", {
                            item: t,
                            shiftedMaxTime: i,
                            isLast: !1
                        })
                    } else {
                        const r = this.getAttr("dataFeed");
                        r.triggerLoading(!0), r.disableSubscription(), this.setSeriesData({
                            data: []
                        }), this.update(), r.reset(), r.getData({
                            startTime: t,
                            mode: "go-to-date",
                            seriesData: this.getSeriesData()
                        }, (t => {
                            this.setSeriesData({
                                data: t
                            });
                            const o = this.getCloseItemByTime(e);
                            if (o) {
                                this.repositionTimeAxis({
                                    time: o.time,
                                    forceAutoScale: !0
                                });
                                const [e] = this.getTimeExtent();
                                this.fire("onDateTooltip", {
                                    item: o,
                                    shiftedMaxTime: i,
                                    isLast: o.time <= e
                                })
                            }
                            r.triggerLoading(!1), r.enableSubscription(), this.fire("doneGoDate")
                        }), !0)
                    }
                }
                animateGoToDate({
                    time: e,
                    rightShift: t = 5,
                    cb: i
                }) {
                    const {
                        max: r
                    } = this._xAxis.getMinMaxDomainByTime({
                        startTime: e,
                        endTime: e
                    }), o = this._xAxis.getTimeShiftedBy({
                        time: e,
                        right: t
                    }), {
                        max: n
                    } = this.getVisibleTimeExtent();
                    if (!n) return;
                    const a = this.getXAxis(),
                        l = e => {
                            a.shiftTime(e), this.updateTimeAxis(), this.fireAfterTimeShifted(), this.update()
                        },
                        c = o - n,
                        d = c / 500,
                        h = (({
                            f: e = ze,
                            duration: t
                        }) => i => {
                            const r = s()(i / t, 0, 1);
                            return e(r)
                        })({
                            duration: 500
                        });
                    let u, g, p = 0;
                    const m = e => {
                        g = g || e;
                        const t = Math.min(e - g, 500),
                            s = void 0 === u ? 0 : u - g,
                            n = h(t),
                            a = h(s),
                            x = t * (n * d) - s * (a * d);
                        p += x, l(x);
                        u = e, p >= c ? i ? .({
                            item: this.getCloseItemByTime(o),
                            shiftedMaxTime: r,
                            isLast: !1
                        }) : window.requestAnimationFrame(m)
                    };
                    window.requestAnimationFrame(m)
                }
                goRangeHelper(e) {
                    this._xAxis.goToRange(e), this.updateTimeAxis({
                        forceAutoScale: !0
                    })
                }
                handleGoneTimeRange({
                    startTime: e,
                    endTime: t,
                    shiftedMaxTime: i
                }) {
                    const r = this.isWithinSeriesData({
                            startTime: e,
                            endTime: e
                        }),
                        o = this.isWithinSeriesData({
                            startTime: t,
                            endTime: t
                        });
                    if (r || o) this.goRangeHelper({
                        startTime: e,
                        endTime: t
                    });
                    else {
                        const t = this.getCloseItemByTime(e);
                        t && (this.repositionTimeAxis({
                            time: t.time,
                            forceAutoScale: !0
                        }), this.fire("onDateTooltip", {
                            item: t,
                            shiftedMaxTime: i,
                            isLast: !0
                        }))
                    }
                }
                goTimeRange({
                    startTime: e,
                    endTime: t
                }) {
                    if (this.isWithinSeriesData({
                            startTime: e,
                            endTime: t
                        })) this.goRangeHelper({
                        startTime: e,
                        endTime: t
                    });
                    else {
                        const {
                            shiftedTime: i,
                            viewportTime: r,
                            scale: o
                        } = (({
                            startTime: e,
                            endTime: t,
                            viewWidth: i,
                            interval: r
                        }) => {
                            const o = t - i / 2 * r,
                                n = Math.max(o, e),
                                a = t - n,
                                l = i / Math.floor(a / r),
                                c = s()(10 / l, .2, 5);
                            return {
                                shiftedTime: Re({
                                    startTime: n,
                                    endTime: t,
                                    viewWidth: i,
                                    scale: c,
                                    interval: r,
                                    ranges: []
                                }),
                                viewportTime: {
                                    min: n,
                                    max: t
                                },
                                scale: c
                            }
                        })({
                            startTime: e,
                            endTime: t,
                            viewWidth: this.viewWidth,
                            interval: this._xAxis.getTimeUnitValue()
                        }), n = this.getAttr("dataFeed");
                        n.triggerLoading(!0), n.disableSubscription(), this.setSeriesData({
                            data: []
                        }), this.update(), n.reset(), n.getData({
                            startTime: i.min,
                            endTime: i.max,
                            mode: "time-range",
                            seriesData: this.getSeriesData()
                        }, (e => {
                            this.setSeriesData({
                                data: e,
                                scale: o
                            }), this.handleGoneTimeRange({
                                startTime: r.min,
                                endTime: r.max,
                                shiftedMaxTime: i.max
                            }), n.triggerLoading(!1), n.enableSubscription(), this.fire("doneGoTimeRange")
                        }), !0)
                    }
                }
                getFirstSeriesData() {
                    return this.getSeriesData()[0] || {}
                }
                getLastSeriesData() {
                    const e = this.getSeriesData();
                    return e[e.length - 1] || {}
                }
                getLastSeriesDataClosePrice() {
                    return this.getLastSeriesData().close
                }
                getFirstVisibleSeriesData() {
                    return this.getVisibleSeriesData()[0] || {}
                }
                getFirstVisibleSeriesDataClosePrice() {
                    return this.getFirstVisibleSeriesData() ? .close
                }
                getFirstVisibleSeriesDataAsRelativePercentage({
                    value: e,
                    formatter: t = e => e.toFixed(2)
                }) {
                    const i = this.getFirstVisibleSeriesDataClosePrice();
                    return `${t((e-i)/i*100)}%`
                }
                getPercentageTextRelativeToLastPrice({
                    price: e
                }) {
                    const t = this.getAttr("precision"),
                        i = this.getLastSeriesDataClosePrice(),
                        r = (+this.getBasePanel().formatterValue(e) - i) / i * 100;
                    return `${r>0?"+":""}${r.toFixed(s()(t,2,4))}%`
                }
                updateBasePanel() {
                    const e = this.getPanel((e => e instanceof $e.A && e.panelType === ie.HP.BASE));
                    e && (e.setYAxis(), e.mainPane.drawFeatures())
                }
                clickPlaceOrder({
                    price: e,
                    formattedPrice: t,
                    mousePosition: i
                }) {
                    this.fire("clickPlaceOrder", {
                        price: e,
                        formattedPrice: t,
                        mousePosition: i
                    })
                }
                drawHorizontalLine(e) {
                    this.getEditor().transformJSONToAnnotation({
                        type: ie.X2.HorizontalLine,
                        color: it.A.getCacheStyle(ie.X2.HorizontalLine, "color"),
                        lineWidth: it.A.getCacheStyle(ie.X2.HorizontalLine, "lineWidth"),
                        lineStyle: it.A.getCacheStyle(ie.X2.HorizontalLine, "lineStyle"),
                        data: {
                            time: 0,
                            value: e
                        }
                    })
                }
                isPlaceOrderHovered(e) {
                    const t = this.getPanel((e => e instanceof $e.A && e.panelType === ie.HP.BASE));
                    return t ? .mainPane.isPlaceOrderHovered(e)
                }
                blurInformationMines() {
                    this.getPanel((e => e instanceof $e.A && e.panelType === ie.HP.BASE)).getAnnotations().find((e => e.getAttr("type") === ie.X2.InformationMines)).blurInformationMines()
                }
                isInformationMinesHovered(e) {
                    const t = this.getPanel((e => e instanceof $e.A && e.panelType === ie.HP.BASE)),
                        i = t.getAnnotations().find((e => e.getAttr("type") === ie.X2.InformationMines)),
                        r = t.transformPointToView(e),
                        o = { ...r,
                            y: -r.y
                        };
                    return i.isHover(o)
                }
                updatePricePrecision() {
                    const e = this.getSeriesData(),
                        {
                            tickSize: t,
                            getPricePrecision: i
                        } = this.getAttr("candlestick"),
                        r = i ? .(e),
                        o = r ? ? t ? ? (0, We.iX)(e);
                    this.setAttr("precision", o)
                }
                getTolerance() {
                    switch (this._xAxis ? .getTimeScaleType()) {
                        case ie.Wx.Hour:
                        case ie.Wx.Minute:
                        case ie.Wx.Second:
                            return this._xAxis ? .getTimeUnitValue();
                        default:
                            return
                    }
                }
                setChartType(e) {
                    this.settingStore.setChartType(e), this.updateBasePanel(), this.update()
                }
                getCalculatedChartType() {
                    return this.settingStore.getCalculatedChartType()
                }
                formatValue(e) {
                    return this.getBasePanel().formatterValue(e)
                }
                setAutoScaleForAllPanels({
                    value: e
                }) {
                    this.getIPanels().forEach((t => t.setAttr("autoScale", e)))
                }
                setAutoScaleForPanel({
                    panelId: e,
                    value: t
                }) {
                    const i = this.getIPanels().find((t => t.getPanelId() === e));
                    i ? .setAttr("autoScale", t)
                }
                toggleAutoScaleForPanel({
                    panelId: e
                }) {
                    const t = this.getIPanels().find((t => t.getPanelId() === e));
                    if (!t) return;
                    const i = t.getAttr("autoScale");
                    t.setAttr("autoScale", !i)
                }
                removeAllIndicators() {
                    this._indicatorViews.forEach(((e, t) => {
                        this.closeIndicatorByName(t)
                    }))
                }
                isVolumeDisabled(e) {
                    return this.getAttr("isVolumeDisabled") && Le.includes(e)
                }
                addNotification(e) {
                    this._notifications.push(e), this.fire("notificationAdded", e), e.lifetime && setTimeout((() => this.removeNotification(e.id)), e.lifetime)
                }
                removeNotification(e) {
                    const t = this._notifications.find((t => t.id === e));
                    t && (this._notifications = this._notifications.filter((t => t.id !== e)), this.fire("notificationRemoved", t))
                }
                getNotifications() {
                    return [...this._notifications]
                }
                isStoreLoaded() {
                    return this.settingStore.isLoaded() && this.indicatorStore.isLoaded()
                }
                _addIndicatorFromBaseView(e) {
                    const t = this.getPanel((e => e instanceof $e.A && e.panelType === ie.HP.BASE));
                    t && this.isLoaded() && (t.updateChartData(0, (() => {
                        t.setYAxis(), t.updateTitleLabel(), t.update(ie.OQ.Resize)
                    })), (0, se.Et)(e.weight) && e.weight > 0 && t.weight !== e.weight && (t.updateWeight(e.weight), this.updatePanelBound()), t.save({
                        type: "indicator"
                    }))
                }
                _checkValid(e) {
                    const t = ["time", "open", "high", "low", "close", "volume", "quantity"];
                    for (let i = 0; i < t.length; i++) isNaN(parseFloat(e[t[i]])) && this.fire("dispatchErrorData", {
                        data: {
                            type: "invalidData",
                            payload: {
                                data: e
                            }
                        }
                    })
                }
                _addIndicatorView(e) {
                    let t;
                    for (let o = this.panels.length - 1; o >= 0; o--) {
                        const e = this.panels[o];
                        if (e instanceof $e.A) {
                            t = e;
                            break
                        }
                    }
                    const i = new $e.A(ie.HP.EXT, e),
                        r = new Qe(t, i);
                    this.addPanels([r, i]), i.save({
                        type: "indicator"
                    }), this.isLoaded() && (this.updatePanelBound(), i.updateChartData(0, (() => {
                        i.setYAxis(), i.updateTitleLabel(), this.renderImmediate(ie.OQ.Resize)
                    })))
                }
                _removeIndicatorFromBaseView(e, t) {
                    const i = this.getPanel((e => e instanceof $e.A && e.panelType === ie.HP.BASE)),
                        r = this.indicatorViews.find((({
                            isHistBase: e
                        }) => e)),
                        o = r ? .subElement;
                    i && (i.setYAxis(), t && o && i.addFoldIcon(o, "main-indicators-fold"), i.removeIndicator(e), i.save({
                        type: "indicator"
                    }), i.update())
                }
                _removeIndicatorView(e) {
                    let t, i;
                    const r = new Set([e]),
                        o = this.filterPanels((e => e instanceof Qe));
                    for (let s = 0; s < o.length; s++) {
                        const r = o[s];
                        r.nextPanel === e && (t = r), r.frontPanel === e && (i = r)
                    }
                    i ? (r.add(i), t.nextPanel = i.nextPanel) : r.add(t), e.save({
                        type: "indicator"
                    }), this.removePanels(r), this.updatePanelBound()
                }
                updatePanels(e) {
                    this.eachPanels((t => {
                        t instanceof $e.A && !t.isDiffPanel && t.updateChartData(e, (() => {
                            t.setYAxis(), t.updateTitleLabel(), t.update()
                        }))
                    }))
                }
                getYAxisWidth() {
                    const {
                        right: e = 0
                    } = this.getAttr("margin");
                    return e
                }
                setSeriesData({
                    data: e,
                    updateType: t,
                    scale: i,
                    forceAutoScale: r
                }) {
                    this.setAttr("seriesData", e);
                    const o = Ee({
                            data: e
                        }),
                        s = this._xAxis ? .getScaleCoeff() || void 0;
                    this.initializeData({
                        data: e,
                        domain: o,
                        updateType: t,
                        scale: void 0 === i ? s : i,
                        forceAutoScale: r
                    })
                }
                initializeData({
                    data: e,
                    domain: t,
                    updateType: i,
                    scale: r,
                    forceAutoScale: o = !0
                }) {
                    if (e.length <= 0) return;
                    const s = this.isLoaded(),
                        n = this._xAxis,
                        a = n ? .getTimeUnitValue(),
                        [, l] = n ? .getDomain() || [];
                    this.updatePricePrecision();
                    const c = this.initializeTimeAxis({
                        data: e,
                        domain: t,
                        scale: r
                    });
                    if (!c) return;
                    this._xAxis = c;
                    const d = this._xAxis.getTimeUnitValue();
                    this.updateTimeAxisView({
                        isReady: s,
                        sameUnitTime: a === d,
                        updateType: i,
                        maxTime: l
                    }), this.updatePanels(), this.initPanelYAxis(), this.updateYAxisWidth({
                        data: e,
                        forceAutoScale: o
                    }), this.setIsLoaded(!0), s || this.fire("chartReady"), this._lastDataTime = e[e.length - 1].time
                }
                updateYAxisWidth({
                    data: e,
                    forceAutoScale: t
                }) {
                    const i = this.getLongestYAxisWidth() + 8,
                        r = this.getAttr("margin");
                    this.setAttr("margin", { ...r,
                        right: i
                    }), this.initPanelBound(ie.dp.All), this.refreshTimeAxis({
                        data: e,
                        forceAutoScale: t
                    })
                }
                initEvents() {
                    this.watch("askBid", (() => {
                        this.update()
                    })), this.watch("margin", (({
                        newVal: e
                    }) => {
                        this.fire("marginChanged", {
                            margin: e
                        })
                    })), this.watch("currentItem", (0, oe.nF)((() => {
                        this.updateTitle()
                    }), 0)), this.on("autoScaleChanged", (() => {
                        this.updateYAxisWidth({
                            data: this.getSeriesData()
                        })
                    }));
                    const e = g()((e => (0, We.XG)(e, {
                        abortPredicate: () => this.getAttr("dataFeed").isFetchingData,
                        onAbort: e.cb,
                        handleLoadLeft: t => {
                            this.getAttr("dataFeed").getData({
                                endTime: t.minTime,
                                mode: "load-past",
                                seriesData: this.getSeriesData()
                            }, (t => {
                                t.length > 0 && this.setSeriesData({
                                    data: t,
                                    updateType: "concat",
                                    forceAutoScale: !1
                                }), e.cb ? .()
                            }))
                        },
                        handleLoadRight: t => {
                            this.getAttr("dataFeed").getData({
                                startTime: t.maxTime,
                                mode: "load-future",
                                seriesData: this.getSeriesData()
                            }, (t => {
                                t.length > 0 && this.setSeriesData({
                                    data: t,
                                    updateType: "concat",
                                    forceAutoScale: !1
                                }), e.cb ? .()
                            }))
                        }
                    })), 500);
                    this.on("afterTimeShifted", e);
                    const t = this.getHitCanvas();
                    t && re.Xl.forEach((e => {
                        At.A.on(t, e, this.eventHandler.bind(this, e), !0)
                    }));
                    const i = this.getAttr("container");
                    if (i) {
                        At.A.on(i, "mouseout", (e => {
                            const {
                                originEvent: t
                            } = e, r = t.target;
                            i.contains(r) || this.setCurrentItemByTime(this._maxTimestamp)
                        }));
                        new r.default((() => this.onResize())).observe(i)
                    }
                }
                getMainPanelBound() {
                    return this.getBasePanel().bound
                }
                eventHandler(e, t) {
                    if (!this._xAxis) return;
                    const i = {
                            click: this.onclick,
                            dblclick: this.ondblclick,
                            mousedown: this.onmousedown,
                            mousemove: this.onmousemove,
                            wheel: this.onmousewheel,
                            mouseup: this.onmouseup,
                            mouseout: this.onmouseout,
                            gesturestart: this.ongesturestart,
                            gesturechange: this.ongesturechange,
                            gestureend: this.ongestureend,
                            contextmenu: this.oncontextmenu
                        },
                        {
                            originEvent: r
                        } = t;
                    void 0 !== t.clientX && void 0 !== t.clientY && (t.point = (0, oe.Pt)({ ...t,
                        target: r.target
                    })), i[e] && (t.isDealed = !1, i[e].call(this, t))
                }
                onclick(e) {
                    const t = i => {
                        i.contain(e.point) && (i instanceof $e.A && i.eachWidgets(t), i instanceof Ye.A && i.eachAnnotations(t), i.fire("click", e))
                    };
                    this.eachPanels(t), this.fire("click", e)
                }
                ondblclick(e) {
                    const t = i => {
                        i.contain(e.point) && (i instanceof $e.A && i.eachWidgets(t), i instanceof Ye.A && i.eachAnnotations(t), i.fire("dblclick", e))
                    };
                    this.eachPanels(t)
                }
                onmousedown(e) {
                    const t = i => {
                        const r = i.contain(e.point);
                        r && (i instanceof $e.A && i.eachWidgets(t), i instanceof Ye.A && i.eachAnnotations(t), i.fire("mousedown", e)), i.setAttr("isMousedown", r)
                    };
                    this.eachPanels(t), this.fire("mousedown", e)
                }
                onmousemove(e) {
                    let t = !1;
                    const i = r => {
                        r instanceof $e.A && r.eachWidgets(i), r instanceof Ye.A && r.eachAnnotations(i);
                        const o = r.getAttr("isMouseover"),
                            s = r.contain(e.point);
                        s && r.fire("mousemove", e), !t && s ? (t = r instanceof Ye.A || r instanceof $e.A, !o && r.fire("mouseover", e), r.setAttr("isMouseover", !0)) : o && (r.fire("mouseout", e), r.setAttr("isMouseover", !1))
                    };
                    this.eachPanels(i, !0), this.fire("mousemove", e)
                }
                onmouseup(e) {
                    const t = i => {
                        i.contain(e.point) && (i instanceof $e.A && i.eachWidgets(t), i instanceof Ye.A && i.eachAnnotations(t), i.fire("mouseup", e))
                    };
                    this.eachPanels(t), this.fire("mouseup", e)
                }
                onmouseout() {
                    const e = t => {
                        t instanceof $e.A && t.eachWidgets(e), t.getAttr("isMouseover") && (t.fire("mouseout"), t.setAttr("isMouseover", !1))
                    };
                    this.eachPanels(e), this.setCurrentItemByTime(this._maxTimestamp)
                }
                onmousewheel(e) {
                    const t = i => {
                        i.contain(e.point) && (i instanceof $e.A && i.eachWidgets(t), i.fire("mousewheel", e))
                    };
                    this.eachPanels(t), this.fire("mousewheel", e)
                }
                ongesturestart(e) {
                    const t = i => {
                        i.contain(e.point) && (i instanceof $e.A && i.eachWidgets(t), i.fire("gesturestart", e))
                    };
                    this.eachPanels(t), this.fire("gesturestart", e)
                }
                ongesturechange(e) {
                    const t = i => {
                        i.contain(e.point) && (i instanceof $e.A && i.eachWidgets(t), i.fire("gesturechange", e))
                    };
                    this.eachPanels(t), this.fire("gesturechange", e)
                }
                ongestureend(e) {
                    const t = i => {
                        i.contain(e.point) && (i instanceof $e.A && i.eachWidgets(t), i.fire("gestureend", e))
                    };
                    this.eachPanels(t), this.fire("gestureend", e)
                }
                oncontextmenu(e) {
                    if (this.getAttr("isMobile")) return;
                    const t = i => {
                        i.contain(e.point) && (i instanceof $e.A && i.eachWidgets(t), i instanceof Ye.A && i.eachAnnotations(t), i.fire("contextmenu", e))
                    };
                    this.eachPanels(t);
                    const i = this.panels.find((t => t.contain(e.point))),
                        r = i instanceof $e.A ? i.getPriceOfYPos(i.getBound().y - e.point.y) : void 0,
                        o = i instanceof $e.A && r ? i.formatterValue(r) : void 0;
                    this.fire("contextmenu", {
                        event: e,
                        panel: i,
                        price: r,
                        formattedPrice: o
                    }), e.originEvent.preventDefault()
                }
                formatItem(e) {
                    ["time", "open", "high", "low", "close", "volume", "quantity"].forEach((t => {
                        e[t] = parseFloat(e[t])
                    }))
                }
                getBasePanel() {
                    return this.getPanel((e => e instanceof $e.A && e.panelType === ie.HP.BASE))
                }
                constructor(t) {
                    super(), this._maxTimestamp = 0, this._oldDevicePixelRatio = this.devicePixelRatio, this._regContext = {
                        baseAsset: "",
                        quoteAsset: ""
                    }, this._notifications = [], this.setCursor = (0, oe.J0)(((e, t) => {
                        if (e.isClear && e.key === t ? .key) return {
                            config: {},
                            weight: 0
                        };
                        return t && t.weight > e.weight ? t : e
                    }), (e => {
                        const {
                            config: t,
                            isRecord: i = !0
                        } = e, r = this.getAttr("container"), o = this.getAttr("crossHair"), s = t.style || o.style;
                        r && (0, oe.EM)(r, {
                            cursor: s
                        }), i && s !== o.style && (s === re.SE.DEFAULT && Fe.A.clearRect(this.getHitContext()), this.setAttr("crossHair", { ...o,
                            ...t
                        }))
                    })), this.unSelectAnnotation = (0, oe.sg)((() => {
                        const e = this.getIPanels();
                        for (let t = 0; t < e.length; t++) {
                            const i = e[t].getAnnotations();
                            for (let e = 0, t = i.length; e < t; e++)
                                if (i[e].getAttr("isEdit")) return
                        }
                        this.fire("unSelectAnnotation")
                    }), 100), this.config = (0, oe.rL)(a()(e.defaultConfig), { ...t,
                        indicatorHelper: _e(this)
                    }), this.initContainer(), this.initPanels(), this.initEvents(), this.initializeData({
                        data: [],
                        domain: [void 0, void 0]
                    }), this._editor = new xi(this)
                }
            };
            wi.defaultConfig = { ...Ge.A.defaultConfig,
                ...fi,
                precision: 2,
                margin: {
                    left: 0,
                    top: 0,
                    right: 0,
                    bottom: 0
                },
                tick: {
                    width: 0,
                    textMargin: 8
                },
                width: 0,
                height: 0,
                dataFeed: new m.$,
                symbol: "",
                interval: "",
                indicators: [],
                askBid: {
                    ask: 0,
                    bid: 0
                },
                lastUpdateItem: null,
                annotationVisible: !0,
                annotationLock: !1,
                onAddCustomIndicator: () => !1,
                onEditCustomIndicator: () => !1,
                onRemoveCustomIndicator: () => !1,
                needToReloadIndicator: !0,
                isHiddenLogo: !1,
                needToHiddenAnnotationTool: !0,
                enabledFeatures: new Set,
                isVolumeDisabled: !1,
                isSaveReady: !1,
                volumePrecision: NaN,
                volumeFormatNumber: !0
            }
        },
        sqaW: (e, t, i) => {
            i.d(t, {
                A: () => p,
                F: () => g
            });
            var r = i("VLTf"),
                o = i.n(r),
                s = i("T9sr"),
                n = i.n(s),
                a = i("ym1p"),
                l = i("HV0L"),
                c = i("tNHi"),
                d = i("jYFu"),
                h = i("0x5b"),
                u = i("p7cX");
            const g = {
                radius: 6,
                hover_border_width: 1,
                border_width: 2,
                highlight_border_width: 4,
                border_color: l._j.Blue3,
                fill_color: "#ffffff",
                hover_border_color: "#EA3CF7",
                text_color: "#ffffff",
                default_line_color: l._j.Blue3,
                default_border_color: "#9013FE"
            };
            let p = class extends a.A {
                static getCacheStyle(e, t) {
                    return (this.cacheStyle[e] || {})[t]
                }
                static updateCacheStyle(e, t) {
                    const i = this.cacheStyle[e] || {};
                    this.cacheStyle[e] = { ...i,
                        ...t
                    }
                }
                static getPreEditAttributes(e) {
                    return { ...this.cacheStyle[e] || {},
                        showTextEdit: !1,
                        showLock: !1,
                        showDelete: !1
                    }
                }
                get parent() {
                    return this._parent
                }
                isLock() {
                    return this.getAttr("isLock")
                }
                getParent() {
                    return this._parent
                }
                setParent(e) {
                    return this._parent = e, this
                }
                setData(e) {
                    return this.setAttr("data", e), this
                }
                getData() {
                    return this.getAttr("data")
                }
                isIndependent() {
                    return !1
                }
                initWeakMap() {
                    this.getShapes().forEach((e => {
                        this.shapeWeakMap.set(e, null)
                    }))
                }
                initEvents() {
                    let e = null;
                    this.watch("isEdit", (({
                        newVal: t
                    }) => {
                        if (t) return;
                        const i = this.getAttr("data");
                        e = i
                    })), this.watch(["isHover", "isEdit"], (() => {
                        this.getAttr("isComplete") && (this.setVisibleShapes(), this.update())
                    })), this.watch("isComplete", (({
                        newVal: t
                    }) => {
                        if (!t) return;
                        this.update();
                        const i = this.getAttr("data");
                        o()(i, e) || this.syncStorage()
                    })), this.watch(["color", "lineWidth", "lineStyle", "background", "isLock", "text", "textColor", "textFontSize", "isTextBold"], (({
                        oldVal: e,
                        newVal: t
                    }) => {
                        !o()(e, t) && this.isValid() && this.syncStorage()
                    })), this.on("mousedown", d.Io.MOUSE_DOWN, this.delectShapeEdit.bind(this)), this.on("mousemove", d.Io.MOUSE_MOVE, this.delectShapeMousemove.bind(this)), this.watch("color", this.watchStyleHook.bind(this, "color")), this.watch("lineWidth", this.watchStyleHook.bind(this, "lineWidth")), this.watch("lineStyle", this.watchStyleHook.bind(this, "lineStyle")), this.watch("background", this.watchStyleHook.bind(this, "background")), this.watch("textColor", this.watchStyleHook.bind(this, "textColor")), this.watch("textFontSize", this.watchStyleHook.bind(this, "textFontSize")), this.watch("isTextBold", this.watchStyleHook.bind(this, "isTextBold")), this.initCustomEvents()
                }
                addWidgetShapes(e, t) {
                    const i = this._addWidgetShape.bind(this, e);
                    t.forEach(i)
                }
                setAnnotationToWidgets(e) {
                    e.forEach((e => {
                        e.addAnnotation(this)
                    }))
                }
                startDraw() {
                    this.setAttr("isComplete", !1)
                }
                compeleDraw() {
                    setTimeout((() => {
                        this.setAttr("isComplete", !0)
                    }))
                }
                isValid() {
                    return !!this.getData()
                }
                transformYPoint(e) {
                    return {
                        x: e.x,
                        y: -e.y
                    }
                }
                remove(e = !0) {
                    if (this.destroy(), this.syncStorage(), e && this._parent) {
                        this.update();
                        this._parent.getParent().unSelectAnnotation()
                    }
                }
                destroy() {
                    const e = this.getShapes();
                    for (let t = 0; t < e.length; ++t) {
                        const i = e[t],
                            r = this.shapeWeakMap.get(i);
                        r && (r.removeShape(i), r.removeAnnotation(this), this.shapeWeakMap.delete(i))
                    }
                    this.afterDestroy()
                }
                clearShapes() {
                    this.getShapes().forEach((e => {
                        const t = this.shapeWeakMap.get(e);
                        if (t) try {
                            t.removeShape(e), this.shapeWeakMap.delete(e)
                        } catch (i) {
                            throw console.warn("log error, target: ", t), i
                        }
                    }))
                }
                getRenderPanes() {
                    const e = this.getParent();
                    if (!e) return [];
                    const {
                        mainPane: t,
                        axisPane: i,
                        timeAxisPane: r
                    } = e;
                    return [t, i, r]
                }
                render() {
                    this.getRenderPanes().forEach((e => {
                        e.update(l.OQ.Marks)
                    }))
                }
                update() {
                    const e = this.getParent();
                    !this._isWating && e && (this._isWating = !0, requestAnimationFrame((() => {
                        this.render(), this._isWating = !1
                    })))
                }
                updateData() {
                    this.updateTick(this.updateImmediate)
                }
                updateTick(e) {
                    if (this._lastTick !== this._currentTick) {
                        const t = this._currentTick;
                        this._currentTick = this._lastTick, "function" === typeof e && e.call(this), Promise.resolve().then((() => {
                            this._lastTick = t
                        }))
                    }
                }
                delectShapeEdit(e) {
                    if (this._parent) {
                        const t = this._parent.getParent(),
                            {
                                mainPane: i
                            } = this._parent,
                            r = this.getAttr("isComplete"),
                            o = this.getAttr("isNeedStore");
                        if (r && o) {
                            const {
                                x: r,
                                y: o
                            } = i.transformPointToView(e.point);
                            this.isHover({
                                x: r,
                                y: -o
                            }) && !e.isDealed ? (this.setAttr("isEdit", !0), t.selectAnnotation(this, this.getAttr("type"))) : (t.unSelectAnnotation(), this.setAttr("isEdit", !1))
                        }
                    }
                }
                delectShapeMousemove(e) {
                    if (this._parent) {
                        const {
                            mainPane: t
                        } = this._parent, {
                            x: i,
                            y: r
                        } = t.transformPointToView(e.point);
                        this.isHover({
                            x: i,
                            y: -r
                        }) ? (this._parent.updateCursorStyle(!0, this.isHoverDragable({
                            x: i,
                            y: -r
                        }), this.isDragging()), !e.isDealed && this.setAttr("isHover", !0), e.isDealed = !0) : (this._parent.updateCursorStyle(!1, !1, !1), this.setAttr("isHover", !1))
                    }
                }
                contain() {
                    return !!this.getParent()
                }
                updateVertexBorderAndVisible(e, t) {
                    const i = {
                        isVisible: !t,
                        strokeStyle: t ? g.hover_border_color : g.border_color
                    };
                    this.updateVertex(e, i)
                }
                updateVertex(e, t) {
                    Array.isArray(e) ? e.forEach((e => {
                        e.setAttrs(t)
                    })) : e.setAttrs(t)
                }
                recoverDragVertexts() {
                    const e = {
                        isVisible: !0,
                        strokeStyle: g.border_color,
                        radius: g.radius
                    };
                    this.updateVertex(this.getVertexs(), e)
                }
                getNoDragVertexs(e) {
                    const t = this.getVertexs(),
                        i = t.indexOf(e);
                    return t.splice(i, 1), t
                }
                updateHighlightVertexBorderWidth(e, t) {
                    const i = e.getAttr("lineWidth"),
                        r = this.getAttr("isEdit"),
                        o = t ? g.highlight_border_width : r ? g.border_width : g.hover_border_width;
                    return e.setAttr("lineWidth", o), i !== o
                }
                initCustomEvents() {}
                getEditAttribute() {
                    const {
                        color: e,
                        lineWidth: t,
                        lineStyle: i,
                        background: r,
                        isLock: o,
                        textColor: s,
                        textFontSize: n,
                        isTextBold: a,
                        isTextEdit: l
                    } = this.getConfig();
                    return {
                        showColor: !0,
                        color: e,
                        showWidth: !0,
                        lineWidth: t,
                        showStyle: !0,
                        lineStyle: i,
                        showBg: !1,
                        background: r,
                        isLock: o,
                        showTextColor: !1,
                        textColor: s,
                        showFontSize: !1,
                        textFontSize: n,
                        showTextBold: !1,
                        isTextBold: a,
                        showTextEdit: !1,
                        isTextEdit: l,
                        showLock: !0,
                        showDelete: !0
                    }
                }
                applyAttributes(e) {
                    this.setAttrs(e)
                }
                getDescription() {
                    const {
                        data: e,
                        type: t,
                        color: i,
                        background: r,
                        lineWidth: o,
                        lineStyle: s,
                        isLock: n
                    } = this.getConfig();
                    return {
                        data: e,
                        type: t,
                        color: i,
                        background: r,
                        lineWidth: o,
                        lineStyle: s,
                        isLock: n
                    }
                }
                getCacheStyleKey() {
                    return this.getAttr("type")
                }
                isDisableDrag() {
                    const e = this.getParent(),
                        t = e ? .getParent();
                    return !this.getAttr("isComplete") || t.getAttr("annotationLock") || this.isLock()
                }
                getDefaultStyle() {
                    const e = this.getCacheStyleKey();
                    return h.A[e]
                }
                refreshDefaultStyle() {
                    const e = this.getDefaultStyle();
                    this.applyAttributes(e)
                }
                watchStyleHook(e) {
                    switch (e) {
                        case "color":
                            {
                                const e = this.getAttr("color");this.updateColor(e);
                                break
                            }
                        case "lineWidth":
                            {
                                const e = this.getAttr("lineWidth");this.updateLineWidth(e);
                                break
                            }
                        case "lineStyle":
                            {
                                const e = this.getAttr("lineStyle");this.updateLineStyle((e => {
                                    switch (e) {
                                        case l.Sc.DOTTED:
                                            return [2, 2];
                                        case l.Sc.DASHED:
                                            return [6, 6];
                                        case l.Sc.DASHED_2:
                                            return [4, 4];
                                        case l.Sc.SOLID:
                                        default:
                                            return []
                                    }
                                })(e));
                                break
                            }
                        case "background":
                            {
                                const e = this.getAttr("background");this.updateBackground(e);
                                break
                            }
                        case "textColor":
                            {
                                const e = this.getAttr("textColor");this.updateTextColor(e);
                                break
                            }
                        case "textFontSize":
                            {
                                const e = this.getAttr("textFontSize");this.updateTextSize(e);
                                break
                            }
                        case "isTextBold":
                            {
                                const e = this.getAttr("isTextBold");this.updateTextBold(e ? l.BC.BOLD : l.BC.NORMAL);
                                break
                            }
                    }
                    this.update()
                }
                getPoint(e) {
                    if (!this.parent) return {
                        time: 0,
                        value: 0
                    };
                    const t = this.parent.transformAbsoluteXYToPlotItem(e),
                        i = this.parent.transformPointToView(e);
                    return { ...t,
                        value: this.parent.magnetizeY({
                            y: i.y
                        }).price
                    }
                }
                updateColor(e) {}
                updateLineWidth(e) {}
                updateLineStyle(e) {}
                updateBackground(e) {}
                updateTextColor(e) {}
                updateTextSize(e) {}
                updateTextBold(e) {}
                afterDestroy() {}
                _addWidgetShape(e, t) {
                    this.shapeWeakMap.get(t) !== e && (this.shapeWeakMap.set(t, e), e.addShape(t))
                }
                isHoverDragable(e) {
                    return !1
                }
                isDragging() {
                    return !1
                }
                constructor() {
                    super(), this.id = (0, u.Os)(), this.shapeWeakMap = new WeakMap, this._lastTick = 0, this._currentTick = 1, this._isWating = !1, this.syncStorage = (0, u.sg)((() => {
                        const e = this.getParent();
                        this.getAttr("isSaveable") && e && e.save({
                            type: "annotation"
                        })
                    }), 100), this.initEvents()
                }
            };
            p.dragVertex = new c.jl({
                data: {
                    x: 0,
                    y: 0
                },
                radius: g.radius,
                strokeStyle: g.border_color,
                fillStyle: g.fill_color,
                fill: !0,
                lineWidth: g.border_width
            }), p.dragRect = new c.rw({
                data: {
                    x: 0,
                    y: 0
                },
                width: 12,
                height: 12,
                borderRadius: 2,
                strokeStyle: g.border_color,
                fillStyle: g.fill_color,
                lineWidth: g.border_width,
                useCache: !0
            }), p.line = new c.N1({
                strokeStyle: g.default_line_color,
                lineWidth: 1
            }), p.text = new c.EY({
                content: "",
                fillStyle: g.default_line_color,
                fontSize: 12
            }), p.defaultConfig = { ...a.A.defaultConfig,
                type: l.X2.LeftArrow,
                data: null,
                isHover: !1,
                isEdit: !0,
                isComplete: !1,
                isLock: !1,
                color: "",
                lineWidth: 1,
                lineStyle: l.Sc.SOLID,
                background: "",
                textColor: "#848E9C",
                textFontSize: 16,
                isTextBold: !1,
                isTextEdit: !1,
                isNeedStore: !0,
                isSaveable: !1
            }, p.cacheStyle = n()(h.A)
        },
        "52IT": (e, t, i) => {
            i.d(t, {
                x: () => c,
                A: () => d
            });
            var r = i("GKEL"),
                o = i("tNHi");
            let s = class {
                setShowRedDot(e) {
                    this.showRedDot = e
                }
                setState(e) {
                    this.state = e, this.updateState()
                }
                updateState() {
                    if (this.normalIcon && this.hoverIcon && this.toggledIcon) switch (this.state) {
                        case "hover":
                            this.icon.setImage(this.hoverIcon), this.redDot.setAttr("isVisible", !1);
                            break;
                        case "toggled":
                            this.icon.setImage(this.toggledIcon), this.redDot.setAttr("isVisible", !1);
                            break;
                        default:
                            this.icon.setImage(this.normalIcon), this.redDot.setAttr("isVisible", this.showRedDot)
                    }
                }
                idle() {
                    switch (this.state) {
                        case "hover":
                        case "toggled":
                            this.setState("idle")
                    }
                }
                hover(e) {
                    if (this.icon.isHover(e)) {
                        if ("idle" === this.state) this.setState("hover");
                        return !0
                    }
                    if ("hover" === this.state) this.setState("idle");
                    return !1
                }
                toggle(e) {
                    if (this.icon.isHover(e)) {
                        switch (this.state) {
                            case "toggled":
                                this.setState("hover");
                                break;
                            case "hover":
                                this.setState("toggled")
                        }
                        return !0
                    }
                    switch (this.state) {
                        case "toggled":
                        case "hover":
                            this.setState("idle")
                    }
                    return !1
                }
                async setIcons({
                    normalIconUrl: e,
                    hoveredIconUrl: t,
                    toggledIconUrl: i
                }) {
                    await this.setNormalIcon(e), await this.setHoverIcon(t), await this.setToggledIcon(i)
                }
                async setNormalIcon(e) {
                    const t = await (0, r.SR)({
                        url: e
                    });
                    this.normalIcon = t, this.updateState()
                }
                async setHoverIcon(e) {
                    const t = await (0, r.SR)({
                        url: e
                    });
                    this.hoverIcon = t, this.updateState()
                }
                async setToggledIcon(e) {
                    const t = await (0, r.SR)({
                        url: e
                    });
                    this.toggledIcon = t, this.updateState()
                }
                constructor({
                    normalIconUrl: e,
                    hoveredIconUrl: t,
                    toggledIconUrl: i,
                    showRedDot: r
                }) {
                    this.icon = new o._V({
                        width: 22,
                        height: 22,
                        isLoading: !0
                    }), this.redDot = new o.jl({
                        width: 3,
                        height: 3,
                        fill: !0,
                        fillStyle: "#FCD535",
                        strokeStyle: "#FCD535",
                        radius: 4,
                        isVisible: !1
                    }), this.state = "idle", this.normalIcon = null, this.hoverIcon = null, this.toggledIcon = null, this.setShowRedDot(r), this.setIcons({
                        normalIconUrl: e,
                        hoveredIconUrl: t,
                        toggledIconUrl: i
                    })
                }
            };
            const n = ({
                    color: e
                }) => `\n  <svg width="10" height="10" viewBox="0 0 10 10" fill="none" xmlns="http://www.w3.org/2000/svg">\n  <path fill-rule="evenodd" clip-rule="evenodd" d="M9.5 5C9.5 7.48528 7.48528 9.5 5 9.5C2.51472 9.5 0.5 7.48528 0.5 5C0.5 2.51472 2.51472 0.5 5 0.5C7.48528 0.5 9.5 2.51472 9.5 5ZM5.8837 4.99955L7.38652 6.50237L6.50264 7.38625L4.99982 5.88343L3.49741 7.38584L2.61353 6.50195L4.11593 4.99955L2.61355 3.49716L3.49744 2.61328L4.99982 4.11566L6.50261 2.61287L7.3865 3.49675L5.8837 4.99955Z" fill="${e}"/>\n  </svg>\n`,
                a = {
                    dark: {
                        normal: n({
                            color: "#5E6673"
                        }),
                        hovered: n({
                            color: "#EAECEF"
                        })
                    },
                    light: {
                        normal: n({
                            color: "#B7BDC6"
                        }),
                        hovered: n({
                            color: "#202630"
                        })
                    }
                };
            let l = class {
                setState(e) {
                    this.state = e, this.updateState()
                }
                updateState() {
                    if (this.normalIcon && this.hoveredIcon)
                        if ("hovered" === this.state) this.icon.setImage(this.hoveredIcon);
                        else this.icon.setImage(this.normalIcon)
                }
                idle() {
                    if ("hovered" === this.state) this.setState("idle")
                }
                hover(e) {
                    if (this.icon.isHover(e)) {
                        if ("idle" === this.state) this.setState("hovered");
                        return !0
                    }
                    if ("hovered" === this.state) this.setState("idle");
                    return !1
                }
                toggle(e) {
                    return this.updateState(), this.icon.isHover(e)
                }
                async setIcons({
                    theme: e
                } = {
                    theme: "dark"
                }) {
                    await this.setNormalIcon(e), await this.setHoveredIcon(e)
                }
                async setNormalIcon(e) {
                    const t = await (0, r.WZ)(a[e].normal);
                    this.normalIcon = t, this.updateState()
                }
                async setHoveredIcon(e) {
                    const t = await (0, r.WZ)(a[e].hovered);
                    this.hoveredIcon = t, this.updateState()
                }
                constructor({
                    theme: e
                }) {
                    this.state = "idle", this.icon = new o._V({
                        width: 10,
                        height: 10,
                        isLoading: !0,
                        isVisible: !1
                    }), this.normalIcon = null, this.hoveredIcon = null, this.setIcons({
                        theme: e
                    })
                }
            };
            var c;
            ! function(e) {
                e.Body = "Body", e.Close = "Close", e.None = "None"
            }(c || (c = {}));
            let d = class {
                idle() {
                    this.bodyIcon.idle(), this.closeIcon.idle(), this.closeIcon.icon.setAttr("isVisible", !1)
                }
                hover(e) {
                    const t = this.bodyIcon.hover(e),
                        i = this.closeIcon.hover(e),
                        r = t || i,
                        o = !r && this.bodyIcon.showRedDot;
                    return this.bodyIcon.redDot.setAttr("isVisible", o), this.closeIcon.icon.setAttr("isVisible", r), t ? "Body" : i ? "Close" : "None"
                }
                toggle(e) {
                    const t = this.bodyIcon.toggle(e),
                        i = this.closeIcon.toggle(e);
                    return this.closeIcon.icon.setAttr("isVisible", t || i), i ? "Close" : t ? "Body" : "None"
                }
                isHover(e) {
                    return this.bodyIcon.icon.isHover(e) || this.closeIcon.icon.isHover(e)
                }
                getShapes() {
                    return [this.closeIcon.icon, this.bodyIcon.redDot, this.bodyIcon.icon]
                }
                async setIcons({
                    normalIconUrl: e,
                    hoveredIconUrl: t,
                    toggledIconUrl: i,
                    theme: r
                }) {
                    await this.bodyIcon.setIcons({
                        normalIconUrl: e,
                        hoveredIconUrl: t,
                        toggledIconUrl: i
                    }), await this.closeIcon.setIcons({
                        theme: r
                    })
                }
                constructor({
                    id: e,
                    normalIconUrl: t,
                    hoveredIconUrl: i,
                    toggledIconUrl: r,
                    showRedDot: o,
                    theme: n
                }) {
                    this.id = e, this.bodyIcon = new s({
                        normalIconUrl: t,
                        hoveredIconUrl: i,
                        toggledIconUrl: r,
                        showRedDot: o
                    }), this.closeIcon = new l({
                        theme: n
                    })
                }
            }
        },
        JGBb: (e, t, i) => {
            i.d(t, {
                d: () => l
            });
            var r, o = i("HV0L"),
                s = i("eY1w"),
                n = i("tNHi"),
                a = i("qIYA");
            ! function(e) {
                e.LINE = "line", e.BODY = "body"
            }(r || (r = {}));
            class l {
                update(e) {
                    this.id = e.id, this.price = e.price, this.quantity = e.quantity, this.text = e.text, this.showCloseButton = e.showCloseButton, this.editable = e.editable, this.closeIconColor = e.closeIconColor, this.priceBackground = e.priceBackground, this.priceColor = e.priceColor, this.priceBorderColor = e.priceBorderColor, this.quantityBackground = e.quantityBackground, this.quantityColor = e.quantityColor, this.quantityBorderColor = e.quantityBorderColor, this.borderColor = e.borderColor, this.lineColor = e.lineColor, this.priceLabelBackground = e.priceLabelBackground, this.priceLabelBorderColor = e.priceLabelBorderColor, this.priceLabelColor = e.priceLabelColor, this.lineDash = e.lineDash, this.dragSquareIconColor = e.dragSquareIconColor, this.dragSquareBackgroundColor = e.dragSquareBackgroundColor, this.dragSquareDraggingBackgroundColor = e.dragSquareDraggingBackgroundColor, this.draggingLineDash = e.draggingLineDash, this.tooltipBorderColor = e.tooltipBorderColor, this.tooltipBackgroundColor = e.tooltipBackgroundColor, this.tooltipTextColor = e.tooltipTextColor, this.priceTooltipText = e.priceTooltipText, this.quantityTooltipText = e.quantityTooltipText, this.closeTooltipText = e.closeTooltipText, this.onClose = e.onClose, this.onPriceChange = e.onPriceChange, this.onQuantityChange = e.onQuantityChange, this.onClickDragArea = e.onClickDragArea, this.onClickQuantity = e.onClickQuantity, this.onClickPrice = e.onClickPrice
                }
                draw({
                    panel: e
                }) {
                    const {
                        mainPane: t
                    } = e, i = e.getParent(), r = i.settingStore.getValue("@contextMenu.percentageScale"), o = e.getYPos(+this.price), s = i.getAttr("isMobile"), {
                        width: n
                    } = e.getMainBound();
                    let a = s ? 0 : .25 * n;
                    this.dragIconBorder.setAttrs({
                        strokeStyle: this.borderColor,
                        fillStyle: this._isDragging ? this.dragSquareDraggingBackgroundColor : this.dragSquareBackgroundColor,
                        data: {
                            x: a,
                            y: -o - .5 * this.dragIconBorder.getHeight()
                        },
                        width: 16,
                        height: 20,
                        isVisible: this.editable
                    }), this.dragIcon.setAttrs({
                        fillStyle: this.dragSquareIconColor,
                        data: {
                            x: a + .5 * (this.dragIconBorder.getWidth() - this.dragIcon.getWidth()),
                            y: -o - .5 * this.dragIcon.getHeight()
                        },
                        width: 12,
                        height: 12,
                        isVisible: this.editable
                    }), a += this.dragIconBorder.getWidth(), this.priceLabel.setAttrs({
                        background: this.priceBackground,
                        color: this.priceColor,
                        borderColor: this.priceBorderColor,
                        data: {
                            x: a,
                            y: -o
                        },
                        text: this.text,
                        borderRadius: [this.editable ? 0 : 4, "" !== this.quantity || this.showCloseButton ? 0 : 4, "" !== this.quantity || this.showCloseButton ? 0 : 4, this.editable ? 0 : 4]
                    }), a += this.priceLabel.getWidth() - 1, this.quantityLabel.setAttrs({
                        background: this.quantityBackground,
                        color: this.quantityColor,
                        borderColor: this.quantityBorderColor,
                        data: {
                            x: a,
                            y: -o
                        },
                        text: this.quantity,
                        padding: "" !== this.quantity ? [12, 2] : [0, 0],
                        borderRadius: [0, this.showCloseButton ? 0 : 4, this.showCloseButton ? 0 : 4, 0]
                    }), a += this.quantityLabel.getWidth() - 1, this.closeIconBorder.setAttrs({
                        strokeStyle: this.borderColor,
                        fillStyle: this.dragSquareBackgroundColor,
                        data: {
                            x: a,
                            y: -o - this.closeIconBorder.getHeight() / 2
                        },
                        isVisible: this.showCloseButton
                    }), this.closeIcon.setAttrs({
                        fillStyle: this.closeIconColor,
                        data: {
                            x: a + .5 * (this.closeIconBorder.getWidth() - this.closeIcon.getWidth()),
                            y: -o - .5 * this.closeIcon.getHeight()
                        },
                        isVisible: this.showCloseButton
                    }), a += this.closeIconBorder.getWidth(), this.line.setAttrs({
                        strokeStyle: this.lineColor,
                        lineDash: this._isDragging ? this.draggingLineDash : this.lineDash,
                        data: {
                            p1: {
                                x: a,
                                y: -o
                            },
                            p2: {
                                x: t.getBound().width,
                                y: -o
                            }
                        }
                    }), this.yLabel.setAttrs({
                        background: this.priceLabelBackground,
                        color: this.priceLabelColor,
                        borderColor: this.priceLabelBorderColor,
                        data: {
                            x: 1,
                            y: -o
                        },
                        text: r ? i.getFirstVisibleSeriesDataAsRelativePercentage({
                            value: +this.price
                        }) : e.formatterValue(+this.price)
                    });
                    const l = this.priceLabel.getAttr("data"),
                        c = this.quantityLabel.getAttr("data"),
                        d = this.closeIcon.getAttr("data");
                    this.priceTooltip.setAttrs({
                        background: this.tooltipBackgroundColor,
                        color: this.tooltipTextColor,
                        borderColor: this.tooltipBorderColor,
                        text: this.priceTooltipText,
                        data: {
                            x: l.x + (this.priceLabel.getWidth() - this.priceTooltip.getWidth()) / 2,
                            y: l.y - 4 - (this.priceLabel.getHeight() + this.priceTooltip.getHeight()) / 2
                        }
                    }), this.quantityTooltip.setAttrs({
                        background: this.tooltipBackgroundColor,
                        color: this.tooltipTextColor,
                        borderColor: this.tooltipBorderColor,
                        text: this.quantityTooltipText,
                        data: {
                            x: c.x + (this.quantityLabel.getWidth() - this.quantityTooltip.getWidth()) / 2,
                            y: c.y - 4 - (this.quantityLabel.getHeight() + this.quantityTooltip.getHeight()) / 2
                        }
                    }), this.closeTooltip.setAttrs({
                        background: this.tooltipBackgroundColor,
                        color: this.tooltipTextColor,
                        borderColor: this.tooltipBorderColor,
                        text: this.closeTooltipText,
                        data: {
                            x: d.x + (this.closeIcon.getWidth() - this.closeTooltip.getWidth()) / 2,
                            y: d.y - 4 - (this.closeIcon.getHeight() + this.closeTooltip.getHeight()) / 2
                        }
                    })
                }
                getShapes() {
                    return [...this.getMainPaneShapes(), ...this.getPriceAxisPaneShapes(), ...this.getTooltipShapes()]
                }
                getMainPaneShapes() {
                    return [this.dragIconBorder, this.dragIcon, this.priceLabel, this.quantityLabel, this.closeIconBorder, this.closeIcon, this.line]
                }
                getTooltipShapes() {
                    return [this.priceTooltip, this.quantityTooltip, this.closeTooltip]
                }
                getPriceAxisPaneShapes() {
                    return [this.yLabel]
                }
                isHovered(e) {
                    return this.showCloseButton && this.closeIconBorder.isHover(e) || !!this.editable && (this.dragIconBorder.isHover(e) || this.line.isHover(e) || this.priceLabel.isHover(e) || this.quantityLabel.isHover(e))
                }
                isDragging() {
                    return this._isDragging
                }
                handleShowTooltip(e) {
                    this.editable && (this.priceTooltip.setAttrs({
                        isVisible: !!this.priceTooltip.getAttr("text") && this.priceLabel.isHover(e) || this.dragIconBorder.isHover(e)
                    }), this.quantityTooltip.setAttrs({
                        isVisible: "" !== this.quantity && !!this.quantityTooltip.getAttr("text") && this.quantityLabel.isHover(e)
                    })), this.closeTooltip.setAttrs({
                        isVisible: this.showCloseButton && !!this.closeTooltip.getAttr("text") && this.closeIcon.isHover(e)
                    })
                }
                hideTooltip() {
                    this.priceTooltip.setAttrs({
                        isVisible: !1
                    }), this.quantityTooltip.setAttrs({
                        isVisible: !1
                    }), this.closeTooltip.setAttrs({
                        isVisible: !1
                    })
                }
                handleMouseDown({
                    pt: e,
                    panel: t,
                    setDealed: i
                }) {
                    if (this._prevPrice = this.price, this._prevQuantity = this.quantity, this.showCloseButton && this.closeIconBorder.isHover(e)) i(), this.onClose ? .(this.getDescription());
                    else if (this.editable && (this.dragIconBorder.isHover(e) || this.priceLabel.isHover(e) || this.line.isHover(e))) {
                        i();
                        const r = this.dragIconBorder.isHover(e) ? "dragIcon" : this.priceLabel.isHover(e) ? "price" : "line",
                            s = "line" === r ? "line" : "body",
                            n = this.price;
                        let l = n;
                        t.mainPane.on("mousemove", `${o.X2.OpenOrders}`, (e => {
                            const {
                                y: i
                            } = t.transformPointToView(e.point), r = t.formatterValue(t.getPriceOfYPos(i));
                            this.price = r, l = r, this._isDragging = !0
                        })), a.A.on(document, `mouseup.${o.X2.OpenOrders}`, (() => {
                            t.mainPane.off("mousemove", `${o.X2.OpenOrders}`), a.A.off(document, `mouseup.${o.X2.OpenOrders}`), this._isDragging = !1;
                            l !== n && this.onPriceChange ? .({ ...this.getDescription(),
                                price: l,
                                triggerType: s
                            }), this.onClickDragArea ? .({
                                triggerType: s,
                                prevPrice: n,
                                currentPrice: l
                            }), "price" === r && this.onClickPrice ? .({ ...this.getDescription(),
                                prevPrice: n,
                                currentPrice: l
                            })
                        }))
                    } else this.editable && "" !== this.quantity && this.quantityLabel.isHover(e) && this.onClickQuantity ? .(this.getDescription())
                }
                getDescription() {
                    return {
                        id: this.id,
                        price: this.price,
                        prevPrice: this._prevPrice,
                        quantity: this.quantity,
                        prevQuantity: this._prevQuantity
                    }
                }
                constructor(e) {
                    this.update(e), this.dragIcon = new n.Ge({
                        path: s.sF,
                        width: 12,
                        height: 12,
                        fillStyle: this.dragSquareIconColor,
                        fill: !0,
                        stroke: !1
                    }), this.dragIconBorder = new n.rw({
                        fill: !0,
                        strokeStyle: this.borderColor,
                        fillStyle: this.dragSquareBackgroundColor,
                        lineWidth: 1,
                        width: 16,
                        height: 20,
                        borderRadius: [4, 0, 0, 4]
                    }), this.closeIcon = new n.Ge({
                        path: s.K1,
                        width: 10,
                        height: 11,
                        fillStyle: this.closeIconColor,
                        fill: !0,
                        stroke: !1
                    }), this.closeIconBorder = new n.rw({
                        fill: !0,
                        strokeStyle: this.borderColor,
                        fillStyle: this.dragSquareBackgroundColor,
                        lineWidth: 1,
                        width: 20,
                        height: 20,
                        borderRadius: [0, 4, 4, 0]
                    }), this.priceLabel = new n.JU({
                        background: this.priceBackground,
                        color: this.priceColor,
                        borderColor: this.priceBorderColor,
                        dir: o.OP.Right,
                        stroke: !0,
                        fill: !0,
                        padding: [12, 2],
                        fixHeight: 21,
                        lineWidth: 1
                    }), this.quantityLabel = new n.JU({
                        background: this.quantityBackground,
                        color: this.quantityColor,
                        borderColor: this.quantityBorderColor,
                        dir: o.OP.Right,
                        fill: !0,
                        stroke: !0,
                        padding: [12, 2],
                        fixHeight: 21,
                        lineWidth: 1
                    }), this.line = new n.N1({
                        strokeStyle: this.lineColor,
                        lineDash: this.lineDash
                    }), this.yLabel = new n.JU({
                        background: this.priceLabelBackground,
                        color: this.priceLabelColor,
                        borderColor: this.priceLabelBorderColor,
                        dir: o.OP.Right,
                        fill: !0,
                        stroke: !0,
                        padding: [5, 0],
                        borderRadius: 4,
                        fixHeight: 22,
                        lineWidth: 1,
                        fontSize: 12,
                        fontStyle: "400",
                        fontFamily: "BinancePlex"
                    }), this.priceTooltip = new n.JU({
                        background: this.tooltipBackgroundColor,
                        color: this.tooltipTextColor,
                        borderColor: this.tooltipBorderColor,
                        text: this.priceTooltipText,
                        dir: o.OP.Right,
                        fill: !0,
                        stroke: !0,
                        padding: [12, 8],
                        fixHeight: 38,
                        arrowHeight: 4,
                        borderRadius: 8,
                        lineWidth: 1,
                        isVisible: !1,
                        fontSize: 12,
                        fontStyle: "400",
                        fontFamily: "BinancePlex"
                    }), this.quantityTooltip = new n.JU({
                        background: this.tooltipBackgroundColor,
                        color: this.tooltipTextColor,
                        borderColor: this.tooltipBorderColor,
                        text: this.quantityTooltipText,
                        dir: o.OP.Right,
                        fill: !0,
                        stroke: !0,
                        padding: [12, 8],
                        fixHeight: 38,
                        arrowHeight: 4,
                        borderRadius: 8,
                        lineWidth: 1,
                        isVisible: !1,
                        fontSize: 12,
                        fontStyle: "400",
                        fontFamily: "BinancePlex"
                    }), this.closeTooltip = new n.JU({
                        background: this.tooltipBackgroundColor,
                        color: this.tooltipTextColor,
                        borderColor: this.tooltipBorderColor,
                        text: this.closeTooltipText,
                        dir: o.OP.Right,
                        fill: !0,
                        stroke: !0,
                        padding: [12, 8],
                        fixHeight: 38,
                        arrowHeight: 4,
                        borderRadius: 8,
                        lineWidth: 1,
                        isVisible: !1,
                        fontSize: 12,
                        fontStyle: "400",
                        fontFamily: "BinancePlex"
                    })
                }
            }
        },
        "0x5b": (e, t, i) => {
            i.d(t, {
                A: () => s,
                F: () => o
            });
            var r = i("HV0L");
            const o = {
                    radius: 6,
                    hover_border_width: 1,
                    border_width: 2,
                    highlight_border_width: 4,
                    border_color: r._j.Blue3,
                    fill_color: "#ffffff",
                    hover_border_color: "#EA3CF7",
                    text_color: "#ffffff",
                    default_line_color: r._j.Blue3,
                    default_area_color: "rgba(50, 141, 253, 0.2)",
                    default_border_color: "#9013FE",
                    default_text_color: "#848E9C"
                },
                s = {
                    [r.X2.TrendLine]: {
                        color: o.default_line_color,
                        lineWidth: 1,
                        lineStyle: r.Sc.SOLID,
                        isLock: !1,
                        showColor: !0,
                        showBg: !1,
                        showWidth: !0,
                        showStyle: !0,
                        showFontSize: !1,
                        showTextColor: !1,
                        showTextBold: !1,
                        showTextEdit: !1,
                        showLock: !1,
                        showDelete: !1
                    },
                    [r.X2.HorizontalExtendedLine]: {
                        color: o.default_line_color,
                        lineWidth: 1,
                        lineStyle: r.Sc.SOLID,
                        isLock: !1,
                        showColor: !0,
                        showBg: !1,
                        showWidth: !0,
                        showStyle: !0,
                        showFontSize: !1,
                        showTextColor: !1,
                        showTextBold: !1,
                        showTextEdit: !1,
                        showLock: !1,
                        showDelete: !1
                    },
                    [r.X2.ExtendTrendLine]: {
                        color: o.default_line_color,
                        lineWidth: 1,
                        lineStyle: r.Sc.SOLID,
                        isLock: !1,
                        showColor: !0,
                        showBg: !1,
                        showWidth: !0,
                        showStyle: !0,
                        showFontSize: !1,
                        showTextColor: !1,
                        showTextBold: !1,
                        showTextEdit: !1,
                        showLock: !1,
                        showDelete: !1
                    },
                    [r.X2.ArrowLine]: {
                        color: o.default_line_color,
                        lineWidth: 1,
                        lineStyle: r.Sc.SOLID,
                        isLock: !1,
                        showColor: !0,
                        showBg: !1,
                        showWidth: !0,
                        showStyle: !0,
                        showFontSize: !1,
                        showTextColor: !1,
                        showTextBold: !1,
                        showTextEdit: !1,
                        showLock: !1,
                        showDelete: !1
                    },
                    [r.X2.InfoLine]: {
                        color: o.default_line_color,
                        lineWidth: 1,
                        lineStyle: r.Sc.SOLID,
                        isLock: !1,
                        showColor: !0,
                        showBg: !1,
                        showWidth: !0,
                        showStyle: !0,
                        showFontSize: !1,
                        showTextColor: !1,
                        showTextBold: !1,
                        showTextEdit: !1,
                        showLock: !1,
                        showDelete: !1
                    },
                    [r.X2.RayLine]: {
                        color: o.default_line_color,
                        lineWidth: 1,
                        lineStyle: r.Sc.SOLID,
                        isLock: !1,
                        showColor: !0,
                        showBg: !1,
                        showWidth: !0,
                        showStyle: !0,
                        showFontSize: !1,
                        showTextColor: !1,
                        showTextBold: !1,
                        showTextEdit: !1,
                        showLock: !1,
                        showDelete: !1
                    },
                    [r.X2.LeftArrow]: {
                        color: o.default_line_color,
                        isLock: !1,
                        showColor: !0,
                        showBg: !1,
                        showWidth: !1,
                        showStyle: !1,
                        showFontSize: !1,
                        showTextColor: !1,
                        showTextBold: !1,
                        showTextEdit: !1,
                        showLock: !1,
                        showDelete: !1
                    },
                    [r.X2.RightArrow]: {
                        color: o.default_line_color,
                        isLock: !1,
                        showColor: !0,
                        showBg: !1,
                        showWidth: !1,
                        showStyle: !1,
                        showFontSize: !1,
                        showTextColor: !1,
                        showTextBold: !1,
                        showTextEdit: !1,
                        showLock: !1,
                        showDelete: !1
                    },
                    [r.X2.UpArrow]: {
                        color: o.default_line_color,
                        isLock: !1,
                        showColor: !0,
                        showBg: !1,
                        showWidth: !1,
                        showStyle: !1,
                        showFontSize: !1,
                        showTextColor: !1,
                        showTextBold: !1,
                        showTextEdit: !1,
                        showLock: !1,
                        showDelete: !1
                    },
                    [r.X2.DownArrow]: {
                        color: o.default_line_color,
                        isLock: !1,
                        showColor: !0,
                        showBg: !1,
                        showWidth: !1,
                        showStyle: !1,
                        showFontSize: !1,
                        showTextColor: !1,
                        showTextBold: !1,
                        showTextEdit: !1,
                        showLock: !1,
                        showDelete: !1
                    },
                    [r.X2.FibonacciLine]: {
                        color: o.default_line_color,
                        lineWidth: 1,
                        lineStyle: r.Sc.SOLID,
                        background: o.default_area_color,
                        isLock: !1,
                        showColor: !0,
                        showBg: !0,
                        showWidth: !0,
                        showStyle: !0,
                        showFontSize: !1,
                        showTextColor: !1,
                        showTextBold: !1,
                        showTextEdit: !1,
                        showLock: !1,
                        showDelete: !1
                    },
                    [r.X2.ParallelLine]: {
                        color: o.default_line_color,
                        lineWidth: 1,
                        lineStyle: r.Sc.SOLID,
                        background: o.default_area_color,
                        isLock: !1,
                        showColor: !0,
                        showBg: !0,
                        showWidth: !0,
                        showStyle: !0,
                        showFontSize: !1,
                        showTextColor: !1,
                        showTextBold: !1,
                        showTextEdit: !1,
                        showLock: !1,
                        showDelete: !1
                    },
                    [r.X2.PriceLine]: {
                        color: o.default_line_color,
                        lineWidth: 1,
                        lineStyle: r.Sc.SOLID,
                        isLock: !1,
                        showColor: !0,
                        showBg: !1,
                        showWidth: !0,
                        showStyle: !0,
                        showFontSize: !1,
                        showTextColor: !1,
                        showTextBold: !1,
                        showTextEdit: !1,
                        showLock: !1,
                        showDelete: !1
                    },
                    [r.X2.Rectangle]: {
                        color: o.default_line_color,
                        lineWidth: 1,
                        lineStyle: r.Sc.SOLID,
                        background: o.default_area_color,
                        isLock: !1,
                        showColor: !0,
                        showBg: !0,
                        showWidth: !0,
                        showStyle: !0,
                        showFontSize: !1,
                        showTextColor: !1,
                        showTextBold: !1,
                        showTextEdit: !1,
                        showLock: !1,
                        showDelete: !1
                    },
                    [r.X2.HorizontalLine]: {
                        color: o.default_line_color,
                        lineWidth: 1,
                        lineStyle: r.Sc.SOLID,
                        isLock: !1,
                        showColor: !0,
                        showBg: !1,
                        showWidth: !0,
                        showStyle: !0,
                        showFontSize: !1,
                        showTextColor: !1,
                        showTextBold: !1,
                        showTextEdit: !1,
                        showLock: !1,
                        showDelete: !1
                    },
                    [r.X2.VerticalLine]: {
                        color: o.default_line_color,
                        lineWidth: 1,
                        lineStyle: r.Sc.SOLID,
                        isLock: !1,
                        showColor: !0,
                        showBg: !1,
                        showWidth: !0,
                        showStyle: !0,
                        showFontSize: !1,
                        showTextColor: !1,
                        showTextBold: !1,
                        showTextEdit: !1,
                        showLock: !1,
                        showDelete: !1
                    },
                    [r.X2.CrossLine]: {
                        color: o.default_line_color,
                        lineWidth: 1,
                        lineStyle: r.Sc.SOLID,
                        isLock: !1,
                        showColor: !0,
                        showBg: !1,
                        showWidth: !0,
                        showStyle: !0,
                        showFontSize: !1,
                        showTextColor: !1,
                        showTextBold: !1,
                        showTextEdit: !1,
                        showLock: !1,
                        showDelete: !1
                    },
                    [r.X2.Text]: {
                        textColor: o.default_text_color,
                        background: "rgba(0, 0, 0, 0)",
                        textFontSize: 16,
                        isTextBold: !1,
                        isTextEdit: !1,
                        isLock: !1,
                        showColor: !1,
                        showBg: !0,
                        showWidth: !1,
                        showStyle: !1,
                        showFontSize: !0,
                        showTextColor: !0,
                        showTextBold: !0,
                        showTextEdit: !0,
                        showLock: !1,
                        showDelete: !1
                    }
                }
        },
        ym1p: (e, t, i) => {
            i.d(t, {
                A: () => o
            });
            var r = i("p7cX");
            let o = class {
                get devicePixelRatio() {
                    return (0, r.mZ)()
                }
                getConfig() {
                    return this.config
                }
                setAttrs(e) {
                    return Object.keys(e || {}).forEach((t => {
                        this.setAttr(t, e[t])
                    })), this
                }
                getAttr(e) {
                    return this.config[e]
                }
                setAttr(e, t) {
                    const i = this.config[e];
                    return i === t || (void 0 === t ? delete this.config[e] : this.config[e] = t, this._fireChangeEvent(e, i, t)), this
                }
                on(e, t, i, r) {
                    const o = "string" === typeof t ? t : "",
                        s = "function" === typeof i ? i : t,
                        n = "boolean" === typeof r ? r : i;
                    if ("function" !== typeof s) throw new Error("Must provide event handler");
                    let a = this.eventListeners[e];
                    return a || (this.eventListeners[e] = a = []), a.some((e => e.name === o && e.handler === s)) || (n ? a.unshift({
                        name: o,
                        handler: s
                    }) : a.push({
                        name: o,
                        handler: s
                    })), this
                }
                once(e, t, i) {
                    const r = "string" === typeof t ? t : "",
                        o = "function" === typeof i ? i : t;
                    if ("function" !== typeof o) throw new Error("Must provide event handler");
                    const s = t => {
                        o.call(this, t), this.off(e, r, s)
                    };
                    this.on(e, r, s)
                }
                off(e, t, i) {
                    e || Object.keys(this.eventListeners || {}).forEach((e => {
                        this._off(e)
                    }));
                    const r = e,
                        o = "string" === typeof t ? t : "";
                    "function" === typeof t && (i = t), this.eventListeners[r] ? this._off(r, o, i) : Object.keys(this.eventListeners || {}).forEach((e => {
                        this._off(e, r, i)
                    }))
                }
                fire(e, t = {}) {
                    t.target = t.target || this, this._fire(e, t)
                }
                watch(e, t, i = !1) {
                    Array.isArray(e) ? e.forEach((e => this._registerListener(e, t, i))) : this._registerListener(e, t, i)
                }
                unwatch(e, t) {
                    Array.isArray(e) ? e.forEach((e => this._unwatch(e, t))) : this._unwatch(e, t)
                }
                hasWathedProperty(e) {
                    return this.watchMap.has(e)
                }
                watchProperty(e, t) {
                    if (this.watchMap.has(e)) {
                        const i = this.watchMap.get(e);
                        i.includes(t) || i.push(t)
                    } else this.watchMap.set(e, [t])
                }
                setWatchProperty(e, t, i, o = {}) {
                    let s = e[t] !== i;
                    s && (e[t] = i);
                    const n = this.watchMap.get(t);
                    n && n.forEach((e => {
                        s && (e.textContent = i), (0, r.EM)(e, o)
                    }))
                }
                _off(e, t, i) {
                    const r = this.eventListeners[e];
                    if (r) {
                        const o = r.slice(0);
                        for (let e = o.length - 1; e >= 0; e--) {
                            const r = o[e],
                                {
                                    name: s,
                                    handler: n
                                } = r;
                            t && s !== t || i && i !== n || o.splice(e, 1)
                        }
                        o.length > 0 ? this.eventListeners[e] = o : delete this.eventListeners[e]
                    }
                }
                _fireChangeEvent(e, t, i) {
                    let r = this.attrListeners[e];
                    r && r.forEach((e => {
                        e.handler({
                            oldVal: t,
                            newVal: i
                        })
                    }))
                }
                _fire(e, t = {}) {
                    const i = this.eventListeners[e];
                    i && (t.currentTarget = this, t.type = e, i.forEach((e => {
                        e.handler.call(this, t)
                    })))
                }
                _registerListener(e, t, i = !1) {
                    let r = this.attrListeners[e];
                    r || (this.attrListeners[e] = r = []), r.some((e => t && e.handler === t)) || r.push({
                        handler: t
                    }), i && t.call(this, {
                        oldVal: this.getAttr(e),
                        newVal: this.getAttr(e)
                    })
                }
                _unwatch(e, t) {
                    let i = this.attrListeners[e];
                    if (i) {
                        const r = i.filter((e => t && e.handler !== t));
                        r.length > 0 ? this.attrListeners[e] = r : delete this.attrListeners[e]
                    }
                }
                constructor() {
                    this.eventListeners = {}, this.attrListeners = {}, this.watchMap = new Map
                }
            };
            o.defaultConfig = {
                devicePixelRatio: (0, r.mZ)(),
                isMobile: (0, r.Fr)(),
                isMouseover: !1,
                isMousedown: !1
            }
        },
        qIYA: (e, t, i) => {
            i.d(t, {
                A: () => s
            });
            const r = {
                    mousedown: {
                        eventName: "mousedown",
                        handler(e, t) {
                            e({
                                originEvent: t,
                                clientX: t.clientX,
                                clientY: t.clientY
                            })
                        }
                    },
                    mousemove: {
                        eventName: "mousemove",
                        handler(e, t) {
                            e({
                                originEvent: t,
                                clientX: t.clientX,
                                clientY: t.clientY
                            })
                        }
                    },
                    mouseup: {
                        eventName: "mouseup",
                        handler(e, t) {
                            e({
                                originEvent: t,
                                clientX: t.clientX,
                                clientY: t.clientY
                            })
                        }
                    },
                    mouseout: {
                        eventName: "mouseout",
                        handler(e, t) {
                            e({
                                originEvent: t,
                                clientX: t.clientX,
                                clientY: t.clientY
                            })
                        }
                    },
                    wheel: {
                        eventName: "wheel",
                        handler(e, t) {
                            e({
                                originEvent: t,
                                clientX: t.clientX,
                                clientY: t.clientY
                            })
                        }
                    },
                    click: {
                        eventName: "click",
                        handler(e, t) {
                            e({
                                originEvent: t,
                                clientX: t.clientX,
                                clientY: t.clientY
                            })
                        }
                    },
                    dblclick: {
                        eventName: "dblclick",
                        handler(e, t) {
                            e({
                                originEvent: t,
                                clientX: t.clientX,
                                clientY: t.clientY
                            })
                        }
                    },
                    contextmenu: {
                        eventName: "contextmenu",
                        handler(e, t) {
                            e({
                                originEvent: t,
                                clientX: t.clientX,
                                clientY: t.clientY
                            })
                        }
                    },
                    resize: {
                        eventName: "resize",
                        handler(e) {
                            e()
                        }
                    },
                    gesturestart: {
                        eventName: "gesturestart",
                        handler(e, t) {
                            e({
                                originEvent: t,
                                clientX: t.clientX,
                                clientY: t.clientY
                            })
                        }
                    },
                    gesturechange: {
                        eventName: "gesturechange",
                        handler(e, t) {
                            e({
                                originEvent: t,
                                clientX: t.clientX,
                                clientY: t.clientY
                            })
                        }
                    },
                    gestureend: {
                        eventName: "gestureend",
                        handler(e, t) {
                            e({
                                originEvent: t,
                                clientX: t.clientX,
                                clientY: t.clientY
                            })
                        }
                    }
                },
                o = {
                    mousedown: {
                        eventName: "touchstart",
                        handler(e, t) {
                            const i = {
                                originEvent: t
                            };
                            Array.from(t.targetTouches).forEach(((e, t) => {
                                const r = 0 === t ? "clientY" : `clientY${t}`;
                                i[0 === t ? "clientX" : `clientX${t}`] = e.clientX, i[r] = e.clientY
                            })), e(i)
                        }
                    },
                    mousemove: {
                        eventName: "touchmove",
                        handler(e, t) {
                            const i = {
                                originEvent: t
                            };
                            Array.from(t.touches).forEach(((e, t) => {
                                const r = 0 === t ? "clientY" : `clientY${t}`;
                                i[0 === t ? "clientX" : `clientX${t}`] = e.clientX, i[r] = e.clientY
                            })), e(i)
                        }
                    },
                    mouseup: {
                        eventName: "touchend",
                        handler(e, t) {
                            const i = {
                                originEvent: t
                            };
                            Array.from(t.changedTouches).forEach(((e, t) => {
                                const r = 0 === t ? "clientY" : `clientY${t}`;
                                i[0 === t ? "clientX" : `clientX${t}`] = e.clientX, i[r] = e.clientY
                            })), e(i)
                        }
                    },
                    wheel: {
                        eventName: "wheel",
                        handler(e, t) {
                            e({
                                originEvent: t,
                                clientX: t.clientX,
                                clientY: t.clientY
                            })
                        }
                    },
                    click: {
                        eventName: "click",
                        handler(e, t) {
                            e({
                                originEvent: t,
                                clientX: t.clientX,
                                clientY: t.clientY
                            })
                        }
                    }
                },
                s = {
                    eventPool: new Map,
                    getEventName(e) {
                        const [t, i] = e.split("."), s = Object.assign(r[t] || {}, {
                            nameSpace: i
                        }), n = Object.assign(o[t] || {}, {
                            nameSpace: i
                        });
                        return s.eventName === n.eventName ? [s] : [s, n]
                    },
                    on(e, t, i, r = !1) {
                        return this.getEventName(t).forEach((({
                            eventName: t,
                            nameSpace: o,
                            handler: s
                        }) => {
                            if (!t) return;
                            const n = s.bind(null, i);
                            let a = this.eventPool.get(e);
                            if (!a) {
                                const i = new Map;
                                a = {
                                    [t]: i
                                }, this.eventPool.set(e, a)
                            }
                            a[t] || (a[t] = new Map);
                            const l = new Map;
                            l.set(i, n), a[t].set(o, l), e.addEventListener(t, n, r)
                        })), this
                    },
                    off(e, t, i, r = !1) {
                        const o = this.getEventName(t),
                            s = this.eventPool.get(e);
                        return o.forEach((({
                            eventName: t,
                            nameSpace: o
                        }) => {
                            if (s && s[t]) {
                                const n = s[t],
                                    a = n.get(o);
                                if (i) {
                                    if (a && i) {
                                        const o = a.get(i);
                                        o && e.removeEventListener(t, o, r)
                                    }
                                } else o ? a && Array.from(a.values()).forEach((i => {
                                    e.removeEventListener(t, i, r)
                                })) : Array.from(n.values()).forEach((i => {
                                    Array.from(i.values()).forEach((i => {
                                        e.removeEventListener(t, i, r)
                                    }))
                                })), n.clear();
                                0 === n.size && delete s[t], 0 === Object.keys(s).length && this.eventPool.delete(e)
                            }
                        })), this
                    }
                }
        },
        WhNg: (e, t, i) => {
            i.d(t, {
                Ay: () => h,
                h5: () => c
            });
            var r = i("g6+1"),
                o = i.n(r),
                s = i("HV0L"),
                n = i("O0kw"),
                a = i("hpT2"),
                l = i("p7cX");
            const c = 22,
                d = ({
                    ctx: e,
                    label: t,
                    font: i,
                    textMetrics: r,
                    bound: o,
                    borderRadius: n,
                    padding: l,
                    textAlign: c = s.nO.Left
                }) => {
                    const d = r.actualBoundingBoxAscent + r.actualBoundingBoxDescent,
                        {
                            text: h,
                            color: u,
                            bgColor: g,
                            borderColor: p,
                            textPositionShift: m = {
                                x: 0,
                                y: 0
                            }
                        } = t;
                    if (e.beginPath(), a.A.roundRect(e, o, n), e.closePath(), e.fillStyle = g, e.strokeStyle = p, e.fill(), e.stroke(), e.textAlign = c, e.textBaseline = s.Tf.Top, e.fillStyle = u, e.font = i, c === s.nO.Left) {
                        const t = l[3];
                        e.fillText(h, o.x + t + m.x, o.y + (o.height - d) / 2 + m.y)
                    } else {
                        const t = l[1];
                        e.fillText(h, o.x - t + o.width + m.x, o.y + (o.height - d) / 2 + m.y)
                    }
                };
            let h = class e {
                static calculateTextWidth(t = "", i = 10, r = 1) {
                    const o = e.getCacheCanvas(),
                        s = `${i}px sans-serif`;
                    o.font = s;
                    const n = Math.round(o.measureText(t.trim()).width);
                    return r > 1 ? Math.round(n / r) * r : n
                }
                static calculateTextHeight(t = "", i = 10) {
                    const r = e.getCacheCanvas(),
                        o = `${i}px sans-serif`;
                    r.font = o;
                    const s = r.measureText(t.trim());
                    return Math.abs(s.actualBoundingBoxAscent) + Math.abs(s.actualBoundingBoxDescent)
                }
                static drawImage(e, t, i, r) {
                    const o = i.x + .5 * i.width - .5 * r.width,
                        s = .5 * i.height + .5 * r.height;
                    e.drawImage(t, o, -s, r.width, r.height)
                }
                drawHorizontalCrossLine(e, t, i, r) {
                    const {
                        minX: o,
                        maxX: s
                    } = i;
                    e.save(), e.setLineDash(r), e.beginPath(), a.A.drawLine(e, o, -t.y, s, -t.y), e.stroke(), e.restore()
                }
                drawVerticleCrossLine(e, t, i, r) {
                    const {
                        minY: o,
                        maxY: s
                    } = i;
                    e.save(), e.setLineDash(r), e.beginPath(), a.A.drawLine(e, t.x, o, t.x, s), e.stroke(), e.restore()
                }
                drawXAxisLabel({
                    ctx: e,
                    point: t,
                    label: i,
                    candlestick: r,
                    height: o = 22
                }) {
                    const s = r.getAttr("xAxis");
                    e.font = "400 12px BinancePlex";
                    const n = e.measureText(i.text),
                        a = Math.ceil(n.width) + 8,
                        l = {
                            x: t.x - a / 2,
                            y: t.y + (s.height - o) / 2,
                            width: a,
                            height: o
                        };
                    d({
                        ctx: e,
                        label: i,
                        bound: l,
                        font: "400 12px BinancePlex",
                        textMetrics: n,
                        borderRadius: [4, 4, 4, 4],
                        padding: [0, 4, 0, 4]
                    })
                }
                drawYAxisLabel({
                    ctx: e,
                    point: t,
                    labels: i,
                    height: r = c,
                    radii: o = 4,
                    font: s = "400 12px BinancePlex",
                    styleType: n = "full-rounded",
                    padding: a = [2, 8, 2, 8]
                }) {
                    const [l, h] = [a[1], a[3]], u = i.reduce((e => e + r), 0), g = i.map((({
                        text: t
                    }) => (e.font = s, e.measureText(t)))), p = g.reduce(((e, {
                        width: t
                    }) => Math.max(e, t)), 0) + l + h, m = e => {
                        const t = 0 === e ? o : 0,
                            r = e === i.length - 1 ? o : 0;
                        return "semi-rounded" === n ? [0, t, r, 0] : [t, t, r, r]
                    };
                    i.reduce(((i, o, n) => {
                        const l = {
                            x: t.x,
                            y: i,
                            width: p,
                            height: r
                        };
                        return d({
                            ctx: e,
                            bound: l,
                            label: o,
                            font: s,
                            textMetrics: g[n],
                            borderRadius: m(n),
                            padding: a
                        }), i + r
                    }), t.y - u / 2)
                }
                drawAskBidLabels({
                    ctx: e,
                    labels: t,
                    font: i = "400 10px BinancePlex",
                    height: r = 16,
                    radii: a = 4,
                    padding: l = [0, 5, 0, 5]
                }) {
                    const [c, h] = [l[1], l[3]], u = o()(t, (({
                        point: e
                    }) => e.y)), g = u.map((({
                        text: t
                    }) => (e.font = i, e.measureText(t)))), p = g.reduce(((e, {
                        width: t
                    }) => Math.max(e, t)), 0) + h + c, [m, x] = u.map((({
                        point: e
                    }) => new n.A(e.x, e.y, p, r)));
                    if (n.A.isOverlaped(m, x)) {
                        const t = e => {
                            const t = 0 === e ? a : 0,
                                i = e === u.length - 1 ? a : 0;
                            return [t, t, i, i]
                        };
                        u.reduce(((o, n, a) => {
                            const c = {
                                x: n.point.x - p,
                                y: o - r,
                                width: p,
                                height: r
                            };
                            return d({
                                ctx: e,
                                bound: c,
                                label: n,
                                font: i,
                                textMetrics: g[a],
                                borderRadius: t(a),
                                padding: l,
                                textAlign: s.nO.Right
                            }), o + r
                        }), u[0].point.y)
                    } else u.forEach(((t, o) => {
                        const n = {
                            x: t.point.x - p,
                            y: t.point.y - r / 2,
                            width: p,
                            height: r
                        };
                        d({
                            ctx: e,
                            bound: n,
                            label: t,
                            font: i,
                            textMetrics: g[o],
                            borderRadius: [a, a, a, a],
                            padding: l,
                            textAlign: s.nO.Right
                        })
                    }))
                }
                drawCursorDot(e, {
                    x: t,
                    y: i,
                    color: r
                }) {
                    e.beginPath(), e.arc(t, i, 2, 0, 2 * Math.PI), e.closePath(), e.fillStyle = r, e.fill()
                }
                drawBarCandlesticks(e, t) {
                    t.forEach((t => {
                        const {
                            x: i,
                            width: r,
                            highY: o,
                            lowY: s,
                            openY: n,
                            closeY: c,
                            color: d
                        } = t, h = r / 2;
                        (0, l.jS)(e, {
                            strokeStyle: d
                        }), e.beginPath(), a.A.drawLine(e, i, -o, i, -s), a.A.drawLine(e, i, -n, i - h, -n), a.A.drawLine(e, i, -c, i + h, -c), e.stroke()
                    }))
                }
                drawSmallTriangle(e, t, i) {
                    e.save(), e.translate(t.x, t.y), e.beginPath(), i && e.scale(-1, 1), e.moveTo(1, 0), e.lineTo(5, -5), e.lineTo(5, 5), e.lineTo(1, 0), e.fill(), e.closePath(), e.restore()
                }
                drawArrow(e, t, i) {
                    e.save(), e.translate(t.x, t.y), e.beginPath(), i && e.scale(1, -1), e.rect(-4, 0, 9, 2), e.moveTo(.5, 2), e.lineTo(5, 7), e.lineTo(3, 7), e.lineTo(3, 12), e.lineTo(-2, 12), e.lineTo(-2, 7), e.lineTo(-4, 7), e.lineTo(.5, 2), e.fill(), e.closePath(), e.restore()
                }
                drawTranscation(e, t, i, r, o, s) {
                    if (e.save(), e.translate(Math.round(t.x), Math.round(t.y)), this.drawArrow(e, {
                            x: 0,
                            y: 0
                        }, !i), s)
                        if (i) {
                            e.translate(0, 12), e.textAlign = "center", e.textBaseline = "top";
                            const t = e.measureText(o);
                            e.fillText(o, 0, 0), e.translate(0, t.actualBoundingBoxDescent + 2), e.fillText(`+${r}`, 0, 0)
                        } else {
                            e.translate(0, -12), e.textAlign = "center", e.textBaseline = "bottom";
                            const t = e.measureText(o);
                            e.fillText(o, 0, 0), e.translate(0, -t.actualBoundingBoxAscent - 2), e.fillText(`-${r}`, 0, 0)
                        }
                    return e.restore(), s ? 36 : 14
                }
                drawImage(e, t, i, r) {
                    const o = i.x + .5 * i.width - .5 * r.width,
                        s = .5 * i.height + .5 * r.height;
                    e.drawImage(t, o, -s, r.width, r.height)
                }
                constructor() {
                    this.drawCrossLine = (e, t, i) => {
                        e.setLineDash([4, 4]), e.beginPath();
                        const {
                            minX: r,
                            minY: o,
                            maxX: s,
                            maxY: n
                        } = i;
                        a.A.drawLine(e, r, -t.y, s, -t.y), a.A.drawLine(e, t.x, o, t.x, n), e.stroke()
                    }, this.drawLabel = (e, t, i) => {
                        const {
                            x: r,
                            y: o
                        } = t, {
                            text: n,
                            px: l,
                            py: c,
                            color: d,
                            bgColor: h,
                            borderColor: u,
                            width: g,
                            height: p
                        } = i;
                        e.strokeStyle = u, e.fillStyle = h, e.fillRect(r, o, g, p), e.strokeRect(r, o, g, p), e.textAlign = s.nO.Left, e.textBaseline = s.Tf.Top, e.fillStyle = d;
                        const m = r + l,
                            x = o + c;
                        a.A.drawText(e, n, m, x)
                    }, this.drawCandlestickBars = (e, t) => {
                        t.forEach((t => {
                            const {
                                x: i,
                                y: r,
                                width: o,
                                height: s,
                                lowY: n,
                                highY: c,
                                color: d,
                                borderColor: h,
                                wickColor: u
                            } = t, g = i - .5 * o;
                            if (o < 2) {
                                (0, l.jS)(e, {
                                    fillStyle: d,
                                    strokeStyle: d
                                });
                                const t = c - n,
                                    r = Math.abs(t) < 1 ? 1 : t;
                                a.A.fillRect(e, i, -c, .75, r), a.A.strokeRect(e, i, -c, .75, r)
                            } else(0, l.jS)(e, {
                                strokeStyle: u
                            }), e.beginPath(), a.A.drawLine(e, i, -c, i, -n), e.stroke(), (0, l.jS)(e, {
                                fillStyle: d,
                                strokeStyle: h
                            }), a.A.fillRect(e, g, -r, o, s), a.A.strokeRect(e, g, -r, o, s)
                        }))
                    }, this.drawHollowCandlestickBars = (e, t) => {
                        t.forEach((t => {
                            const {
                                x: i,
                                y: r,
                                width: o,
                                height: s,
                                lowY: n,
                                highY: c,
                                close: d,
                                open: h,
                                color: u,
                                borderColor: g,
                                wickColor: p
                            } = t, m = i - .5 * o;
                            o < 2 ? ((0, l.jS)(e, {
                                strokeStyle: u
                            }), e.beginPath(), a.A.drawLine(e, i, -n, i, -c), e.stroke()) : ((0, l.jS)(e, {
                                strokeStyle: p
                            }), e.beginPath(), a.A.drawLine(e, i, -c, i, -n), e.stroke(), (0, l.jS)(e, {
                                fillStyle: u,
                                strokeStyle: g
                            }), d < h ? a.A.fillRect(e, m, -r, o, s) : a.A.clearRect(e, {
                                x: m,
                                y: -r,
                                width: o,
                                height: s
                            }), a.A.strokeRect(e, m, -r, o, s))
                        }))
                    }, this.drawPolyline = (e, t) => {
                        e.beginPath(), a.A.drawLines(e, t), e.stroke()
                    }, this.drawGrid = (e, t, i = [], r) => {
                        const {
                            width: o,
                            height: s
                        } = t;
                        e.beginPath(), r.forEach((t => {
                            a.A.drawLine(e, 0, -t, o, -t)
                        })), i.forEach((t => {
                            a.A.drawLine(e, t, 0, t, -s)
                        })), e.stroke()
                    }, this.drawVertGridLine = (e, t, i = []) => {
                        const {
                            height: r
                        } = t;
                        e.beginPath(), i.forEach((t => {
                            a.A.drawLine(e, t, 0, t, -r)
                        })), e.stroke()
                    }, this.drawHorzGridLine = (e, t, i) => {
                        const {
                            width: r
                        } = t;
                        e.beginPath(), i.forEach((t => {
                            a.A.drawLine(e, 0, -t, r, -t)
                        })), e.stroke()
                    }, this.drawPaths = (e, t) => {
                        e.beginPath(), a.A.drawLines(e, t), e.fill(), e.stroke()
                    }, this.drawPoints = (e, t, i) => {
                        i ? a.A.drawPoints(e, t, i) : (e.beginPath(), a.A.drawPoints(e, t, i), e.stroke())
                    }, this.drawCrossLines = (e, t) => {
                        e.beginPath(), a.A.drawCrossLines(e, t), e.stroke()
                    }, this.drawBars = (e, t) => {
                        t.forEach((t => {
                            const {
                                x: i,
                                y: r,
                                width: o,
                                height: s,
                                strokeColor: n,
                                fillColor: c
                            } = t;
                            o < 2 ? ((0, l.jS)(e, {
                                strokeStyle: n
                            }), e.beginPath(), a.A.drawLine(e, i, r, i, r + s), e.stroke()) : ((0, l.jS)(e, {
                                strokeStyle: n,
                                fillStyle: c
                            }), a.A.fillRect(e, i, r, o, s), a.A.strokeRect(e, i, r, o, s))
                        }))
                    }, this.drawHollowBars = (e, t) => {
                        t.forEach(((i, r) => {
                            const {
                                value: o = Number.NEGATIVE_INFINITY
                            } = t[r - 1] || {}, {
                                x: s,
                                y: n,
                                width: c,
                                height: d,
                                value: h,
                                color: u
                            } = i;
                            c < 2 ? ((0, l.jS)(e, {
                                strokeStyle: u
                            }), e.beginPath(), a.A.drawLine(e, s, n, s, n + d), e.stroke()) : h > 0 && o >= h || h < 0 && o >= h ? ((0, l.jS)(e, {
                                fillStyle: u
                            }), a.A.fillRect(e, s, n, c, d)) : (h > 0 && o < h || h < 0 && o <= h) && ((0, l.jS)(e, {
                                strokeStyle: u
                            }), a.A.strokeRect(e, s, n, c, d))
                        }))
                    }, this.drawMultiLines = (e, t) => {
                        e.beginPath(), t.forEach((t => {
                            a.A.drawLines(e, t)
                        })), e.stroke()
                    }, this.drawArea = (e, t) => {
                        e.beginPath(), a.A.drawLines(e, t), e.closePath(), e.fill()
                    }, this.drawGradientArea = (e, t, i, {
                        strokeColor: r,
                        fillColor1: o,
                        fillColor2: s,
                        opacity: n
                    }) => {
                        e.save(), e.strokeStyle = r, e.lineWidth = 2, e.beginPath(), a.A.drawLines(e, t), e.stroke();
                        const l = e.createLinearGradient(0, -e.canvas.height / 3, 0, 0);
                        l.addColorStop(0, o), l.addColorStop(1, s), e.beginPath(), a.A.drawLines(e, i), e.closePath(), e.globalAlpha = n, e.fillStyle = l, e.fill(), e.restore()
                    }, this.drawTitle = (e, t, i) => {
                        a.A.drawText(e, t, i.x, i.y)
                    }
                }
            };
            h.getCacheCanvas = (() => {
                let e, t;
                return () => (e || void 0 === document || (e = document.createElement("canvas"), t = e.getContext("2d")), t)
            })(), h.createTextLabel = ({
                text: e = "",
                px: t = 6,
                py: i = 6,
                color: r,
                bgColor: o,
                borderColor: s
            }) => ({
                text: e,
                px: t,
                py: i,
                color: r,
                bgColor: o,
                borderColor: s,
                width: h.calculateTextWidth(e) + 2 * t,
                height: h.calculateTextHeight(e) + 2 * i
            })
        },
        tNHi: (e, t, i) => {
            i.d(t, {
                jl: () => p,
                _V: () => b,
                JU: () => g,
                N1: () => u,
                wA: () => x,
                Ge: () => y.A,
                Jh: () => f,
                rw: () => m,
                EY: () => h
            });
            var r = i("lbWW"),
                o = i("VLTf"),
                s = i.n(o),
                n = i("HV0L"),
                a = i("oHkN"),
                l = i("hpT2"),
                c = i("p7cX"),
                d = i("hpQW");
            let h = class extends r.A {
                    onCacheChange() {
                        this.isBatchUpdate = !0, this.isDataUpdate = !0;
                        this.getAttr("isCustomized") ? this._typesetText() : this._setTextData()
                    }
                    onDataChange() {}
                    setText(e) {
                        const t = (0, a.Kg)(e) || Array.isArray(e) ? e : null === e || void 0 === e ? "" : `${e}`;
                        return this.setAttr("content", t), this
                    }
                    getWidth() {
                        const {
                            width: e,
                            textWidth: t,
                            padding: i
                        } = this.getConfig();
                        return e === r.o.AUTO || void 0 === e ? t + 2 * i : e + 2 * i
                    }
                    getHeight() {
                        const {
                            fontSize: e,
                            contents: t,
                            lineHeight: i,
                            padding: r
                        } = this.getConfig();
                        return e * t.length * i + 2 * r
                    }
                    getTransformOrigin() {
                        const {
                            data: e,
                            textAlign: t,
                            textBaseline: i
                        } = this.getConfig();
                        let {
                            x: r,
                            y: o
                        } = e;
                        const s = this.getWidth(),
                            n = this.getHeight();
                        return "center" === t ? r -= .5 * s : "right" === t && (r -= s), "middle" === i ? o -= .5 * n : "bottom" === i && (o -= n), {
                            x: r,
                            y: o
                        }
                    }
                    getContextStyles() {
                        const {
                            fillStyle: e,
                            textAlign: t,
                            textBaseline: i
                        } = this.getConfig();
                        return {
                            font: this._getTextFont(),
                            fillStyle: e,
                            textAlign: t,
                            textBaseline: i
                        }
                    }
                    drawCacheScene() {
                        if (!this.isBatchUpdate) return;
                        const {
                            contents: e,
                            fillStyle: t,
                            padding: i,
                            textWidth: r,
                            fill: o,
                            background: n
                        } = this.getConfig();
                        if (0 === e.length) return;
                        const a = this.getContext();
                        l.A.clearRect(a);
                        const d = this.overrideSize({
                                width: this.getWidth(),
                                height: this.getHeight()
                            }),
                            h = {
                                font: this._getTextFont(),
                                fillStyle: t
                            },
                            u = !s()(h, this.preContextStyles);
                        if (this.isDataUpdate && (this.preContextStyles = h), d || u || this.isDataUpdate) {
                            o && l.A.drawBackground(a, n), (0, c.jS)(a, { ...h,
                                textAlign: "left",
                                textBaseline: "top"
                            });
                            const t = .5 * (this.getWidth() - r);
                            for (let r = 0, o = e.length; r < o; ++r) {
                                const {
                                    y: o
                                } = e[r];
                                l.A.drawText(a, e[r].text, t, o + i)
                            }
                        }
                        this.isBatchUpdate = !1
                    }
                    drawScene(e) {
                        const {
                            data: t,
                            contents: i,
                            fill: r,
                            background: o
                        } = this.getConfig();
                        r && l.A.drawBackground(e, o), (0, c.jS)(e, this.getContextStyles());
                        for (let s = 0, n = i.length; s < n; ++s) {
                            const r = t.y + i[s].y;
                            l.A.drawText(e, i[s].text, t.x, r)
                        }
                    }
                    isHover(e) {
                        if (!this.preDetect()) return !1;
                        const {
                            x: t,
                            y: i
                        } = this.getTransformOrigin(), r = this.getHeight();
                        return new d.A.Bound(t, i, this.getWidth(), r).contain([e.x, e.y])
                    }
                    _addLineText(e) {
                        this.getAttr("contents").push(e)
                    }
                    _getTextWidth(e) {
                        const t = this.getAttr("letterSpacing"),
                            i = Math.max(e.length - 1, 0);
                        return l.A.measureTextWidth(e) + t * i
                    }
                    _getTextFont() {
                        const {
                            fontStyle: e,
                            fontVariant: t,
                            fontSize: i,
                            fontFamily: r
                        } = this.getConfig();
                        return `${e} ${t} ${i}px ${r}`
                    }
                    _setTextData() {
                        const {
                            content: e,
                            contents: t,
                            fontSize: i,
                            lineHeight: r,
                            width: o
                        } = this.getConfig(), s = l.A.getContext();
                        if (Array.isArray(e)) return;
                        if (!s) return;
                        t.length = 0;
                        const n = e.split("\n"),
                            d = r * i;
                        let h = 0,
                            u = 0;
                        const g = (0, a.Et)(o) ? o : void 0;
                        s.save(), (0, c.jS)(s, {
                            font: this._getTextFont()
                        });
                        for (let a = 0, l = n.length; a < l; a++) {
                            let e = n[a];
                            const t = this._getTextWidth(e);
                            if (g && t > g)
                                for (; e;) {
                                    let t = 0,
                                        i = e.length,
                                        r = "",
                                        o = 0;
                                    for (; t < i;) {
                                        const s = t + i >>> 1,
                                            n = e.slice(0, s + 1),
                                            a = this._getTextWidth(n);
                                        a <= g ? (t = s + 1, r = n, o = a) : i = s
                                    }
                                    if (r && (this._addLineText({
                                            text: r,
                                            width: o,
                                            y: h
                                        }), u = Math.max(u, o), h += d, e = e.slice(t), e && (o = this._getTextWidth(e), o <= g))) {
                                        this._addLineText({
                                            text: e,
                                            width: o,
                                            y: h
                                        }), u = Math.max(u, o), h += d;
                                        break
                                    }
                                } else this._addLineText({
                                    text: e,
                                    width: t,
                                    y: h
                                }), u = Math.max(u, t)
                        }
                        s.restore(), this.setAttr("textWidth", u)
                    }
                    _typesetText() {
                        const {
                            content: e,
                            contents: t,
                            fontSize: i,
                            lineHeight: r
                        } = this.getConfig();
                        if (Array.isArray(e)) {
                            t.length = 0;
                            const o = r * i;
                            let s = 0,
                                n = 0;
                            const a = l.A.getContext();
                            if (!a) return;
                            a.save(), (0, c.jS)(a, {
                                font: this._getTextFont()
                            });
                            for (let t = 0; t < e.length; t++) {
                                const i = e[t],
                                    r = this._getTextWidth(i);
                                this._addLineText({
                                    text: i,
                                    width: r,
                                    y: n
                                }), n += o, s = Math.max(s, r)
                            }
                            a.restore(), this.setAttr("textWidth", s)
                        }
                    }
                    constructor(e = {}) {
                        super(), this.config = { ...r.A.defaultConfig,
                            content: "",
                            contents: [],
                            fontSize: 10,
                            fontFamily: "sans-serif",
                            fontStyle: "",
                            fontVariant: "",
                            lineHeight: 1,
                            letterSpacing: 0,
                            textWidth: 0,
                            padding: 0,
                            background: n._j.White,
                            isCustomized: !1,
                            useCache: !0
                        }, this.setAttrs(e), this.watch(["content", "fillStyle", "background", "width", "fontSize", "letterSpacing", "fontFamily", "fontStyle", "fontVariant", "useCache"], this.onCacheChange.bind(this))
                    }
                },
                u = class extends r.A {
                    beforeDrawHook() {
                        if (this.isDataUpdate) {
                            const {
                                p1: e,
                                p2: t
                            } = this.getAttr("data");
                            this.setAttrs({
                                width: Math.abs(e.x - t.x),
                                height: Math.abs(e.y - t.y)
                            }), this.isDataUpdate = !1
                        }
                    }
                    getTransformOrigin() {
                        const {
                            p1: e,
                            p2: t
                        } = this.getAttr("data");
                        return {
                            x: Math.min(e.x, t.x),
                            y: Math.min(e.y, t.y)
                        }
                    }
                    getContextStyles() {
                        const {
                            strokeStyle: e,
                            lineWidth: t,
                            lineDash: i
                        } = this.getConfig();
                        return {
                            strokeStyle: e,
                            lineWidth: t,
                            lineDash: i
                        }
                    }
                    drawCacheScene() {
                        if (!this.isBatchUpdate) return;
                        const {
                            lineDash: e,
                            data: t
                        } = this.getConfig(), {
                            p1: i,
                            p2: r
                        } = t, o = this.getContext(), n = Math.max(Math.abs(i.x - r.x), 1), a = Math.max(Math.abs(i.y - r.y), 1), d = this.overrideSize({
                            width: n,
                            height: a
                        });
                        d && this.setAttrs({
                            width: n,
                            height: a
                        });
                        const h = this.getContextStyles();
                        let u = !s()(h, this.preContextStyles);
                        if (u && (this.preContextStyles = h, (0, c.jS)(o, h)), e && o.setLineDash(e), u || d) {
                            l.A.clearRect(o);
                            const {
                                x: e,
                                y: t
                            } = this.getTransformOrigin();
                            l.A.drawLine(o, i.x - e, i.y - t, r.x - e, r.y - t), o.stroke()
                        }
                        this.isBatchUpdate = !1
                    }
                    drawScene(e) {
                        const {
                            lineDash: t,
                            data: i
                        } = this.getConfig();
                        (0, c.jS)(e, this.getContextStyles()), t && e.setLineDash(t);
                        const {
                            p1: r,
                            p2: o
                        } = i;
                        e.beginPath(), l.A.drawLine(e, r.x, r.y, o.x, o.y), e.stroke()
                    }
                    isHover(e, t = 5) {
                        if (!this.preDetect()) return !1;
                        const {
                            p1: i,
                            p2: r
                        } = this.getAttr("data");
                        return d.A.Line.isPointAtSegment(e, i, r, t)
                    }
                    isVisible(e) {
                        const t = this.getAttr("isVisible"),
                            i = this.getAttr("data");
                        if (!t || null === i) return !1;
                        const r = new d.A.Bound(e.x, e.y, e.width, e.height),
                            o = new d.A.Bound(i.p1.x, -i.p1.y, Math.abs(i.p2.x - i.p1.x), Math.abs(i.p2.y - i.p1.y));
                        return r.isOverlaped(o)
                    }
                    constructor(e = {}) {
                        super(), this.config = { ...r.A.defaultConfig,
                            width: 0,
                            height: 0
                        }, this.setAttrs(e), this.watch(["lineWidth", "strokeStyle"], this.onCacheChange.bind(this))
                    }
                },
                g = class extends r.A {
                    beforeDrawHook() {
                        const e = this.getAttr("fixWidth");
                        if (this.isBatchUpdate && void 0 === e) {
                            const e = l.A.getContext();
                            (0, c.jS)(e, {
                                font: this._getTextFont()
                            });
                            const t = this.getAttr("text");
                            this.setAttr("textWidth", l.A.measureTextWidth(t))
                        }
                    }
                    onDataChange() {
                        this.isBatchUpdate = !0
                    }
                    getDirection() {
                        return (this.getAttr("dir") || "").toUpperCase()
                    }
                    getTransformOrigin() {
                        let {
                            x: e,
                            y: t
                        } = this.getAttr("data") || {};
                        const i = this.getWidth(),
                            r = this.getHeight(),
                            o = this.getDirection();
                        return o === n.OP.Left && (e -= i, t -= .5 * r), o === n.OP.Right && (t -= .5 * r), o === n.OP.Up && (e -= .5 * i, t -= r), o === n.OP.Down && (e -= .5 * i), {
                            x: e,
                            y: t
                        }
                    }
                    getContextStyles() {
                        const {
                            color: e,
                            lineWidth: t,
                            background: i,
                            borderColor: r,
                            text: o
                        } = this.getConfig(), s = this.getDirection();
                        return { ...{
                                strokeStyle: e,
                                lineWidth: t,
                                fillStyle: e,
                                background: i,
                                borderColor: r,
                                dir: s,
                                text: o,
                                font: this._getTextFont()
                            },
                            textBaseline: "middle",
                            textAlign: s === n.OP.Left ? "right" : s === n.OP.Right ? "left" : "center"
                        }
                    }
                    getWidth() {
                        const {
                            textWidth: e,
                            padding: t,
                            fixWidth: i,
                            text: r
                        } = this.getConfig();
                        if ((0, a.Et)(i)) return i;
                        const o = Array.isArray(t) ? t[0] : t;
                        if ("" !== r) {
                            const e = l.A.getContext();
                            (0, c.jS)(e, {
                                font: this._getTextFont()
                            }), this.setAttr("textWidth", l.A.measureTextWidth(r))
                        }
                        return e + 2 * o
                    }
                    getHeight() {
                        const {
                            padding: e,
                            fontSize: t,
                            fixHeight: i,
                            arrowHeight: r = 0
                        } = this.getConfig();
                        if ((0, a.Et)(i)) return i;
                        return t + 2 * (Array.isArray(e) ? e[1] : e) + r
                    }
                    drawCacheScene() {
                        if (!this.isBatchUpdate) return;
                        const e = this.getContext(),
                            t = this.getWidth(),
                            i = this.getHeight(),
                            r = this.overrideSize({
                                width: t,
                                height: i
                            });
                        r && this.setAttrs({
                            width: t,
                            height: i
                        });
                        const o = this.getContextStyles();
                        let n = !s()(o, this.preContextStyles);
                        if (n && (this.preContextStyles = o), n || r) {
                            const {
                                background: r,
                                color: o,
                                text: s,
                                borderColor: n,
                                stroke: a,
                                fill: d,
                                lineWidth: h,
                                borderRadius: u,
                                arrowHeight: g = 0
                            } = this.getConfig();
                            (0, c.jS)(e, {
                                fillStyle: r,
                                strokeStyle: n,
                                lineWidth: h
                            });
                            const p = i - g,
                                m = this._hasBorderRadius(u);
                            m ? (this._drawRoundRect(e, .5, .5, t - 2 * h, p - 2 * h, u), d && e.fill(), a && e.stroke()) : (d && l.A.fillRect(e, 0, 0, t, p), a && l.A.strokeRect(e, .5 * h, .5 * h, t - h, p - h)), this._drawTriangle(e, t / 2, p - 1, g), (0, c.jS)(e, {
                                fillStyle: o,
                                textAlign: "center",
                                textBaseline: "middle",
                                font: this._getTextFont()
                            });
                            const x = .5 * t,
                                f = p / 2 + (m ? h / 2 : 0);
                            l.A.drawText(e, s, x, f)
                        }
                        this.isBatchUpdate = !1
                    }
                    drawScene(e) {
                        const t = this.getAttr("data"),
                            i = this.getWidth(),
                            r = this.getHeight();
                        this._drawLabel(e, i, r, t)
                    }
                    isHover(e) {
                        if (!this.getAttr("isContain")) return !1;
                        const {
                            x: t,
                            y: i
                        } = this.getTransformOrigin(), r = this.getWidth(), o = this.getHeight();
                        return new d.A.Bound(t, i, r, o).contain([e.x, e.y])
                    }
                    _drawLabel(e, t, i, r) {
                        const {
                            background: o,
                            text: s,
                            borderColor: n,
                            color: a,
                            stroke: d,
                            fill: h,
                            borderRadius: u,
                            arrowHeight: g = 0
                        } = this.getConfig();
                        (0, c.jS)(e, {
                            fillStyle: o,
                            strokeStyle: n
                        });
                        const {
                            x: p = 0,
                            y: m = 0
                        } = r, x = i - g;
                        this._hasBorderRadius(u) ? (this._drawRoundRect(e, p, m, t, x, u), h && e.fill(), d && e.stroke()) : (h && l.A.fillRect(e, p, m, t, x), d && l.A.strokeRect(e, p, m, t, x)), this._drawTriangle(e, t / 2, x - 1, g), (0, c.jS)(e, this.getContextStyles()), (0, c.jS)(e, {
                            fillStyle: a,
                            textAlign: "center",
                            textBaseline: "middle"
                        });
                        const f = .5 * t,
                            y = .5 * x;
                        l.A.drawText(e, s, f, y)
                    }
                    _drawTriangle(e, t, i, r) {
                        e.beginPath(), e.moveTo(t - r, i), e.lineTo(t + r, i), e.lineTo(t, i + r), e.closePath(), e.fill()
                    }
                    _drawRoundRect(e, t, i, r, o, s) {
                        if (e.roundRect) return e.beginPath(), void e.roundRect(t, i, r, o, s);
                        const [n, a, l, c] = "number" === typeof s ? [s, s, s, s] : s;
                        e.beginPath(), e.moveTo(t, i + n), e.arc(t + n, i + n, n, Math.PI, 1.5 * Math.PI), e.lineTo(t + r - a, i), e.arc(t + r - a, i + a, a, 1.5 * Math.PI, 2 * Math.PI), e.lineTo(t + r, i + o - l), e.arc(t + r - l, i + o - l, l, 0, .5 * Math.PI), e.lineTo(t + c, i + o), e.arc(t + c, i + o - c, c, .5 * Math.PI, Math.PI), e.closePath()
                    }
                    _hasBorderRadius(e) {
                        return "number" === typeof e && e > 0 || Array.isArray(e) && e.some((e => e > 0))
                    }
                    _getTextFont() {
                        const {
                            fontStyle: e,
                            fontVariant: t,
                            fontSize: i,
                            fontFamily: r
                        } = this.getConfig();
                        return `${e} ${t} ${i}px ${r}`
                    }
                    constructor(e = {}) {
                        super(), this.config = { ...r.A.defaultConfig,
                            width: 0,
                            height: 0,
                            fontSize: 10,
                            fontFamily: "BinancePlex, Arial, sans-serif",
                            fontStyle: "",
                            fontVariant: "",
                            letterSpacing: 0,
                            textWidth: 0,
                            padding: 0,
                            borderRadius: 0,
                            borderColor: "#ddd",
                            background: "#ddd",
                            color: "#fff",
                            text: "",
                            dir: n.OP.Right,
                            useCache: !0
                        }, this.setAttrs(e), this.watch(["background", "lineWidth", "borderColor", "color", "text", "fontSize", "letterSpacing", "fontFamily", "fontStyle", "fontVariant", "dir", "useCache", "borderRadius"], this.onDataChange.bind(this))
                    }
                },
                p = class extends r.A {
                    onDataChange() {
                        this.isBatchUpdate = !0
                    }
                    getTransformOrigin() {
                        const {
                            data: {
                                x: e,
                                y: t
                            },
                            radius: i,
                            lineWidth: r
                        } = this.getConfig();
                        return {
                            x: e - i - r,
                            y: t - i - r
                        }
                    }
                    getContextStyles() {
                        const {
                            strokeStyle: e,
                            lineWidth: t,
                            fillStyle: i,
                            stroke: r,
                            fill: o
                        } = this.getConfig();
                        return {
                            strokeStyle: e,
                            lineWidth: t,
                            fillStyle: i,
                            stroke: r,
                            fill: o
                        }
                    }
                    setRadius(e) {
                        return this.setAttr("radius", e), this
                    }
                    drawCacheScene() {
                        if (!this.isBatchUpdate) return;
                        const {
                            radius: e,
                            stroke: t,
                            fill: i,
                            lineWidth: r
                        } = this.getConfig();
                        if (e <= 0) return;
                        const o = this.getContext(),
                            n = {
                                width: 2 * e + 2 * r,
                                height: 2 * e + 2 * r
                            },
                            a = this.overrideSize(n);
                        a && this.setAttrs(n);
                        const d = this.getContextStyles();
                        let h = !s()(d, this.preContextStyles);
                        h && (this.preContextStyles = d), (h || a) && (o.beginPath(), l.A.clearRect(o), (0, c.jS)(o, d), l.A.drawCircle(o, e + r, e + r, e), i && o.fill(), t && o.stroke()), this.isBatchUpdate = !1
                    }
                    drawScene(e) {
                        const {
                            data: {
                                x: t,
                                y: i
                            },
                            radius: r,
                            stroke: o,
                            fill: s
                        } = this.getConfig();
                        r <= 0 || ((0, c.jS)(e, this.getContextStyles()), e.beginPath(), l.A.drawCircle(e, t, i, r), s && e.fill(), o && e.stroke())
                    }
                    isHover(e, t = 5) {
                        if (!this.preDetect()) return !1;
                        const i = this.getAttr("data"),
                            r = this.getAttr("radius");
                        return d.A.Algorith.getSquareDistance(e, i) <= (r + t) ** 2
                    }
                    constructor(e = {}) {
                        super(), this.config = { ...r.A.defaultConfig,
                            width: 0,
                            height: 0,
                            radius: 0,
                            stroke: !0,
                            fill: !1,
                            useCache: !0
                        }, this.setAttrs(e), this.watch(["lineWidth", "strokeStyle", "fillStyle", "radius", "fill", "stroke", "useCache"], this.onDataChange.bind(this))
                    }
                },
                m = class extends r.A {
                    onDataChange() {
                        this.isDataUpdate = !0
                    }
                    getTransformOrigin() {
                        const {
                            x: e,
                            y: t
                        } = this.getAttr("data");
                        return {
                            x: e,
                            y: t
                        }
                    }
                    getContextStyles() {
                        const {
                            strokeStyle: e,
                            lineWidth: t,
                            fillStyle: i,
                            stroke: r,
                            fill: o,
                            globalAlpha: s,
                            borderRadius: n
                        } = this.getConfig();
                        return {
                            strokeStyle: e,
                            lineWidth: t,
                            fillStyle: i,
                            stroke: r,
                            fill: o,
                            globalAlpha: s,
                            borderRadius: n
                        }
                    }
                    getWidth() {
                        const {
                            width: e
                        } = this.getConfig();
                        return e
                    }
                    getHeight() {
                        const {
                            height: e
                        } = this.getConfig();
                        return e
                    }
                    setAnnotherVertex(e) {
                        const {
                            x: t,
                            y: i
                        } = this.getAttr("data"), r = Math.min(t, e.x), o = Math.min(i, e.y), s = Math.abs(t - e.x), n = Math.abs(i - e.y);
                        return this.setAttrs({
                            data: {
                                x: r,
                                y: o
                            },
                            width: s,
                            height: n
                        }), this
                    }
                    drawCacheScene() {
                        if (!this.isBatchUpdate) return;
                        const {
                            stroke: e,
                            fill: t,
                            width: i,
                            height: r,
                            borderRadius: o,
                            lineWidth: s,
                            lineDash: n
                        } = this.getConfig();
                        if (i <= 0 || r <= 0) return;
                        const a = this.getContext(),
                            d = this.getContextStyles();
                        this.preContextStyles = d, (0, c.jS)(a, d), n && a.setLineDash(n), l.A.clearRect(a), this._hasBorderRadius(o) ? (this._drawRoundRect(a, s, s, i, r, o), t && a.fill(), e && ((0, c.jS)(a, {
                            globalAlpha: 1
                        }), a.stroke())) : (t && l.A.fillRect(a, 0, 0, i, r), e && ((0, c.jS)(a, {
                            globalAlpha: 1
                        }), l.A.strokeRect(a, .5 * s, .5 * s, i - s, r - s))), this.isDataUpdate = !1, this.isBatchUpdate = !1
                    }
                    drawScene(e) {
                        const {
                            data: {
                                x: t,
                                y: i
                            },
                            width: r,
                            height: o,
                            stroke: s,
                            fill: n,
                            borderRadius: a,
                            lineDash: d,
                            lineWidth: h
                        } = this.getConfig();
                        r <= 0 || o <= 0 || ((0, c.jS)(e, this.getContextStyles()), d && e.setLineDash(d), this._hasBorderRadius(a) ? (this._drawRoundRect(e, t, i, r, o, a), n && e.fill(), s && ((0, c.jS)(e, {
                            globalAlpha: 1
                        }), e.stroke())) : (n && l.A.fillRect(e, t, i, r, o), s && ((0, c.jS)(e, {
                            globalAlpha: 1,
                            lineWidth: h
                        }), l.A.strokeRect(e, t + .5 * h, i + .5 * h, r - h, o - h))))
                    }
                    isHover(e) {
                        if (!this.preDetect()) return !1;
                        const {
                            x: t,
                            y: i
                        } = this.getTransformOrigin(), r = this.getHeight();
                        return new d.A.Bound(t, i, this.getWidth(), r).contain([e.x, e.y])
                    }
                    _drawRoundRect(e, t, i, r, o, s) {
                        const [n, a, l, c] = "number" === typeof s ? [s, s, s, s] : s;
                        e.beginPath(), e.moveTo(t, i + n), e.arc(t + n, i + n, n, Math.PI, 1.5 * Math.PI), e.lineTo(t + r - a, i), e.arc(t + r - a, i + a, a, 1.5 * Math.PI, 2 * Math.PI), e.lineTo(t + r, i + o - l), e.arc(t + r - l, i + o - l, l, 0, .5 * Math.PI), e.lineTo(t + c, i + o), e.arc(t + c, i + o - c, c, .5 * Math.PI, Math.PI), e.closePath()
                    }
                    _hasBorderRadius(e) {
                        return "number" === typeof e && e > 0 || Array.isArray(e) && e.some((e => e > 0))
                    }
                    _onSizeChange() {
                        const e = {
                            width: this.getWidth(),
                            height: this.getHeight()
                        };
                        this.overrideSize(e)
                    }
                    constructor(e = {}) {
                        super(), this.config = { ...r.A.defaultConfig,
                            width: 0,
                            height: 0,
                            borderRadius: 0,
                            stroke: !0,
                            fill: !0,
                            globalAlpha: 1,
                            useCache: !1
                        }, this.setAttrs(e), this.watch(["width", "height", "lineWidth", "strokeStyle", "fillStyle", "fill", "stroke", "useCache", "borderRadius"], this.onCacheChange.bind(this)), this.watch(["width", "height", "lineWidth"], this._onSizeChange.bind(this))
                    }
                },
                x = class extends r.A {
                    onDataChange() {
                        const {
                            minX: e,
                            maxX: t,
                            minY: i,
                            maxY: r
                        } = this.getMaxAndMin(), o = Math.max(t - e, 1), s = Math.max(r - i, 1);
                        this.overrideSize({
                            width: o,
                            height: s
                        }), this.setAttrs({
                            width: o,
                            height: s
                        }), this.setAttr("origin", {
                            x: e,
                            y: i
                        }), this.isDataUpdate = !0, this.isBatchUpdate = !0
                    }
                    getMaxAndMin() {
                        const e = this.getAttr("data"),
                            t = Number.MAX_SAFE_INTEGER,
                            i = -Number.MAX_SAFE_INTEGER;
                        return e.reduce((({
                            minX: e,
                            maxX: t,
                            minY: i,
                            maxY: r
                        }, {
                            x: o,
                            y: s
                        }) => (e > o && (e = o), t < o && (t = o), i > s && (i = s), r < s && (r = s), {
                            minX: e,
                            maxX: t,
                            minY: i,
                            maxY: r
                        })), {
                            minX: t,
                            maxX: i,
                            minY: t,
                            maxY: i
                        })
                    }
                    getTransformOrigin() {
                        return this.getAttr("origin")
                    }
                    getContextStyles() {
                        const {
                            strokeStyle: e,
                            fillStyle: t,
                            lineWidth: i,
                            lineDash: r,
                            globalAlpha: o
                        } = this.getConfig();
                        return {
                            strokeStyle: e,
                            fillStyle: t,
                            lineWidth: i,
                            lineDash: r,
                            globalAlpha: o
                        }
                    }
                    drawCacheScene() {
                        if (!this.isBatchUpdate) return;
                        const {
                            lineDash: e,
                            data: t,
                            stroke: i,
                            fill: r
                        } = this.getConfig(), o = this.getContext(), n = this.getContextStyles();
                        (!s()(n, this.preContextStyles) || this.isDataUpdate) && (this.preContextStyles = n, (0, c.jS)(o, n)), e && o.setLineDash(e), o.beginPath(), l.A.clearRect(o);
                        const {
                            x: a,
                            y: d
                        } = this.getTransformOrigin(), h = t.map((({
                            x: e,
                            y: t
                        }) => ({
                            x: e - a,
                            y: t - d
                        })));
                        l.A.drawLines(o, h), r && (o.closePath(), o.fill()), i && o.stroke(), this.isDataUpdate = !1, this.isBatchUpdate = !1
                    }
                    drawScene(e) {
                        const {
                            lineDash: t,
                            data: i,
                            stroke: r,
                            fill: o
                        } = this.getConfig();
                        (0, c.jS)(e, this.getContextStyles()), t && e.setLineDash(t), e.beginPath(), l.A.drawLines(e, i), o && (e.closePath(), e.fill()), r && e.stroke()
                    }
                    isHover(e, t = 5) {
                        if (!this.preDetect()) return !1;
                        const i = new d.A.Polyline(this.getAttr("data")),
                            {
                                dis: r
                            } = i.getNearestPoint(e);
                        return t >= r
                    }
                    constructor(e = {}) {
                        super(), this.config = { ...r.A.defaultConfig,
                            width: 0,
                            height: 0,
                            prevLineDash: [],
                            fill: !0,
                            stroke: !0,
                            origin: {
                                x: 0,
                                y: 0
                            },
                            useCache: !0
                        }, this.setAttrs(e), this.watch(["lineWidth", "fillStyle", "strokeStyle", "fill", "stroke", "globalAlpha"], this.onCacheChange.bind(this))
                    }
                },
                f = class extends r.A {
                    onDataChange() {
                        const e = this.getAttr("lineWidth"),
                            t = new d.A.Polyline(this.getAttr("data")),
                            {
                                x: i,
                                y: r,
                                width: o,
                                height: s
                            } = t.getBound(),
                            n = o + e,
                            a = s + e;
                        this.overrideSize({
                            width: n,
                            height: a
                        }), this.setAttrs({
                            width: n,
                            height: a
                        }), this.setAttr("origin", {
                            x: i - .5 * e,
                            y: r - .5 * e
                        }), this.isDataUpdate = !0, this.isBatchUpdate = !0
                    }
                    getTransformOrigin() {
                        return this.getAttr("origin")
                    }
                    getContextStyles() {
                        const {
                            strokeStyle: e,
                            fillStyle: t,
                            lineWidth: i,
                            lineDash: r,
                            globalAlpha: o
                        } = this.getConfig();
                        return {
                            strokeStyle: e,
                            fillStyle: t,
                            lineWidth: i,
                            lineDash: r,
                            globalAlpha: o
                        }
                    }
                    drawCacheScene() {
                        if (!this.isBatchUpdate) return;
                        const {
                            lineDash: e,
                            data: t,
                            stroke: i,
                            fill: r
                        } = this.getConfig(), o = this.getContext(), n = this.getContextStyles();
                        (!s()(n, this.preContextStyles) || this.isDataUpdate) && (this.preContextStyles = n, (0, c.jS)(o, n)), e && o.setLineDash(e), o.beginPath(), l.A.clearRect(o);
                        const {
                            x: a,
                            y: d
                        } = this.getTransformOrigin();
                        t.forEach((e => {
                            const t = e.map((({
                                x: e,
                                y: t
                            }) => ({
                                x: e - a,
                                y: t - d
                            })));
                            l.A.drawLines(o, t), r && (o.closePath(), o.fill())
                        })), i && ((0, c.jS)(o, {
                            globalAlpha: 1
                        }), o.stroke()), this.isDataUpdate = !1, this.isBatchUpdate = !1
                    }
                    drawScene(e) {
                        const {
                            lineDash: t,
                            data: i,
                            stroke: r,
                            fill: o
                        } = this.getConfig();
                        (0, c.jS)(e, this.getContextStyles()), t && e.setLineDash(t), e.beginPath(), i.forEach((t => {
                            const i = t.map((({
                                x: e,
                                y: t
                            }) => ({
                                x: e,
                                y: t
                            })));
                            l.A.drawLines(e, i), o && (e.closePath(), e.fill())
                        })), r && ((0, c.jS)(e, {
                            globalAlpha: 1
                        }), e.stroke())
                    }
                    isHover(e, t = 5) {
                        if (!this.preDetect()) return !1;
                        const i = new d.A.Polyline(this.getAttr("data")),
                            {
                                dis: r
                            } = i.getNearestPoint(e);
                        return t >= r
                    }
                    constructor(e = {}) {
                        super(), this.config = { ...r.A.defaultConfig,
                            width: 0,
                            height: 0,
                            prevLineDash: [],
                            fill: !0,
                            stroke: !0,
                            origin: {
                                x: 0,
                                y: 0
                            },
                            useCache: !0
                        }, this.setAttrs(e), this.watch(["lineWidth", "fillStyle", "strokeStyle", "fill", "stroke", "globalAlpha"], this.onCacheChange.bind(this))
                    }
                };
            var y = i("NdlK");
            let b = class extends r.A {
                setImage(e) {
                    this.setAttrs({
                        imageSource: e,
                        isLoading: !1
                    });
                    const {
                        width: t,
                        height: i
                    } = this.getConfig();
                    this.overrideSize({
                        width: t,
                        height: i,
                        forceResettingTransform: !0
                    }), this.setAttrs({
                        width: t,
                        height: i
                    }), this.isBatchUpdate = !0
                }
                getTransformOrigin() {
                    return this.getAttr("data")
                }
                drawCacheScene() {
                    if (!this.isBatchUpdate) return;
                    const {
                        width: e,
                        height: t,
                        imageSource: i
                    } = this.getConfig();
                    if (e <= 0 || t <= 0 || !i) return;
                    this.getContext().drawImage(i, 0, 0, e, t), this.isBatchUpdate = !1
                }
                drawScene(e) {
                    const {
                        data: {
                            x: t,
                            y: i
                        },
                        width: r,
                        height: o,
                        imageSource: s
                    } = this.getConfig();
                    r <= 0 || o <= 0 || !s || l.A.drawImage(e, s, t, i, r, o)
                }
                isHover(e) {
                    if (!this.preDetect()) return !1;
                    const {
                        x: t,
                        y: i
                    } = this.getTransformOrigin();
                    return new d.A.Bound(t, i, this.getWidth(), this.getHeight()).contain([e.x, e.y])
                }
                constructor(e = {}) {
                    super(), this.config = { ...r.A.defaultConfig,
                        width: 0,
                        height: 0,
                        imageSource: null,
                        globalAlpha: 1,
                        isLoading: !1,
                        useCache: !0
                    }, this.setAttrs(e)
                }
            }
        },
        NdlK: (e, t, i) => {
            i.d(t, {
                A: () => c
            });
            var r = i("VLTf"),
                o = i.n(r),
                s = i("lbWW"),
                n = i("hpT2"),
                a = i("p7cX"),
                l = i("hpQW");
            let c = class extends s.A {
                onDataChange() {
                    this.isDataUpdate = !0
                }
                setPath(e) {
                    this.setAttrs({
                        path: e
                    })
                }
                getTransformOrigin() {
                    return { ...this.getAttr("data")
                    }
                }
                getContextStyles() {
                    const {
                        strokeStyle: e,
                        fillStyle: t,
                        stroke: i,
                        fill: r
                    } = this.getConfig();
                    return {
                        strokeStyle: e,
                        fillStyle: t,
                        stroke: i,
                        fill: r
                    }
                }
                drawCacheScene() {
                    if (!this.isBatchUpdate) return;
                    const e = this.getWidth(),
                        t = this.getHeight(),
                        i = this.overrideSize({
                            width: e,
                            height: t
                        });
                    i && this.setAttrs({
                        width: e,
                        height: t
                    });
                    const r = this.getContextStyles();
                    if (!o()(r, this.preContextStyles) || i) {
                        const {
                            path: e,
                            fill: t,
                            stroke: i
                        } = this.getConfig(), o = this.getContext();
                        (0, a.jS)(o, r);
                        const s = new Path2D(e);
                        this.drawPath2D({
                            context: o,
                            path: s,
                            fill: t,
                            stroke: i
                        })
                    }
                    this.isDataUpdate = !1, this.isBatchUpdate = !1
                }
                drawScene(e) {
                    this.drawCacheScene(), this.drawFromCache(e)
                }
                isHover(e) {
                    if (!this.preDetect()) return !1;
                    const {
                        x: t,
                        y: i
                    } = this.getTransformOrigin();
                    return new l.A.Bound(t, i, this.getWidth(), this.getHeight()).contain([e.x, e.y])
                }
                _onSizeChange() {
                    const e = {
                        width: this.getWidth(),
                        height: this.getHeight()
                    };
                    this.overrideSize(e)
                }
                drawPath2D({
                    context: e,
                    path: t,
                    fill: i,
                    stroke: r
                }) {
                    r && n.A.strokePath2D(e, t), i && n.A.fillPath2D(e, t)
                }
                constructor(e = {}) {
                    super(), this.config = { ...s.A.defaultConfig,
                        path: "",
                        width: 0,
                        height: 0,
                        fill: !0,
                        stroke: !0,
                        useCache: !0
                    }, this.setAttrs(e), this.watch(["path", "width", "height", "strokeStyle", "fillStyle", "fill", "stroke"], this.onCacheChange.bind(this)), this.watch(["width", "height"], this._onSizeChange.bind(this))
                }
            }
        },
        lbWW: (e, t, i) => {
            i.d(t, {
                A: () => u,
                o: () => r
            });
            var r, o = i("T9sr"),
                s = i.n(o),
                n = i("ym1p"),
                a = i("HV0L"),
                l = i("p7cX"),
                c = i("oHkN"),
                d = i("hpT2"),
                h = i("hpQW");
            ! function(e) {
                e.AUTO = "auto"
            }(r || (r = {}));
            let u = class extends n.A {
                initEvents() {
                    this.watch("data", this.onDataChange.bind(this))
                }
                get sceneCanvas() {
                    return this._sceneCanvas || (this._sceneCanvas = (0, l.n)("canvas", {})), this._sceneCanvas
                }
                setData(e) {
                    return this.setAttr("data", e), this
                }
                setParent(e) {
                    return this._parent = e, this
                }
                getParent() {
                    return this._parent
                }
                overrideSize({
                    width: e,
                    height: t,
                    forceResettingTransform: i = !1
                }) {
                    const r = this.getAttr("devicePixelRatio"),
                        o = this.sceneCanvas,
                        s = e * r,
                        n = t * r,
                        [a = 0, d = 0] = [this.getAttr("width"), this.getAttr("height")];
                    if (!i && (0, c.Et)(a) && (0, l.be)(a - e) && (0, l.be)(d - t) && o.width === s && o.height === n) return !1;
                    (0, l.EM)(o, {
                        width: `${e}px`,
                        height: `${t}px`
                    }), o.width = s, o.height = n;
                    const h = this.getContext();
                    return h.resetTransform ? h.resetTransform() : h.setTransform(1, 0, 0, 1, 0, 0), h.scale(r, r), !0
                }
                getContext() {
                    return this.sceneCanvas.getContext("2d")
                }
                getBound() {
                    const {
                        x: e,
                        y: t
                    } = this.getTransformOrigin();
                    return {
                        x: e,
                        y: t,
                        width: this.getWidth(),
                        height: this.getHeight()
                    }
                }
                getConvertBound() {
                    const {
                        x: e,
                        y: t,
                        width: i,
                        height: r
                    } = this.getBound();
                    return {
                        x: e,
                        y: -(t + r),
                        width: i,
                        height: r
                    }
                }
                isVisible({
                    x: e,
                    y: t,
                    width: i,
                    height: r
                }) {
                    const o = this.getAttr("isVisible"),
                        s = this.getAttr("data");
                    if (!o || null === s) return !1;
                    const n = new h.A.Bound(e, t, i, r),
                        {
                            x: a,
                            y: l,
                            width: c,
                            height: d
                        } = this.getConvertBound(),
                        u = new h.A.Bound(a, l, c, d);
                    return n.isOverlaped(u)
                }
                applyTransform(e) {
                    const {
                        x: t = 0,
                        y: i = 0
                    } = this.getTransformOrigin(), r = e || this.getContext(), {
                        m11: o,
                        m12: s,
                        m21: n,
                        m22: a
                    } = r.getTransform();
                    r.setTransform(o, s, n, a, t, i)
                }
                drawFromCache(e) {
                    const {
                        x: t = 0,
                        y: i = 0
                    } = this.getTransformOrigin();
                    d.A.drawImage(e, this.sceneCanvas, t, i, this.getWidth(), this.getHeight())
                }
                getWidth() {
                    let e = this.getAttr("width");
                    return e = (0, c.Et)(e) ? Math.max(e, 1) : 1, e
                }
                getHeight() {
                    let e = this.getAttr("height");
                    return e = (0, c.Et)(e) ? Math.max(e, 1) : 1, e
                }
                onDataChange() {
                    this.isDataUpdate = !0
                }
                onCacheChange() {
                    this.isBatchUpdate = !0
                }
                draw(e, t) {
                    e.save(), this.beforeDrawHook();
                    const i = this.getAttr("useCache");
                    (void 0 === t ? i : t) ? (this.drawCacheScene(), this.drawFromCache(e)) : this.drawScene(e), e.restore()
                }
                clone(e) {
                    const t = s()(this.getConfig()),
                        i = new(0, this._constructor)(t);
                    return e && this._bindAsyncAttrs(e, i), i
                }
                preDetect() {
                    return this.getAttr("isContain") && !!this.getAttr("data")
                }
                _bindAsyncAttrs(e, t) {
                    e.forEach((e => {
                        this.watch(e, (({
                            newVal: i
                        }) => {
                            t.setAttr(e, i)
                        }))
                    }))
                }
                beforeDrawHook() {}
                getContextStyles() {
                    return {}
                }
                constructor() {
                    super(), this.id = (0, l.Os)(), this.isBatchUpdate = !0, this.isDataUpdate = !0, this.preContextStyles = {}, this.initEvents(), this._constructor = new.target
                }
            };
            u.defaultConfig = { ...n.A.defaultConfig,
                lineCap: "butt",
                lineDashOffset: 0,
                lineJoin: "miter",
                lineWidth: 1,
                miterLimit: 10,
                fillStyle: a._j.Black,
                strokeStyle: a._j.Black,
                globalAlpha: 1,
                globalCompositeOperation: "source-over",
                shadowBlur: 0,
                shadowColor: a._j.Black,
                shadowOffsetX: 0,
                shadowOffsetY: 0,
                font: "10px sans-serif",
                textAlign: "left",
                textBaseline: "top",
                direction: "ltr",
                stroke: !1,
                fill: !1,
                useCache: !1,
                isVisible: !0,
                isHover: !1,
                isContain: !0,
                data: null,
                fontKerning: "auto",
                fontStretch: "normal",
                fontVariantCaps: "normal",
                textRendering: "auto",
                wordSpacing: ""
            }
        },
        aw40: (e, t, i) => {
            var r, o;
            i.d(t, {
                    Qw: () => o,
                    R: () => r,
                    U9: () => n,
                    tx: () => s
                }),
                function(e) {
                    e.MA = "@MA", e.EMA = "@EMA", e.WMA = "@WMA", e.BOLL = "@BOLL", e.VWAP = "@VWAP", e.AVL = "@AVL", e.TRIX = "@TRIX", e.SAR = "@SAR"
                }(r || (r = {})),
                function(e) {
                    e.VOL = "@VOL", e.MACD = "@MACD", e.RSI = "@RSI", e.KDJ = "@KDJ", e.OBV = "@OBV", e.CCI = "@CCI", e.StochRSI = "@Stoch RSI", e.WR = "@Wm %R", e.DMI = "@DMI", e.MTM = "@MTM", e.EMV = "@EMV", e.OI_UM = "@OI-UM", e.OI_CM = "@OI-CM", e.LS_ACCO = "@LS-Acco", e.LS_POSIT = "@LS-Posit", e.LS_RATIO = "@LS-Ratio", e.BS_VOL = "@BSVol", e.BASIS = "@Basis", e.MFI = "@MFI"
                }(o || (o = {}));
            const s = Object.values(r),
                n = Object.values(o)
        },
        wwoD: (e, t, i) => {
            i.d(t, {
                M: () => d,
                A: () => h
            });
            var r = i("T9sr"),
                o = i.n(r),
                s = i("jYFu"),
                n = i("p7cX"),
                a = i("vHdC");
            const l = ({
                colorTable: e = s.On
            }) => {
                const t = e["indicator.1"],
                    i = e["indicator.2"],
                    r = e["indicator.3"],
                    l = e["indicator.4"],
                    c = e["indicator.5"],
                    d = e["indicator.6"],
                    h = e["indicator.7"],
                    u = e["indicator.8"],
                    g = e["indicator.9"],
                    p = e["indicator.10"],
                    m = {
                        showSeries: !0,
                        periods: [7, 25, 99, 0, 0, 0, 0, 0, 0, 0],
                        sources: [a.jp.Close, a.jp.Close, a.jp.Close, a.jp.Close, a.jp.Close, a.jp.Close, a.jp.Close, a.jp.Close, a.jp.Close, a.jp.Close],
                        lineWidths: ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
                        colors: [(0, a.Ou)({
                            value: t
                        }), (0, a.Ou)({
                            value: i
                        }), (0, a.Ou)({
                            value: r
                        }), (0, a.Ou)({
                            value: l
                        }), (0, a.Ou)({
                            value: c
                        }), (0, a.Ou)({
                            value: d
                        }), (0, a.Ou)({
                            value: h
                        }), (0, a.Ou)({
                            value: u
                        }), (0, a.Ou)({
                            value: g
                        }), (0, a.Ou)({
                            value: p
                        })],
                        visibles: [!0, !0, !0, !1, !1, !1, !1, !1, !1, !1]
                    };
                return {
                    "@MA": m,
                    "@EMA": o()(m),
                    "@WMA": o()(m),
                    "@MACD": {
                        showSeries: !0,
                        fastPeriod: 12,
                        slowPeriod: 26,
                        signalPeriod: 9,
                        visibles: {
                            DEA: !0,
                            DIF: !0,
                            MACD: !0
                        },
                        lineWidths: {
                            DEA: a.yZ[0],
                            DIF: a.yZ[0]
                        },
                        colors: {
                            DEA: (0, a.Ou)({
                                value: i
                            }),
                            DIF: (0, a.Ou)({
                                value: r
                            })
                        },
                        longGrowth: {
                            style: a.Ow.Hollow,
                            isBullishColor: !0
                        },
                        longFall: {
                            style: a.Ow.Solid,
                            isBullishColor: !0
                        },
                        shortGrowth: {
                            style: a.Ow.Hollow,
                            isBullishColor: !1
                        },
                        shortFall: {
                            style: a.Ow.Solid,
                            isBullishColor: !1
                        }
                    },
                    "@VOL": {
                        showSeries: !0,
                        visibles: [!1],
                        long: {
                            style: a.Ow.Solid
                        },
                        short: {
                            style: a.Ow.Solid
                        },
                        maVol1: {
                            period: 7,
                            lineWidth: a.yZ[1],
                            color: (0, a.Ou)({
                                value: u
                            }),
                            visible: !0
                        },
                        maVol2: {
                            period: 14,
                            lineWidth: a.yZ[1],
                            color: (0, a.Ou)({
                                value: l
                            }),
                            visible: !0
                        }
                    },
                    "@TRIX": {
                        showSeries: !0,
                        period: 9,
                        color: (0, a.Ou)({
                            value: t
                        }),
                        lineWidth: a.yZ[0]
                    },
                    "@Stoch RSI": {
                        showSeries: !0,
                        rsiPeriod: 14,
                        stochasticPeriod: 14,
                        kPeriod: 3,
                        dPeriod: 3,
                        visibles: {
                            smoothK: !0,
                            smoothD: !0
                        },
                        lineWidths: {
                            smoothK: a.yZ[0],
                            smoothD: a.yZ[0]
                        },
                        colors: {
                            smoothK: (0, a.Ou)({
                                value: i
                            }),
                            smoothD: (0, a.Ou)({
                                value: r
                            })
                        }
                    },
                    "@Wm %R": {
                        showSeries: !0,
                        period: 14,
                        color: (0, a.Ou)({
                            value: t
                        }),
                        lineWidth: a.yZ[0]
                    },
                    "@MTM": {
                        showSeries: !0,
                        period: 14,
                        source: a.jp.Close,
                        color: (0, a.Ou)({
                            value: t
                        }),
                        lineWidth: a.yZ[0]
                    },
                    "@DMI": {
                        showSeries: !0,
                        period: 14,
                        visibles: {
                            pDI: !0,
                            nDI: !0,
                            dx: !0
                        },
                        lineWidths: {
                            pDI: a.yZ[0],
                            nDI: a.yZ[0],
                            dx: a.yZ[0]
                        },
                        colors: {
                            pDI: (0, a.Ou)({
                                value: i
                            }),
                            nDI: (0, a.Ou)({
                                value: r
                            }),
                            dx: (0, a.Ou)({
                                value: t
                            })
                        }
                    },
                    "@EMV": {
                        showSeries: !0,
                        period: 14,
                        x: 1e4,
                        color: (0, a.Ou)({
                            value: t
                        }),
                        lineWidth: a.yZ[0]
                    },
                    "@SAR": {
                        showSeries: !0,
                        step: .02,
                        x: .2,
                        color: (0, a.Ou)({
                            value: t
                        })
                    },
                    "@RSI": {
                        showSeries: !0,
                        periods: [6, 12, 24],
                        lineWidths: [a.yZ[0], a.yZ[0], a.yZ[0]],
                        colors: [(0, a.Ou)({
                            value: i
                        }), (0, a.Ou)({
                            value: r
                        }), (0, a.Ou)({
                            value: t
                        })],
                        visibles: [!0, !0, !0]
                    },
                    "@MFI": {
                        showSeries: !0,
                        periods: [7, 14, 21],
                        lineWidths: [a.yZ[0], a.yZ[0], a.yZ[0]],
                        colors: [(0, a.Ou)({
                            value: i
                        }), (0, a.Ou)({
                            value: r
                        }), (0, a.Ou)({
                            value: t
                        })],
                        visibles: [!0, !0, !0]
                    },
                    "@CCI": {
                        showSeries: !0,
                        period: 9,
                        color: (0, a.Ou)({
                            value: t
                        }),
                        lineWidth: a.yZ[0]
                    },
                    "@KDJ": {
                        showSeries: !0,
                        period: [9, 3, 3],
                        lineWidths: [a.yZ[0], a.yZ[0], a.yZ[0]],
                        colors: [(0, a.Ou)({
                            value: i
                        }), (0, a.Ou)({
                            value: r
                        }), (0, a.Ou)({
                            value: t
                        })],
                        visibles: [!0, !0, !0]
                    },
                    "@OBV": {
                        showSeries: !0,
                        color: (0, a.Ou)({
                            value: t
                        }),
                        lineWidth: a.yZ[0],
                        ma: {
                            period: 7,
                            visible: !1,
                            color: (0, a.Ou)({
                                value: i
                            }),
                            lineWidth: a.yZ[0]
                        },
                        ema: {
                            period: 7,
                            visible: !1,
                            color: (0, a.Ou)({
                                value: r
                            }),
                            lineWidth: a.yZ[0]
                        }
                    },
                    "@BOLL": {
                        showSeries: !0,
                        period: 20,
                        stdDev: 2,
                        background: (0, a.Ou)({
                            value: (0, n.No)(r, .1)
                        }),
                        backgroundVisible: !0,
                        lineWidths: [a.yZ[0], a.yZ[0], a.yZ[0]],
                        colors: [(0, a.Ou)({
                            value: r
                        }), (0, a.Ou)({
                            value: i
                        }), (0, a.Ou)({
                            value: r
                        })],
                        visibles: [!0, !0, !0]
                    },
                    "@VWAP": {
                        showSeries: !0,
                        period: 14,
                        color: (0, a.Ou)({
                            value: t
                        }),
                        lineWidth: a.yZ[0]
                    },
                    "@AVL": {
                        showSeries: !0,
                        color: (0, a.Ou)({
                            value: t
                        }),
                        lineWidth: a.yZ[0]
                    },
                    "@OI-UM": {
                        showSeries: !0,
                        bar: {
                            color: (0, a.Ou)({
                                value: "rgba(14, 203, 129, 0.7)"
                            })
                        },
                        nv: {
                            color: (0, a.Ou)({
                                value: d
                            }),
                            lineWidth: a.yZ[2]
                        }
                    },
                    "@OI-CM": {
                        showSeries: !0,
                        bar: {
                            color: (0, a.Ou)({
                                value: "rgba(14, 203, 129, 0.7)"
                            })
                        }
                    },
                    "@LS-Acco": {
                        showSeries: !0,
                        bar: {
                            buyColor: (0, a.Ou)({
                                value: g
                            }),
                            sellColor: (0, a.Ou)({
                                value: d
                            })
                        },
                        ratio: {
                            color: (0, a.Ou)({
                                value: i
                            }),
                            lineWidth: a.yZ[2]
                        }
                    },
                    "@LS-Posit": {
                        showSeries: !0,
                        bar: {
                            buyColor: (0, a.Ou)({
                                value: g
                            }),
                            sellColor: (0, a.Ou)({
                                value: d
                            })
                        },
                        ratio: {
                            color: (0, a.Ou)({
                                value: i
                            }),
                            lineWidth: a.yZ[2]
                        }
                    },
                    "@LS-Ratio": {
                        showSeries: !0,
                        bar: {
                            buyColor: (0, a.Ou)({
                                value: g
                            }),
                            sellColor: (0, a.Ou)({
                                value: d
                            })
                        },
                        ratio: {
                            color: (0, a.Ou)({
                                value: i
                            }),
                            lineWidth: a.yZ[2]
                        }
                    },
                    "@BSVol": {
                        showSeries: !0,
                        buyColor: (0, a.Ou)({
                            value: g
                        }),
                        sellColor: (0, a.Ou)({
                            value: d
                        })
                    },
                    "@Basis": {
                        showSeries: !0,
                        basisColor: (0, a.Ou)({
                            value: t
                        }),
                        futurePriceColor: (0, a.Ou)({
                            value: d
                        }),
                        priceIndexColor: (0, a.Ou)({
                            value: g
                        })
                    }
                }
            };
            var c = i("zmPV");
            const d = "candlestick-indicator-setting";
            let h = class extends c.A {
                changeColorTable(e) {
                    this.defaultValue = l({
                        colorTable: e
                    })
                }
                getMADescriptions(e = "MA") {
                    return [...Array(10).keys()].map((t => ({
                        label: `${e}${t+1}`,
                        periodsKey: `@${e}.periods[${t}]`,
                        sourcesKey: `@${e}.sources[${t}]`,
                        colorsKey: `@${e}.colors[${t}]`,
                        lineWidthsKey: `@${e}.lineWidths[${t}]`,
                        visiblesKey: `@${e}.visibles[${t}]`,
                        period: this.getValue(`@${e}.periods[${t}]`),
                        source: this.getValue(`@${e}.sources[${t}]`),
                        color: this.getValue(`@${e}.colors[${t}]`),
                        lineWidth: this.getValue(`@${e}.lineWidths[${t}]`),
                        visible: !!this.getValue(`@${e}.visibles[${t}]`)
                    })))
                }
                getRSIDescriptions(e = "RSI") {
                    return [...Array(3).keys()].map((t => ({
                        label: e,
                        periodsKey: `@${e}.periods[${t}]`,
                        colorsKey: `@${e}.colors[${t}]`,
                        lineWidthsKey: `@${e}.lineWidths[${t}]`,
                        visiblesKey: `@${e}.visibles[${t}]`,
                        period: this.getValue(`@${e}.periods[${t}]`),
                        color: this.getValue(`@${e}.colors[${t}]`),
                        lineWidth: this.getValue(`@${e}.lineWidths[${t}]`),
                        visible: !!this.getValue(`@${e}.visibles[${t}]`)
                    })))
                }
                getMFIDescriptions(e = "MFI") {
                    return [...Array(3).keys()].map((t => ({
                        label: e,
                        periodsKey: `@${e}.periods[${t}]`,
                        colorsKey: `@${e}.colors[${t}]`,
                        lineWidthsKey: `@${e}.lineWidths[${t}]`,
                        visiblesKey: `@${e}.visibles[${t}]`,
                        period: this.getValue(`@${e}.periods[${t}]`),
                        color: this.getValue(`@${e}.colors[${t}]`),
                        lineWidth: this.getValue(`@${e}.lineWidths[${t}]`),
                        visible: !!this.getValue(`@${e}.visibles[${t}]`)
                    })))
                }
                constructor({
                    colorTable: e
                }) {
                    super(), this.defaultValue = l({
                        colorTable: e
                    })
                }
            }
        },
        Af4x: (e, t, i) => {
            i.d(t, {
                M: () => c,
                A: () => d
            });
            var r = i("HV0L"),
                o = i("jYFu"),
                s = i("vHdC");
            const n = ({
                colorTable: e = o.On
            }) => ({
                "@symbol": {
                    candlestick: {
                        type: r.NB.CandleBar,
                        style: s.Ky.Candle,
                        candle: {
                            style: s.hq.Solid,
                            colors: {
                                up: {
                                    color: (0, s.Ou)({
                                        value: e["candle.upBarColor"]
                                    }),
                                    borderColor: (0, s.Ou)({
                                        value: e["candle.upBarColor"]
                                    }),
                                    wickColor: (0, s.Ou)({
                                        value: e["candle.upBarColor"]
                                    })
                                },
                                down: {
                                    color: (0, s.Ou)({
                                        value: e["candle.downBarColor"]
                                    }),
                                    borderColor: (0, s.Ou)({
                                        value: e["candle.downBarColor"]
                                    }),
                                    wickColor: (0, s.Ou)({
                                        value: e["candle.downBarColor"]
                                    })
                                }
                            }
                        },
                        line: {
                            color: (0, s.Ou)({
                                value: "rgba(240,185,11,1)"
                            }),
                            width: s.yZ[1]
                        },
                        executionOrderStyle: s.Jy.BuySell
                    }
                },
                "@background": {
                    color: (0, s.Ou)({
                        value: e.background
                    }),
                    vertGridLine: {
                        show: !0,
                        lineWidth: s.yZ[0],
                        color: (0, s.Ou)({
                            value: e["vertGridLine.color"]
                        })
                    },
                    horzGridLine: {
                        show: !0,
                        lineWidth: s.yZ[0],
                        color: (0, s.Ou)({
                            value: e["horzGridLine.color"]
                        })
                    }
                },
                "@contextMenu": {
                    countDown: !1,
                    bidAsk: !1,
                    priceLine: !1,
                    percentageScale: !1,
                    logarithmicScale: !1,
                    invertedScale: !1,
                    chartTrading: !0,
                    informationMines: !0
                },
                "@drawTool": {
                    currentAction: r.X2.CrossHairCursor
                },
                "@annotationTool": {
                    position: {
                        x: 0,
                        y: 0
                    }
                },
                "@customColors": [],
                "@timeTool": {
                    tab: "go-to-date",
                    timeAnchor: !1,
                    timeAnchorDate: {
                        value: Date.now(),
                        pristine: !0
                    },
                    anchorPoint: "date",
                    anchorLine: !1,
                    acrossTokens: !1
                }
            });
            var a = i("yLnw"),
                l = i("zmPV");
            const c = "candlestick-setting";
            let d = class extends l.A {
                changeColorTable(e) {
                    this.defaultValue = n({
                        colorTable: e
                    }), this.value = (0, a.n)({
                        settings: this.value,
                        defaultSettings: this.defaultValue
                    }), this.onValueChangedSubscribers.forEach((e => e({
                        key: "",
                        value: this.value,
                        type: "update/color-table"
                    })))
                }
                setChartType(e) {
                    const t = "@symbol.candlestick.style",
                        i = "@symbol.candlestick.candle.style";
                    switch (e) {
                        case r.NB.CandleBar:
                            this.setValue(t, s.Ky.Candle), this.setValue(i, s.hq.Solid);
                            break;
                        case r.NB.HollowCandleBar:
                            this.setValue(t, s.Ky.Candle), this.setValue(i, s.hq.Hollow);
                            break;
                        case r.NB.BarCandle:
                            this.setValue(t, s.Ky.Bar);
                            break;
                        case r.NB.Line:
                            this.setValue(t, s.Ky.Line);
                            break;
                        case r.NB.GradientArea:
                            this.setValue(t, s.Ky.Area)
                    }
                    this.setValue("@symbol.candlestick.type", e)
                }
                getCalculatedChartType() {
                    const e = this.getValue("@symbol.candlestick.type"),
                        t = this.getValue("@symbol.candlestick.style"),
                        i = this.getValue("@symbol.candlestick.candle.style");
                    switch (t) {
                        case s.Ky.Bar:
                            return {
                                type: e,
                                typeFromSetting: r.NB.BarCandle
                            };
                        case s.Ky.Area:
                            return {
                                type: e,
                                typeFromSetting: r.NB.GradientArea
                            };
                        case s.Ky.Line:
                            return {
                                type: e,
                                typeFromSetting: r.NB.Line
                            };
                        case s.Ky.Candle:
                        default:
                            switch (i) {
                                case s.hq.Hollow:
                                    return {
                                        type: e,
                                        typeFromSetting: r.NB.HollowCandleBar
                                    };
                                case s.hq.Solid:
                                default:
                                    return {
                                        type: e,
                                        typeFromSetting: r.NB.CandleBar
                                    }
                            }
                    }
                }
                constructor({
                    colorTable: e
                }) {
                    super(), this.defaultValue = n({
                        colorTable: e
                    })
                }
            }
        },
        zmPV: (e, t, i) => {
            i.d(t, {
                A: () => u
            });
            var r = i("VLTf"),
                o = i.n(r),
                s = i("Km4d"),
                n = i.n(s),
                a = i("fwNI"),
                l = i.n(a),
                c = i("GCXA"),
                d = i.n(c),
                h = i("yLnw");
            let u = class {
                isLoaded() {
                    return this._isLoaded
                }
                load({
                    data: e
                }) {
                    const t = n()({}, this.defaultValue, e || {});
                    this.value = (0, h.n)({
                        settings: t,
                        defaultSettings: this.defaultValue
                    }), this._isLoaded = !0, this.onValueChangedSubscribers.forEach((e => e({
                        key: "",
                        value: void 0,
                        type: "load"
                    })))
                }
                subscribeValueChanged(e) {
                    this.onValueChangedSubscribers.add(e), this.isLoaded() && e({
                        key: "",
                        value: void 0,
                        type: "load"
                    })
                }
                unsubscribeValueChanged(e) {
                    this.onValueChangedSubscribers.delete(e)
                }
                getDefaultValue(e) {
                    return l()(this.defaultValue, e)
                }
                getDefaultValues() {
                    return this.defaultValue
                }
                setValue(e, t) {
                    const i = l()(this.value, e);
                    o()(i, t) || (d()(this.value, e, t), this.onValueChangedSubscribers.forEach((i => i({
                        key: e,
                        value: t,
                        type: "update"
                    }))))
                }
                getValue(e) {
                    return l()(this.value, e) ? ? this.getDefaultValue(e)
                }
                getValues() {
                    return this.value || this.getDefaultValues()
                }
                constructor() {
                    this.onValueChangedSubscribers = new Set, this._isLoaded = !1
                }
            }
        },
        vHdC: (e, t, i) => {
            i.d(t, {
                Jy: () => l,
                Ky: () => n,
                Ou: () => c,
                Ow: () => s,
                hq: () => a,
                jp: () => o,
                yZ: () => r
            });
            const r = ["1", "2", "3", "4"];
            var o, s, n, a, l;
            ! function(e) {
                e.High = "high", e.Low = "low", e.Open = "open", e.Close = "close"
            }(o || (o = {})),
            function(e) {
                e.Hollow = "hollow", e.Solid = "solid"
            }(s || (s = {})),
            function(e) {
                e[e.Candle = 0] = "Candle", e[e.Line = 1] = "Line", e[e.Bar = 2] = "Bar", e[e.Area = 3] = "Area"
            }(n || (n = {})),
            function(e) {
                e[e.Solid = 0] = "Solid", e[e.Hollow = 1] = "Hollow"
            }(a || (a = {})),
            function(e) {
                e.BuySell = "BuySell", e.Arrow = "Arrow"
            }(l || (l = {}));
            const c = ({
                value: e,
                pristine: t = !0
            }) => ({
                type: "color",
                value: e,
                pristine: t
            })
        },
        yLnw: (e, t, i) => {
            i.d(t, {
                n: () => c
            });
            var r = i("fwNI"),
                o = i.n(r),
                s = i("K8Sh"),
                n = i.n(s);
            const a = ({
                object: e,
                modify: t,
                path: i
            }) => n()(e, ((e, r, o) => {
                const s = [...i, o];
                if ("object" === typeof r) {
                    const i = a({
                        object: r,
                        modify: t,
                        path: s
                    });
                    e[o] = t({
                        value: i,
                        path: s
                    })
                } else e[o] = t({
                    value: r,
                    path: s
                })
            }));
            var l = i("vHdC");
            const c = ({
                settings: e,
                defaultSettings: t
            }) => {
                const i = ({
                    value: e,
                    path: i
                }) => {
                    if ("color" === e ? .type && e ? .pristine) {
                        const r = o()(t, [...i, "value"]) || e ? .value;
                        return (0, l.Ou)({
                            value: r
                        })
                    }
                    return e
                };
                try {
                    return (({
                        object: e,
                        modify: t
                    }) => a({
                        object: e,
                        modify: t,
                        path: []
                    }))({
                        object: e,
                        modify: i
                    })
                } catch (r) {
                    return console.log("[candlestick] something went wrong while overriding colors", e, r), e
                }
            }
        },
        UfNb: (e, t, i) => {
            i.d(t, {
                A: () => Q
            });
            var r = i("f9BG"),
                o = i("+jcl"),
                s = i.n(o),
                n = i("T9sr"),
                a = i.n(n),
                l = i("znRX"),
                c = i.n(l),
                d = i("xU+W"),
                h = i.n(d),
                u = i("ssw4"),
                g = i.n(u),
                p = i("eY1w"),
                m = i("LED3"),
                x = i("iBul"),
                f = i("JF0F"),
                y = i.n(f),
                b = i("bmS5"),
                v = i.n(b),
                C = i("GK7n"),
                w = i.n(C),
                A = i("CKB+");
            const S = e => -Math.floor(Math.log10(e)),
                T = e => (e.sort(((e, t) => e - t)), w()(e, ((t, i, r) => {
                    const o = e[r - 1],
                        s = o ? (n = o, a = i, y()(a, S(a - n))) : y()(i, S(i) + 1);
                    var n, a;
                    return t.push(s), t
                }), []));
            var k;
            ! function(e) {
                e[e.Fix = 0] = "Fix", e[e.Linear = 1] = "Linear", e[e.Log = 2] = "Log"
            }(k || (k = {}));
            let L = class {
                    get maxScaleCoeff() {
                        return 10
                    }
                    get minScaleCoeff() {
                        return 1
                    }
                    setDomain({
                        min: e,
                        max: t
                    }) {
                        switch (this._mode) {
                            case 2:
                            case 1:
                                this.domainRange.setMinValue(e).setMaxValue(t), this.domainRange.scaleAroundCenter(this._scaleCoeff);
                                break;
                            case 0:
                                this.domainRange.setMinValue(0).setMaxValue(t * this._scaleCoeff)
                        }
                    }
                    setCurrentScaleCoeff(e) {
                        this._scaleCoeff = e, this.domainRange.scaleAroundCenter(this._scaleCoeff)
                    }
                    getCurrentScaleCoeff() {
                        return this._scaleCoeff
                    }
                    setScaleCoeff(e) {
                        this._scaleCoeff = v()(e, this.minScaleCoeff, this.maxScaleCoeff)
                    }
                    isValid() {
                        return this.domainRange.getInterval() > 0
                    }
                    getAxisData(e = e => e) {
                        const t = this.domainRange.getExtent(),
                            i = this.coordRange.getExtent(),
                            r = this.coordRange.getDifference(),
                            o = Math.max(2, Math.floor(r / 40));
                        if (2 === this._mode) {
                            const r = (0, m.A)(t, i).constant(this._logConstant),
                                s = (0, x.A)(t, i),
                                n = s.ticks(o).map(s).map(r.invert);
                            return T(n).map((t => ({
                                p: r(t),
                                v: e(t)
                            })))
                        } {
                            const r = (0, x.A)(t, i);
                            return r.ticks(o).map((t => ({
                                p: r(t),
                                v: e(t)
                            })))
                        }
                    }
                    getRelativeAxisData({
                        baseValue: e
                    }) {
                        const t = Math.abs(Math.ceil(this.coordRange.getInterval() / 30 + 1e-5));
                        if (0 === t) return [];
                        const [i, r] = this.domainRange.getExtent(), o = .05 * e;
                        var s, n;
                        const a = o * ((s = o) > (n = (r - i) / t) ? 10 ** -Math.floor(Math.log10(s / n)) : Math.floor(n / s) + 1),
                            l = [{
                                p: this.getCoordOfValue(e),
                                v: e
                            }];
                        for (let c = e - a; c > i; c -= a) l.unshift({
                            p: this.getCoordOfValue(c),
                            v: c
                        });
                        for (let c = e + a; c < r; c += a) l.push({
                            p: this.getCoordOfValue(c),
                            v: c
                        });
                        return l
                    }
                    getScaleCoeff() {
                        return this._scaleCoeff
                    }
                    resetScaleCoeff() {
                        this._scaleCoeff = 1
                    }
                    getCoordOfValue(e) {
                        const t = this.domainRange.getExtent(),
                            i = this.coordRange.getExtent();
                        if (2 === this._mode) {
                            return (0, m.A)(t, i).constant(this._logConstant)(e)
                        }
                        return (0, x.A)(t, i)(e)
                    }
                    getValueOfCoord(e) {
                        const t = this.domainRange.getExtent(),
                            i = this.coordRange.getExtent();
                        if (2 === this._mode) {
                            return (0, m.A)(t, i).constant(this._logConstant).invert(e)
                        }
                        return (0, x.A)(t, i).invert(e)
                    }
                    scaleAroundCenter(e) {
                        0 !== this._mode && (this.setScaleCoeff(this.getScaleCoeff() * e), this.domainRange.scaleAroundCenter(e))
                    }
                    getMode() {
                        return this._mode
                    }
                    shift(e) {
                        const t = this.domainRange.getExtent(),
                            i = this.coordRange.getExtent();
                        let r;
                        if (2 === this._mode) r = (0, m.A)(t, i).constant(this._logConstant);
                        else r = (0, x.A)(t, i);
                        const [o, s] = [r.invert(i[0] + e), r.invert(i[1] + e)];
                        this.domainRange.setMinValue(o).setMaxValue(s)
                    }
                    constructor({
                        domain: e,
                        coordRange: t,
                        mode: i = 1,
                        precision: r
                    }) {
                        switch (this._scaleCoeff = 1, this.domainRange = new A.A(e[0], e[1]), this.coordRange = new A.A(t[0], t[1]), this._mode = i, this._logConstant = 1 / (10 ** r * 100), this._mode) {
                            case 2:
                            case 1:
                                this.domainRange.scaleAroundCenter(this._scaleCoeff)
                        }
                    }
                },
                _ = class extends L {
                    get maxScaleCoeff() {
                        return 4
                    }
                    get minScaleCoeff() {
                        return 1
                    }
                    scaleAroundCenter(e) {
                        this._scaleCoeff * e > this.maxScaleCoeff || this._scaleCoeff * e < this.minScaleCoeff || (this._scaleCoeff *= e, this.domainRange.scaleAboveBottom(e))
                    }
                    constructor(e, t) {
                        super({
                            domain: e,
                            coordRange: t,
                            mode: k.Fix,
                            precision: 1
                        })
                    }
                };
            var P = i("vHdC"),
                D = i("jYFu"),
                I = i("HV0L"),
                V = i("ynAk"),
                M = i("GKEL"),
                B = i("p7cX"),
                E = i("oHkN"),
                j = i("Xbxo"),
                O = i("6QUF"),
                H = i("WhNg"),
                R = i("hpT2");
            let N = class extends H.Ay {
                    draw(e, t) {
                        const {
                            width: i,
                            height: r
                        } = t;
                        R.A.drawLine(e, 0, -r, i, -r), e.stroke()
                    }
                    drawUnavaliableText({
                        ctx: e,
                        color: t,
                        text: i,
                        bound: r
                    }) {
                        e.save(), e.strokeStyle = t, e.fillStyle = t, e.font = "400 12px BinancePlex";
                        const o = e.measureText(i.trim()),
                            s = o.actualBoundingBoxAscent + o.actualBoundingBoxDescent,
                            n = {
                                x: (r.width - o.width) / 2,
                                y: -(r.height - s) / 2
                            };
                        R.A.drawText(e, i, n.x, n.y), e.restore()
                    }
                    constructor(...e) {
                        super(...e), this.drawCloseIcon = (e, t) => {
                            const {
                                x: i,
                                y: r,
                                width: o,
                                height: s
                            } = t;
                            e.beginPath(), R.A.strokeRect(e, i, -(r + s), o, s), R.A.drawLine(e, i + 3, -(r + 3), i + o - 3, -(r + s - 3)), R.A.drawLine(e, i + 3, -(r + s - 3), i + o - 3, -(r + 3)), e.stroke()
                        }
                    }
                },
                W = class extends O.A {
                    render(e) {
                        const t = this.getRoot(),
                            i = this.getParent().getAttr("indicatorType"),
                            r = t.getContext(),
                            o = this.getCtxsByDrawMode(e);
                        this.clear(o);
                        const s = t.getIndicatorViewByName(i) ? .params ? .showSeries;
                        if (!(void 0 === s || !!s)) return;
                        this.initialCtxs(o), this.createClipBound(r);
                        const {
                            xData: n,
                            yData: a
                        } = this.getXYTicksData(), l = t.settingStore.getValue("@background.vertGridLine.show"), c = t.settingStore.getValue("@background.vertGridLine.color.value"), d = t.settingStore.getValue("@background.vertGridLine.lineWidth");
                        l && (r.save(), (0, B.jS)(r, {
                            strokeStyle: c,
                            lineWidth: +d
                        }), this.renderer.drawVertGridLine(r, this.bound, n), r.restore());
                        const h = t.settingStore.getValue("@background.horzGridLine.show"),
                            u = t.settingStore.getValue("@background.horzGridLine.color.value"),
                            g = t.settingStore.getValue("@background.horzGridLine.lineWidth");
                        h && (r.save(), (0, B.jS)(r, {
                            strokeStyle: u,
                            lineWidth: +g
                        }), this.renderer.drawHorzGridLine(r, this.bound, a), r.restore()), this._renderIndicatorCharts(r), this.restoreCtxs(o)
                    }
                    drawUnavailableText({
                        drawMode: e,
                        text: t
                    }) {
                        const i = this.getRoot(),
                            r = i.getInfoContext(),
                            o = i.getColorFromColorTable("text.unavailable"),
                            s = this.getCtxsByDrawMode(e);
                        this.clear(s), this.initialCtxs(s), this.createClipBound(r), this.renderer.drawUnavaliableText({
                            ctx: r,
                            color: o,
                            text: t,
                            bound: this.getBound()
                        }), this.restoreCtxs(s)
                    }
                    _renderIndicatorCharts(e) {
                        const t = this.getParent(),
                            i = t.getVisibleChartData(t.getPanelId());
                        i.sort(((e, t) => (e.zIndex || 0) - (t.zIndex || 0))), i.forEach(this.plotChart.bind(this, e))
                    }
                    constructor(...e) {
                        super(...e), this.renderer = new N, this.weight = .3
                    }
                };
            var F = i("U1Rk"),
                z = i("Ufvw"),
                X = i.n(z);
            let U = class extends H.Ay {
                draw(e, t) {
                    e.beginPath(), R.A.drawLine(e, 0, 0, 0, -t.height), R.A.drawLine(e, 0, 0, t.width, 0), e.stroke()
                }
                constructor(...e) {
                    super(...e), this.drawTicks = (e, t, {
                        textMargin: i,
                        tickWidth: r,
                        precision: o,
                        boudHeight: s,
                        textHeight: n
                    }) => {
                        e.beginPath(), t.forEach((t => {
                            let {
                                p: a,
                                v: l
                            } = t;
                            const c = o >= 0 && (0, E.Et)(l) ? l.toFixed(o) : `${l}`;
                            a > s - .5 * n ? a = s - .5 * n : a < .5 * n && (a = .5 * n), e.fillText(c, r + i, -a)
                        })), e.stroke()
                    }
                }
            };
            var G = i("F3xh");
            const $ = ({
                interval: e,
                time: t
            }) => {
                const [, i, r, o, s] = /\d{4}-\d{2}-(\d{2})T(\d{2}):(\d{2}):(\d{2})/.exec(new Date(t).toISOString()) || [], [n, a, l, c] = [(+i - 1).toString().padStart(2, "0"), r, o, s];
                switch (e) {
                    case "1s":
                    case "1m":
                    case "3m":
                    case "5m":
                    case "15m":
                    case "30m":
                    case "1h":
                        return `${l}:${c}`;
                    case "2h":
                    case "4h":
                    case "6h":
                    case "8h":
                    case "12h":
                    case "1d":
                        return `${a}:${l}:${c}`;
                    default:
                        return `${n}D:${a}H`
                }
            };
            let Y = class extends G.A {
                getCtxsByDrawMode(e) {
                    const t = this.getRoot(),
                        i = t.getContext(),
                        r = t.getMarkContext();
                    return {
                        [I.OQ.All]: [i, r],
                        [I.OQ.Resize]: [i, r],
                        [I.OQ.Marks]: [r]
                    }[e] || []
                }
                clear(e) {
                    const t = this.getRoot(),
                        {
                            xAxis: i
                        } = t.getConfig(),
                        r = this.getParent(),
                        o = this.getClearBound(r.isLastPanel ? i.height : 0);
                    e.forEach((e => R.A.clearRect(e, o)))
                }
                render(e) {
                    const t = this.getRoot(),
                        i = this.getParent(),
                        {
                            tick: {
                                width: r = 5,
                                textMargin: o = 5
                            }
                        } = t.getConfig(),
                        s = t.getContext(),
                        n = t.getMarkContext(),
                        a = this.getCtxsByDrawMode(e);
                    if (this.clear(a), this.initialCtxs(a), e === I.OQ.All || e === I.OQ.Resize) {
                        this.createClipBound(s, i.isLastPanel ? 6 : 0), (0, B.jS)(s, {
                            strokeStyle: t.getColorFromColorTable("axis.tickLineColor"),
                            fillStyle: t.getColorFromColorTable("axis.tickTextColor"),
                            textBaseline: I.Tf.Middle,
                            textAlign: I.nO.Left,
                            font: "400 12px BinancePlex"
                        });
                        const e = {
                            tickWidth: r,
                            textMargin: o,
                            precision: -1,
                            boudHeight: this.getBound().height,
                            textHeight: 10
                        };
                        i.panelType === I.HP.BASE && (e.precision = t.getAttr("precision")), this.renderer.drawTicks(s, this.getTicksData(), e);
                        const n = t.getColorFromColorTable("frame.borderLineColor");
                        (0, B.jS)(s, {
                            strokeStyle: n
                        }), this.renderer.draw(s, this.bound)
                    }
                    this.createClipBound(n);
                    t.getAttr("annotationVisible") && this.plotShapes(n), this.drawLastUpdateItemShape(n), this.restoreCtxs(a)
                }
                drawLastUpdateItemShape(e) {
                    const t = this.getRoot(),
                        i = t.getAttr("interval"),
                        r = t.getSeriesData(),
                        o = t.settingStore.getValue("@contextMenu.priceLine"),
                        s = t.settingStore.getValue("@contextMenu.countDown"),
                        n = t.getVisibleSeriesData(),
                        a = r[r.length - 1],
                        l = n[n.length - 1],
                        c = (({
                            currentTime: e,
                            interval: t,
                            maxTimestamp: i
                        }) => {
                            const r = D.YN[t],
                                o = i + r,
                                s = ((o < e ? o + r : o) - e) % r;
                            return s > 0 ? s > r ? r : s : 0
                        })({
                            currentTime: Date.now(),
                            maxTimestamp: t.getMaxTimestamp(),
                            interval: i
                        });
                    l && a ? .time === l ? .time ? this.drawLabels({
                        ctx: e,
                        item: l,
                        showCountdown: s,
                        timeUntilNextInterval: c,
                        interval: i
                    }) : (l && this.drawLabels({
                        ctx: e,
                        item: l,
                        showCountdown: s,
                        timeUntilNextInterval: c,
                        interval: i
                    }), a && o && this.drawLabels({
                        ctx: e,
                        item: a,
                        showCountdown: !1,
                        timeUntilNextInterval: c,
                        interval: i
                    }))
                }
                drawLabels({
                    ctx: e,
                    item: t,
                    showCountdown: i,
                    timeUntilNextInterval: r,
                    interval: o
                }) {
                    const s = this.getParent();
                    if (s.panelType !== I.HP.BASE) return;
                    if (!s.yAxis) return;
                    const n = s.yAxis.getCoordOfValue(t.close),
                        a = this.getPriceLabel(t),
                        l = this.getCountdownLabel({
                            time: r,
                            interval: o,
                            item: t
                        }),
                        c = {
                            x: 1,
                            y: -n
                        };
                    i ? this.renderer.drawYAxisLabel({
                        ctx: e,
                        point: c,
                        labels: [{ ...a,
                            textPositionShift: {
                                x: 0,
                                y: 1
                            }
                        }, { ...l,
                            textPositionShift: {
                                x: 0,
                                y: -1
                            }
                        }],
                        height: 19
                    }) : this.renderer.drawYAxisLabel({
                        ctx: e,
                        point: c,
                        labels: [a]
                    })
                }
                setViewBound() {
                    const e = this.getRoot(),
                        t = this.getParent().getBound(),
                        {
                            right: i
                        } = e.getAttr("margin"),
                        {
                            x: r,
                            y: o,
                            width: s,
                            height: n
                        } = t;
                    this.setBound({
                        x: r + s - i,
                        y: o,
                        width: i,
                        height: n
                    })
                }
                getTicksData() {
                    const e = this.getParent(),
                        t = e.yAxis;
                    if (!t) return [];
                    const i = this.bound.height,
                        r = this.getRoot(),
                        o = r.settingStore.getValue("@contextMenu.percentageScale");
                    if (e.panelType === I.HP.BASE && o) return t.getRelativeAxisData({
                        baseValue: r.getFirstVisibleSeriesDataClosePrice()
                    }).map((({
                        v: e,
                        ...t
                    }) => ({ ...t,
                        v: r.getFirstVisibleSeriesDataAsRelativePercentage({
                            value: +e
                        })
                    })));
                    const s = {};
                    return t.getAxisData().map((({
                        p: t,
                        v: i
                    }) => {
                        const r = e.formatterValue(+i);
                        return ((e, t, i) => {
                            if (t && i) {
                                const r = X()(i),
                                    o = X()(e),
                                    s = X()(t);
                                return X()(s).minus(r).abs().gte(o.minus(r).abs())
                            }
                            return !0
                        })(+i, s[r], +r) && (s[r] = +i), {
                            p: t,
                            fv: r,
                            v: i
                        }
                    })).reduce(((e, {
                        p: t,
                        v: r,
                        fv: o
                    }) => (s[o] === r && t >= 0 && t <= i && e.push({
                        p: t,
                        v: o
                    }), e)), [])
                }
                getLongestTickWidth() {
                    const e = "400 12px BinancePlex",
                        t = [...this.getTicksData().map((e => e.v)), ...this.getMinMaxPercentageText()],
                        i = `${h()(t,(e=>`${e}`.length))||""}`,
                        r = R.A.measureTextWidth("0".repeat(8), {
                            font: e
                        }),
                        o = R.A.measureTextWidth(i, {
                            font: e
                        });
                    return Math.max(o, r) + 16
                }
                getMinMaxPercentageText() {
                    const e = this.getRoot(),
                        t = e.settingStore.getValue("@contextMenu.percentageScale"),
                        i = this.getParent();
                    if (t || i.panelType === I.HP.EXT) return [];
                    if (0 === i.getVisibleSeriesData().length) return [];
                    const {
                        yAxis: r
                    } = i, o = r.domainRange.getMinValue(), s = r.domainRange.getMaxValue();
                    return [e.getPercentageTextRelativeToLastPrice({
                        price: o
                    }), e.getPercentageTextRelativeToLastPrice({
                        price: s
                    })]
                }
                getCountdownLabel({
                    time: e,
                    interval: t,
                    item: {
                        close: i,
                        open: r
                    }
                }) {
                    const o = this.getRoot(),
                        [s, n, a] = i >= r ? [o.getColorFromColorTable("countdown.upTextColor"), o.getColorFromColorTable("countdown.upBgColor"), o.getColorFromColorTable("countdown.upBorderColor")] : [o.getColorFromColorTable("countdown.downTextColor"), o.getColorFromColorTable("countdown.downBgColor"), o.getColorFromColorTable("countdown.downBorderColor")];
                    return {
                        text: $({
                            time: e,
                            interval: t
                        }),
                        color: s,
                        bgColor: n,
                        borderColor: a
                    }
                }
                getPriceLabel({
                    close: e,
                    open: t
                }) {
                    const i = this.getRoot(),
                        r = this.getParent(),
                        [o, s] = e >= t ? [i.getColorFromColorTable("cross.upLabelBgColor"), i.getColorFromColorTable("cross.upLabelBorderColor")] : [i.getColorFromColorTable("cross.downLabelBgColor"), i.getColorFromColorTable("cross.downLabelBorderColor")];
                    return {
                        text: i.settingStore.getValue("@contextMenu.percentageScale") ? i.getFirstVisibleSeriesDataAsRelativePercentage({
                            value: e
                        }) : `${r.formatterValue(e)}`,
                        color: i.getColorFromColorTable("cross.labelTextColor"),
                        bgColor: o,
                        borderColor: s
                    }
                }
                onMouseDoubleClick() {
                    this.getParent().setAttr("autoScale", !0)
                }
                onMouseDown({
                    originEvent: e
                }) {
                    this._previousClientY = e.clientY, window.document.body.style.cursor = "ns-resize";
                    const t = () => {
                        window.document.body.style.cursor = "auto", window.removeEventListener("mousemove", this._dragHandlerReference), window.removeEventListener("mouseup", t)
                    };
                    window.addEventListener("mousemove", this._dragHandlerReference), window.addEventListener("mouseup", t)
                }
                onmousemove(e) {
                    e.isDealed = !0;
                    this.getRoot().setCursor({
                        config: {
                            style: D.SE.NSRESIZE
                        },
                        weight: 1e3,
                        isRecord: !1
                    })
                }
                onmouseout() {
                    this.getRoot().setCursor({
                        key: "gap",
                        isClear: !0,
                        config: {},
                        weight: 1e3
                    })
                }
                onmousewheel({
                    originEvent: e
                }) {
                    this.zoom(e.deltaY), e.preventDefault()
                }
                zoom(e) {
                    const t = this.getParent(),
                        i = t.getParent();
                    if (!i) return;
                    i.getAttr("isMobile") || t.setAttr("autoScale", !1);
                    const r = i.getAttr("precision"),
                        {
                            yAxis: o
                        } = t,
                        s = o.getMode() === k.Log ? .02 / r : .02,
                        n = e > 0 ? 1 + s : 1 / (1 + s);
                    o.scaleAroundCenter(n), i.updateYAxisWidth({
                        data: i.getSeriesData()
                    }), t.update()
                }
                constructor() {
                    super(), this.config = { ...a()(G.A.defaultConfig),
                        zIndex: 1e3
                    }, this.renderer = new U, this._previousClientY = 0, this.on("mousedown", this.onMouseDown), this.on("mousemove", this.onmousemove), this.on("mousewheel", this.onmousewheel), this.on("mouseout", this.onmouseout), this.on("dblclick", this.onMouseDoubleClick), setTimeout((() => {
                        this.getParent().panelType === I.HP.BASE && setInterval((() => {
                            this.render(I.OQ.Marks)
                        }), 1e3)
                    }), 0), this._dragHandlerReference = e => {
                        const t = e.clientY - this._previousClientY;
                        this._previousClientY = e.clientY, this.zoom(t)
                    }
                }
            };
            var Z = i("lCim"),
                K = i.n(Z);
            const q = ({
                type: e
            }) => {
                switch (e) {
                    case I.NB.Line:
                    case I.NB.GradientArea:
                    case I.NB.TimeGradientArea:
                        return "close";
                    default:
                        return "all"
                }
            };
            let Q = class extends F.A {
                get yAxis() {
                    return this._yAxis || [...this._supplyYAxisMap.values()][0]
                }
                get panelType() {
                    return this._panelType
                }
                get weight() {
                    return this._weight
                }
                get xAxis() {
                    return this.getParent().getXAxis()
                }
                get chartResult() {
                    const e = this.getAttr("indicatorType"),
                        {
                            result: t = []
                        } = this._result.get(e) || {};
                    return t
                }
                get results() {
                    return Array.from(this._result.values()).map((({
                        result: e = []
                    }) => e))
                }
                get titleContainer() {
                    return this._titleContainer
                }
                get mainPane() {
                    return this._mainWidget
                }
                get axisPane() {
                    return this._axisWidget
                }
                get timeAxisPane() {
                    return this.getParent().getTimeAxisWidget()
                }
                get isLastPanel() {
                    const e = this.getParent().getIPanels();
                    return e[e.length - 1] === this
                }
                get isDiffPanel() {
                    const e = this.getParent().getIndicatorHelperByName(this.getPanelId());
                    return !!e ? .defaultProps.isDiffSource
                }
                setYAxis({
                    forceAutoScale: e
                } = {
                    forceAutoScale: !1
                }) {
                    const t = this._panelType === I.HP.BASE,
                        i = this.getPadding(),
                        r = this.getParent(),
                        o = r.getAttr("precision"),
                        s = r.settingStore.getValue("@contextMenu.invertedScale"),
                        n = r.settingStore.getValue("@contextMenu.logarithmicScale"),
                        a = t && s ? [this.bound.height - i, i] : [i, this.bound.height - i],
                        l = t && n ? k.Log : k.Linear;
                    if (this.getAttr("autoScale") || e || void 0 === this._yAxis) {
                        const {
                            default: e,
                            ...t
                        } = this._getYExtent(), r = [e.min, e.max];
                        this._yAxis = e.isScaleCenter ? new L({
                            domain: r,
                            coordRange: a,
                            mode: l,
                            precision: o
                        }) : new _([0, e.max], [0, this.bound.height - i]), this._supplyYAxisMap.clear(), Object.keys(t || {}).forEach((e => {
                            const {
                                max: r,
                                min: s,
                                isScaleCenter: n
                            } = t[e], a = n ? new L({
                                domain: [s, r],
                                coordRange: [0, this.bound.height - i],
                                mode: k.Linear,
                                precision: o
                            }) : new _([0, r], [0, this.bound.height - i]);
                            this._supplyYAxisMap.set(e, a)
                        }))
                    } else {
                        const e = [this._yAxis.domainRange.getMinValue(), this._yAxis.domainRange.getMaxValue()];
                        this._yAxis = new L({
                            domain: e,
                            coordRange: a,
                            mode: l,
                            precision: o
                        })
                    }
                }
                getPanelId() {
                    return this.getAttr("id")
                }
                getYAxisByIndex(e) {
                    return this._supplyYAxisMap.get(e)
                }
                getAnnotations() {
                    return this._mainWidget.getAnnotations()
                }
                getSavedData() {
                    return this._storageData
                }
                updateWeight(e) {
                    (0, E.Et)(e) && (this._weight = e)
                }
                updateStorageData() {
                    const e = this.getAnnotations(),
                        t = [];
                    for (let i = 0, r = e.length; i < r; i++) {
                        e[i].getAttr("isNeedStore") && t.push(e[i].getDescription())
                    }
                    this._storageData.annotations = t, this._storageData.indicators = this.getSaveIndicatorsData(), this._storageData.weight = this._weight
                }
                save(e) {
                    this.updateStorageData();
                    this.getParent().fireSave(e)
                }
                getSaveIndicatorsData() {
                    const e = [],
                        t = this.getParent(),
                        i = t.indicatorStore.getValues();
                    if (this._panelType === I.HP.BASE) {
                        const {
                            indicatorViews: r
                        } = t;
                        r.forEach((t => {
                            const {
                                id: r,
                                title: o,
                                isHistBase: s,
                                isTriggeredByClick: n = !1,
                                isCustom: a = !1,
                                categories: l
                            } = t, c = i[r] || {};
                            s && e.push({
                                name: o,
                                id: r,
                                type: o,
                                params: c,
                                isTriggeredByClick: n,
                                isCustom: a,
                                categories: l
                            })
                        }))
                    } else {
                        const r = this.getPanelId(),
                            {
                                id: o,
                                title: s,
                                isCustom: n = !1,
                                isTriggeredByClick: a = !1,
                                categories: l = []
                            } = t.getIndicatorViewByName(r) || {},
                            c = o && i[o] || {};
                        e.push({
                            name: s,
                            id: o,
                            type: s,
                            params: c,
                            isCustom: n,
                            isTriggeredByClick: a,
                            categories: l
                        })
                    }
                    return e
                }
                updateCursorStyle(e, t, i) {
                    const r = this.getParent(),
                        {
                            style: o
                        } = r.getAttr("crossHair");
                    let s = o;
                    e && (s = D.SE.POINTER), t && (s = D.SE.GRAB), i && (s = D.SE.GRABBING), r.setCursor({
                        config: {
                            style: s
                        },
                        weight: e ? 500 : 400,
                        isRecord: !1
                    })
                }
                transformAbsoluteXYToPlotItem(e) {
                    const {
                        x: t,
                        y: i
                    } = this.transformPointToView(e);
                    return {
                        time: this.xAxis.getValueOfCoord(t),
                        value: this.yAxis.getValueOfCoord(i)
                    }
                }
                transformXYToAbsoluteXY(e) {
                    const {
                        x: t,
                        y: i
                    } = this.getBound();
                    return {
                        x: t + e.x,
                        y: i - e.y
                    }
                }
                getI18n(e, t) {
                    return this.getParent().getI18n(e, t)
                }
                getMainBound() {
                    const e = this.getParent(),
                        {
                            right: t
                        } = e.getAttr("margin"),
                        {
                            x: i,
                            y: r,
                            width: o,
                            height: s
                        } = this.bound;
                    return {
                        x: i,
                        y: r,
                        width: o - t,
                        height: s
                    }
                }
                getChartDatas(e) {
                    const {
                        result: t = []
                    } = this._result.get(e) || {};
                    return t
                }
                hasIndicator(e) {
                    return this._result.has(e)
                }
                updateParams(e, t, i) {
                    const r = this.getParent(),
                        o = this._result.get(e),
                        s = r.getIndicatorHelperByName(e);
                    o && s && s.getResult(this.getSeriesData(), t, (e => {
                        o.result = e, this.setYAxis(), i ? .()
                    }))
                }
                getSeriesData() {
                    const {
                        seriesData: e = []
                    } = this._parent.getConfig();
                    return e
                }
                getVisibleSeriesData() {
                    return this._parent.getVisibleSeriesData() || this.getSeriesData()
                }
                setParent(e) {
                    if (this._parent) throw new Error("Current Node had parent, Pls do not set parent repeatly!");
                    this._parent = e
                }
                getParent() {
                    return this._parent
                }
                afterSetParent() {
                    this.initEvents()
                }
                getPosition({
                    time: e,
                    value: t
                }) {
                    return {
                        x: this.xAxis.getCoordOfValue(e),
                        y: this.yAxis.getCoordOfValue(t)
                    }
                }
                getYPos(e) {
                    return this.yAxis ? .getCoordOfValue(e)
                }
                getPriceOfYPos(e) {
                    return this.yAxis.getValueOfCoord(e)
                }
                getPlotItemByPosition(e, t) {
                    return {
                        time: this.xAxis.getValueOfCoord(e),
                        value: this.yAxis.getValueOfCoord(t)
                    }
                }
                addWidget(e) {
                    return e.setParent(this), this.widgets.push(e), this
                }
                addWidgets(e) {
                    return e.forEach((e => {
                        e.setParent(this), this.widgets.push(e)
                    })), this
                }
                eachWidgets(e) {
                    this.widgets.forEach((t => {
                        e.call(this, t)
                    }))
                }
                setViewBound(e) {
                    e !== I.dp.Width && this.setBound(this.getUpdatedBound()), this.setWidgetsBound(), this.updateTitleContainer()
                }
                getAllWeight() {
                    const {
                        iPanels: e
                    } = this.getParent();
                    return e.reduce(((e, t) => e + t.weight), 0)
                }
                updateViewBound() {
                    this.setBound(this.getUpdatedBound()), this.setWidgetsBound(), this.setYAxis(), this.updateTitleContainer()
                }
                updateViewBoundHeight(e, t) {
                    const i = this.getParent(),
                        {
                            visibleViewHeight: r
                        } = i,
                        o = this.bound.height + e,
                        s = this.getAllWeight();
                    this._weight = o / r * s, this.setBound({ ...this.bound,
                        y: this.bound.y + t,
                        height: o
                    }), this.setWidgetsBound(), this.setYAxis(), this.updateTitleContainer()
                }
                setWidgetsBound() {
                    this.eachWidgets((e => e.setViewBound()))
                }
                update(e = I.OQ.All) {
                    if (this._isWaiting) return;
                    this._isWaiting = !0;
                    const t = this.getParent();
                    setTimeout((() => {
                        t.hasPanel(this) && (this.updateImmediate(e), t.getFrontGapOfIPanel(this) ? .render(), this._isWaiting = !1)
                    }), 16)
                }
                updateImmediate(e = I.OQ.All) {
                    this.yAxis && (this.drawLogo(e), this.widgets.forEach((t => {
                        t.updateImmediate(e)
                    })), this.drawUnavailableText(e), this.updateTitleLabel(), this._isFirstRender = !1)
                }
                removeWidget(e) {
                    for (let t = 0; t < this.widgets.length; t++)
                        if (this.widgets[t] === e) {
                            this.widgets.splice(t, 1);
                            break
                        }
                    return this
                }
                removeIndicator(e) {
                    this._result.delete(e)
                }
                initEvents() {
                    const e = this.getParent(),
                        t = this.getPanelId(),
                        i = e.getIndicatorHelperByName(t);
                    this.watch("autoScale", (() => {
                        this.getAttr("autoScale") && this.autoScaleYAxis(), e.fire("autoScaleChanged", {
                            panel: this
                        })
                    })), i ? .defaultProps.isDiffSource ? (i ? .subscribe ? .((() => {
                        this.updateChartData(0, (() => {
                            this.setYAxis(), this.update()
                        }))
                    })), e.watch(["symbol", "interval"], (() => {
                        if (this.getAttr("isDestryed")) return;
                        const {
                            symbol: t,
                            interval: r
                        } = e.getConfig();
                        if (t && r) {
                            const [o, s = Date.now()] = e.getTimeExtent();
                            i.init(t, r, {
                                startTime: o,
                                endTime: s
                            })
                        }
                    }), !0), e.on("afterTimeShifted", t, (0, B.sg)((e => {
                        (0, V.XG)(e, {
                            abortPredicate: () => i.isFetchtingData,
                            handleLoadLeft: e => i.loadData({
                                startTime: e.shiftedMinTime,
                                endTime: e.minTime - 1
                            }),
                            handleLoadRight: e => i.loadData({
                                startTime: e.maxTime,
                                endTime: e.shiftedMaxTime
                            })
                        })
                    }), 500))) : e.watch("theme", this.watchTheme)
                }
                destroy() {
                    const e = this.getParent(),
                        {
                            titleContainer: t
                        } = e;
                    this._wrapperContainer && t.removeChild(this._wrapperContainer);
                    const i = this.getPanelId(),
                        r = e.getIndicatorHelperByName(i);
                    r ? .defaultProps.isDiffSource ? (r ? .unSusbcribe ? .(), e.off("afterTimeShifted", i), e.unwatch(["symbol", "interval"])) : e.unwatch("theme", this.watchTheme), this.setAttr("isDestryed", !0)
                }
                updateYExtend({
                    forceAutoScale: e
                } = {
                    forceAutoScale: !1
                }) {
                    const t = this.getAttr("autoScale");
                    (e || t) && this._updateYExtend()
                }
                _updateYExtend() {
                    if (!this.yAxis) return;
                    const {
                        default: e,
                        ...t
                    } = this._getYExtent(), i = (e, {
                        min: t,
                        max: i
                    }) => e.setDomain({
                        min: t,
                        max: i
                    });
                    i(this.yAxis, e), Object.keys(t || {}).forEach((e => {
                        const r = this.getYAxisByIndex(e);
                        r && i(r, t[e])
                    }))
                }
                getCloseIconBound() {
                    const {
                        margin: e = 10,
                        iconSize: t = 40
                    } = this.getConfig();
                    return {
                        x: this.bound.width - e - t,
                        y: this.bound.height - e - t,
                        width: t,
                        height: t
                    }
                }
                getVisibleChartData(e) {
                    const t = this.getParent(),
                        i = t.getColorFromColorTable("defaultColor"),
                        r = t.getAttr("interval"),
                        o = this.xAxis.getTimeUnitValue(),
                        [s, n] = this.xAxis.getDomain(),
                        a = new A.A(s - o, n + o),
                        l = t.getIndicatorHelperByName(e);
                    if (!l || t.isVolumeDisabled(e)) return [];
                    if (l.getSupportedIntervals && !l.getSupportedIntervals().includes(r)) return [];
                    const c = this.getChartDatas(e),
                        d = {},
                        h = (e, t) => {
                            const {
                                vals: i,
                                stack: r
                            } = d[e];
                            if (!i) return [0, 1, 0];
                            const {
                                length: o
                            } = i, s = i.indexOf(t);
                            let n = 0;
                            return r[e] ? .has(t) && (n = r[e] ? .get(t) || 0), [s, o, n]
                        },
                        u = c.filter((({
                            visible: e
                        }) => !1 !== t.indicatorStore.getValue(e))).map((({
                            data: e,
                            borderData: r,
                            color: o,
                            colors: s,
                            labelColors: n,
                            styleTypes: l,
                            lineWidth: c,
                            ...d
                        }) => {
                            const h = { ...d,
                                data: [],
                                lineWidth: c ? t.indicatorStore.getValue(`${c}`) : 1
                            };
                            try {
                                const [t, c] = a.getSliceArrayIndexs(e, (e => e.time)), d = s ? s.slice(t, c) : [], u = n ? n.slice(t, c) : [], g = l ? l.slice(t, c) : [];
                                h.data = e.slice(t, c).map(((e, t) => ({ ...e,
                                    color: d[t] || o || i,
                                    labelColor: u[t] || o || i,
                                    ...l ? {
                                        styleType: g[t] || P.Ow.Solid
                                    } : {}
                                }))), r && (h.borderData = a.sliceArray(r, (e => e.time)))
                            } catch (u) {
                                console.error(a, e)
                            }
                            return h
                        }));
                    return u.forEach((e => {
                        const {
                            data: t,
                            chartType: i,
                            visible: r = !0,
                            stack: o,
                            yAxisIndex: s
                        } = e;
                        if (i === I.NB.Bar && r) {
                            let i;
                            o && (i = u.find((e => e.name === o && e.data !== t && e.yAxisIndex === s))), t.forEach((({
                                time: e
                            }) => {
                                if (void 0 === d[e] && (d[e] = {
                                        vals: [],
                                        stack: {}
                                    }), i && i ? .data ? .length > 1) {
                                    const r = (0, B.El)(i.data, (({
                                            time: t
                                        }) => e - t)),
                                        o = i.data[r];
                                    o ? .time === e && (void 0 === d[e].stack[e] && (d[e].stack[e] = new Map), d[e].stack[e].set(t, o.value))
                                }
                                void 0 === i && d[e].vals.push(t)
                            })), e.getBarInfos = h
                        }
                    })), u
                }
                getVisibleResults() {
                    const e = this.getParent();
                    return Array.from(this._result ? .keys ? .() || {}).filter((t => {
                        const {
                            params: i
                        } = e.getIndicatorViewByName(t) || {}, r = i ? .showSeries;
                        return void 0 === r || !!r
                    })).map((e => this.getVisibleChartData(e)))
                }
                getBarDatas(e, {
                    zeroBase: t = 0,
                    yAxisIndex: i
                }, r) {
                    const o = this.getParent(),
                        s = o.getAttr("candlestick") ? .barWeight,
                        n = this.getAttr("barWeight") || s,
                        a = this.getFixedBarWidth(n),
                        l = [],
                        c = void 0 !== i ? this.getYAxisByIndex(i) : this.yAxis;
                    if (!c) return [];
                    const d = c.getCoordOfValue(t);
                    for (let h = 0, u = e.length; h < u; h++) {
                        const {
                            time: i,
                            value: s,
                            color: n,
                            styleType: u
                        } = e[h];
                        if ((0, E.Et)(i) && (0, E.Et)(s)) {
                            const h = this.xAxis.getCoordOfValue(i),
                                [g, p, m] = r ? .(i, e) || [0, 1, 0];
                            let x = s;
                            const f = Math.max(1, Math.abs(c.getCoordOfValue(x) - d));
                            s < 0 === m < 0 && (x += m);
                            const y = c.getCoordOfValue(x),
                                b = Math.min(-1, x > t ? -y : -d),
                                [v, C] = this.findPosition(h, g, p, a),
                                w = o.indicatorStore.getValue(u) || P.Ow.Solid,
                                A = o.getColorFromColorTable(n || "defaultColor"),
                                S = w === P.Ow.Hollow ? "transparent" : A;
                            l.push({
                                x: v,
                                y: b,
                                width: C,
                                height: f,
                                value: s,
                                color: A,
                                strokeColor: A,
                                fillColor: S
                            })
                        }
                    }
                    return l
                }
                findPosition(e, t, i, r) {
                    if (1 === i) return [e - .5 * r, r];
                    const o = r / (10 * i + 2 * (i - 1)),
                        s = 10 * o,
                        n = 2 * o,
                        a = i / 2;
                    let l = 0;
                    return l = i % 2 === 0 ? e + (t - a) * (s + n) + .5 * n : e + (t - a) * s + Math.round(t - a) * n, [l, s]
                }
                getLineDatas(e, t) {
                    const i = this.getParent(),
                        r = [],
                        o = void 0 !== t ? this.getYAxisByIndex(t) : this.yAxis;
                    if (!o) return [];
                    for (let s = 0, n = e.length; s < n; s++) {
                        const {
                            time: t,
                            value: n,
                            color: a,
                            labelColor: l
                        } = e[s];
                        if ((0, E.Et)(t) && (0, E.Et)(n)) {
                            const e = {
                                x: this.xAxis.getCoordOfValue(t),
                                y: -o.getCoordOfValue(n)
                            };
                            a && (e.color = i.getColorFromColorTable(a)), l && (e.labelColor = i.getColorFromColorTable(l)), r.push(e)
                        }
                    }
                    return r
                }
                updateTitleContainer() {
                    const e = this.getParent(),
                        t = e.getAttr("isMobile"),
                        i = e.getAttr("margin"),
                        {
                            x: r,
                            y: o,
                            width: s,
                            height: n
                        } = this.getBound(),
                        a = {
                            top: o - n + "px",
                            left: `${r}px`,
                            maxWidth: s - i.right + "px",
                            padding: (t ? 2 : 3) + "px 4px"
                        };
                    if (this._wrapperContainer)(0, B.EM)(this._wrapperContainer, a);
                    else {
                        const {
                            titleContainer: e
                        } = this.getParent();
                        this._wrapperContainer = (0, B.n)("div", a, "title-wrapper-container"), this._titleContainer = (0, B.n)("div", {}, "chart-title-row"), this._indicatorContainer = (0, B.n)("div", {}, "chart-title-indicator-container"), this._titleContainer.appendChild(this._indicatorContainer), this._wrapperContainer.appendChild(this._titleContainer), e.appendChild(this._wrapperContainer);
                        const t = () => {
                                this._titleContainer.classList.add("active")
                            },
                            i = () => {
                                this._titleContainer.classList.remove("active")
                            };
                        this._titleContainer.addEventListener("mouseenter", t), this._titleContainer.addEventListener("mouseleave", i)
                    }
                }
                formatterValue(e) {
                    if (!(0, E.Et)(e)) return "";
                    const t = this.getParent(),
                        i = this.getAttr("isFormatNum") || !1,
                        {
                            dataFormatter: r = I.lw.Normal,
                            isFloor: o
                        } = t.getAttr("candlestick"),
                        s = this.getAttr("precision") || t.getAttr("precision");
                    return i ? (0, B.GO)(e) : r === I.lw.Percentage && this.panelType === I.HP.BASE ? (0, B.Fy)(e, s) : (0, B._)(e, s, !!o)
                }
                formatOCHL(e, t = c()) {
                    if (!(0, E.Et)(e)) return "";
                    const i = this.getParent(),
                        r = this.getAttr("precision") || i.getAttr("precision"),
                        o = t(e, r);
                    return (0, B.ZV)({
                        number: o,
                        digits: r
                    })
                }
                updateTitleLabel() {
                    const e = this.getParent() ? .getAttr("currentItem");
                    if (!e || !this._indicatorContainer) return;
                    const t = this.getAttr("titleInfo"),
                        i = this.getAttr("indicatorType"),
                        r = this.getPanelId(),
                        o = this.getParent(),
                        s = o.getIndicatorViewByName(r) || {
                            params: {},
                            title: ""
                        },
                        {
                            params: n,
                            title: a
                        } = s,
                        l = n ? .showSeries,
                        c = void 0 === l || !!l,
                        d = this._getTitleLabels(e, i, n);
                    if (0 === d.length) return;
                    const h = o.regContetxt;
                    let u = !1;
                    d.length + (this._panelType === I.HP.EXT ? 1 : 0) !== this._indicatorContainer.childNodes.length && (u = !0, this._indicatorContainer.innerHTML = "");
                    let g = !0;
                    if (d.forEach((e => {
                            const {
                                label: i,
                                key: r,
                                styles: s = {},
                                className: n
                            } = e, a = i.replace(/\{\{(.*?)\}\}/g, ((e, t) => h[t.trim()] || e));
                            if (s.color && (s.color = this.determineLabelColor(o.getColorFromColorTable(s.color))), !this._indicatorContainer.querySelector(`[key='${r}']`)) {
                                const e = (0, B.n)("span", {
                                    paddingRight: "8px"
                                }, "default-label-box");
                                e.setAttribute("key", r), this._indicatorContainer ? .appendChild(e), t[r] = "", n && (0, M.iQ)(e, n), this.watchProperty(r, e)
                            }
                            this.setWatchProperty(t, r, a, s), "none" !== s.display && (g = g && !1)
                        })), g) {
                        const e = (0, B.n)("span", {
                            paddingRight: "8px"
                        }, "default-label-box");
                        e.setAttribute("key", a), e.textContent = a, this._indicatorContainer ? .appendChild(e)
                    }
                    u && this._panelType === I.HP.EXT && this.addToolIcons(this._indicatorContainer, {
                        id: r,
                        indicatorType: i,
                        visible: c
                    }), this._isFirstWatch && d.length > 0 && (this.addFoldIcon(this._titleContainer, r), this._isFirstWatch = !1), this._panelType === I.HP.BASE && this.updateHistBaseChartsTitle(e)
                }
                setIndicatorVisible(e, t, i = !1) {
                    const r = this.getParent(),
                        {
                            params: o,
                            ...s
                        } = r.getIndicatorViewByName(e),
                        n = o ? .showSeries;
                    if ((void 0 === n || !!n) === t) return;
                    const a = this._wrapperContainer && this._wrapperContainer.querySelector(`[id="${e}-visible"`);
                    if (a) {
                        const [e, i] = t ? [p.kF, this.getI18n("indicator-hide", "Hide")] : [p.Mz, this.getI18n("indicator-show", "Show")];
                        (0, M.gZ)(a, e), a.setAttribute("tooltip", i)
                    }
                    const l = { ...o,
                        showSeries: t
                    };
                    r.setIndicatorView(e, { ...s,
                        params: l,
                        isTriggeredByClick: i
                    }), r.indicatorStore.setValue(e, l), this.setYAxis(), this.update()
                }
                drawLogo(e = I.OQ.Resize) {
                    this.getParent() ? .getAttr("isHiddenLogo") || !this._isFirstRender && e !== I.OQ.Resize || this._panelType !== I.HP.BASE || this._mainWidget.drawLogo(e)
                }
                drawUnavailableText(e = I.OQ.Resize) {
                    if (this._panelType !== I.HP.EXT) return;
                    const t = this.getParent(),
                        i = t.getAttr("interval"),
                        r = this.getAttr("indicatorType"),
                        o = t.getIndicatorHelperByName(r);
                    if (o)
                        if (t.isVolumeDisabled(r)) {
                            const i = t.getI18n("indicator-disabled-text", "Available on Last Price");
                            this._mainWidget.drawUnavailableText({
                                drawMode: e,
                                text: i
                            })
                        } else if (o.getSupportedIntervals && !o.getSupportedIntervals().includes(i)) {
                        const t = o.getUnavailableText ? .({
                            interval: i
                        }) || "";
                        this._mainWidget.drawUnavailableText({
                            drawMode: e,
                            text: t
                        })
                    }
                }
                addFoldIcon(e, t) {
                    const i = this.getParent().settingStore,
                        r = `${t}-title-fold`,
                        o = (0, M.J4)({
                            svg: p.A6
                        });
                    e ? .insertBefore(o, e.firstChild);
                    const s = t => {
                        t ? (0, M.iQ)(e, "fold") : (0, M.vy)(e, "fold"), e.setAttribute("isFold", t ? "true" : "false")
                    };
                    o.addEventListener("click", (() => {
                        const t = "true" === e.getAttribute("isFold");
                        s(!t)
                    })), i ? .isLoaded() && s("true" === i.getValue(r))
                }
                getFixedBarWidth(e = .8) {
                    const t = this.getParent().getXAxis(),
                        i = t.unitWidth * e,
                        r = t.unitWidth - 3,
                        o = t.unitWidth - 2;
                    return r > 0 ? r : i > o && o > 0 ? o : i
                }
                autoScaleYAxis() {
                    this.yAxis.resetScaleCoeff(), this._updateYExtend(), this.update()
                }
                addToolIcons(e, {
                    indicatorType: t,
                    visible: i,
                    id: r
                }) {
                    if (!this.getAttr("isShowSetting")) return;
                    const o = this.getParent(),
                        [s, n] = i ? [p.kF, this.getI18n("indicator-hide", "Hide")] : [p.Mz, this.getI18n("indicator-show", "Show")],
                        a = (0, M.J4)({
                            svg: s,
                            id: `${t}-visible`
                        });
                    a.setAttribute("tooltip", n);
                    const l = (0, M.J4)({
                            svg: p.sY
                        }),
                        c = (0, M.J4)({
                            svg: p.US
                        }),
                        d = (0, B.n)("div", {}, "indicator-title-toolbox");
                    d.append(a, l, c), e ? .append(d), l.addEventListener("click", (() => {
                        o ? .fire("showIndicatorDialog", {
                            id: r
                        }), o ? .fire("clickIndicatorCommonButton", {
                            data: D.yo.Setting
                        })
                    })), l.setAttribute("tooltip", this.getI18n("indicator-settings", "Settings")), c.setAttribute("tooltip", this.getI18n("indicator-close", "Close")), a.addEventListener("click", (() => {
                        const {
                            params: e
                        } = o.getIndicatorViewByName(r), t = !!e ? .showSeries;
                        this.setIndicatorVisible(r, !t, !0), o ? .fire("clickIndicatorCommonButton", {
                            data: D.yo.Hide
                        })
                    })), c.addEventListener("click", (() => {
                        o.closeIndicatorByName(r), o ? .fire("clickIndicatorCommonButton", {
                            data: D.yo.Delete
                        })
                    })), (0, M.V1)(a), (0, M.V1)(l), (0, M.V1)(c)
                }
                updateHistBaseChartsTitle(e) {
                    const {
                        indicatorViews: t
                    } = this.getParent(), i = this.getAttr("titleInfo"), r = this.getParent(), o = r.regContetxt;
                    t.forEach((s => {
                        const {
                            id: n,
                            title: a,
                            indicatorType: l,
                            isHistBase: c,
                            subElement: d,
                            params: h
                        } = s, u = h ? .showSeries, g = void 0 === u || !!u;
                        if (!c) return;
                        const p = this._getTitleLabels(e, n, h);
                        if (0 === p.length) return;
                        let m = d.querySelector(`[key='${n}']`);
                        m || (m = (0, B.n)("div", {}, "chart-title-indicator-container"), m.setAttribute("key", n), d.appendChild(m));
                        let x = !1;
                        p.length + 1 !== m.childNodes.length && (x = !0, m.innerHTML = "");
                        let f = !0;
                        p.forEach((e => {
                            const {
                                label: t,
                                key: s,
                                styles: n = {},
                                className: a
                            } = e, l = t.replace(/\{\{(.*?)\}\}/g, ((e, t) => o[t.trim()] || e));
                            if (n.color && (n.color = this.determineLabelColor(r.getColorFromColorTable(n.color))), !m.querySelector(`[key='${s}']`)) {
                                const e = (0, B.n)("span", {
                                    paddingRight: "8px"
                                }, "default-label-box");
                                e.setAttribute("key", s), m ? .appendChild(e), i[s] = "", a && (0, M.iQ)(e, a), this.watchProperty(s, e)
                            }
                            this.setWatchProperty(i, s, l, n), "none" !== n.display && (f = f && !1)
                        }));
                        const y = m.querySelector(`[key='${a}']`);
                        if (y && (y.style.display = f ? "block" : "none"), x && this.addToolIcons(m, {
                                id: n,
                                indicatorType: l,
                                visible: g
                            }), !d.parentNode) {
                            this._wrapperContainer.appendChild(d);
                            t.find((e => e.isHistBase)) ? .id === n && this.addFoldIcon(d, "main-indicators-fold")
                        }
                    }))
                }
                getUpdatedBound() {
                    const e = this.getAllWeight(),
                        t = this.getParent(),
                        {
                            width: i,
                            margin: r
                        } = t.getConfig(),
                        {
                            visibleViewHeight: o,
                            iPanels: s
                        } = t;
                    let n = 0;
                    for (let c = 0; c < s.length; c++) {
                        const e = s[c];
                        if (e === this) break;
                        n += e.bound.height
                    }
                    const a = o * this._weight / e,
                        l = i - r.left;
                    return n += a, {
                        x: r.left,
                        y: n,
                        height: a,
                        width: l
                    }
                }
                _initWidgets() {
                    this._axisWidget = new Y, this._panelType === I.HP.BASE ? (this._mainWidget = new j.A, this.addWidgets([this._mainWidget, this._axisWidget])) : (this._mainWidget = new W, this.addWidgets([this._mainWidget, this._axisWidget]))
                }
                _getYExtent() {
                    const e = this.getAttr("indicatorType"),
                        t = this.getParent(),
                        i = t.getAttr("precision"),
                        r = {
                            default: {
                                max: -Number.MAX_SAFE_INTEGER,
                                min: Number.MAX_SAFE_INTEGER,
                                isScaleCenter: !0,
                                fixMax: !1,
                                fixMin: !1
                            }
                        };
                    if (e === I._b.CANDLE) {
                        const e = t.settingStore.getValue("@symbol.candlestick.type"),
                            i = this.getVisibleSeriesData().reduce((({
                                high: t,
                                low: i
                            }, r) => {
                                const {
                                    h: o,
                                    l: s
                                } = (0, V.l5)({
                                    chartType: e,
                                    candlestickItem: r
                                });
                                return {
                                    high: Math.max(t, o),
                                    low: Math.min(i, s)
                                }
                            }), {
                                high: Number.MIN_SAFE_INTEGER,
                                low: Number.MAX_SAFE_INTEGER
                            });
                        r.default.max = i.high, r.default.min = i.low, r.default.isScaleCenter = !0;
                        const o = this.getVisibleResults();
                        for (let t = 0, s = o.length; t < s; t++) {
                            o[t].forEach((({
                                data: e,
                                yAxisIndex: t,
                                isScaleCenter: i = !0,
                                min: o,
                                max: s
                            }) => {
                                let n = {
                                    max: -Number.MAX_SAFE_INTEGER,
                                    min: Number.MAX_SAFE_INTEGER,
                                    fixMax: !1,
                                    fixMin: !1
                                };
                                if (void 0 !== t ? (r[t] || (r[t] = {
                                        max: -Number.MAX_SAFE_INTEGER,
                                        min: Number.MAX_SAFE_INTEGER,
                                        isScaleCenter: i,
                                        fixMax: !1,
                                        fixMin: !1
                                    }), n = r[t]) : n = r.default, (0, E.Et)(s)) n.max = s, n.fixMax = !0;
                                else if (!n.fixMax) {
                                    const t = h()(e, "value");
                                    t && t.value > n.max && (n.max = t.value)
                                }
                                if ((0, E.Et)(o)) n.min = o, n.fixMin = !0;
                                else if (!n.fixMin) {
                                    const t = g()(e, "value");
                                    t && t.value < n.min && (n.min = t.value)
                                }
                            }))
                        }
                    } else {
                        this.getVisibleChartData(e).forEach((({
                            chartType: e,
                            data: t = [],
                            yAxisIndex: i,
                            isScaleCenter: o = !0,
                            min: s,
                            max: n,
                            stack: a,
                            zeroBase: l = 0,
                            getBarInfos: c
                        }) => {
                            let d = {
                                max: -Number.MAX_SAFE_INTEGER,
                                min: Number.MAX_SAFE_INTEGER,
                                fixMax: !1,
                                fixMin: !1
                            };
                            if (void 0 !== i ? (r[i] || (r[i] = {
                                    max: -Number.MAX_SAFE_INTEGER,
                                    min: Number.MAX_SAFE_INTEGER,
                                    isScaleCenter: !!o,
                                    fixMin: !1,
                                    fixMax: !1
                                }), d = r[i]) : (d = r.default, r.default.isScaleCenter = !!o), (0, E.Et)(n)) d.max = n, d.fixMax = !0;
                            else if (!d.fixMax) {
                                const e = h()(t, "value");
                                e && e.value > d.max && (d.max = e.value)
                            }
                            if ((0, E.Et)(s)) d.min = s, d.fixMin = !0;
                            else if (!d.fixMin) {
                                const e = g()(t, "value");
                                e && e.value < d.min && (d.min = e.value)
                            }
                            if (void 0 !== a && e === I.NB.Bar) {
                                const e = t.map((({
                                        time: e,
                                        value: i
                                    }) => {
                                        const [, , r = 0] = c ? .(e, t) || [0, 1, 0];
                                        return i < l === r < l ? {
                                            time: e,
                                            value: i + r
                                        } : {
                                            time: e,
                                            value: i
                                        }
                                    })),
                                    i = h()(e, "value");
                                i && i.value > d.max && !d.fixMin && (d.max = i.value);
                                const r = g()(t, "value");
                                r && r.value < d.min && !d.fixMax && (d.min = r.value)
                            }
                        }))
                    }
                    return Object.keys(r).forEach((e => {
                        const {
                            min: t,
                            max: o,
                            isScaleCenter: s
                        } = r[e];
                        if ((0, B.be)(o - t, 10 ** -i)) {
                            const i = 0 === o ? 10 : Math.abs(o),
                                n = 10 ** Math.floor(Math.log(i) / Math.log(10)) / 2;
                            s || (r[e].max = o + n), r[e].min = t - n, r[e].max = o + n
                        }
                    })), r
                }
                _getTitleLabels(e, t, i = {}) {
                    let r = [];
                    const o = this.getParent(),
                        n = o.getAttr("precision"),
                        a = this.getAttr("isFormatNum"),
                        l = o.getXAxis();
                    if (t === I._b.CANDLE) {
                        const {
                            time: t,
                            open: i,
                            high: n,
                            low: a,
                            close: c,
                            change: d = "0.00%",
                            amplitude: h = "0.00%"
                        } = e, u = c >= i ? {
                            color: o.getColorFromColorTable("candle.upBarColor")
                        } : {
                            color: o.getColorFromColorTable("candle.downBarColor")
                        }, g = this.getI18n("open", "Open"), p = this.getI18n("high", "High"), m = this.getI18n("close", "Close"), x = this.getI18n("low", "Low"), f = this.getI18n("change", "CHANGE"), y = this.getI18n("amplitude", "AMPLITUDE");
                        r.push({
                            label: this._getTitleTime(t, l.getTimeScaleType()),
                            key: "t"
                        }, {
                            label: `${g}:`,
                            key: "O"
                        }, {
                            label: this.formatOCHL(i),
                            key: "o",
                            styles: u
                        }, {
                            label: `${p}:`,
                            key: "H"
                        }, {
                            label: this.formatOCHL(n, s()),
                            key: "h",
                            styles: u
                        }, {
                            label: `${x}:`,
                            key: "L"
                        }, {
                            label: this.formatOCHL(a),
                            key: "l",
                            styles: u
                        }, {
                            label: `${m}:`,
                            key: "C"
                        }, {
                            label: this.formatOCHL(c),
                            key: "c",
                            styles: u
                        }, {
                            label: `${f}:`,
                            key: "CHANGE",
                            className: "title_change_label"
                        }, {
                            label: d,
                            key: "change",
                            styles: u,
                            className: "title_change_value"
                        }, {
                            label: `${y}:`,
                            key: "AMP",
                            className: "title_amplitude_label"
                        }, {
                            label: h,
                            key: "amp",
                            styles: u,
                            className: "title_amplitude_value"
                        })
                    } else {
                        const s = o.getIndicatorHelperByName(t);
                        if (void 0 === s) return [];
                        const l = o.settingStore.getValue("@contextMenu.percentageScale"),
                            c = s.defaultProps.categories ? .includes("main") || !1,
                            d = this.getChartDatas(t).map((({
                                visible: e,
                                ...t
                            }) => ({ ...t,
                                visible: !1 !== o.indicatorStore.getValue(e)
                            }))),
                            h = o.isVolumeDisabled(t),
                            u = o.getI18n("indicator-disabled-text", "Available On Last Price"),
                            g = o.getAttr("interval"),
                            p = "@VOL" === t,
                            m = s.getLabel({
                                time: e.time,
                                results: d,
                                isDisabled: h,
                                disabledText: s.defaultProps.isHistBase ? `(${u})` : "",
                                interval: g,
                                params: { ...i,
                                    precision: p && o.getAttr("volumePrecision") || n,
                                    isFormatNum: p ? o.getAttr("volumeFormatNumber") : a,
                                    formatter: l && c ? e => o.getFirstVisibleSeriesDataAsRelativePercentage({
                                        value: e
                                    }) : void 0
                                }
                            });
                        r = 0 === m.length ? [{
                            label: s.defaultProps.title,
                            key: t
                        }] : m
                    }
                    return r
                }
                _getTitleTime(e, t) {
                    let i = "YYYY/MM/DD";
                    return t === I.Wx.Month ? i = "YYYY/MM/01" : t === I.Wx.Minute ? i = "YYYY/MM/DD HH:mm" : t === I.Wx.Hour ? i = "YYYY/MM/DD HH:00" : t === I.Wx.Second && (i = "YYYY/MM/DD HH:mm:ss"), (0, B.fU)(e, i)
                }
                getPadding() {
                    const e = this.getParent().getAttr("isMobile"),
                        t = this._panelType === I.HP.BASE;
                    return e ? t ? 10 : 0 : t ? 25 : 10
                }
                determineLabelColor(e) {
                    const t = this.getParent(),
                        i = t.getAttr("theme"),
                        o = t.getColorFromColorTable("indicator.1"),
                        s = t.getColorFromColorTable("indicator.9");
                    try {
                        const t = (0, r.A)(e).hex(),
                            n = (0, r.A)(o).hex(),
                            a = (0, r.A)(s).hex();
                        if ("dark" === i) switch (t) {
                            case n:
                                return (0, B.De)("--color-TextLink");
                            case a:
                                return "#4274FF";
                            default:
                                return e
                        }
                        return t === n ? (0, B.De)("--color-TextLink") : e
                    } catch (n) {
                        return e
                    }
                }
                magnetizeY({
                    y: e
                }) {
                    const t = this.getParent(),
                        i = this.yAxis.getValueOfCoord(e);
                    if (!t.getEditor().shouldMagnet()) return {
                        price: i,
                        y: e
                    };
                    const r = t.getAttr("currentItem"),
                        o = (t.settingStore.getValue("@symbol.candlestick.type") || "").toUpperCase();
                    return (({
                        price: e,
                        item: t,
                        toPosition: i = K(),
                        magnetizeTo: r = "all",
                        delta: o = 1
                    }) => {
                        const s = window.screen.height * (o / 100),
                            n = {
                                price: e,
                                y: i(e),
                                delta: 0
                            };
                        if (!t) return {
                            price: n.price,
                            y: n.y
                        };
                        const a = (({
                                item: e,
                                type: t
                            }) => {
                                switch (t) {
                                    case "open":
                                        return [e.open];
                                    case "close":
                                        return [e.close];
                                    case "high":
                                        return [e.high];
                                    case "low":
                                        return [e.low];
                                    case "all":
                                        return [e.open, e.close, e.low, e.high];
                                    default:
                                        return []
                                }
                            })({
                                item: t,
                                type: r
                            }).map((e => {
                                const t = i(e);
                                return {
                                    price: e,
                                    y: t,
                                    delta: Math.abs(t - n.y)
                                }
                            })).filter((e => e.delta <= s)),
                            l = g()(a, (e => e.delta)) || n;
                        return {
                            price: l.price,
                            y: l.y
                        }
                    })({
                        price: i,
                        item: r,
                        toPosition: this.yAxis.getCoordOfValue.bind(this.yAxis),
                        magnetizeTo: q({
                            type: o
                        })
                    })
                }
                constructor(e, t) {
                    super(), this.widgets = [], this._isWaiting = !1, this._weight = 0, this._result = new Map, this._isFirstWatch = !0, this._storageData = {
                        annotations: [],
                        indicators: [],
                        weight: .25
                    }, this._supplyYAxisMap = new Map, this._isFirstRender = !0, this.updateChartData = (e = 0, t) => {
                        const i = this.getAttr("indicatorType"),
                            r = this.getPanelId(),
                            o = this.getParent(),
                            {
                                indicatorViews: s
                            } = o,
                            n = this.getSeriesData();
                        if (i !== I._b.CANDLE) {
                            const s = o.getIndicatorViewByName(r);
                            if (!s || e > 0 && s.isDiffSource) return;
                            const {
                                params: l
                            } = s, c = o.getIndicatorHelperByName(r);
                            if (void 0 === c) return;
                            if (e > 0 && void 0 !== c.updateResult) {
                                const t = this._result.get(r);
                                if (t && n[e] ? .time) return void c.updateResult(e, t.result, l, n[e])
                            }
                            try {
                                c.getResult(n, l, (e => {
                                    this._result.set(i, {
                                        result: e,
                                        params: l,
                                        styles: s.styles
                                    }), t ? .()
                                }))
                            } catch (a) {
                                console.error(a.message)
                            }
                        } else {
                            let i = s.filter((({
                                isHistBase: e,
                                id: t
                            }) => e && o.getIndicatorViewByName(t) && o.getIndicatorHelperByName(t))).length;
                            s.forEach((({
                                id: r,
                                isHistBase: s,
                                params: l
                            }) => {
                                if (!s) return;
                                const c = o.getIndicatorViewByName(r);
                                if (!c) return;
                                const d = o.getIndicatorHelperByName(r);
                                if (d) {
                                    if (e > 0 && void 0 !== d.updateResult) {
                                        const t = this._result.get(r);
                                        if (t && n[e] ? .time) return void d.updateResult(e, t.result, l, n[e])
                                    }
                                    try {
                                        d.getResult(n, l, (e => {
                                            i--, this._result.set(r, {
                                                result: e,
                                                params: l,
                                                styles: c.styles
                                            }), 0 === i && t ? .()
                                        }))
                                    } catch (a) {
                                        console.error("indicator get Result occured error: ", a.message)
                                    }
                                }
                            }))
                        }
                    }, this.watchTheme = e => {
                        this.drawLogo()
                    }, this.config = { ...a()(F.A.defaultConfig),
                        iconSize: 10,
                        margin: 5,
                        isShowClose: !1,
                        isShowSetting: !0,
                        titleInfo: {},
                        isFormatNum: !1,
                        isAbleTriggerMove: !0,
                        isDestryed: !1,
                        autoScale: !0,
                        ...t
                    }, this._panelType = e, this._weight = t ? .weight || (this.panelType === I.HP.BASE ? .75 : .25), this._initWidgets()
                }
            }
        },
        "6QUF": (e, t, i) => {
            i.d(t, {
                A: () => p
            });
            var r = i("bmS5"),
                o = i.n(r),
                s = i("T9sr"),
                n = i.n(s),
                a = i("jYFu"),
                l = i("HV0L"),
                c = i("hpT2"),
                d = i("p7cX"),
                h = i("WhNg"),
                u = i("tNHi"),
                g = i("F3xh");
            let p = class extends g.A {
                _initEvents() {
                    this.on("mousemove", "pan", this.onmousemove), this.on("mouseout", this.onmouseout.bind(this)), this.on("mousewheel", this.onmousewheel.bind(this)), this.on("mousedown", a.Io.MOUSE_DOWN, this.onmousedown), this.on("gesturestart", this.ongesture.bind(this)), this.on("gesturechange", this.ongesture.bind(this)), this.on("gestureend", this.ongesture.bind(this))
                }
                getCtxsByDrawMode(e) {
                    const t = this.getRoot(),
                        i = t.getContext(),
                        r = t.getMarkContext(),
                        o = t.getInfoContext();
                    return {
                        [l.OQ.All]: [i, r, o],
                        [l.OQ.Resize]: [i, r, o],
                        [l.OQ.Marks]: [r]
                    }[e] || []
                }
                clear(e) {
                    const t = this.getClearBound();
                    e.forEach((e => c.A.clearRect(e, t)))
                }
                setViewBound() {
                    const e = this.getRoot(),
                        t = this.getParent().getBound(),
                        i = e.getAttr("margin"),
                        {
                            isFloat: r = !1
                        } = e.getAttr("yAxis"),
                        o = this.getAttr("isMobile") && r ? 0 : i.right;
                    this.setBound({
                        x: t.x,
                        y: t.y,
                        width: t.width - o,
                        height: t.height
                    })
                }
                getXYTicksData() {
                    const e = this.getRoot(),
                        t = this.getParent(),
                        i = e.settingStore.getValue("@contextMenu.percentageScale"),
                        r = e.getXAxis() ? .getAxisData() || [],
                        o = (i ? t.yAxis ? .getRelativeAxisData({
                            baseValue: e.getFirstVisibleSeriesDataClosePrice()
                        }) : t.yAxis ? .getAxisData()) || [];
                    return {
                        xData: r.map((e => e.p)),
                        yData: o.map((e => e.p))
                    }
                }
                createTextLabel(e) {
                    const t = this.getRoot();
                    return { ...e,
                        color: t.getColorFromColorTable("cross.defaultLabelTextColor"),
                        bgColor: t.getColorFromColorTable("cross.defaultLabelBgColor"),
                        borderColor: t.getColorFromColorTable("cross.defaultLabelBorderColor")
                    }
                }
                drawFeatures(e = this._lastCursor) {
                    if (void 0 === e && void 0 === this._lastCursor) return;
                    e && (this._lastCursor = e);
                    const t = this.getRoot(),
                        i = this.getParent(),
                        r = t.getHitContext();
                    this.clearHitContext(), this.initialCtxs([r]);
                    const {
                        show: o = !1
                    } = t.getAttr("crossHair"), s = t.getAttr("enabledFeatures").has(a.O5.ChartTrading), n = t.settingStore.getValue("@contextMenu.chartTrading"), c = this.transformPointToView(e);
                    o ? (this.drawCrossHairByTime(r, c), s && n && i.panelType === l.HP.BASE && this.drawPlaceOrder(r, c)) : this.drawCursor(r, c), this.restoreCtxs([r])
                }
                furtherTransformPointToView(e) {
                    const t = this.transformPointToView(e);
                    return { ...t,
                        y: -t.y
                    }
                }
                drawPlaceOrder(e, t) {
                    const i = this.getRoot(),
                        r = this.getParent().magnetizeY({
                            y: t.y
                        }),
                        o = i.getColorFromColorTable("cross.defaultLabelBgColor"),
                        s = i.getColorFromColorTable("cross.defaultLabelBorderColor"),
                        n = i.getColorFromColorTable("icon.plus");
                    e.save();
                    const a = this.placeOrderRect.getAttr("width"),
                        l = h.h5 * (this.showPercentageLabel() ? 2 : 1),
                        c = {
                            x: this.bound.width - a - 1,
                            y: -r.y - l / 2
                        };
                    this.placeOrderRect.setAttr("height", l), this.placeOrderRect.setAttr("fillStyle", o), this.placeOrderRect.setAttr("strokeStyle", s), this.placeOrderRect.setAttr("data", c), this.placeOrderRect.drawScene(e), e.restore(), e.save();
                    const d = this._placeOrderIcon.getAttr("width"),
                        u = this._placeOrderIcon.getAttr("height"),
                        g = {
                            x: c.x + (a - d) / 2,
                            y: c.y + (l - u) / 2
                        };
                    this._placeOrderIcon.setAttr("fillStyle", n), this._placeOrderIcon.setAttr("data", g), this._placeOrderIcon.drawScene(e), e.restore()
                }
                drawCursor(e, t) {
                    const i = this.getRoot();
                    if (i.getEditor().shouldMagnet()) {
                        const r = this.getParent(),
                            o = i.getXAxis(),
                            s = o.getValueOfCoord(t.x),
                            n = r.magnetizeY({
                                y: t.y
                            }),
                            a = {
                                x: o.getCoordOfValue(s),
                                y: n.y
                            };
                        this._magnetIcon.setAttr("data", {
                            x: a.x + 5,
                            y: 5 - a.y
                        }), this._magnetIcon.drawScene(e)
                    }
                }
                drawCrossHairByTime(e, t) {
                    const i = this.getRoot(),
                        r = i.getEditor(),
                        s = i.getXAxis(),
                        n = s.getValueOfCoord(t.x);
                    i.setCurrentItemByTime(n);
                    const a = this.getParent(),
                        c = {
                            minX: 0,
                            minY: i.getAttr("margin").top - this.bound.y,
                            maxX: this.bound.width,
                            maxY: i.visibleViewHeight - this.bound.y
                        },
                        h = a.magnetizeY({
                            y: t.y
                        }),
                        u = {
                            x: s.getCoordOfValue(n),
                            y: h.y
                        },
                        g = i.settingStore.getValue("@contextMenu.percentageScale"),
                        p = i.getAttr("precision"),
                        m = i.getLastSeriesDataClosePrice(),
                        x = (+a.formatterValue(h.price) - m) / m * 100,
                        f = this.createTextLabel({
                            text: `${x>0?"+":""}${x.toFixed(o()(p,2,4))}%`
                        }),
                        y = this.createTextLabel({
                            text: a.panelType === l.HP.BASE && g ? i.getFirstVisibleSeriesDataAsRelativePercentage({
                                value: h.price
                            }) : this.getCrossYAxisLabel(h.price)
                        }),
                        b = {
                            x: this.bound.width + 1,
                            y: -u.y
                        },
                        v = this.createTextLabel({
                            text: (0, d.Ni)(n, s.getTimeScaleType())
                        }),
                        C = {
                            x: s.getCoordOfValue(n),
                            y: i.visibleViewHeight - this.bound.y
                        },
                        w = this.showPercentageLabel() ? [y, f] : [y],
                        A = i.getColorFromColorTable("cross.borderLineColor");
                    (0, d.jS)(e, {
                        strokeStyle: A,
                        lineWidth: 1
                    }), this.renderer.drawVerticleCrossLine(e, {
                        x: C.x,
                        y: u.y
                    }, c, [3, 3]), this.renderer.drawHorizontalCrossLine(e, {
                        x: C.x,
                        y: u.y
                    }, c, [3, 3]), this.renderer.drawCursorDot(e, {
                        x: u.x,
                        y: -u.y,
                        color: A
                    }), r.shouldMagnet() && (this._magnetIcon.setAttr("data", {
                        x: u.x + 5,
                        y: 5 - u.y
                    }), this._magnetIcon.drawScene(e)), this.renderer.drawXAxisLabel({
                        ctx: e,
                        point: C,
                        label: v,
                        candlestick: i
                    }), this.renderer.drawYAxisLabel({
                        ctx: e,
                        point: b,
                        labels: w,
                        styleType: "semi-rounded"
                    })
                }
                getCrossYAxisLabel(e) {
                    const t = this.getParent();
                    let i = 2;
                    if (t.panelType === l.HP.BASE) {
                        const t = this.getRoot(),
                            r = t.getAttr("candlestick"),
                            {
                                dataFormatter: o
                            } = r;
                        if (i = t.getAttr("precision"), o === l.lw.Percentage) {
                            const t = Math.max(0, i - 2);
                            return `${(100*e).toFixed(t)}%`
                        }
                    }
                    return t.formatterValue(e)
                }
                clearHitContext() {
                    const e = this.getRoot().getHitContext();
                    c.A.clearRect(e)
                }
                onmousemove(e) {
                    const t = this.getRoot(),
                        i = this.getParent(),
                        r = this.furtherTransformPointToView(e.point),
                        o = this.placeOrderRect.isHover(r),
                        s = {
                            isRecord: !1,
                            weight: o ? 600 : 100,
                            config: {
                                style: o ? a.SE.POINTER : a.SE.CROSSHAIR
                            }
                        };
                    t.setCursor(s), i.getAttr("isAbleTriggerMove") && this.drawFeatures(e.point)
                }
                ongesture(e) {
                    if (this._isMouseDown) return;
                    const t = e.originEvent;
                    t.preventDefault();
                    const i = this.getRoot(),
                        r = i.getXAxis(),
                        {
                            x: o
                        } = this.transformPointToView(e.point),
                        s = r.getValueOfCoord(o);
                    "gesturestart" === t.type && (this.gestureLastScale = t.scale), "gesturechange" === t.type && (i.zoomByCoeff(this.gestureLastScale / t.scale, s), this.gestureLastScale = t.scale)
                }
                onmouseout() {
                    const e = this.getRoot(),
                        t = e.getHitContext();
                    c.A.clearRect(t), this.clearDragEvent(), e.setCurrentItemByTime(e.getMaxTimestamp())
                }
                onmousedown(e) {
                    const t = this.furtherTransformPointToView(e.point),
                        i = this.getParent();
                    if (this.placeOrderRect.isHover(t)) {
                        const t = this.transformPointToView(e.point),
                            r = i.getPriceOfYPos(t.y),
                            o = i.formatterValue(r);
                        return void this.getRoot().clickPlaceOrder({
                            price: r,
                            formattedPrice: o,
                            mousePosition: e.point
                        })
                    }
                    if (e.isDealed) return;
                    const r = e.originEvent;
                    if (this._isMouseDown = !0, r.touches && r.touches.length > 1) return this._isScaling = !0, void this.onmousescale(e);
                    const o = this.getRoot();
                    let {
                        x: s,
                        y: n
                    } = e.point, l = !1;
                    this.on("mousemove", a.Io.MOUSE_DOWN_MOVE, (t => {
                        if (this._isScaling) return;
                        l = !0;
                        const {
                            x: r,
                            y: a
                        } = t.point, c = Math.abs(r - e.point.x), d = 2 * Math.abs(a - n);
                        i.getAttr("autoScale") ? c > d && (o.shiftTimeLine(s - r), s = r) : (o.shiftTimeLine(s - r), i.yAxis ? .shift(a - n), s = r, n = a), e.originEvent.preventDefault(), t.originEvent.preventDefault()
                    })), this.on("mouseup", a.Io.MOUSE_DOWN_UP, (() => {
                        l && this.getRoot().fireAfterTimeShifted(), this._isMouseDown = !1, this.clearDragEvent()
                    }))
                }
                onmousescale(e) {
                    const t = this.getRoot(),
                        {
                            clientX: i,
                            clientX1: r
                        } = e;
                    let [o, s] = [i, r], n = !1;
                    this.on("mousemove", a.Io.MOUSE_DOWN_MOVE, (i => {
                        n = !0;
                        const {
                            clientX: r,
                            clientX1: a
                        } = i;
                        if (void 0 === a) this.clearDragEvent();
                        else {
                            const e = 300 * Math.log10(Math.abs((r - a) / (o - s)));
                            if (!Number.isFinite(e)) return;
                            e > 1 ? t.zoomIn(e) : t.zoomOut(e), o = r, s = a
                        }
                        i.originEvent.preventDefault(), e.originEvent.preventDefault()
                    })), this.on("mouseup", a.Io.MOUSE_DOWN_UP, (() => {
                        this.clearDragEvent(), n && t.fireAfterTimeShifted()
                    }))
                }
                wheelEventType(e) {
                    const {
                        deltaX: t,
                        deltaY: i
                    } = e;
                    return -3 * i === e.wheelDeltaY || Math.abs(t) >= Math.abs(i) ? "touchpad" : "mousewheel"
                }
                onmousewheel(e) {
                    const {
                        originEvent: t,
                        point: i
                    } = e, {
                        deltaY: r,
                        deltaX: o,
                        wheelDeltaY: s,
                        ctrlKey: n
                    } = t, a = this.getRoot(), l = this.wheelEventType(t);
                    if ("ready" !== this.wheelMode || n || (this.wheelAccumlateX += o, this.wheelAccumlateY += r, Math.abs(this.wheelAccumlateX) > 10 ? this.wheelMode = "x" : Math.abs(this.wheelAccumlateY) > 10 && (this.wheelMode = "y")), "y" === this.wheelMode || n || "mousewheel" === l)
                        if ("mousewheel" === l) {
                            const e = r ? -r / 3 : s / 12;
                            a.zoomAroundRight(e)
                        } else a.zoomAroundRight(n ? r : -r);
                    "x" === this.wheelMode && a.shiftTimeLine(o), this.wheelResetTimer && window.clearTimeout(this.wheelResetTimer), n && this.resetWheelMode(), this.wheelResetTimer = window.setTimeout(this.resetWheelMode, 20), this.drawFeatures(i), t.preventDefault()
                }
                clearDragEvent() {
                    this.off("mousemove", a.Io.MOUSE_DOWN_MOVE), this.off("mouseup", a.Io.MOUSE_DOWN_UP), this._isScaling = !1
                }
                isPlaceOrderHovered(e) {
                    const t = this.furtherTransformPointToView(e);
                    return this.placeOrderRect.isHover(t)
                }
                showPercentageLabel() {
                    const e = this.getRoot(),
                        t = this.getParent(),
                        i = e.getAttr("isMobile"),
                        {
                            dataFormatter: r
                        } = e.getAttr("candlestick"),
                        o = r === l.lw.Percentage,
                        s = e.settingStore.getValue("@contextMenu.percentageScale");
                    return !i && !s && t.panelType === l.HP.BASE && !o
                }
                constructor() {
                    super(), this.config = { ...n()(g.A.defaultConfig),
                        zIndex: 1
                    }, this._isScaling = !1, this._isMouseDown = !1, this.gestureLastScale = 1, this.wheelAccumlateX = 0, this.wheelAccumlateY = 0, this.wheelMode = "ready", this._placeOrderIcon = new u.Ge({
                        path: "M12 6C12 9.31371 9.31371 12 6 12C2.68629 12 0 9.31371 0 6C0 2.68629 2.68629 0 6 0C9.31371 0 12 2.68629 12 6ZM5.16667 6.83333V10H6.83333V6.83333H10V5.16667H6.83333V2H5.16667V5.16667H2V6.83333H5.16667Z",
                        width: 12,
                        height: 12,
                        strokeStyle: "transparent"
                    }), this._magnetIcon = new u.Ge({
                        path: "M2.07101 2.07084C-0.272135 4.41398 -0.27214 8.21297 2.07101 10.5561L3.95663 12.4417L6.77536 9.623L4.88974 7.73738C4.10334 6.95098 4.10334 5.67597 4.88974 4.88957C5.67615 4.10317 6.95115 4.10317 7.73755 4.88957L9.62317 6.77519L12.4419 3.95645L10.5563 2.07084C8.21314 -0.272309 4.41416 -0.27231 2.07101 2.07084ZM13.3847 4.89926L10.566 7.718L11.9802 9.13221L14.7989 6.31348L13.3847 4.89926ZM7.71817 10.5658L4.89944 13.3845L6.31365 14.7988L9.13238 11.98L7.71817 10.5658Z",
                        width: 15,
                        height: 15,
                        fillStyle: "#F0B90B",
                        strokeStyle: "transparent"
                    }), this.placeOrderRect = new u.rw({
                        width: 22,
                        borderRadius: [4, 0, 0, 4]
                    }), this.resetWheelMode = () => {
                        this.wheelMode = "ready", this.wheelAccumlateX = 0, this.wheelAccumlateY = 0
                    }, this._initEvents()
                }
            }
        },
        Xbxo: (e, t, i) => {
            i.d(t, {
                m: () => p,
                A: () => m
            });
            var r = i("+jcl"),
                o = i.n(r),
                s = i("6QUF"),
                n = i("WhNg");
            let a = class extends n.Ay {
                draw() {}
            };
            var l = i("HV0L"),
                c = i("p7cX"),
                d = i("hpT2"),
                h = i("GKEL"),
                u = i("eY1w"),
                g = i("oBze");
            const p = 5;
            let m = class extends s.A {
                get parent() {
                    return this.getParent()
                }
                render(e) {
                    const t = this.getRoot(),
                        i = t.getContext(),
                        r = t.getMarkContext(),
                        o = this.getCtxsByDrawMode(e);
                    if (this.clear(o), this.initialCtxs(o), this.createClipBound(o), e === l.OQ.All || e === l.OQ.Resize) {
                        const {
                            xData: e,
                            yData: r
                        } = this.getXYTicksData(), o = t.settingStore.getValue("@background.vertGridLine.show"), s = t.settingStore.getValue("@background.vertGridLine.color.value"), n = t.settingStore.getValue("@background.vertGridLine.lineWidth");
                        o && (i.save(), (0, c.jS)(i, {
                            strokeStyle: s,
                            lineWidth: +n
                        }), this.renderer.drawVertGridLine(i, this.bound, e), i.restore());
                        const a = t.settingStore.getValue("@background.horzGridLine.show"),
                            l = t.settingStore.getValue("@background.horzGridLine.color.value"),
                            d = t.settingStore.getValue("@background.horzGridLine.lineWidth");
                        a && (i.save(), (0, c.jS)(i, {
                            strokeStyle: l,
                            lineWidth: +d
                        }), this.renderer.drawHorzGridLine(i, this.bound, r), i.restore()), this._renderMainIndicatorCharts(i)
                    }
                    t.getAttr("annotationVisible") && this.plotShapes(r), this.restoreCtxs(o)
                }
                drawMainSeries(e, t) {
                    const i = this.getRoot(),
                        r = i.settingStore.getValue("@symbol.candlestick.line.color.value"),
                        o = i.settingStore.getValue("@background.color.value"),
                        s = i.settingStore.getValue("@symbol.candlestick.line.width");
                    switch (t) {
                        case l.NB.Line:
                            this.plotChart(e, {
                                chartType: l.NB.Line,
                                data: this.getLineData(),
                                zIndex: 0,
                                color: r,
                                lineWidth: +s
                            }), this.drawMaxAndMinArrows(e, !0);
                            break;
                        case l.NB.GradientArea:
                            this.plotChart(e, {
                                chartType: l.NB.GradientArea,
                                data: this.getLineData(),
                                zIndex: 0,
                                strokeColor: r,
                                fillColor1: r,
                                fillColor2: o,
                                opacity: .5
                            });
                            break;
                        case l.NB.TimeGradientArea:
                            this.plotChart(e, {
                                chartType: l.NB.GradientArea,
                                data: this.getLineData(),
                                zIndex: 0,
                                strokeColor: i.getColorFromColorTable("area.stroke"),
                                fillColor1: i.getColorFromColorTable("area.fill1"),
                                fillColor2: o,
                                opacity: .5
                            }), this.drawMaxAndMinArrows(e, !0);
                            break;
                        default:
                            {
                                const i = this.transformToGroup(this.getVisibleBars());this.plotGroupGraphs(e, i, t, (e => ({
                                    fillStyle: e,
                                    strokeStyle: e
                                }))),
                                this.drawMaxAndMinArrows(e, !1)
                            }
                    }
                    this.drawLastPriceLine(e), this.drawPercentageViewBaseLine(e)
                }
                drawLogo() {
                    const e = this.getRoot(),
                        t = "light" === e.getAttr("theme") ? .toLowerCase(),
                        i = e.getFrameContext();
                    i && (0, h.WZ)(t ? u.O5 : u.gj).then((e => {
                        d.A.clearRect(i), this.initialCtxs([i]);
                        const t = this.getAttr("isMobile"),
                            r = t ? .07 : .04;
                        i.globalAlpha = r;
                        const o = t ? {
                            width: 200,
                            height: 40
                        } : {
                            width: 300,
                            height: 60
                        };
                        this.renderer.drawImage(i, e, this.getBound(), o), i.restore()
                    }))
                }
                drawMaxAndMinArrows(e, t = !1) {
                    const i = this.getRoot(),
                        r = i.getAttr("precision"),
                        s = i.getColorFromColorTable("text.minMaxPrice"),
                        [n, a] = this.getMaxMinItems(t);
                    if (n && a) {
                        (0, c.jS)(e, {
                            fillStyle: s,
                            strokeStyle: s
                        }), e.beginPath();
                        const t = { ...n,
                            value: o()(n.value, r)
                        };
                        this.drawArrowText(e, t, -1), this.drawArrowText(e, a, 1)
                    }
                }
                drawArrowText(e, t, i) {
                    const r = this.getParent();
                    (0, c.jS)(e, {
                        textAlign: l.nO.Right,
                        textBaseline: l.Tf.Middle
                    });
                    const o = this.getPosition(t.time, t.value),
                        s = r.formatterValue(t.value),
                        n = d.A.measureTextWidth(s);
                    let a = -3,
                        h = -12;
                    this.isOverlapLeft(o.x + h - n + a) && ((0, c.jS)(e, {
                        textAlign: l.nO.Left
                    }), a = 3, h = 12), d.A.drawLine(e, o.x, o.y + i, o.x + h, o.y + i), d.A.drawText(e, s, o.x + h + a, o.y + i), e.stroke()
                }
                drawBidAskLabels(e) {
                    const t = this.getRoot(),
                        i = this.getParent(),
                        r = t.settingStore.getValue("@contextMenu.bidAsk"),
                        o = t.getAttr("askBid") || {
                            ask: 0,
                            bid: 0
                        },
                        s = +o.ask,
                        n = +o.bid;
                    if (!r || !s || !n) return;
                    const a = t.getI18n("ask", "Ask"),
                        l = t.getI18n("bid", "Bid"),
                        c = t.getColorFromColorTable("cross.labelTextColor"),
                        d = t.getColorFromColorTable("cross.upLabelBgColor"),
                        h = t.getColorFromColorTable("cross.downLabelBgColor"),
                        u = -i.yAxis.getCoordOfValue(s),
                        g = -i.yAxis.getCoordOfValue(n),
                        [, p] = i.xAxis.getRange(),
                        m = i.formatterValue(s),
                        x = i.formatterValue(n);
                    this.renderer.drawAskBidLabels({
                        ctx: e,
                        labels: [{
                            text: `${a}     ${m}`,
                            point: {
                                x: p - 1,
                                y: u
                            },
                            color: c,
                            bgColor: h,
                            borderColor: h
                        }, {
                            text: `${l}     ${x}`,
                            point: {
                                x: p - 1,
                                y: g
                            },
                            color: c,
                            bgColor: d,
                            borderColor: d
                        }]
                    })
                }
                drawLastPriceLine(e) {
                    const t = this.getRoot(),
                        i = this.getParent(),
                        r = t.settingStore.getValue("@contextMenu.priceLine"),
                        o = t.getSeriesData(),
                        s = o[0],
                        n = o[o.length - 1];
                    if (!r || !n || !s) return;
                    const [a, l] = i.xAxis.getRange(), d = i.yAxis.getCoordOfValue(n.close), h = n.close >= n.open ? t.getColorFromColorTable("cross.upLabelBgColor") : t.getColorFromColorTable("cross.downLabelBgColor");
                    e.save(), (0, c.jS)(e, {
                        strokeStyle: h,
                        lineWidth: 1
                    }), this.renderer.drawHorizontalCrossLine(e, {
                        x: 0,
                        y: d
                    }, {
                        minX: a,
                        maxX: l,
                        minY: 0,
                        maxY: 0
                    }, [4, 4]), e.restore()
                }
                drawPercentageViewBaseLine(e) {
                    const t = this.getRoot(),
                        i = this.getParent(),
                        r = t.settingStore.getValue("@contextMenu.percentageScale"),
                        o = t.getFirstVisibleSeriesDataClosePrice();
                    if (!r || !o) return;
                    const [s, n] = i.xAxis.getRange(), a = i.yAxis.getCoordOfValue(o), l = t.getColorFromColorTable("cross.borderLineColor");
                    e.save(), (0, c.jS)(e, {
                        strokeStyle: l,
                        lineWidth: 1
                    }), this.renderer.drawHorizontalCrossLine(e, {
                        x: 0,
                        y: a
                    }, {
                        minX: s,
                        maxX: n,
                        minY: 0,
                        maxY: 0
                    }, [1, 1]), e.restore()
                }
                getBarPosition(e) {
                    const {
                        yAxis: t
                    } = this.getParent(), {
                        time: i,
                        low: r,
                        high: o,
                        open: s,
                        close: n
                    } = e;
                    return {
                        x: this.xAxis.getCoordOfValue(i),
                        lowY: t.getCoordOfValue(r),
                        highY: t.getCoordOfValue(o),
                        openY: t.getCoordOfValue(s),
                        closeY: t.getCoordOfValue(n)
                    }
                }
                getPosition(e, t) {
                    return {
                        x: this.xAxis.getCoordOfValue(e),
                        y: -this.parent.yAxis.getCoordOfValue(t)
                    }
                }
                getLineData() {
                    const e = this.getRoot().getVisibleSeriesData();
                    return this.checkData(e), e.map((e => {
                        const {
                            time: t,
                            close: i
                        } = e;
                        return {
                            time: t,
                            value: i
                        }
                    }))
                }
                getVisibleBars() {
                    const e = this.getRoot(),
                        t = e.getVisibleSeriesData();
                    this.checkData(t);
                    const {
                        barWeight: i = .8
                    } = e.getAttr("candlestick"), r = e.settingStore.getValue("@symbol.candlestick.candle.colors.up.color.value"), o = e.settingStore.getValue("@symbol.candlestick.candle.colors.up.borderColor.value"), s = e.settingStore.getValue("@symbol.candlestick.candle.colors.up.wickColor.value"), n = e.settingStore.getValue("@symbol.candlestick.candle.colors.down.color.value"), a = e.settingStore.getValue("@symbol.candlestick.candle.colors.down.borderColor.value"), l = e.settingStore.getValue("@symbol.candlestick.candle.colors.down.wickColor.value"), d = this.getParent().getFixedBarWidth(i);
                    let h;
                    const u = e.getXAxis().getTimeUnitValue() < 864e5;
                    return t.map(((i, g) => {
                        const {
                            x: p,
                            lowY: m,
                            highY: x,
                            openY: f,
                            closeY: y
                        } = this.getBarPosition(i);
                        return u && g > 0 && !(0, c.be)(p - h - this.xAxis.unitWidth, 1e-5) && e.fire("dispatchErrorData", {
                            data: {
                                type: "renderError",
                                payload: {
                                    prevItem: t[g - 1],
                                    nextItem: i
                                }
                            }
                        }), h = p, { ...i,
                            x: p,
                            y: Math.max(f, y),
                            width: d,
                            height: Math.max(1, Math.abs(y - f)),
                            openY: f,
                            closeY: y,
                            highY: x,
                            lowY: m,
                            color: i.close >= i.open ? r : n,
                            borderColor: i.close >= i.open ? o : a,
                            wickColor: i.close >= i.open ? s : l
                        }
                    }))
                }
                getMaxMinItems(e = !1) {
                    const t = this.getRoot().getVisibleSeriesData().filter((e => this.xAxis.domainContains(e.time)));
                    if (0 === t.length) return [];
                    let i = {
                            time: 0,
                            value: -Number.MAX_SAFE_INTEGER
                        },
                        r = {
                            time: 0,
                            value: Number.MAX_SAFE_INTEGER
                        };
                    for (let o = 0; o < t.length; o++) {
                        const {
                            time: s,
                            close: n,
                            high: a,
                            low: l
                        } = t[o];
                        e ? (n > i.value && (i = {
                            time: s,
                            value: n
                        }), n < r.value && (r = {
                            time: s,
                            value: n
                        })) : (a > i.value && (i = {
                            time: s,
                            value: a
                        }), l < r.value && (r = {
                            time: s,
                            value: l
                        }))
                    }
                    return [i, r]
                }
                isOverlapLeft(e) {
                    const [t] = this.xAxis.getRange();
                    return e < t
                }
                drawTimeAnchorLine(e) {
                    const t = this.getRoot(),
                        i = t.settingStore.getValue("@timeTool.timeAnchor"),
                        r = t.settingStore.getValue("@timeTool.anchorLine");
                    if (!i || !r) return;
                    const o = this.getTimeAnchorDateX(),
                        s = {
                            minX: 0,
                            minY: t.getAttr("margin").top - this.bound.y,
                            maxX: this.bound.width,
                            maxY: t.visibleViewHeight - this.bound.y
                        },
                        n = t.getColorFromColorTable("cross.borderLineColor");
                    (0, c.jS)(e, {
                        strokeStyle: n,
                        lineWidth: 1
                    }), this.renderer.drawVerticleCrossLine(e, {
                        x: o,
                        y: 0
                    }, s, [3, 3])
                }
                getTimeAnchorDateX() {
                    const e = this.getRoot(),
                        t = e.getXAxis(),
                        [i, r] = t.getDomain(),
                        o = e.settingStore.getValue("@timeTool.anchorPoint"),
                        s = e.settingStore.getValue("@timeTool.timeAnchorDate.value"),
                        n = (0, g.H)({
                            type: o,
                            min: i,
                            max: r,
                            defaultDate: s
                        }),
                        a = t.getCoordOfValue(n);
                    switch (e.settingStore.getValue("@timeTool.anchorPoint")) {
                        case "left":
                            return a + p;
                        case "right":
                            return a - p;
                        default:
                            return a
                    }
                }
                _renderMainIndicatorCharts(e) {
                    const t = this.getRoot().settingStore.getValue("@symbol.candlestick.type"),
                        i = this.getParent().getVisibleResults(),
                        r = [],
                        o = [];
                    i.forEach((e => {
                        const [t, i] = (0, c.pb)(e, (e => e.zIndex < 0));
                        r.push(...t), o.push(...i)
                    })), this.drawMainSeries(e, t ? .toUpperCase()), this.drawTimeAnchorLine(e), r.sort(((e, t) => (e.zIndex || 0) - (t.zIndex || 0))), r.forEach(this.plotChart.bind(this, e)), o.sort(((e, t) => (e.zIndex || 0) - (t.zIndex || 0))), o.forEach(this.plotChart.bind(this, e)), this.drawBidAskLabels(e)
                }
                constructor(...e) {
                    super(...e), this.renderer = new a, this.checkData = (0, c.nF)((e => {
                        const t = this.getRoot(),
                            i = t.getXAxis().getTimeUnitValue(),
                            {
                                length: r
                            } = e;
                        if (r > 2 && i < 864e5 && e[r - 1].time >= t.lastDataTime + i)
                            for (let o = r - 1; o >= 1; o--) {
                                const r = e[o - 1].time,
                                    s = e[o].time;
                                if (s <= t.lastDataTime + i) return;
                                s - r >= 2 * i && t.fire("dispatchErrorData", {
                                    data: {
                                        type: "disConnect",
                                        payload: {
                                            prevItem: e[o - 1],
                                            nextItem: e[o]
                                        }
                                    }
                                })
                            }
                    }), 500)
                }
            }
        },
        U1Rk: (e, t, i) => {
            i.d(t, {
                A: () => o
            });
            var r = i("ym1p");
            let o = class extends r.A {
                getBound() {
                    return this.bound
                }
                setBound(e) {
                    return this.bound = Object.assign(this.bound || {}, e), this
                }
                updateBound(e, t) {
                    this.bound[e] = t
                }
                contain(e) {
                    return e.x >= this.bound.x && e.y <= this.bound.y && e.x - this.bound.x <= this.bound.width && this.bound.y - e.y <= this.bound.height
                }
                transformPointToView(e) {
                    return {
                        x: e.x - this.bound.x,
                        y: this.bound.y - e.y
                    }
                }
                setCanvasTransform(e) {
                    e.scale(this.devicePixelRatio, this.devicePixelRatio), e.translate(this.bound.x, this.bound.y)
                }
                initialCtxs(e) {
                    e.forEach((e => {
                        e && (e.save(), this.setCanvasTransform(e))
                    }))
                }
                restoreCtxs(e) {
                    e.forEach((e => e ? .restore ? .()))
                }
                getClearBound(e = 0) {
                    const {
                        x: t,
                        y: i,
                        width: r,
                        height: o
                    } = this.bound;
                    return {
                        x: t * this.devicePixelRatio,
                        y: (i - o) * this.devicePixelRatio,
                        width: r * this.devicePixelRatio,
                        height: (o + e) * this.devicePixelRatio
                    }
                }
                createClipBound(e, t = 0) {
                    Array.isArray(e) ? e.forEach(this.createClipBound.bind(this)) : (e.beginPath(), e.rect(-.5, -this.bound.height - .5, this.bound.width, this.bound.height + t), e.clip())
                }
                afterSetParent() {}
                constructor(...e) {
                    super(...e), this.bound = {
                        x: 0,
                        y: 0,
                        width: 0,
                        height: 0
                    }
                }
            };
            o.defaultConfig = { ...r.A.defaultConfig,
                zIndex: 0
            }
        },
        F3xh: (e, t, i) => {
            i.d(t, {
                A: () => c
            });
            var r = i("7N5u"),
                o = i.n(r),
                s = i("U1Rk"),
                n = i("UfNb"),
                a = i("HV0L"),
                l = i("p7cX");
            let c = class extends s.A {
                get xAxis() {
                    return this.getRoot().getXAxis()
                }
                get root() {
                    return this.getRoot()
                }
                get TitleContainer() {
                    return this.root.titleContainer
                }
                getShapes() {
                    return this._shapes
                }
                getAnnotations() {
                    return Array.from(this._annotationSet)
                }
                addAnnotation(e) {
                    !this._annotationSet.has(e) && this._annotationSet.add(e)
                }
                removeAnnotation(e) {
                    this._annotationSet.delete(e)
                }
                eachAnnotations(e) {
                    const t = this.getAnnotations();
                    for (let i = t.length - 1; i >= 0; --i) {
                        e(t[i])
                    }
                }
                addShapes(e) {
                    e.forEach(this.addShape.bind(this))
                }
                addShape(e) {
                    this._shapes.push(e)
                }
                removeShape(e) {
                    const t = this._shapes;
                    for (let i = t.length - 1; i >= 0; i--)
                        if (t[i] === e) {
                            t.splice(i, 1);
                            break
                        }
                }
                update(e = a.OQ.All) {
                    this._isWaiting || (this._isWaiting = !0, setTimeout((() => {
                        this.render(e), this._isWaiting = !1
                    }), 16))
                }
                updateImmediate(e = a.OQ.All) {
                    this.render(e)
                }
                setParent(e) {
                    if (this._parent) throw new Error("Current Node had parent, Pls do not set parent repeatly!");
                    this._parent = e
                }
                getParent() {
                    return this._parent
                }
                getRoot() {
                    return this._parent instanceof n.A ? this._parent.getParent() : this._parent
                }
                getYAxisWidth() {
                    return this.getRoot().getAttr("margin").right || 0
                }
                getXAxisHeight() {
                    return this.getRoot().getAttr("xAxis").height || 0
                }
                updateAnnotations() {
                    this._annotationSet.forEach((e => {
                        e.updateData()
                    }))
                }
                plotShapes(e) {
                    const t = this.getBound();
                    this.updateAnnotations();
                    for (let i = 0, r = this._shapes.length; i < r; i++) {
                        const r = this._shapes[i],
                            o = r.isVisible({ ...t,
                                y: 0,
                                x: 0
                            });
                        r.setAttr("isContain", o), o && r.draw(e)
                    }
                }
                transformToGroup(e, t = "color", i = !1) {
                    if (i) {
                        const {
                            result: i
                        } = e.reduce(((e, t, i, {
                            length: r
                        }) => {
                            const {
                                compare: o
                            } = e, s = "string" === typeof o ? t[o] : o(t);
                            return e.group.push(t), e.result[s] || (e.result[s] = []), e.lastCompare === s && i !== r - 1 || (e.result[e.lastCompare || s].push(e.group), e.group = [t]), e.lastCompare = s, e
                        }), {
                            result: {},
                            group: [],
                            compare: t,
                            lastCompare: ""
                        });
                        return i
                    }
                    return o()(e, t)
                }
                plotGroupGraphs(e, t, i, r, o = !1) {
                    const s = {
                        [a.NB.Line]: this.renderer.drawPolyline,
                        [a.NB.Bar]: this.renderer.drawBars,
                        [a.NB.BarCandle]: this.renderer.drawBarCandlesticks,
                        [a.NB.HollowBar]: this.renderer.drawHollowBars,
                        [a.NB.CandleBar]: this.renderer.drawCandlestickBars,
                        [a.NB.Point]: this.renderer.drawPoints,
                        [a.NB.CrossLine]: this.renderer.drawCrossLines,
                        [a.NB.Area]: this.renderer.drawArea,
                        [a.NB.GradientArea]: this.renderer.drawGradientArea,
                        [a.NB.HollowCandleBar]: this.renderer.drawHollowCandlestickBars
                    }[i];
                    s && Object.keys(t || {}).forEach((i => {
                        const n = r(i);
                        (0, l.jS)(e, n), o ? t[i].forEach((t => {
                            s.call(this, e, t)
                        })) : s.call(this, e, t[i])
                    }))
                }
                plotChart(e, t) {
                    const i = {
                            [a.NB.Line]: this._plotLineChart,
                            [a.NB.Bar]: this._plotBarChart,
                            [a.NB.BarCandle]: this.renderer.drawBarCandlesticks,
                            [a.NB.HollowBar]: this._plotHollowBarChart,
                            [a.NB.Point]: this._plotPointChart,
                            [a.NB.CrossLine]: this._plotCrossChart,
                            [a.NB.Area]: this._plotAreaChart,
                            [a.NB.GradientArea]: this._plotGradientAreaChart,
                            [a.NB.Transcation]: this._plotTranscations
                        },
                        {
                            chartType: r
                        } = t;
                    e.save(), i[r] && i[r].call(this, e, t), e.restore()
                }
                _plotTranscations(e, {
                    data: t = [],
                    color: i = "#cc47ed",
                    colorLong: r = "#2962ff"
                }) {
                    const o = this.getRoot(),
                        s = this.getParent(),
                        {
                            barWeight: n = .8
                        } = o.getAttr("candlestick"),
                        a = this.xAxis.unitWidth * n > 9,
                        c = t,
                        d = c.map((e => e.transcations.filter((e => !0 === e.long)).map((t => ({
                            value: t.price,
                            time: e.time
                        }))))).reduce(((e, t) => (e.push(...t), e)), []),
                        h = c.map((e => e.transcations.filter((e => !1 === e.long)).map((t => ({
                            value: t.price,
                            time: e.time
                        }))))).reduce(((e, t) => (e.push(...t), e)), []);
                    (0, l.jS)(e, {
                        fillStyle: r,
                        strokeStyle: r
                    }), s.getLineDatas(d).forEach((t => this.renderer.drawSmallTriangle(e, t, !0))), (0, l.jS)(e, {
                        fillStyle: i,
                        strokeStyle: i
                    }), s.getLineDatas(h).forEach((t => this.renderer.drawSmallTriangle(e, t, !1))), c.forEach((t => {
                        const o = s.getPosition({
                                time: t.time,
                                value: t.high
                            }),
                            n = s.getPosition({
                                time: t.time,
                                value: t.low
                            });
                        o.y = -o.y, o.y -= 5, n.y = -n.y, n.y += 5, (0, l.jS)(e, {
                            fillStyle: i,
                            strokeStyle: i
                        }), t.transcations.filter((e => !1 === e.long)).forEach((t => {
                            const i = this.renderer.drawTranscation(e, o, t.long, t.qty, t.signal, a);
                            o.y -= i
                        })), (0, l.jS)(e, {
                            fillStyle: r,
                            strokeStyle: r
                        }), t.transcations.filter((e => !0 === e.long)).forEach((t => {
                            const i = this.renderer.drawTranscation(e, n, t.long, t.qty, t.signal, a);
                            n.y += i
                        }))
                    }))
                }
                _plotLineChart(e, {
                    data: t = [],
                    color: i,
                    lineWidth: r,
                    yAxisIndex: o
                }) {
                    const s = this.getParent().getLineDatas(t, o);
                    if (i)(0, l.jS)(e, {
                        strokeStyle: i,
                        lineWidth: r
                    }), this.renderer.drawPolyline(e, s);
                    else {
                        const t = this.transformToGroup(s, "color", !0);
                        this.plotGroupGraphs(e, t, a.NB.Line, (e => ({
                            strokeStyle: e,
                            lineWidth: r
                        })), !0)
                    }
                }
                _plotBarChart(e, {
                    data: t = [],
                    color: i,
                    lineWidth: r = 1,
                    zeroBase: o = 0,
                    yAxisIndex: s,
                    getBarInfos: n
                }) {
                    const c = this.getParent(),
                        d = c.getAttr("indicatorType"),
                        h = c.getBarDatas(t, {
                            zeroBase: o,
                            yAxisIndex: s,
                            indicatorType: d
                        }, n);
                    if (i)(0, l.jS)(e, {
                        fillStyle: i,
                        lineWidth: r
                    }), this.renderer.drawBars(e, h);
                    else {
                        const t = this.transformToGroup(h, "color");
                        this.plotGroupGraphs(e, t, a.NB.Bar, (e => ({
                            fillStyle: e,
                            lineWidth: +r || 1
                        })))
                    }
                }
                _plotHollowBarChart(e, {
                    data: t = [],
                    color: i,
                    lineWidth: r = 1,
                    zeroBase: o = 0,
                    yAxisIndex: s,
                    getBarInfos: n
                }) {
                    const c = this.getParent().getBarDatas(t, {
                        zeroBase: o,
                        yAxisIndex: s
                    }, n);
                    if (i)(0, l.jS)(e, {
                        fillStyle: i,
                        lineWidth: r
                    }), this.renderer.drawHollowBars(e, c);
                    else {
                        const t = this.transformToGroup(c, "color");
                        this.plotGroupGraphs(e, t, a.NB.HollowBar, (e => ({
                            fillStyle: e,
                            lineWidth: +r || 1
                        })))
                    }
                }
                _plotPointChart(e, {
                    data: t = [],
                    color: i,
                    lineWidth: r = 1,
                    yAxisIndex: o
                }) {
                    const s = this.getParent().getLineDatas(t, o);
                    if (i)(0, l.jS)(e, {
                        strokeStyle: i,
                        lineWidth: r
                    }), this.renderer.drawPoints(e, s);
                    else {
                        const t = this.transformToGroup(s, "color");
                        this.plotGroupGraphs(e, t, a.NB.Point, (e => ({
                            strokeStyle: e,
                            lineWidth: r
                        })))
                    }
                }
                _plotCrossChart(e, {
                    data: t = [],
                    color: i,
                    lineWidth: r = 1,
                    yAxisIndex: o
                }) {
                    const s = this.getParent().getLineDatas(t, o);
                    if (i)(0, l.jS)(e, {
                        strokeStyle: i,
                        lineWidth: r
                    }), this.renderer.drawCrossLines(e, s);
                    else {
                        const t = this.transformToGroup(s, "color");
                        this.plotGroupGraphs(e, t, a.NB.CrossLine, (e => ({
                            strokeStyle: e,
                            lineWidth: r
                        })))
                    }
                }
                _plotAreaChart(e, {
                    data: t = [],
                    borderData: i,
                    color: r,
                    opacity: o = .6,
                    histBase: s = 0,
                    yAxisIndex: n
                }) {
                    const c = this.getParent(),
                        d = -c.yAxis.getCoordOfValue(s),
                        h = c.getLineDatas(t, n);
                    if (r)
                        if ((0, l.jS)(e, {
                                fillStyle: r,
                                globalAlpha: o
                            }), i) {
                            const t = c.getLineDatas(i, n).reverse();
                            this.renderer.drawArea(e, [...h, ...t])
                        } else {
                            const t = h[h.length - 1] || {
                                    x: 0,
                                    y: 0
                                },
                                i = h[0] || {
                                    x: 0,
                                    y: 0
                                },
                                r = {
                                    x: t.x,
                                    y: d
                                },
                                o = {
                                    x: i.x,
                                    y: d
                                };
                            h.push(r, o), this.renderer.drawArea(e, h)
                        }
                    else {
                        const t = this._groupAreaData({
                            pointData: h,
                            borderData: i,
                            histBase: d,
                            yAxisIndex: n
                        });
                        this.plotGroupGraphs(e, t, a.NB.Area, (e => ({
                            fillStyle: e,
                            globalAlpha: o
                        })), !0)
                    }
                }
                _plotGradientAreaChart(e, {
                    data: t = [],
                    borderData: i,
                    strokeColor: r,
                    fillColor1: o,
                    fillColor2: s,
                    opacity: n = .6,
                    histBase: l = 0,
                    yAxisIndex: c
                }) {
                    const d = this.getParent(),
                        h = -d.yAxis.getCoordOfValue(l),
                        u = d.getLineDatas(t, c),
                        g = {
                            strokeColor: r,
                            fillColor1: o,
                            fillColor2: s,
                            opacity: n
                        };
                    if (r)
                        if (i) {
                            const t = d.getLineDatas(i, c).reverse(),
                                r = [...u, ...t];
                            this.renderer.drawGradientArea(e, r, r, g)
                        } else {
                            const t = u[u.length - 1] || {
                                    x: 0,
                                    y: 0
                                },
                                i = u[0] || {
                                    x: 0,
                                    y: 0
                                },
                                r = {
                                    x: t.x,
                                    y: h
                                },
                                o = [{
                                    x: i.x,
                                    y: h
                                }, ...u, r];
                            this.renderer.drawGradientArea(e, u, o, g)
                        }
                    else {
                        const t = this._groupAreaData({
                            pointData: u,
                            borderData: i,
                            histBase: h,
                            yAxisIndex: c
                        });
                        this.plotGroupGraphs(e, t, a.NB.GradientArea, (e => ({
                            fillStyle: e,
                            globalAlpha: n
                        })), !0)
                    }
                }
                _groupAreaData({
                    pointData: e = [],
                    borderData: t,
                    histBase: i = 0,
                    yAxisIndex: r
                }) {
                    const o = this.getParent(),
                        {
                            result: s
                        } = e.reduce(((e, t, i, {
                            length: r
                        }) => {
                            const o = t[e.compare];
                            return e.group.j = i, e.result[o] || (e.result[o] = []), (e.lastCompare && e.lastCompare !== o || i === r - 1) && (e.result[o].push(e.group), e.group = {
                                i: i,
                                j: i
                            }), e.lastCompare = o, e
                        }), {
                            result: {},
                            group: {
                                i: 0,
                                j: 0
                            },
                            compare: "color",
                            lastCompare: ""
                        });
                    if (t) {
                        const i = o.getLineDatas(t, r);
                        return Object.keys(s).reduce(((t, r) => {
                            const o = s[r];
                            return t[r] = o.map((({
                                i: t,
                                j: r
                            }) => {
                                const o = e.slice(t, r + 1),
                                    s = i.slice(t, r + 1).reverse();
                                return o.concat(s)
                            })), t
                        }), {})
                    }
                    return Object.keys(s).reduce(((t, r) => {
                        const o = s[r];
                        return t[r] = o.map((({
                            i: t,
                            j: r
                        }) => {
                            const o = e.slice(t, r + 1),
                                s = [{
                                    x: e[r].x,
                                    y: i
                                }, {
                                    x: e[t].x,
                                    y: i
                                }];
                            return o.concat(s)
                        })), t
                    }), {})
                }
                drawLogo(e) {}
                drawUnavailableText(e) {}
                constructor(...e) {
                    super(...e), this._shapes = [], this._annotationSet = new Set, this._isWaiting = !1
                }
            };
            c.defaultConfig = { ...s.A.defaultConfig
            }
        },
        iFsL: (e, t, i) => {
            i.d(t, {
                P3: () => h.P,
                tS: () => d,
                YM: () => a,
                _g: () => o
            });
            var r = i("DTvD");

            function o(e, t) {
                const i = (0, r.useRef)(0);
                return (0, r.useCallback)((() => {
                    const r = Date.now();
                    r - i.current > t && (e(), i.current = r)
                }), [])
            }
            var s = i("VLTf"),
                n = i.n(s);

            function a(e) {
                const [t, i] = (0, r.useState)(e), o = (0, r.useRef)(e);
                return [t, {
                    updateValue: (0, r.useCallback)((e => {
                        const t = { ...o.current,
                            ...e
                        };
                        n()(t, o.current) || (o.current = t, i(t))
                    }), []),
                    toggleValue: (0, r.useCallback)((e => {
                        const t = { ...o.current
                        };
                        t[e] = !t[e], o.current = t, i(t)
                    }), []),
                    getValue: (0, r.useCallback)((e => o.current[e]), [])
                }]
            }
            i("p7cX");
            var l = i("IcKY"),
                c = i.n(l);
            const d = (e, t) => {
                const i = (0, r.useRef)(1),
                    o = (0, r.useRef)(t);
                c()(o.current, t) || (i.current *= -1), (0, r.useLayoutEffect)(e, [i.current])
            };
            var h = i("SYR8")
        },
        SYR8: (e, t, i) => {
            i.d(t, {
                P: () => o
            });
            var r = i("T0Sc");
            const o = () => (0, r.o)("", "kline-ui")
        },
        "9YZR": (e, t, i) => {
            i.d(t, {
                X2: () => D.X2,
                Pf: () => Z.Pf,
                EC: () => Qe,
                Ow: () => pi.Ow,
                mE: () => gi,
                Ky: () => pi.Ky,
                NB: () => D.NB,
                yW: () => oi,
                WD: () => Xt.default,
                yo: () => Z.yo,
                Sc: () => D.Sc,
                kG: () => mi.R,
                jp: () => pi.jp,
                js: () => mi.Qw,
                Zf: () => fi.Zf,
                tC: () => ai,
                KF: () => si,
                Ek: () => ni,
                aq: () => di,
                MV: () => ci,
                ot: () => xi.o
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i("IcKY"),
                n = i.n(s),
                a = i("p7cX"),
                l = i("oBze"),
                c = i("iFsL"),
                d = i("oHkN"),
                h = i("jr6z");
            const u = (0, o.lazy)((() => i.e(3408).then(i.bind(i, "JmWl")))),
                g = ({
                    candlestickInstance: e,
                    onClose: t,
                    customizedEnabled: i,
                    backTestEnabled: s
                }) => {
                    const n = (0, h.p)({
                        candlestickInstance: e,
                        onClose: t
                    });
                    return n.modalVisible ? (0, r.jsx)(o.Suspense, {
                        fallback: null,
                        children: (0, r.jsx)(h.A.Provider, {
                            value: n,
                            children: (0, r.jsx)(u, {
                                customizedEnabled: i,
                                backTestEnabled: s
                            })
                        })
                    }) : null
                },
                p = (0, o.memo)((({
                    candlestickInstance: e,
                    onClose: t,
                    backTestEnabled: i,
                    customizedEnabled: o
                }) => e ? (0, r.jsx)(g, {
                    candlestickInstance: e,
                    onClose: t,
                    customizedEnabled: o,
                    backTestEnabled: i
                }) : null));
            p.displayName = "IndicatorSettings";
            var m = i("5Pqn");
            const x = (0, o.lazy)((() => i.e(470).then(i.bind(i, "n6YK")))),
                f = ({
                    candlestick: e,
                    placeOrder: t,
                    wrapRef: i,
                    value: s
                }) => (0, o.useMemo)((() => e && t && s.visible ? (0, r.jsx)(o.Suspense, {
                    fallback: null,
                    children: (0, r.jsx)(m.A.Provider, {
                        value: s,
                        children: (0, r.jsx)(x, {
                            candlestickInstance: e,
                            wrapRef: i,
                            placeOrder: t
                        })
                    })
                }) : null), [t, s, i, e]);
            var y = i("VTc3"),
                b = i.n(y),
                v = i("QNgw"),
                C = i.n(v),
                w = i("vCb5"),
                A = i.n(w),
                S = i("OlNZ"),
                T = i.n(S),
                k = i("c6Y9"),
                L = i("Olbk"),
                _ = i("tgKj"),
                P = i("vjpm"),
                D = i("HV0L"),
                I = i("eQTq");
            const V = (0, o.memo)((e => (0, r.jsx)(_.A, { ...e,
                className: "items-center justify-center cursor-pointer text-iconNormal hover:text-PrimaryText",
                children: (0, r.jsx)(I.A, {
                    className: "h-[16px] w-[16px]",
                    size: 12
                })
            })));
            V.displayName = "ScaleSettingButton";
            var M = i("I4z7"),
                B = i("kcvK");
            const E = {
                    boxShadow: "var(--shadow-shadow2)"
                },
                j = ({
                    options: e,
                    onMouseOver: t,
                    onMouseLeave: i,
                    onClickSwitch: s
                }) => {
                    const {
                        getI18n: n
                    } = (0, c.P3)(), a = (0, o.useMemo)((() => n("auto-scale", {
                        defaultValue: "Auto Scale"
                    }) || ""), [n]), l = (0, o.useMemo)((() => n("auto-scale-description", {
                        defaultValue: "Automatically adjust the price scale to fit the data within the viewable space, or manually adjust the scale for optimal viewing by scrolling on the y-axis. Double-click on the price scale to reset to auto scale."
                    }) || ""), [n]), d = (0, o.useMemo)((() => e.map(((e, t) => (0, r.jsxs)(L.Ay, {
                        className: "grid grid-cols-2 items-center py-[8px]",
                        children: [(0, r.jsx)(L.Ay, {
                            className: "typography-body3 text-PrimaryText",
                            children: e.label
                        }), (0, r.jsx)(L.Ay, {
                            className: "flex justify-end",
                            children: (0, r.jsx)(M.A, {
                                checked: e.value,
                                size: "small",
                                onChange: t => s(t, e)
                            })
                        })]
                    }, t)))), [s, e]);
                    return (0, r.jsxs)(_.A, {
                        style: E,
                        className: "bg-CardBg rounded-[4px] p-[10px] min-w-[180px] flex-col",
                        onMouseLeave: i,
                        onMouseOver: t,
                        children: [(0, r.jsx)(B.A, {
                            useReactPopper: !0,
                            enablePortal: !0,
                            arrow: !0,
                            tooltips: l,
                            placement: "top",
                            children: (0, r.jsx)(L.Ay, {
                                className: "cursor-pointer typography-caption1 border-t-[0px] border-x-[0px] text-SecondaryText decoration-dashed mb-[4px] border-b-[1px] border-dotted border-SecondaryText",
                                children: a
                            })
                        }), (0, r.jsx)(_.A, {
                            className: "flex-col",
                            children: d
                        })]
                    })
                };
            var O = i("KzWS"),
                H = i("B8MU"),
                R = i("1tqE");
            const N = "min-w-[20px] min-h-[20px]",
                W = ({
                    iconType: e,
                    children: t,
                    onClose: i
                }) => {
                    const s = (0, o.useMemo)((() => "warning" === e ? (0, r.jsx)(O.A, {
                        className: `${N} text-PrimaryText`
                    }) : (0, r.jsx)(H.A, {
                        className: `${N} text-Success`
                    })), [e]);
                    return (0, r.jsxs)("div", {
                        className: "flex max-w-[345px] w-max rounded-[12px] p-[12px] bg-Input shadow gap-[4px]",
                        children: [s, (0, r.jsx)("div", {
                            className: "typography-body5 text-PrimaryText",
                            children: t
                        }), (0, r.jsx)(R.A, {
                            className: "min-w-[16px] min-h-[16px] text-IconNormal cursor-pointer",
                            onClick: i
                        })]
                    })
                },
                F = {
                    showMenu: !1,
                    setShowMenu: () => null,
                    options: [],
                    setOptions: () => null
                },
                z = (0, o.createContext)(F),
                X = (0, o.memo)((({
                    toasts: e,
                    onClickSwitch: t,
                    showMenu: i,
                    hideMenu: s,
                    onRemoveToast: n
                }) => {
                    const {
                        showMenu: a,
                        options: l
                    } = (0, o.useContext)(z);
                    return (0, r.jsx)(L.Ay, {
                        className: "absolute top-[-5px] translate-y-[-100%] right-[4px] z-[9999]",
                        children: (0, r.jsxs)(_.A, {
                            className: "flex-col items-end gap-[4px]",
                            children: [e.map((({
                                id: e,
                                text: t,
                                iconType: i
                            }, o) => (0, r.jsx)(W, {
                                onClose: () => n(e),
                                iconType: i,
                                children: t
                            }, o))), a ? (0, r.jsx)(j, {
                                options: l,
                                onMouseOver: i,
                                onMouseLeave: s,
                                onClickSwitch: t
                            }) : null]
                        })
                    })
                }));
            X.displayName = "ScaleSetting";
            const U = ({
                candlestick: e
            }) => {
                const [t, i] = (0, o.useState)([]), {
                    isMobile: s
                } = (0, P.Q)(), [n, a] = (0, o.useState)(0), [l, d] = (0, o.useState)(0), h = (() => {
                    const [e, t] = (0, o.useState)(F.showMenu), [i, r] = (0, o.useState)(F.options);
                    return (0, o.useMemo)((() => ({
                        showMenu: e,
                        setShowMenu: t,
                        options: i,
                        setOptions: r
                    })), [e, t, i, r])
                })(), {
                    setShowMenu: u,
                    setOptions: g
                } = h, p = (({
                    candlestick: e
                }) => {
                    const {
                        getI18n: t
                    } = (0, c.P3)(), i = (0, o.useMemo)((() => t("chart-text", {
                        defaultValue: "Chart"
                    }) || ""), [t]);
                    return (0, o.useCallback)((t => {
                        const {
                            title: r = ""
                        } = e ? .getIndicatorViewByName(t) || {};
                        return "" === r ? i : r
                    }), [e, i])
                })({
                    candlestick: e
                }), m = (({
                    candlestick: e
                }) => {
                    const {
                        getI18n: t
                    } = (0, c.P3)(), i = (0, o.useMemo)((() => t("manual-scale-text", {
                        defaultValue: "set to manual scale"
                    })), [t]), r = (0, o.useMemo)((() => t("auto-scale-text", {
                        defaultValue: "set to auto scale"
                    })), [t]);
                    return (0, o.useCallback)((({
                        name: t,
                        isAutoScale: o
                    }) => {
                        const s = (0, k.v4)(),
                            n = o ? r : i;
                        e ? .addNotification({
                            id: s,
                            text: `${t} ${n}`,
                            lifetime: 3e3
                        })
                    }), [r, e, i])
                })({
                    candlestick: e
                }), x = (0, o.useMemo)((() => ({
                    id: D._b.CANDLE,
                    label: p(""),
                    value: !0
                })), [p]);
                (0, o.useEffect)((() => {
                    const t = () => i(e ? .getNotifications() || []);
                    return e ? .on("notificationAdded", t), e ? .on("notificationRemoved", t), () => {
                        e ? .off("notificationAdded", t), e ? .off("notificationRemoved", t)
                    }
                }), [e]), (0, o.useEffect)((() => {
                    g((e => A()([x, ...e], "id")))
                }), [x, g]);
                const f = (0, o.useMemo)((() => T()(u, 1e3, {
                        leading: !0
                    })), [u]),
                    y = (0, o.useCallback)((() => f(!0)), [f]),
                    v = (0, o.useCallback)((() => f(!1)), [f]),
                    w = (0, o.useCallback)((t => e ? .removeNotification(t)), [e]),
                    S = (0, o.useCallback)((({
                        margin: {
                            right: t
                        }
                    }) => {
                        if (a(t), !e) return;
                        const {
                            xAxis: i
                        } = e ? .getConfig();
                        d(i.height)
                    }), [e]),
                    L = (0, o.useCallback)((({
                        panel: e
                    }) => {
                        const t = e.getPanelId(),
                            i = e.getAttr("autoScale");
                        m({
                            name: p(t),
                            isAutoScale: i
                        }), g((e => e.map((e => e.id === t ? { ...e,
                            value: !e.value
                        } : e))))
                    }), [p, m, g]),
                    I = (0, o.useCallback)((({
                        data: e
                    }) => {
                        g((t => {
                            const i = e.filter((({
                                    isMain: e
                                }) => !e)).map((({
                                    id: e
                                }) => ({
                                    id: e,
                                    label: p(e),
                                    value: !0
                                }))),
                                r = t.find((e => e.id === D._b.CANDLE)) || x,
                                o = b()(t, i, "id"),
                                s = C()(o, i, "id");
                            return [r, ...o, ...s]
                        }))
                    }), [x, p, g]),
                    M = (0, o.useCallback)(((t, {
                        id: i,
                        value: r
                    }) => {
                        e ? .setAutoScaleForPanel({
                            panelId: i,
                            value: !r
                        })
                    }), [e]),
                    B = (0, o.useCallback)((() => {
                        e ? .toggleAutoScaleForPanel({
                            panelId: D._b.CANDLE
                        })
                    }), [e]);
                (0, o.useEffect)((() => (e ? .on("marginChanged", S), e ? .on("autoScaleChanged", L), e ? .on("selectIndicatorsChange", I), () => {
                    e ? .off("marginChanged", S), e ? .off("autoScaleChanged", L), e ? .off("selectIndicatorsChange", I)
                })), [e, L, I, S]);
                return {
                    button: (0, o.useMemo)((() => s ? null : (0, r.jsx)(z.Provider, {
                        value: h,
                        children: (0, r.jsxs)(_.A, {
                            className: "absolute right-0 bottom-0",
                            children: [(0, r.jsx)(X, {
                                toasts: t,
                                onRemoveToast: w,
                                onClickSwitch: M,
                                showMenu: y,
                                hideMenu: v
                            }), (0, r.jsx)(V, {
                                style: {
                                    width: `${n}px`,
                                    height: `${l}px`
                                },
                                onMouseOver: y,
                                onMouseLeave: v,
                                onClick: B
                            })]
                        })
                    })), [l, n, h, v, s, B, M, w, y, t]),
                    contextValue: h
                }
            };
            var G = i("puuf"),
                $ = i("GxUX");
            const Y = (0, o.memo)((({
                candlestick: e
            }) => {
                const [t, i] = (0, o.useState)(0), [s, n] = (0, o.useState)(0), [a, l] = (0, o.useState)(!1), c = (0, o.useCallback)((() => {
                    if (!e) return;
                    const [, t] = e.currentTimeDomain, i = Date.now();
                    l(t < i)
                }), [e]), d = (0, o.useCallback)((() => {
                    const t = e ? .getAttr("interval");
                    t && e ? .goToTheLatestDate({
                        time: Date.now(),
                        cb: c
                    })
                }), [e, c]), h = (0, o.useCallback)((() => {
                    if (!e) return;
                    const t = e.getYAxisWidth(),
                        {
                            height: r
                        } = e.getAttr("xAxis");
                    i((e => t || e)), n(r)
                }), [e]);
                return (0, o.useEffect)((() => (e ? .on("marginChanged", h), e ? .on("chartLoaded", h), e ? .on("afterTimeShifted", c), e ? .on("doneDataFetching", c), e ? .on("doneGoDate", c), e ? .on("doneGoTimeRange", c), () => {
                    e ? .off("marginChanged", h), e ? .off("chartLoaded", h), e ? .off("afterTimeShifted", c), e ? .off("doneDataFetching", c), e ? .off("doneGoDate", c), e ? .off("doneGoTimeRange", c)
                })), [e, h, c]), (0, r.jsx)(G.A, {
                    className: "flex justify-center items-center absolute bg-[--color-CardBg] border border-solid border-[--color-InputLine] rounded-[--radii-s] cursor-pointer opacity-80",
                    style: {
                        right: `${t+10}px`,
                        bottom: `${5+s}px`,
                        width: "22px",
                        height: "22px",
                        display: a ? "flex" : "none"
                    },
                    onClick: d,
                    children: (0, r.jsx)($.A, {
                        className: "min-h-[16px] min-w-[16px] text-[--color-IconNormal]"
                    })
                })
            }));
            Y.displayName = "candlestickLatestPriceButton";
            var Z = i("jYFu");
            var K = i("lDj4");
            const q = (0, o.lazy)((() => i.e(8490).then(i.bind(i, "Gy/q")))),
                Q = {
                    rightClickPlaceOrder: {
                        visible: !1
                    },
                    timeTool: {
                        visible: !0
                    },
                    moreSettings: {
                        quickOrder: {
                            floatingWindow: {
                                visible: !1
                            },
                            plusButton: {
                                visible: !1
                            }
                        },
                        scale: {
                            percentageScale: {
                                visible: !1
                            },
                            logarithmicScale: {
                                visible: !1
                            },
                            invertedScale: {
                                visible: !1
                            }
                        },
                        priceLine: {
                            marketPriceLine: {
                                visible: !1
                            },
                            countdown: {
                                visible: !1
                            },
                            askBid: {
                                visible: !1
                            }
                        },
                        averagePrice: {
                            buy: {
                                visible: !1
                            },
                            sell: {
                                visible: !1
                            }
                        },
                        liquidationPrice: {
                            visible: !1
                        },
                        openOrders: {
                            visible: !1
                        },
                        positions: {
                            visible: !1
                        },
                        orderHistory: {
                            visible: !1
                        },
                        priceAlert: {
                            visible: !1
                        },
                        breakevenPrice: {
                            visible: !1
                        },
                        botPreview: {
                            visible: !1
                        },
                        spotlight: {
                            visible: !1
                        }
                    }
                },
                J = (0, o.memo)((({
                    enabled: e,
                    candlestick: t,
                    drawingDeleteConfirmationDialogValue: i,
                    menuSettings: s,
                    placeOrder: n
                }) => (0, o.useMemo)((() => e && t ? (0, r.jsx)(o.Suspense, {
                    fallback: null,
                    children: (0, r.jsx)(K.A.Provider, {
                        value: i,
                        children: (0, r.jsx)(q, {
                            candlestick: t,
                            placeOrder: n,
                            menuSettings: s
                        })
                    })
                }) : null), [e, t, i, n, s]))),
                ee = (0, o.lazy)((() => i.e(4590).then(i.bind(i, "w56J")))),
                te = ({
                    candlestick: e,
                    value: t
                }) => (0, o.useMemo)((() => e ? (0, r.jsx)(o.Suspense, {
                    fallback: null,
                    children: (0, r.jsx)(K.A.Provider, {
                        value: t,
                        children: (0, r.jsx)(ee, {
                            candlestick: e
                        })
                    })
                }) : null), [e, t]);
            var ie = i("sqaW"),
                re = i("geX7"),
                oe = i("/nqG");
            const se = "p-2 cursor-pointer rounded-md hover:bg-CardBg",
                ne = (0, o.memo)((({
                    visible: e,
                    isLock: t = !1,
                    setAttribute: i,
                    candlestick: s
                }) => {
                    const {
                        getI18n: n
                    } = (0, c.P3)(), a = (0, o.useMemo)((() => n(Z.Tr.ANNOTATION_LOCK, {
                        defaultValue: "Lock"
                    })), [n]), l = (0, o.useMemo)((() => n(Z.Tr.ANNOTATION_UNLOCK, {
                        defaultValue: "Unlock"
                    })), [n]), d = (0, o.useMemo)((() => t ? l : a), [t, l, a]), h = (0, o.useMemo)((() => t ? re.A : oe.A), [t]), u = (0, o.useCallback)((() => {
                        s.fire("clickAnnotationEditTool", {
                            data: Z.Pf.Lock
                        }), i({
                            isLock: !t
                        })
                    }), [s, i, t]);
                    return e ? (0, r.jsx)(B.A, {
                        tooltips: d,
                        placement: "top",
                        arrow: !0,
                        children: (0, r.jsx)("div", {
                            className: se,
                            children: (0, r.jsx)(h, {
                                className: "h-5 w-5 " + (t ? "text-PrimaryYellow" : ""),
                                onClick: u
                            })
                        })
                    }) : null
                }));
            var ae = i("gZrf");
            const le = (0, o.memo)((({
                visible: e,
                candlestick: t
            }) => {
                const {
                    getI18n: i
                } = (0, c.P3)(), s = (0, o.useMemo)((() => i(Z.Tr.ANNOTATION_DELETE, {
                    defaultValue: "Delete"
                })), [i]), n = (0, o.useCallback)((() => {
                    t.fire("clickAnnotationEditTool", {
                        data: Z.Pf.Delete
                    }), t.getEditor().getSelectAnnotation() ? .remove()
                }), [t]);
                return e ? (0, r.jsx)(B.A, {
                    tooltips: s,
                    placement: "top",
                    arrow: !0,
                    children: (0, r.jsx)("div", {
                        className: se,
                        children: (0, r.jsx)(ae.A, {
                            className: "h-5 w-5",
                            onClick: n
                        })
                    })
                }) : null
            }));
            var ce = i("fwc6");
            const de = (0, o.memo)((({
                visible: e,
                isTextEdit: t,
                setAttribute: i,
                candlestick: s
            }) => {
                const {
                    getI18n: n
                } = (0, c.P3)(), {
                    isMobile: a
                } = (0, P.Q)(), l = (0, o.useMemo)((() => n(Z.Tr.ANNOTATION_EDIT_TEXT, {
                    defaultValue: "Edit Text"
                })), [n]), d = (0, o.useCallback)((() => {
                    s.fire("clickAnnotationEditTool", {
                        data: Z.Pf.TextEdit
                    }), i({
                        isTextEdit: !t
                    })
                }), [s, i, t]);
                return e && !a ? (0, r.jsx)(B.A, {
                    tooltips: l,
                    placement: "top",
                    arrow: !0,
                    children: (0, r.jsx)("div", {
                        className: se,
                        children: (0, r.jsx)(ce.A, {
                            className: "h-5 w-5 " + (t ? "text-PrimaryYellow" : ""),
                            onClick: d
                        })
                    })
                }) : null
            }));
            var he = i("auK+");
            const ue = (0, o.memo)((({
                visible: e,
                isTextBold: t,
                setAttribute: i,
                candlestick: s
            }) => {
                const {
                    getI18n: n
                } = (0, c.P3)(), {
                    isMobile: a
                } = (0, P.Q)(), l = (0, o.useMemo)((() => n(Z.Tr.ANNOTATION_FONT_BOLD, {
                    defaultValue: "Bold"
                })), [n]), d = (0, o.useCallback)((() => {
                    s.fire("clickAnnotationEditTool", {
                        data: Z.Pf.TextBold
                    }), i({
                        isTextBold: !t
                    })
                }), [s, i, t]);
                return e && !a ? (0, r.jsx)(B.A, {
                    tooltips: l,
                    placement: "top",
                    arrow: !0,
                    children: (0, r.jsx)("div", {
                        className: se,
                        children: (0, r.jsx)(he.A, {
                            className: "h-5 w-5 " + (t ? "text-PrimaryYellow" : ""),
                            onClick: d
                        })
                    })
                }) : null
            }));
            var ge = i("pPGf"),
                pe = i("1C1L");
            const me = ({
                    tip: e = "",
                    children: t = [],
                    overlay: i = [],
                    once: o
                }) => (0, r.jsx)(pe.A, {
                    trigger: "click",
                    className: "h-full",
                    placement: "bottom",
                    overlay: i,
                    enablePortal: !0,
                    useReactPopper: !0,
                    enableClickBubble: !0,
                    once: o,
                    children: (0, r.jsx)(B.A, {
                        className: se,
                        tooltips: e,
                        placement: "top",
                        arrow: !0,
                        children: t
                    })
                }),
                xe = e => (0, r.jsx)("div", {
                    className: "flex flex-col py-2.5 bg-CardBg rounded-xl",
                    ...e
                });
            var fe = i("xqbL"),
                ye = i.n(fe);
            const be = ({
                    onClick: e,
                    isActive: t,
                    children: i
                }) => (0, r.jsx)("div", {
                    className: ye()("py-1 px-2.5 h-6 cursor-pointer flex items-center hover:bg-Input", {
                        "bg-Input": t
                    }),
                    onClick: e,
                    children: i
                }),
                ve = [10, 11, 12, 14, 16, 18, 20, 24, 28, 36],
                Ce = (0, o.memo)((({
                    visible: e,
                    textFontSize: t,
                    setAttribute: i,
                    candlestick: s
                }) => {
                    const {
                        getI18n: n
                    } = (0, c.P3)(), {
                        isMobile: a
                    } = (0, P.Q)(), l = (0, o.useMemo)((() => n(Z.Tr.ANNOTATION_FONT_SIZE, {
                        defaultValue: "Font Size"
                    })), [n]), d = (0, o.useCallback)((e => i({
                        textFontSize: e
                    })), [i]), h = (0, o.useCallback)((() => s.fire("clickAnnotationEditTool", {
                        data: Z.Pf.TextFontSize
                    })), [s]), u = (0, o.useMemo)((() => (0, r.jsx)(xe, {
                        onClick: h,
                        children: ve.map((e => (0, r.jsx)(be, {
                            isActive: t === e,
                            onClick: () => d(e),
                            children: (0, r.jsx)("div", {
                                className: "w-8 text-center",
                                children: e
                            })
                        }, e)))
                    })), [h, t, d]);
                    return e && !a ? (0, r.jsx)(me, {
                        tip: l,
                        overlay: u,
                        once: !0,
                        children: (0, r.jsxs)("div", {
                            className: "flex justify-center items-center",
                            children: [(0, r.jsx)("div", {
                                className: "icon t-subtitle2",
                                children: t
                            }), (0, r.jsx)(ge.A, {
                                className: "w-4 h-4 text-IconNormal"
                            })]
                        })
                    }) : null
                }));
            var we = i("j4cj"),
                Ae = i("dBLR");
            const Se = e => {
                    const {
                        r: t,
                        g: i,
                        b: r
                    } = (0, a.oZ)(e);
                    return `rgb(${t}, ${i}, ${r})`
                },
                Te = (0, o.memo)((({
                    visible: e,
                    color: t,
                    setAttribute: i,
                    candlestick: s
                }) => {
                    const {
                        getI18n: n
                    } = (0, c.P3)(), {
                        isMobile: a
                    } = (0, P.Q)(), l = (0, o.useMemo)((() => n(Z.Tr.ANNOTATION_BACKGROUND, {
                        defaultValue: "Background Color"
                    })), [n]), d = (0, o.useCallback)((() => s.fire("clickAnnotationEditTool", {
                        data: Z.Pf.Background
                    })), [s]), h = (0, o.useCallback)((e => i({
                        background: e
                    })), [i]);
                    return e && !a ? (0, r.jsx)(me, {
                        tip: l,
                        overlay: (0, r.jsx)(Ae.A, {
                            color: t,
                            onChange: h,
                            candlestickInstance: s
                        }),
                        children: (0, r.jsxs)("div", {
                            className: "flex flex-col",
                            onClick: d,
                            children: [(0, r.jsx)(we.A, {
                                className: "h-5 w-5"
                            }), (0, r.jsx)("div", {
                                className: "flex h-[3px] w-full",
                                style: {
                                    background: Se(t)
                                }
                            })]
                        })
                    }) : null
                }));
            var ke = i("/o0G");
            const Le = e => (0, r.jsx)(ke.A, {
                    width: "64",
                    height: "2",
                    viewBox: "0 0 18 2",
                    fill: "none",
                    ...e,
                    children: (0, r.jsx)("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M64 1.5H0V0.5H64V1.5Z",
                        fill: "currentColor"
                    })
                }),
                _e = e => (0, r.jsxs)(ke.A, {
                    width: "64",
                    height: "2",
                    viewBox: "0 0 18 2",
                    fill: "none",
                    ...e,
                    children: [(0, r.jsx)("g", {
                        clipPath: "url(#clip0_7101_186)",
                        children: (0, r.jsx)("path", {
                            fillRule: "evenodd",
                            clipRule: "evenodd",
                            d: "M0.5 1.5H0V0.5H0.5V1.5ZM2.5 1.5H1.5V0.5H2.5V1.5ZM4.5 1.5H3.5V0.5H4.5V1.5ZM6.5 1.5H5.5V0.5H6.5V1.5ZM8.5 1.5H7.5V0.5H8.5V1.5ZM10.5 1.5H9.5V0.5H10.5V1.5ZM12.5 1.5H11.5V0.5H12.5V1.5ZM14.5 1.5H13.5V0.5H14.5V1.5ZM16.5 1.5H15.5V0.5H16.5V1.5ZM18.5 1.5H17.5V0.5H18.5V1.5ZM20.5 1.5H19.5V0.5H20.5V1.5ZM22.5 1.5H21.5V0.5H22.5V1.5ZM24.5 1.5H23.5V0.5H24.5V1.5ZM26.5 1.5H25.5V0.5H26.5V1.5ZM28.5 1.5H27.5V0.5H28.5V1.5ZM30.5 1.5H29.5V0.5H30.5V1.5ZM32.5 1.5H31.5V0.5H32.5V1.5ZM34.5 1.5H33.5V0.5H34.5V1.5ZM36.5 1.5H35.5V0.5H36.5V1.5ZM38.5 1.5H37.5V0.5H38.5V1.5ZM40.5 1.5H39.5V0.5H40.5V1.5ZM42.5 1.5H41.5V0.5H42.5V1.5ZM44.5 1.5H43.5V0.5H44.5V1.5ZM46.5 1.5H45.5V0.5H46.5V1.5ZM48.5 1.5H47.5V0.5H48.5V1.5ZM50.5 1.5H49.5V0.5H50.5V1.5ZM52.5 1.5H51.5V0.5H52.5V1.5ZM54.5 1.5H53.5V0.5H54.5V1.5ZM56.5 1.5H55.5V0.5H56.5V1.5ZM58.5 1.5H57.5V0.5H58.5V1.5ZM60.5 1.5H59.5V0.5H60.5V1.5ZM62.5 1.5H61.5V0.5H62.5V1.5ZM64 1.5H63.5V0.5H64V1.5Z",
                            fill: "currentColor"
                        })
                    }), (0, r.jsx)("defs", {
                        children: (0, r.jsx)("clipPath", {
                            id: "clip0_7101_186",
                            children: (0, r.jsx)("rect", {
                                width: "64",
                                height: "1",
                                fill: "white",
                                transform: "translate(0 0.5)"
                            })
                        })
                    })]
                }),
                Pe = e => (0, r.jsxs)(ke.A, {
                    width: "64",
                    height: "2",
                    viewBox: "0 0 18 2",
                    fill: "none",
                    ...e,
                    children: [(0, r.jsx)("g", {
                        clipPath: "url(#clip0_7101_141)",
                        children: (0, r.jsx)("path", {
                            fillRule: "evenodd",
                            clipRule: "evenodd",
                            d: "M1.5 1.5H0V0.5H1.5V1.5ZM5.5 1.5H2.5V0.5H5.5V1.5ZM9.5 1.5H6.5V0.5H9.5V1.5ZM13.5 1.5H10.5V0.5H13.5V1.5ZM17.5 1.5H14.5V0.5H17.5V1.5ZM21.5 1.5H18.5V0.5H21.5V1.5ZM25.5 1.5H22.5V0.5H25.5V1.5ZM29.5 1.5H26.5V0.5H29.5V1.5ZM33.5 1.5H30.5V0.5H33.5V1.5ZM37.5 1.5H34.5V0.5H37.5V1.5ZM41.5 1.5H38.5V0.5H41.5V1.5ZM45.5 1.5H42.5V0.5H45.5V1.5ZM49.5 1.5H46.5V0.5H49.5V1.5ZM53.5 1.5H50.5V0.5H53.5V1.5ZM57.5 1.5H54.5V0.5H57.5V1.5ZM61.5 1.5H58.5V0.5H61.5V1.5ZM64 1.5H62.5V0.5H64V1.5Z",
                            fill: "currentColor"
                        })
                    }), (0, r.jsx)("defs", {
                        children: (0, r.jsx)("clipPath", {
                            id: "clip0_7101_141",
                            children: (0, r.jsx)("rect", {
                                width: "64",
                                height: "1",
                                fill: "white",
                                transform: "translate(0 0.5)"
                            })
                        })
                    })]
                }),
                De = e => (0, r.jsxs)(ke.A, {
                    width: "64",
                    height: "2",
                    viewBox: "0 0 18 2",
                    fill: "none",
                    ...e,
                    children: [(0, r.jsx)("g", {
                        clipPath: "url(#clip0_7101_174)",
                        children: (0, r.jsx)("path", {
                            fillRule: "evenodd",
                            clipRule: "evenodd",
                            d: "M1.45455 1.5H0V0.5H1.45455V1.5ZM7.27273 1.5H4.36364V0.5H7.27273V1.5ZM13.0909 1.5H10.1818V0.5H13.0909V1.5ZM18.9091 1.5H16V0.5H18.9091V1.5ZM24.7273 1.5H21.8182V0.5H24.7273V1.5ZM30.5455 1.5H27.6364V0.5H30.5455V1.5ZM36.3636 1.5H33.4546V0.5H36.3636V1.5ZM42.1818 1.5H39.2727V0.5H42.1818V1.5ZM48 1.5H45.0909V0.5H48V1.5ZM53.8182 1.5H50.9091V0.5H53.8182V1.5ZM59.6364 1.5H56.7273V0.5H59.6364V1.5ZM64 1.5H62.5455V0.5H64V1.5Z",
                            fill: "currentColor"
                        })
                    }), (0, r.jsx)("defs", {
                        children: (0, r.jsx)("clipPath", {
                            id: "clip0_7101_174",
                            children: (0, r.jsx)("rect", {
                                width: "64",
                                height: "1",
                                fill: "white",
                                transform: "translate(0 0.5)"
                            })
                        })
                    })]
                }),
                Ie = e => {
                    switch (e) {
                        case D.Sc.DOTTED:
                            return _e;
                        case D.Sc.DASHED:
                            return De;
                        case D.Sc.DASHED_2:
                            return Pe;
                        case D.Sc.SOLID:
                        default:
                            return Le
                    }
                },
                Ve = ({
                    isActive: e,
                    onClick: t,
                    type: i
                }) => {
                    const s = (0, o.useMemo)((() => Ie(i)), [i]);
                    return (0, r.jsx)(be, {
                        isActive: e,
                        onClick: t,
                        children: (0, r.jsx)(s, {
                            width: "44px",
                            height: "2px",
                            viewBox: "0 0 64 2"
                        })
                    })
                },
                Me = ({
                    value: e,
                    options: t
                }) => {
                    const i = (0, o.useMemo)((() => t.map((({
                        value: t,
                        onClick: i
                    }) => (0, r.jsx)(Ve, {
                        onClick: i,
                        isActive: t === e,
                        type: t
                    }, t)))), [e, t]);
                    return (0, r.jsx)(xe, {
                        children: i
                    })
                },
                Be = [D.Sc.SOLID, D.Sc.DOTTED, D.Sc.DASHED_2, D.Sc.DASHED],
                Ee = (0, o.memo)((({
                    visible: e,
                    value: t,
                    setAttribute: i,
                    candlestick: s
                }) => {
                    const {
                        getI18n: n
                    } = (0, c.P3)(), {
                        isMobile: a
                    } = (0, P.Q)(), l = (0, o.useMemo)((() => n(Z.Tr.ANNOTATION_LINE_STYLE, {
                        defaultValue: "Style"
                    })), [n]), d = (0, o.useCallback)((e => i({
                        lineStyle: e
                    })), [i]), h = (0, o.useMemo)((() => Be.map((e => ({
                        value: e,
                        onClick: () => d(e)
                    })))), [d]), u = (0, o.useMemo)((() => (0, r.jsx)(Me, {
                        value: t,
                        options: h
                    })), [t, h]), g = (0, o.useMemo)((() => Ie(t)), [t]), p = (0, o.useCallback)((() => s.fire("clickAnnotationEditTool", {
                        data: Z.Pf.LineStyle
                    })), [s]);
                    return e && !a ? (0, r.jsx)(me, {
                        tip: l,
                        overlay: u,
                        once: !0,
                        children: (0, r.jsx)("div", {
                            className: "h-5 flex items-center",
                            onClick: p,
                            children: (0, r.jsx)(g, {
                                width: "20px",
                                height: "2px",
                                className: "icon"
                            })
                        })
                    }) : null
                })),
                je = ({
                    onClick: e,
                    isActive: t,
                    thickness: i
                }) => (0, r.jsx)(be, {
                    isActive: t,
                    onClick: e,
                    children: (0, r.jsx)("div", {
                        className: "bg-SecondaryText w-11",
                        style: {
                            height: `${i}px`
                        }
                    })
                }),
                Oe = ({
                    value: e,
                    options: t
                }) => {
                    const i = (0, o.useMemo)((() => t.map((({
                        value: t,
                        onClick: i
                    }) => (0, r.jsx)(je, {
                        onClick: i,
                        isActive: t === e,
                        thickness: t
                    }, t)))), [t, e]);
                    return (0, r.jsx)(xe, {
                        children: i
                    })
                },
                He = [1, 2, 3, 4],
                Re = (0, o.memo)((({
                    visible: e,
                    value: t,
                    setAttribute: i,
                    candlestick: s
                }) => {
                    const {
                        getI18n: n
                    } = (0, c.P3)(), {
                        isMobile: a
                    } = (0, P.Q)(), l = (0, o.useMemo)((() => n(Z.Tr.ANNOTATION_LINE_WIDTH, {
                        defaultValue: "Width"
                    })), [n]), d = (0, o.useCallback)((e => i({
                        lineWidth: e
                    })), [i]), h = (0, o.useMemo)((() => He.map((e => ({
                        value: e,
                        onClick: () => d(e)
                    })))), [d]), u = (0, o.useMemo)((() => (0, r.jsx)(Oe, {
                        value: t,
                        options: h
                    })), [t, h]), g = (0, o.useCallback)((() => s.fire("clickAnnotationEditTool", {
                        data: Z.Pf.LineWidth
                    })), [s]);
                    return e && !a ? (0, r.jsx)(me, {
                        tip: l,
                        overlay: u,
                        once: !0,
                        children: (0, r.jsxs)("div", {
                            className: "h-full flex justify-center items-center",
                            onClick: g,
                            children: [(0, r.jsx)("div", {
                                className: "mr-1 w-5 bg-PrimaryText",
                                style: {
                                    height: `${t}px`
                                }
                            }), (0, r.jsxs)("div", {
                                className: "t-body3",
                                children: [t, "px"]
                            })]
                        })
                    }) : null
                })),
                Ne = (0, o.memo)((({
                    visible: e,
                    color: t,
                    setAttribute: i,
                    candlestick: s
                }) => {
                    const {
                        getI18n: n
                    } = (0, c.P3)(), {
                        isMobile: a
                    } = (0, P.Q)(), l = (0, o.useMemo)((() => n(Z.Tr.ANNOTATION_COLOR, {
                        defaultValue: "Color"
                    })), [n]), d = (0, o.useCallback)((() => s.fire("clickAnnotationEditTool", {
                        data: Z.Pf.Color
                    })), [s]), h = (0, o.useCallback)((e => i({
                        color: e
                    })), [i]);
                    return e && !a ? (0, r.jsx)(me, {
                        tip: l,
                        overlay: (0, r.jsx)(Ae.A, {
                            color: t,
                            onChange: h,
                            candlestickInstance: s
                        }),
                        children: (0, r.jsxs)("div", {
                            className: "flex flex-col",
                            onClick: d,
                            children: [(0, r.jsx)(ce.A, {
                                className: "h-5 w-5"
                            }), (0, r.jsx)("div", {
                                className: "flex h-[3px] w-full",
                                style: {
                                    background: Se(t)
                                }
                            })]
                        })
                    }) : null
                }));
            var We = i("INSH");
            const Fe = (0, o.memo)((({
                visible: e,
                color: t,
                setAttribute: i,
                candlestick: s
            }) => {
                const {
                    getI18n: n
                } = (0, c.P3)(), {
                    isMobile: a
                } = (0, P.Q)(), l = (0, o.useMemo)((() => n(Z.Tr.ANNOTATION_COLOR, {
                    defaultValue: "Color"
                })), [n]), d = (0, o.useCallback)((() => s.fire("clickAnnotationEditTool", {
                    data: Z.Pf.TextColor
                })), [s]), h = (0, o.useCallback)((e => i({
                    textColor: e
                })), [i]);
                return e && !a ? (0, r.jsx)(me, {
                    tip: l,
                    overlay: (0, r.jsx)(Ae.A, {
                        color: t,
                        onChange: h,
                        candlestickInstance: s
                    }),
                    children: (0, r.jsxs)("div", {
                        className: "flex flex-col",
                        onClick: d,
                        children: [(0, r.jsx)(We.A, {
                            className: "h-5 w-5"
                        }), (0, r.jsx)("div", {
                            className: "flex h-[3px] w-full",
                            style: {
                                background: Se(t)
                            }
                        })]
                    })
                }) : null
            }));
            var ze = i("8zK1");
            const Xe = (0, o.memo)((({
                updateValue: e,
                candlestick: t
            }) => {
                const {
                    getI18n: i
                } = (0, c.P3)(), {
                    isMobile: s
                } = (0, P.Q)(), n = (0, o.useMemo)((() => i(Z.Tr.ANNOTATION_DEFAULT, {
                    defaultValue: "Back to Default"
                })), [i]), a = (0, o.useCallback)((() => {
                    const i = t.getEditor().getSelectAnnotation();
                    if (!i) return;
                    t.fire("clickAnnotationEditTool", {
                        data: Z.Pf.BackToDefault
                    });
                    const r = i.getDefaultStyle();
                    i.applyAttributes(r), e(i.getEditAttribute());
                    const o = i.getCacheStyleKey();
                    ie.A.updateCacheStyle(o, r)
                }), [t, e]);
                return s ? null : (0, r.jsx)(B.A, {
                    tooltips: n,
                    placement: "top",
                    arrow: !0,
                    children: (0, r.jsx)("div", {
                        className: se,
                        children: (0, r.jsx)(ze.A, {
                            className: "h-5 w-5",
                            onClick: a
                        })
                    })
                })
            }));
            var Ue = i("jd1c"),
                Ge = i("HzRw"),
                $e = i("xAfo"),
                Ye = i("bmS5"),
                Ze = i.n(Ye),
                Ke = i("IYdN");
            const qe = (0, o.memo)((({
                    initialPosition: e,
                    onSavePosition: t = () => null,
                    wrapperElement: i,
                    getToolbarElement: s
                }) => {
                    const n = (0, o.useRef)(e),
                        l = (0, o.useRef)(!0),
                        c = (0, o.useMemo)((() => T()(t, 1e3)), [t]),
                        d = (0, o.useCallback)((e => {
                            const t = s();
                            if (!t) return;
                            const r = i.getBoundingClientRect(),
                                o = t.getBoundingClientRect(),
                                [l, d] = [r.width - o.width, r.height - o.height],
                                [h, u] = [Ze()(e.x, 0, l), Ze()(e.y, 0, d)];
                            n.current = {
                                x: h,
                                y: u
                            }, (0, a.EM)(t, {
                                transform: `translate(${n.current.x}px, ${n.current.y}px)`
                            }), c(n.current)
                        }), [c, s, i]),
                        h = (0, o.useCallback)((e => {
                            const t = e => {
                                    const [t, i] = [n.current.x + e.movementX, n.current.y + e.movementY];
                                    d({
                                        x: t,
                                        y: i
                                    })
                                },
                                i = e => {
                                    document.removeEventListener("mousemove", t), document.removeEventListener("mouseup", i), e.stopPropagation()
                                };
                            return document.addEventListener("mousemove", t), document.addEventListener("mouseup", i), e.stopPropagation(), () => {
                                document.removeEventListener("mousemove", t), document.removeEventListener("mouseup", i)
                            }
                        }), [d]);
                    return (0, Ge.A)((() => {
                        l.current = !1
                    })), (0, $e.A)((() => {
                        const e = new Ue.default((() => {
                            l.current && d(n.current)
                        }));
                        return e.observe(i), () => e.unobserve(i)
                    })), (0, r.jsx)("div", {
                        className: `${se} !px-1`,
                        onMouseDown: h,
                        children: (0, r.jsx)(Ke.A, {
                            className: "h-5 w-5"
                        })
                    })
                })),
                Qe = ({
                    candlestick: e,
                    wrapperElement: t,
                    initialPosition: i,
                    onSavePosition: s
                }) => {
                    const [{
                        showColor: n,
                        color: a,
                        showWidth: l,
                        lineWidth: c,
                        showStyle: d,
                        lineStyle: h,
                        showBg: u,
                        background: g,
                        showTextColor: p,
                        textColor: m,
                        showFontSize: x,
                        textFontSize: f,
                        showTextBold: y,
                        isTextBold: b,
                        showTextEdit: v,
                        isTextEdit: C,
                        isLock: w,
                        showLock: A,
                        showDelete: S
                    }, T] = (0, o.useState)({
                        showColor: !0,
                        color: "",
                        showWidth: !0,
                        lineWidth: 1,
                        showStyle: !0,
                        lineStyle: D.Sc.SOLID,
                        showBg: !1,
                        background: "",
                        showTextColor: !1,
                        textColor: "",
                        showFontSize: !1,
                        textFontSize: 10,
                        showTextBold: !1,
                        isTextBold: !1,
                        showTextEdit: !1,
                        isTextEdit: !1,
                        isLock: !1,
                        showLock: !1,
                        showDelete: !1
                    }), k = (0, o.useCallback)(((e = {}) => T((t => ({ ...t,
                        ...e
                    })))), [T]), L = (0, o.useRef)(null), [_, P] = (0, o.useState)(!1), I = (0, o.useCallback)((t => {
                        k(t);
                        const i = e.getEditor().getSelectAnnotation();
                        if (!i) return;
                        i.applyAttributes(t);
                        const r = i ? .getCacheStyleKey();
                        ie.A.updateCacheStyle(r, t)
                    }), [k, e]);
                    (0, o.useEffect)((() => {
                        const t = ({
                                data: e
                            }) => {
                                const t = e ? .getEditAttribute();
                                k(t), P(!!t)
                            },
                            i = () => P(!1),
                            r = e.getEditor().getSelectAnnotation();
                        return r && t({
                            data: r
                        }), e.on("selectAnnotation", t), e.on("unSelectAnnotation", i), () => {
                            e.getEditor().clearSelectAnnotation(), e.off("selectAnnotation", t), e.off("unSelectAnnotation", i)
                        }
                    }), [e, k]);
                    const V = (0, o.useCallback)((() => L.current), [L]);
                    return _ ? (0, r.jsxs)("div", {
                        ref: L,
                        className: "absolute flex bg-Line rounded-md h-10 top-0 left-0 z-[100] select-none p-0.5",
                        children: [(0, r.jsx)(qe, {
                            wrapperElement: t,
                            getToolbarElement: V,
                            initialPosition: i,
                            onSavePosition: s
                        }), (0, r.jsx)(Xe, {
                            updateValue: k,
                            candlestick: e
                        }), (0, r.jsx)(Fe, {
                            visible: p,
                            color: m,
                            setAttribute: I,
                            candlestick: e
                        }), (0, r.jsx)(Ne, {
                            visible: n,
                            color: a,
                            setAttribute: I,
                            candlestick: e
                        }), (0, r.jsx)(Te, {
                            visible: u,
                            color: g,
                            setAttribute: I,
                            candlestick: e
                        }), (0, r.jsx)(Re, {
                            visible: l,
                            value: c,
                            setAttribute: I,
                            candlestick: e
                        }), (0, r.jsx)(Ee, {
                            visible: d,
                            value: h,
                            setAttribute: I,
                            candlestick: e
                        }), (0, r.jsx)(Ce, {
                            visible: x,
                            textFontSize: f,
                            setAttribute: I,
                            candlestick: e
                        }), (0, r.jsx)(ue, {
                            visible: y,
                            isTextBold: b,
                            setAttribute: I,
                            candlestick: e
                        }), (0, r.jsx)(de, {
                            visible: v,
                            isTextEdit: C,
                            setAttribute: I,
                            candlestick: e
                        }), (0, r.jsx)(ne, {
                            visible: A,
                            isLock: w,
                            setAttribute: I,
                            candlestick: e
                        }), (0, r.jsx)(le, {
                            visible: S,
                            candlestick: e
                        })]
                    }) : null
                },
                Je = (0, o.memo)((({
                    wrapperElement: e,
                    candlestick: t
                }) => {
                    const [i, s] = (0, o.useState)(), n = (0, o.useCallback)((e => {
                        s({
                            x: e.x,
                            y: e.y
                        }), t.settingStore.setValue("@annotationTool.position.x", e.x), t.settingStore.setValue("@annotationTool.position.y", e.y)
                    }), [t]);
                    return (0, o.useEffect)((() => {
                        const e = t.settingStore,
                            i = ({
                                type: t
                            }) => {
                                if ("load" !== t) return;
                                const i = e.getValue("@annotationTool.position") || {
                                    x: 0,
                                    y: 0
                                };
                                s(i)
                            };
                        return e.subscribeValueChanged(i), () => e.unsubscribeValueChanged(i)
                    }), [t]), i ? (0, r.jsx)(Qe, {
                        wrapperElement: e,
                        candlestick: t,
                        initialPosition: i,
                        onSavePosition: n
                    }) : null
                })),
                et = ({
                    enabled: e,
                    candlestick: t,
                    wrapperElement: i
                }) => i && t && e ? (0, r.jsx)(o.Suspense, {
                    fallback: null,
                    children: (0, r.jsx)(Je, {
                        wrapperElement: i,
                        candlestick: t
                    })
                }) : null;
            var tt = i("oOO9");
            const it = (0, o.lazy)((() => i.e(8253).then(i.bind(i, "iweb")))),
                rt = ({
                    wrapRef: e,
                    theme: t,
                    chartType: i,
                    informationMines: s,
                    candlestick: n
                }) => {
                    const a = (0, tt.h)();
                    return n && s ? (0, r.jsx)(o.Suspense, {
                        fallback: null,
                        children: (0, r.jsx)(tt.A.Provider, {
                            value: a,
                            children: (0, r.jsx)(it, {
                                wrapRef: e,
                                chartType: i,
                                candlestickInstance: n,
                                informationMines: s,
                                theme: t
                            })
                        })
                    }) : null
                };
            var ot = i("f9BG"),
                st = i("sMAH");
            const nt = ({
                    candlestick: e
                }) => {
                    const {
                        colors: t,
                        mode: i
                    } = (0, st.w)();
                    return (0, o.useEffect)((() => {
                        if (!e) return;
                        const r = (({
                            isDark: e,
                            colors: t
                        }) => {
                            const {
                                BasicBg: i,
                                PrimaryText: r,
                                PrimaryYellow: o,
                                RedGreenBgText: s,
                                SecondaryText: n,
                                TertiaryText: a,
                                InputLine: l,
                                Line: c,
                                Buy: d,
                                Sell: h
                            } = t, u = ot.A.valid(c) ? (0, ot.A)(c).alpha(.4).css("rgba") : c;
                            return { ...e ? Z.MT : Z.On,
                                background: i,
                                "icon.plus": r,
                                "area.stroke": o,
                                "area.fill1": o,
                                "candle.upBarColor": d,
                                "candle.downBarColor": h,
                                "volume.upBarColor": d,
                                "volume.downBarColor": h,
                                "volume.upTextColor": r,
                                "volume.downTextColor": r,
                                "cross.upLabelBgColor": d,
                                "cross.upLabelBorderColor": d,
                                "cross.downLabelBgColor": h,
                                "cross.downLabelBorderColor": h,
                                "cross.labelTextColor": s,
                                "cross.defaultLabelTextColor": r,
                                "cross.defaultLabelBgColor": l,
                                "cross.defaultLabelBorderColor": l,
                                "cross.borderLineColor": n,
                                "frame.borderLineColor": c,
                                "axis.tickLineColor": n,
                                "axis.tickTextColor": n,
                                "vertGridLine.color": u,
                                "horzGridLine.color": u,
                                "countdown.upTextColor": s,
                                "countdown.upBgColor": d,
                                "countdown.upBorderColor": d,
                                "countdown.downTextColor": s,
                                "countdown.downBgColor": h,
                                "countdown.downBorderColor": h,
                                "LSratio.outline": d,
                                "LSratio.area": d,
                                "oi.bar": d,
                                "BS.buy": d,
                                "BS.sell": h,
                                "text.minMaxPrice": r,
                                "text.unavailable": a,
                                "indicator.1": o,
                                "indicator.2": "#EB40B5",
                                "indicator.3": e ? "#B385F8" : "#71269C",
                                "indicator.4": "#D63864",
                                "indicator.5": "#50AE55",
                                "indicator.6": "#F37F20",
                                "indicator.7": "#AF6CC3",
                                "indicator.8": "#5FC3D7",
                                "indicator.9": e ? "#2961FF" : "#3860F6",
                                "indicator.10": "#43DB5D"
                            }
                        })({
                            isDark: "dark" === i,
                            colors: t
                        });
                        e.indicatorStore.changeColorTable(r), e.settingStore.changeColorTable(r), e.setColorTable(r), e.setAttr("theme", i), e.updateBasePanel(), e.update();
                        const o = r.background,
                            s = r["text.defaultColor"];
                        ie.A.dragVertex.setAttr("fillStyle", o), ie.A.dragRect.setAttr("fillStyle", o), ie.A.text.setAttr("fillStyle", s)
                    }), [t, e, i]), {
                        theme: i
                    }
                },
                at = ({
                    candlestick: e
                }) => {
                    const [t, i] = (0, o.useState)("");
                    return (0, o.useEffect)((() => {
                        if (!e) return;
                        const t = e.settingStore,
                            r = () => {
                                const e = t.getValue("@background.color.value");
                                i(e), (e => {
                                    const t = document.getElementsByClassName("chart-title-row"),
                                        i = (0, ot.A)(e).alpha(.5).css("rgba");
                                    for (let r = 0; r < t.length; r++) t[r].style.background = i
                                })(e)
                            },
                            o = ({
                                key: e,
                                type: t
                            }) => {
                                if ("load" !== t) switch (e) {
                                    case "@background":
                                    case "@background.color":
                                    case "":
                                        r()
                                } else r()
                            };
                        return t.subscribeValueChanged(o), () => t.unsubscribeValueChanged(o)
                    }), [e, i]), t
                };
            var lt = i("lvWP"),
                ct = i("gZX/"),
                dt = i("POs2"),
                ht = i("NGm6"),
                ut = i("rx99"),
                gt = i("J+v0"),
                pt = i.n(gt),
                mt = i("RiDz"),
                xt = i.n(mt),
                ft = i("U/0h"),
                yt = i.n(ft),
                bt = i("Hbr2"),
                vt = i.n(bt),
                Ct = i("Ak8o"),
                wt = i.n(Ct),
                At = i("3da+"),
                St = i.n(At),
                Tt = i("p6MJ"),
                kt = i.n(Tt),
                Lt = i("P2OS");
            pt().extend(yt()), pt().extend(xt()), pt().extend(wt()), pt().extend(vt()), pt().extend(St()), pt().extend(kt());
            const _t = {
                    width: "100%",
                    ".rc-picker .rc-picker-input > input": {
                        cursor: "not-allowed",
                        color: "t.disabled",
                        borderColor: "line"
                    },
                    "> .bn-picker-input-suffix > svg": {
                        color: "t.disabled"
                    }
                },
                Pt = {
                    width: "100%",
                    ".rc-picker .rc-picker-input > input": {
                        cursor: "pointer"
                    }
                },
                Dt = ({
                    candlestick: e,
                    visible: t,
                    dropdownVisible: i,
                    onClose: s,
                    onConfirm: n
                }) => {
                    const {
                        getI18n: a
                    } = (0, c.P3)(), l = (0, o.useCallback)(((e, t) => a(e, {
                        defaultValue: t
                    })), [a]), [d, h] = (0, o.useState)(!1), u = (0, o.useMemo)((() => d ? _t : Pt), [d]), g = (0, o.useMemo)((() => l("go-to-date-querying", "Querying...") || ""), [l]), p = (0, o.useMemo)((() => pt()()), []), m = (0, o.useCallback)((e => e.valueOf() > Date.now()), []);
                    (0, o.useEffect)((() => {
                        const t = () => h(!1);
                        return e.on("onDateTooltip", t), () => e.off("onDateTooltip", t)
                    }), [e]);
                    const x = (0, o.useCallback)((t => {
                        const i = t ? .valueOf() || 0;
                        h(!0);
                        const r = e.getAttr("interval"),
                            o = i.valueOf(),
                            s = "1d" === r ? (0, Lt.UE)(o) : o;
                        e.goDate({
                            time: s
                        }), n ? .()
                    }), [e, n]);
                    return (0, r.jsx)(lt.A, {
                        visible: t,
                        sx: {
                            width: "552px",
                            borderRadius: "6px",
                            overflow: "hidden"
                        },
                        children: (0, r.jsxs)(ct.A, {
                            sx: {
                                bg: "modalBg",
                                height: "100%",
                                p: "md",
                                flexDirection: "column"
                            },
                            children: [(0, r.jsxs)(ct.A, {
                                sx: {
                                    justifyContent: "space-between",
                                    mb: "22px"
                                },
                                children: [(0, r.jsx)(dt.A, {
                                    sx: {
                                        color: "t.primary",
                                        fontSize: "20px"
                                    },
                                    children: l("contextMenu-goDate", "Go to date")
                                }), (0, r.jsx)(ht.A, {
                                    size: 16,
                                    color: "t.third",
                                    sx: {
                                        cursor: "pointer",
                                        ":hover": {
                                            color: "t.primary"
                                        }
                                    },
                                    onClick: s
                                })]
                            }), (0, r.jsx)(dt.A, {
                                sx: {
                                    color: "t.yellow",
                                    fontSize: "12px",
                                    lineHeight: "16px",
                                    mb: "6px",
                                    whiteSpace: "no-wrap"
                                },
                                children: d ? g : (0, r.jsx)("span", {
                                    children: "\xa0"
                                })
                            }), (0, r.jsx)(ut.A, {
                                dropdownAlign: {
                                    overflow: {
                                        alwaysByViewport: !1
                                    }
                                },
                                showTime: !0,
                                mVisible: !0,
                                allowClear: !1,
                                containerSx: u,
                                onChange: x,
                                open: i,
                                defaultValue: p,
                                disabled: !i,
                                disabledDate: m,
                                popupStyle: {
                                    zIndex: 9999
                                }
                            })]
                        })
                    })
                },
                It = (0, o.lazy)((() => Promise.all([i.e(995), i.e(8534), i.e(3441)]).then(i.bind(i, "fZ1k")))),
                Vt = ({
                    candlestick: e
                }) => {
                    const {
                        isMobile: t
                    } = (0, P.Q)(), [i, s] = (0, o.useState)(!1), n = (0, o.useCallback)((() => s(!1)), []);
                    return (0, o.useEffect)((() => {
                        if (!e) return;
                        const t = () => s(!0);
                        return e.on("showTimeTool", t), () => e.off("showTimeTool", t)
                    }), [e]), (0, r.jsxs)(o.Suspense, {
                        fallback: null,
                        children: [e && i && !t ? (0, r.jsx)(It, {
                            candlestick: e,
                            visible: i,
                            onClose: n
                        }) : null, e && t ? (0, r.jsx)(Dt, {
                            candlestick: e,
                            visible: i,
                            dropdownVisible: !0,
                            onClose: n,
                            onConfirm: n
                        }) : null]
                    })
                };
            var Mt = i("SYR8");
            const Bt = (0, o.lazy)((() => i.e(9517).then(i.bind(i, "ZNwE")))),
                Et = ({
                    wrapRef: e,
                    candlestick: t
                }) => {
                    const {
                        getI18n: i
                    } = (0, Mt.P)(), s = (0, o.useMemo)((() => i("last-available-bar", {
                        defaultValue: "Earliest Data"
                    })), [i]), [n, a] = (0, o.useState)(!1), [l, c] = (0, o.useState)(""), [d, h] = (0, o.useState)({
                        x: 0,
                        y: 0
                    }), u = (0, o.useCallback)((() => a(!1)), []);
                    return (0, o.useEffect)((() => {
                        if (!t) return;
                        const e = ({
                            item: e,
                            isLast: i
                        }) => {
                            if (!t) return;
                            if (!e) return;
                            const r = i ? s : t.getDateText(e.time),
                                o = t.getPositionOfCandlestickItem(e);
                            c(r), h(o), a(!0)
                        };
                        return t.on("onDateTooltip", e), () => t.off("onDateTooltip", e)
                    }), [t, s]), (0, r.jsx)(o.Suspense, {
                        fallback: null,
                        children: e && t && n ? (0, r.jsx)(Bt, {
                            wrapRef: e,
                            text: l,
                            visible: n,
                            position: d,
                            onClickAway: u
                        }) : null
                    })
                },
                jt = (0, o.lazy)((() => Promise.resolve().then(i.bind(i, "juww")))),
                Ot = ({
                    candlestick: e,
                    enabled: t
                }) => {
                    const {
                        isMobile: i
                    } = (0, P.Q)();
                    return e && t && !i ? (0, r.jsx)(o.Suspense, {
                        fallback: null,
                        children: (0, r.jsx)(jt, {
                            candlestickInstance: e
                        })
                    }) : null
                },
                Ht = (0, o.lazy)((() => i.e(8448).then(i.bind(i, "sULg")))),
                Rt = ({
                    candlestick: e,
                    onClick: t,
                    isExpanded: i
                }) => {
                    const {
                        isMobile: s
                    } = (0, P.Q)();
                    return (0, r.jsx)(o.Suspense, {
                        fallback: null,
                        children: e && t && s ? (0, r.jsx)(Ht, {
                            candlestick: e,
                            onClick: t,
                            isExpanded: i
                        }) : null
                    })
                },
                Nt = (0, o.lazy)((() => i.e(2526).then(i.bind(i, "FVS0")))),
                Wt = ["candlestick", "grid", "theme", "isHiddenLogo", "isVolumeDisabled"],
                Ft = (0, o.forwardRef)(((e, t) => {
                    const {
                        candlestick: i,
                        grid: s,
                        isShowDrawPanel: h = !1,
                        isShowAnnotationPanel: u = !0,
                        isShowCustomIndicator: g = !1,
                        isShowBacktest: x = !1,
                        isHiddenLogo: y = !1,
                        isVolumeDisabled: b = !1,
                        sensorsManager: v,
                        forceUpdate: C = () => null,
                        onModalClose: w,
                        onSettingChanged: A = () => null,
                        onSettingReset: S = () => null,
                        enableContextMenu: T = !0,
                        placeOrder: k,
                        informationMines: L,
                        contextMenu: _ = Q,
                        onClickExpand: P,
                        isExpanded: D
                    } = e, [I, V] = (0, o.useState)(!1), [M, B] = (0, o.useState)(), E = (0, m.h)(), j = (0, K.h)(), O = (0, o.useRef)(null), H = (0, o.useRef)(), R = (0, o.useRef)(v);
                    R.current = v;
                    const N = U({
                            candlestick: H.current
                        }),
                        {
                            theme: W
                        } = nt({
                            candlestick: H.current
                        }),
                        F = at({
                            candlestick: H.current
                        });
                    (0, o.useImperativeHandle)(t, (() => ({
                        getCandlestick: () => H.current
                    })));
                    const z = (0, o.useMemo)((() => ({
                            candlestick: i,
                            grid: s,
                            theme: W.toLowerCase(),
                            isHiddenLogo: y,
                            isVolumeDisabled: b
                        })), [i, W, s, y, b]),
                        X = (0, o.useMemo)((() => {
                            const e = {};
                            return Wt.forEach((t => {
                                void 0 !== z[t] && (e[t] = z[t])
                            })), e
                        }), [z]);
                    (0, c.tS)((() => {
                        if (H.current) return;
                        H.current = new l.A({
                            container: O.current,
                            ...X
                        });
                        const e = H.current;
                        e.on("showSettingDialog", (() => {
                            V(!0)
                        })), e.on("clickPlaceOrder", (({
                            price: e,
                            formattedPrice: t,
                            mousePosition: i
                        }) => {
                            E.setVisible(!0), E.setPrice(e), E.setFormattedPrice(t), E.setMousePosition(i)
                        })), e.on("dispatchErrorData", (({
                            data: e
                        }) => {
                            R.current ? .logOnErrorData ? .(e)
                        }))
                    }), [X]), (0, o.useEffect)((() => {
                        H.current && ((e, t) => {
                            const i = e.getConfig(),
                                r = {},
                                o = {};
                            let s = !1;
                            Object.keys(t || {}).forEach((e => {
                                if (Wt.includes(e) && !n()(t[e], i[e])) {
                                    if ((0, d.Gv)(t[e]) && (0, d.Gv)(i[e]) && (0, a.gR)(i[e], t[e])) return;
                                    s = !0, r[e] = t[e], o[e] = i[e]
                                }
                            })), s && (e.setAttrs((0, a.rL)({}, o, r)), e.update())
                        })(H.current, X)
                    }), [X]), (({
                        candlestick: e,
                        menuSettings: t
                    }) => {
                        (0, o.useEffect)((() => {
                            e && (t.rightClickPlaceOrder.visible && e.enableFeature(Z.O5.RightClickPlaceOrder), t.moreSettings.spotlight.visible && e.enableFeature(Z.O5.InformationMines), t.moreSettings.quickOrder.plusButton.visible && e.enableFeature(Z.O5.ChartTrading), t.moreSettings.scale.invertedScale.visible && e.enableFeature(Z.O5.InvertedScale), t.moreSettings.scale.logarithmicScale.visible && e.enableFeature(Z.O5.LogarithmicScale), t.moreSettings.scale.percentageScale.visible && e.enableFeature(Z.O5.PercentageScale), t.moreSettings.priceLine.askBid.visible && e.enableFeature(Z.O5.AskBid), t.moreSettings.priceLine.countdown.visible && e.enableFeature(Z.O5.Countdown), t.moreSettings.priceLine.marketPriceLine.visible && e.enableFeature(Z.O5.PriceLine))
                        }), [e, t.moreSettings.priceLine.askBid.visible, t.moreSettings.priceLine.countdown.visible, t.moreSettings.priceLine.marketPriceLine.visible, t.moreSettings.quickOrder.plusButton.visible, t.moreSettings.scale.invertedScale.visible, t.moreSettings.scale.logarithmicScale.visible, t.moreSettings.scale.percentageScale.visible, t.moreSettings.spotlight.visible, t.rightClickPlaceOrder.visible])
                    })({
                        candlestick: H.current,
                        menuSettings: _
                    }), (({
                        candlestick: e
                    }) => {
                        const {
                            getI18n: t
                        } = (0, c.P3)(), i = (0, o.useCallback)(((e, i = "") => t(e, {
                            defaultValue: i || e
                        }) || i), [t]);
                        (0, o.useEffect)((() => {
                            e && e.registerI18n(i)
                        }), [e, i])
                    })({
                        candlestick: H.current
                    });
                    const G = (0, o.useMemo)((() => H.current && I ? (0, r.jsx)(o.Suspense, {
                            fallback: null,
                            children: (0, r.jsx)(Nt, {
                                visible: I,
                                onClose: () => V(!1),
                                candlestickInstance: H.current,
                                forceUpdate: C,
                                onSettingChanged: A,
                                onSettingReset: S,
                                colorTable: H.current ? .getColorTable()
                            })
                        }) : null), [C, A, S, I, H.current]),
                        $ = (0, o.useMemo)((() => F === (0, a.De)("--color-BasicBg") ? "bg-BasicBg" : ""), [F]),
                        q = (0, o.useMemo)((() => `flex kline-wrap ${W} ${$}`), [W, $]),
                        ee = (0, o.useMemo)((() => ({ ...e.style,
                            ..."" === $ ? {
                                background: F
                            } : {}
                        })), [$, F, e.style]);
                    return (0, r.jsxs)("div", {
                        ref: B,
                        className: q,
                        style: ee,
                        dir: "ltr",
                        children: [(0, r.jsx)("div", {
                            ref: O,
                            className: "kline-container"
                        }), G, N.button, (0, r.jsx)(Vt, {
                            candlestick: H.current
                        }), (0, r.jsx)(Et, {
                            candlestick: H.current,
                            wrapRef: M
                        }), (0, r.jsx)(Ot, {
                            enabled: h,
                            candlestick: H.current
                        }), (0, r.jsx)(rt, {
                            candlestick: H.current,
                            chartType: i ? .type,
                            informationMines: L,
                            wrapRef: M,
                            theme: W
                        }), (0, r.jsx)(p, {
                            candlestickInstance: H.current,
                            onClose: w,
                            customizedEnabled: g,
                            backTestEnabled: x
                        }), (0, r.jsx)(et, {
                            wrapperElement: M,
                            candlestick: H.current,
                            enabled: u
                        }), (0, r.jsx)(f, {
                            candlestick: H.current,
                            placeOrder: k,
                            wrapRef: M,
                            value: E
                        }), (0, r.jsx)(Y, {
                            candlestick: H.current
                        }), (0, r.jsx)(J, {
                            enabled: T,
                            candlestick: H.current,
                            drawingDeleteConfirmationDialogValue: j,
                            placeOrder: k,
                            menuSettings: _
                        }), (0, r.jsx)(te, {
                            candlestick: H.current,
                            value: j
                        }), (0, r.jsx)(Rt, {
                            candlestick: H.current,
                            onClick: P,
                            isExpanded: D
                        })]
                    })
                }));
            Ft.displayName = "candlestickCandlestick";
            const zt = Ft;
            var Xt = i("juww"),
                Ut = i("dfUm"),
                Gt = i("fc5I"),
                $t = i.n(Gt),
                Yt = i("BmHO"),
                Zt = i.n(Yt),
                Kt = i("K9aZ"),
                qt = i.n(Kt),
                Qt = i("Km4d"),
                Jt = i.n(Qt),
                ei = i("T9sr"),
                ti = i.n(ei),
                ii = i("wwoD"),
                ri = i("Af4x");
            const oi = [{
                    type: D._b.CANDLE,
                    indicators: [{
                        type: "MA",
                        id: "@MA",
                        categories: ["main"]
                    }]
                }, {
                    type: D._b.VOL,
                    indicators: [{
                        type: "VOL",
                        id: "@VOL",
                        categories: ["sub"]
                    }]
                }],
                si = () => ii.M,
                ni = () => "BASIC_KLINE_INDICATOR",
                ai = e => "string" === typeof e ? `BASIC_KLINE_${e}` : `BASIC_KLINE_${(0,a.Bo)(e)}`,
                li = ({
                    type: e,
                    lineType: t,
                    dir: i
                }) => {
                    switch (e) {
                        case D.X2.LegacyArrow:
                            return i || D.X2.LeftArrow;
                        case D.X2.LegacyStraightLine:
                            return t || D.X2.HorizontalLine;
                        default:
                            return e
                    }
                },
                ci = e => {
                    const t = ti()(e),
                        i = t ? .find((e => e.type === D._b.CANDLE));
                    if (i) {
                        const e = i.annotations.map((({
                            type: e = D.X2.Empty,
                            lineType: t,
                            dir: i,
                            ...r
                        }) => ({
                            type: li({
                                type: e,
                                lineType: t,
                                dir: i
                            }),
                            ...r
                        })));
                        i.annotations = e
                    }
                    return t
                },
                di = ({
                    type: e,
                    namespace: t,
                    symbol: i,
                    saveIndicators: r,
                    saveAnnotations: o,
                    saveSettings: s,
                    load: n,
                    clear: a
                }) => {
                    const l = {
                        type: e,
                        symbol: i
                    };
                    if (!t) return {
                        info: l,
                        saveAnnotations: () => Promise.resolve(),
                        saveIndicators: () => Promise.resolve(),
                        saveSettings: () => Promise.resolve(),
                        load: () => Promise.resolve({
                            storeData: [],
                            indicatorSetting: null,
                            setting: null
                        }),
                        clear: $t()
                    };
                    const c = ni(),
                        d = ai(i),
                        h = si(),
                        u = ri.M,
                        g = Zt().createInstance({
                            name: t
                        }),
                        p = e => ({
                            indicators: e.storeData.map((({
                                type: e,
                                indicators: t,
                                weight: i
                            }) => ({
                                type: e,
                                indicators: t,
                                weight: i
                            }))),
                            annotations: e.storeData.map((({
                                type: e,
                                annotations: t = []
                            }) => ({
                                type: e,
                                annotations: t
                            })))
                        });
                    return {
                        info: l,
                        saveAnnotations: async e => {
                            const t = p(e);
                            await o({
                                payload: { ...e,
                                    ...t
                                },
                                indicatorStoreKey: c,
                                annotationsStoreKey: d,
                                indicatorSettingStoreKey: h,
                                settingStoreKey: u,
                                storage: g
                            })
                        },
                        saveIndicators: async e => {
                            const t = p(e);
                            await r({
                                payload: { ...e,
                                    ...t
                                },
                                indicatorStoreKey: c,
                                annotationsStoreKey: d,
                                indicatorSettingStoreKey: h,
                                settingStoreKey: u,
                                storage: g
                            })
                        },
                        saveSettings: async e => {
                            const t = p(e);
                            await s({
                                payload: { ...e,
                                    ...t
                                },
                                indicatorStoreKey: c,
                                annotationsStoreKey: d,
                                indicatorSettingStoreKey: h,
                                settingStoreKey: u,
                                storage: g
                            })
                        },
                        load: async () => {
                            try {
                                const e = await n({
                                        indicatorStoreKey: c,
                                        annotationsStoreKey: d,
                                        indicatorSettingStoreKey: h,
                                        settingStoreKey: u,
                                        storage: g
                                    }),
                                    {
                                        indicators: t,
                                        annotations: i,
                                        indicatorSetting: r,
                                        setting: o
                                    } = e,
                                    s = t || oi,
                                    a = i || [],
                                    l = qt()(s, "type"),
                                    p = qt()(a, "type"),
                                    m = Jt()({}, l, p);
                                return {
                                    storeData: Object.values(m).map((e => e)),
                                    indicatorSetting: r,
                                    setting: o
                                }
                            } catch (e) {
                                return console.warn("[candlestick] load saving error: ", e), {
                                    storeData: [],
                                    indicatorSetting: null,
                                    setting: null
                                }
                            }
                        },
                        clear: () => a({
                            storage: g
                        })
                    }
                };
            var hi = i("UXyB");
            const ui = (0, o.forwardRef)(((e, t) => {
                const {
                    dataProvider: i,
                    interval: s,
                    symbol: n,
                    setLoading: a = $t(),
                    baseAsset: l = "",
                    quoteAsset: c = "",
                    namespace: d,
                    isStock: h = !1,
                    sensorsManager: u,
                    storeSymbol: g = "",
                    onDataArrived: p,
                    needStore: m = !0,
                    beforeChartReady: x = () => Promise.resolve(),
                    storage: f,
                    ...y
                } = e, [, {
                    inc: b
                }] = (0, Ut.A)(0), v = (0, o.useRef)(null), C = (0, o.useRef)(u), w = (0, o.useRef)(), A = (0, o.useRef)(!1), [S, k] = (0, o.useState)(!1), [L, _] = (0, o.useState)(!1);
                A.current = v.current ? .getCandlestick() ? .isLoaded() || !1, C.current = u;
                const P = (0, o.useCallback)((() => b()), [b]),
                    I = (0, o.useMemo)((() => e.candlestick ? .type ? .toUpperCase()), [e.candlestick]),
                    V = (0, o.useMemo)((() => (({
                        namespace: e,
                        symbol: t
                    }) => di({
                        type: "local",
                        namespace: e,
                        symbol: t,
                        saveAnnotations: async ({
                            payload: {
                                annotations: e
                            },
                            annotationsStoreKey: t,
                            storage: i
                        }) => {
                            await i.setItem(t, e)
                        },
                        saveIndicators: async ({
                            payload: {
                                indicators: e,
                                indicatorSetting: t
                            },
                            indicatorStoreKey: i,
                            indicatorSettingStoreKey: r,
                            storage: o
                        }) => {
                            await Promise.all([o.setItem(i, e), o.setItem(r, t)])
                        },
                        saveSettings: async ({
                            payload: {
                                setting: e
                            },
                            settingStoreKey: t,
                            storage: i
                        }) => {
                            await i.setItem(t, e)
                        },
                        load: async ({
                            storage: e,
                            indicatorStoreKey: t,
                            annotationsStoreKey: i,
                            indicatorSettingStoreKey: r,
                            settingStoreKey: o
                        }) => {
                            const [s, n, a, l] = await Promise.all([e.getItem(t), e.getItem(i), e.getItem(r), e.getItem(o)]);
                            return {
                                indicators: s,
                                annotations: ci(n || []),
                                indicatorSetting: a,
                                setting: l
                            }
                        },
                        clear: ({
                            storage: e
                        }) => e.clear()
                    }))({
                        namespace: d,
                        symbol: n
                    })), [d, n]),
                    M = (0, o.useMemo)((() => f || V), [f, V, g]);
                return (0, o.useLayoutEffect)((() => {
                    const e = v.current ? .getCandlestick();
                    w.current !== d && (e ? .setAttr("needToReloadIndicator", !0), w.current = d)
                }), [d]), (0, o.useEffect)((() => {
                    const e = v.current ? .getCandlestick();
                    if (!e) return () => null;
                    const t = ({
                        type: t
                    }) => {
                        if ("load" !== t) return;
                        k(!0);
                        const i = e.settingStore.getValue("@contextMenu.bidAsk");
                        _(i || !1)
                    };
                    return e.settingStore.subscribeValueChanged(t), () => e.settingStore.unsubscribeValueChanged(t)
                }), [v.current]), (0, o.useEffect)((() => {
                    const e = v.current ? .getCandlestick();
                    if (!e) return () => null;
                    const t = ({
                        key: e,
                        value: t
                    }) => {
                        "@contextMenu.bidAsk" === e && _(t)
                    };
                    return e.settingStore.subscribeValueChanged(t), () => e.settingStore.unsubscribeValueChanged(t)
                }), [v.current]), (0, o.useImperativeHandle)(t, (() => ({
                    getCandlestick: () => v.current ? .getCandlestick()
                }))), (0, o.useEffect)((() => {
                    const e = v.current ? .getCandlestick() ? .getAttr("dataFeed");
                    e ? .setLoadCallback(a)
                }), [a]), (0, o.useEffect)((() => {
                    const e = C.current,
                        t = v ? .current ? .getCandlestick();
                    if (!t) return () => null;
                    const i = () => e ? .logOnFetchStart ? .(),
                        r = () => e ? .logOnFetchEnd ? .();
                    return t.on("beforeDataFetching", i), t.on("doneDataFetching", r), () => {
                        t.off("beforeDataFetching", i), t.off("doneDataFetching", r)
                    }
                }), []), (0, o.useEffect)((() => {
                    const e = v ? .current ? .getCandlestick();
                    e && e.changeSource({
                        symbol: n,
                        interval: s,
                        dataProvider: i
                    })
                }), [s, n, i.getData, i.subscribe, i.unsubscribe]), (0, o.useEffect)((() => {
                    let e = !1;
                    const t = v ? .current ? .getCandlestick();
                    if (!t) return;
                    const i = t.getAttr("dataFeed");
                    return i.getPositions((t => {
                        if (e) return;
                        const i = v ? .current ? .getCandlestick();
                        i ? .managePositionLines(t)
                    })), i.subscribePositions((t => {
                        if (e) return;
                        const i = v ? .current ? .getCandlestick();
                        i ? .managePositionLines(t)
                    })), () => {
                        e = !0, i.unsubscribePositions()
                    }
                }), [n, s, i.getPositions, i.subscribePositions, i.unsubscribePositions]), (0, o.useEffect)((() => {
                    let e = !1;
                    const t = v ? .current ? .getCandlestick();
                    if (!t) return;
                    const i = t.getAttr("dataFeed");
                    return i.getOrders((t => {
                        if (e) return;
                        const i = v ? .current ? .getCandlestick();
                        i ? .manageOrderLines(t)
                    })), i.subscribeOrders((t => {
                        if (e) return;
                        const i = v ? .current ? .getCandlestick();
                        i ? .manageOrderLines(t)
                    })), () => {
                        e = !0, i.unsubscribeOrders()
                    }
                }), [n, s, i.getOrders, i.subscribeOrders, i.unsubscribeOrders]), (0, o.useEffect)((() => {
                    let e = !1;
                    const t = v ? .current ? .getCandlestick();
                    if (!t) return;
                    const i = t.getAttr("dataFeed");
                    return i.getExecutionOrders((t => {
                        if (e) return;
                        const i = v ? .current ? .getCandlestick();
                        i ? .manageExecutionOrders(t.orders)
                    })), i.subscribeExecutionOrders((t => {
                        if (e) return;
                        const i = v ? .current ? .getCandlestick();
                        i ? .manageExecutionOrders(t.orders)
                    })), () => {
                        e = !0, i.unsubscribeExecutionOrders()
                    }
                }), [n, s, i.getExecutionOrders, i.subscribeExecutionOrders, i.unsubscribeExecutionOrders]), (0, o.useEffect)((() => {
                    let e = !1;
                    const t = v ? .current ? .getCandlestick();
                    if (!t) return;
                    const i = t.getAttr("dataFeed");
                    return i.getLabelLines((t => {
                        if (e) return;
                        const i = v ? .current ? .getCandlestick();
                        i ? .manageLabelLines(t)
                    })), i.subscribeLabelLines((t => {
                        if (e) return;
                        const i = v ? .current ? .getCandlestick();
                        i ? .manageLabelLines(t)
                    })), () => {
                        e = !0, i.unsubscribeLabelLines()
                    }
                }), [n, s, i.getLabelLines, i.subscribeLabelLines, i.unsubscribeLabelLines]), (0, o.useEffect)((() => {
                    let e = !1;
                    const t = v ? .current ? .getCandlestick();
                    if (!t) return;
                    const i = t.getAttr("dataFeed");
                    return i.getSingleLabelLines((t => {
                        if (e) return;
                        const i = v ? .current ? .getCandlestick();
                        i ? .manageSingleLabelLines(t)
                    })), i.subscribeSingleLabelLines((t => {
                        if (e) return;
                        const i = v ? .current ? .getCandlestick();
                        i ? .manageSingleLabelLines(t)
                    })), () => {
                        e = !0, i.unsubscribeSingleLabelLines()
                    }
                }), [n, s, i.getSingleLabelLines, i.subscribeSingleLabelLines, i.unsubscribeSingleLabelLines]), (0, o.useEffect)((() => {
                    let e = !1;
                    const t = v ? .current ? .getCandlestick();
                    if (!t) return;
                    const i = t.getAttr("dataFeed");
                    return i.getAlerts((t => {
                        if (e) return;
                        const i = v ? .current ? .getCandlestick();
                        i ? .manageAlerts(t)
                    })), i.subscribeAlerts((t => {
                        if (e) return;
                        const i = v ? .current ? .getCandlestick();
                        i ? .manageAlerts(t)
                    })), () => {
                        e = !0, i.unsubscribeAlerts()
                    }
                }), [n, s, i.getAlerts, i.subscribeAlerts, i.unsubscribeAlerts]), (0, o.useEffect)((() => {
                    let e = !1;
                    const t = v.current ? .getCandlestick();
                    if (!t) return;
                    const i = t.getAttr("dataFeed");
                    return S && L && i.subscribeAskBid((t => {
                        if (e) return;
                        const i = v ? .current ? .getCandlestick();
                        i ? .setAttr("askBid", t)
                    })), () => {
                        e = !0, i.unsubscribeAskBid()
                    }
                }), [s, n, i, S, L]), (({
                    candlestick: e,
                    storage: t
                }) => {
                    const i = (0, o.useMemo)((() => T()((() => {
                            e && t.saveAnnotations(e.getSave())
                        }), 2e3)), [e, t]),
                        r = (0, o.useMemo)((() => T()((() => {
                            e && t.saveIndicators(e.getSave())
                        }), 2e3)), [e, t]),
                        s = (0, o.useMemo)((() => T()((() => {
                            e && t.saveSettings(e.getSave())
                        }), 2e3)), [e, t]);
                    (0, o.useEffect)((() => {
                        if (!e) return;
                        const t = ({
                                action: t
                            }) => {
                                if (e.getAttr("isSaveReady")) switch (t) {
                                    case "annotation":
                                        i();
                                        break;
                                    case "indicator":
                                        r();
                                        break;
                                    default:
                                        console.warn("[candlestick][onSaveNeeded] unrecognized type ", t)
                                }
                            },
                            o = ({
                                type: e
                            }) => {
                                "update" === e && r()
                            },
                            n = ({
                                type: e
                            }) => {
                                "update" === e && s()
                            };
                        return e.on("saveChartNeeded", t), e.indicatorStore.subscribeValueChanged(o), e.settingStore.subscribeValueChanged(n), () => {
                            i.cancel(), r.cancel(), s.cancel(), e.off("saveChartNeeded", t), e.indicatorStore.unsubscribeValueChanged(o), e.settingStore.unsubscribeValueChanged(n)
                        }
                    }), [e, i, r, s])
                })({
                    candlestick: v.current ? .getCandlestick(),
                    storage: M
                }), (({
                    needStore: e,
                    storage: t,
                    candlestick: i,
                    sensors: r,
                    beforeChartReady: s
                }) => {
                    const n = (0, o.useRef)(),
                        a = (0, o.useCallback)((async () => {
                            if (n.current && clearTimeout(n.current), i ? .setAttr("isSaveReady", !1), e && i && i.isLoaded()) {
                                r ? .logOnKlineReady ? .();
                                try {
                                    const {
                                        storeData: e,
                                        indicatorSetting: o,
                                        setting: n
                                    } = await t.load();
                                    i.indicatorStore.load({
                                        data: o
                                    }), i.settingStore.load({
                                        data: n
                                    }), await (s ? .({
                                        storedData: e
                                    }));
                                    const a = await i.loadChart({
                                        data: e || [],
                                        reload: !0
                                    });
                                    r ? .logOnCatchChart ? .(a), i ? .setAttr("needToReloadIndicator", !1)
                                } catch (o) {
                                    console.error("[candlestick] preparing chartReady errors: ", o), t.clear()
                                } finally {
                                    n.current = setTimeout((() => {
                                        i.setAttr("isSaveReady", !0)
                                    }), 2e3), i.getAttr("dataFeed").triggerLoading(!1)
                                }
                            }
                        }), [s, i, e, t]);
                    (0, o.useEffect)((() => i ? (i.on("chartReady", a), i.on("reloadStorage", a), () => {
                        i.off("chartReady", a), i.off("reloadStorage", a)
                    }) : () => null), [i, a]), (0, hi.A)((() => {
                        i && i.fire("reloadStorage")
                    }), [i, t])
                })({
                    needStore: m,
                    storage: M,
                    candlestick: v.current ? .getCandlestick(),
                    sensors: C.current,
                    beforeChartReady: x
                }), (0, o.useEffect)((() => {
                    let e = !1;
                    return (async () => {
                        if (!I || !A) return;
                        const t = v.current ? .getCandlestick(),
                            {
                                storeData: i
                            } = await M.load();
                        e || (I.toUpperCase() === D.NB.Line ? i[0] ? .indicators.forEach((e => {
                            const {
                                type: i,
                                isTriggeredByClick: r,
                                params: o
                            } = e, s = !!o ? .showSeries;
                            t ? .setIndicatorVisibleByName(i, !(!r || !s))
                        })) : i[0] ? .indicators.forEach((e => {
                            const {
                                type: i,
                                isTriggeredByClick: r,
                                params: o
                            } = e, s = !!o ? .showSeries;
                            t ? .setIndicatorVisibleByName(i, !r || !!s)
                        })))
                    })(), () => {
                        e = !0
                    }
                }), [I, M, A]), (0, o.useEffect)((() => {
                    const e = v.current ? .getCandlestick();
                    e ? .setSymbolInfo({
                        baseAsset: l,
                        quoteAsset: c
                    })
                }), [l, c]), (0, r.jsx)(zt, { ...y,
                    ref: v,
                    symbol: n,
                    interval: s,
                    sensorsManager: u,
                    forceUpdate: P,
                    isVolumeDisabled: h
                })
            }));
            ui.displayName = "candlestickBasicKline";
            const gi = ui;
            i("c9uE"), i("JGBb");
            var pi = i("vHdC"),
                mi = i("aw40"),
                xi = i("RkhT"),
                fi = i("ynAk")
        },
        W4k5: (e, t, i) => {
            i.d(t, {
                A: () => n
            });
            const r = 1e-5;
            Math.PI, Math.PI;
            var o = i("jg2Q"),
                s = i("O0kw");
            let n = class {
                static isZero(e, t = r) {
                    return Math.abs(e) <= Math.abs(t)
                }
                static isSamePoint(e, t) {
                    const i = Array.isArray(e) ? e : [e.x, e.y],
                        r = Array.isArray(t) ? t : [t.x, t.y];
                    return this.isZero(i[0] - r[0]) && this.isZero(i[1] - r[1])
                }
                static getSquareDistance(e, t) {
                    return (e.x - t.x) ** 2 + (e.y - t.y) ** 2
                }
                static getDotMultiply(e, t) {
                    return e.x * t.x + e.y * t.y
                }
                static getCrossMultiply(e, t) {
                    return e.x * t.y - e.y * t.x
                }
                static degreeToRadius(e) {
                    return Math.PI * e / 180
                }
                static transformPointToArray(e) {
                    return [e.x, e.y]
                }
                static transformPointToXY(e) {
                    return Array.isArray(e) ? {
                        x: e[0],
                        y: e[1]
                    } : e
                }
                static transformPointsToArray(e) {
                    return e.map((e => this.transformPointToArray(e)))
                }
                static transformPointsToXY(e) {
                    return e.map((e => this.transformPointToXY(e)))
                }
                static getBoundOfPoints(e) {
                    const t = e.map((e => e[0])),
                        i = e.map((e => e[1])),
                        r = Math.min(...t),
                        o = Math.max(...t),
                        n = Math.min(...i),
                        a = Math.max(...i);
                    return new s.A(r, n, Math.abs(o - r), Math.abs(a - n))
                }
                static getDirectionVec(e, t) {
                    return new o.A(t[0] - e[0], t[1] - e[1])
                }
                static isLeftOfLine(e, t, i) {
                    let [r, s] = [new o.A(t[0], t[1]), new o.A(i[0], i[1])];
                    r.y > s.y && ([r, s] = [s, r]);
                    const n = new o.A(s.x - r.x, s.y - r.y),
                        a = new o.A(e[0] - r.x, e[1] - r.y);
                    return this.getCrossMultiply(n, a) > 0
                }
                static isBothSide(e, t, i, r = 0) {
                    return this.getCrossMultiply(e, t) * this.getCrossMultiply(e, i) <= r
                }
            }
        },
        O0kw: (e, t, i) => {
            i.d(t, {
                A: () => o
            });
            var r = i("W4k5");
            let o = class e {
                static isOverlaped(e, t) {
                    return e.isOverlaped(t)
                }
                clone() {
                    return new e(this.x, this.y, this.width, this.height)
                }
                getBound() {
                    return {
                        x: this.x,
                        y: this.y,
                        width: this.width,
                        height: this.height
                    }
                }
                getCenter() {
                    return [this.x + this.width / 2, this.y + this.height / 2]
                }
                getNorthEast() {
                    return [this.x + this.width, this.y + this.height]
                }
                getSouthWest() {
                    return [this.x, this.y]
                }
                getVetexs() {
                    return [
                        [this.x, this.y],
                        [this.x, this.y + this.height],
                        [this.x + this.width, this.y + this.height],
                        [this.x + this.width, this.y]
                    ]
                }
                isOverlaped(e) {
                    const t = this.getCenter(),
                        i = e.getCenter();
                    return Math.abs(i[0] - t[0]) <= (this.width + e.width) / 2 && Math.abs(i[1] - t[1]) <= (this.height + e.height) / 2
                }
                contain(t) {
                    if (t instanceof e) {
                        const e = t.getVetexs();
                        for (let t = 0; t < e.length; t++)
                            if (!this.contain(e[t])) return !1;
                        return !0
                    }
                    const i = this.x + this.width,
                        r = this.y + this.height;
                    return (t[0] - this.x) * (t[0] - i) <= 0 && (t[1] - this.y) * (t[1] - r) <= 0
                }
                union(e) {
                    const t = Math.min(this.x, e.x),
                        i = Math.min(this.y, e.y),
                        r = Math.max(this.x + this.width, e.x + e.width),
                        o = Math.max(this.y + this.height, e.y + e.height);
                    return this.x = t, this.y = i, this.width = r - t, this.height = o - i, this
                }
                expand(e, t) {
                    return this.width += 2 * e, this.x -= e, void 0 !== t ? (this.y -= t, this.height += 2 * t) : (this.y -= e, this.height += 2 * e), this
                }
                isIntersectOfSegment(e, t) {
                    if (!r.A.getBoundOfPoints([e, t]).isOverlaped(this)) return !1;
                    if (this.contain(e) || this.contain(t)) return !0;
                    const i = r.A.getDirectionVec(e, t),
                        o = this.getVetexs();
                    for (let s = 1; s < o.length; s++) {
                        const t = r.A.getDirectionVec(e, o[s - 1]),
                            n = r.A.getDirectionVec(e, o[s]);
                        if (r.A.isBothSide(i, t, n)) return !0
                    }
                    return !1
                }
                constructor(e, t, i = 0, r = 0) {
                    this.x = e, this.y = t, this.width = i, this.height = r
                }
            }
        },
        hpQW: (e, t, i) => {
            i.d(t, {
                A: () => l
            });
            var r = i("jg2Q"),
                o = i("O0kw"),
                s = i("W4k5");
            let n = class {
                static getPedalPointOfLine(e, t, i) {
                    const o = new r.A(e.x - t.x, e.y - t.y),
                        n = new r.A(i.x - t.x, i.y - t.y),
                        a = s.A.getDotMultiply(o, n) / n.getModelLength();
                    return new r.A(t.x, t.y).add(n.normalize().scale(a))
                }
                static getNearestPointToSegment(e, t, i) {
                    const r = this.getPedalPointOfLine(e, t, i);
                    if (this.isPointAtSegment(r, t, i)) return r.toXY();
                    return s.A.getSquareDistance(e, t) < s.A.getSquareDistance(e, i) ? t : i
                }
                static getDistanceToLine(e, t, i) {
                    const o = new r.A(e.x - t.x, e.y - t.y),
                        n = new r.A(i.x - t.x, i.y - t.y),
                        a = s.A.getCrossMultiply(o, n);
                    return Math.abs(a / n.getModelLength())
                }
                static getIntersectWidthBound(e, t, i) {
                    const r = i.getVetexs();
                    let o = null,
                        n = null;
                    for (let a = 0, l = r.length; a < l; a++) {
                        const i = {
                                x: r[a][0],
                                y: r[a][1]
                            },
                            c = {
                                x: r[(a + 1) % l][0],
                                y: r[(a + 1) % l][1]
                            },
                            d = this.getIntersectOfSegmentPt(e, t, i, c);
                        if (d && (o || (o = d), o && !s.A.isSamePoint(o, d))) return n = d, [o, n]
                    }
                    return []
                }
                static isPointAtLine(e, t, i, o) {
                    const n = new r.A(i.x - t.x, i.y - t.y),
                        a = new r.A(e.x - t.x, e.y - t.y),
                        l = s.A.getCrossMultiply(n, a) / n.getModelLength();
                    return s.A.isZero(l, o)
                }
                static isPointAtSegment(e, t, i, r) {
                    return !!this.isPointAtLine(e, t, i, r) && (this.isHorizontalLine(t, i) ? (e.x - t.x) * (e.x - i.x) <= 0 : (this.isVerticalLine(t, i) || (e.x - t.x) * (e.x - i.x) <= 0) && (e.y - t.y) * (e.y - i.y) <= 0)
                }
                static isHorizontalLine(e, t) {
                    return s.A.isZero(e.y - t.y)
                }
                static isVerticalLine(e, t) {
                    return s.A.isZero(e.x - t.x)
                }
                static isParalled(e, t, i, o, n) {
                    const a = new r.A(t.x - e.x, t.y - e.y),
                        l = new r.A(o.x - i.x, o.y - i.y),
                        c = s.A.getCrossMultiply(a, l);
                    return s.A.isZero(c, n)
                }
                static isCollinear(e, t, i, o, n) {
                    const a = new r.A(t.x - e.x, t.y - e.y),
                        l = new r.A(o.x - i.x, o.y - i.y),
                        c = new r.A(e.x - i.x, e.y - i.y),
                        d = s.A.getCrossMultiply(a, l),
                        h = s.A.getCrossMultiply(a, c);
                    return s.A.isZero(d, n) && s.A.isZero(h, n)
                }
                static isIntersect(e, t, i, r, o) {
                    return !this.isParalled(e, t, i, r, o)
                }
                static getIntersectPt(e, t, i, o) {
                    if (this.isParalled(e, t, i, o)) return;
                    const n = new r.A(t.x - e.x, t.y - e.y),
                        a = new r.A(o.x - i.x, o.y - i.y),
                        l = new r.A(i.x - e.x, i.y - e.y),
                        c = new r.A(o.x - e.x, o.y - e.y),
                        d = Math.abs(s.A.getCrossMultiply(n, l)),
                        h = Math.abs(s.A.getCrossMultiply(n, c));
                    let u = 0;
                    return u = s.A.isBothSide(n, l, c) ? d / (d + h) : d / (d - h), new r.A(i.x, i.y).clone().add(a.clone().scale(u)).toXY()
                }
                static getIntersectOfSegmentPt(e, t, i, r) {
                    const o = this.getIntersectPt(e, t, i, r);
                    if (o) return this.isPointAtSegment(o, i, r) ? o : void 0
                }
                static isIntersectOfSegment(e, t, i, o, n) {
                    const a = new r.A(t.x - e.x, t.y - e.y),
                        l = new r.A(o.x - i.x, o.y - i.y),
                        c = new r.A(i.x - e.x, i.y - e.y),
                        d = new r.A(o.x - e.x, o.y - e.y),
                        h = new r.A(e.x - i.x, e.y - i.y),
                        u = new r.A(t.x - i.x, t.y - i.y);
                    return s.A.isBothSide(a, c, d, n) && s.A.isBothSide(l, h, u, n)
                }
                getDirVector() {
                    const e = this.v1.x - this.v0.x,
                        t = this.v1.y - this.v0.y;
                    return new r.A(e, t)
                }
                getDirection() {
                    return this.getDirVector().normalize()
                }
                getLineLength() {
                    return this.getDirVector().getModelLength()
                }
                getBound() {
                    const e = Math.min(this.v0.x, this.v1.x),
                        t = Math.min(this.v0.y, this.v1.y),
                        i = Math.abs(this.v1.x - this.v0.x),
                        r = Math.abs(this.v1.y - this.v0.y);
                    return new o.A(e, t, i, r)
                }
                isPointAtLine(e, t) {
                    const i = this.getDirVector(),
                        o = new r.A(e.x - this.v0.x, e.y - this.v1.y),
                        n = s.A.getCrossMultiply(i, o);
                    return s.A.isZero(n, t)
                }
                isParalled(e, t) {
                    const i = this.getDirection(),
                        r = e.getDirection(),
                        o = s.A.getCrossMultiply(i, r);
                    return s.A.isZero(o, t)
                }
                isCollinear(e, t) {
                    const i = e.getDirection(),
                        o = new r.A(e.v0.x - this.v0.x, e.v0.y - this.v0.y),
                        n = s.A.getCrossMultiply(i, o);
                    return this.isParalled(e, t) && s.A.isZero(n, t)
                }
                isIntersect(e, t) {
                    return !this.isParalled(e, t)
                }
                getIntersectPt(e) {
                    if (this.isParalled(e)) return this.isCollinear(e) ? void console.warn("These lines is collinear") : void console.warn("These lines is paralled");
                    const t = this.getDirVector(),
                        i = e.getDirVector(),
                        o = new r.A(e.v0.x - this.v0.x, e.v0.y - this.v0.y),
                        n = new r.A(e.v1.x - this.v0.x, e.v1.y - this.v0.y),
                        a = Math.abs(s.A.getCrossMultiply(t, o)),
                        l = Math.abs(s.A.getCrossMultiply(t, n));
                    let c = 0;
                    return c = s.A.isBothSide(t, o, n) ? a / (a + l) : a / (a - l), e.v0.clone().add(i.clone().scale(c))
                }
                isIntersectOfSegment(e) {
                    const t = this.getDirVector(),
                        i = e.getDirVector(),
                        o = new r.A(e.v0.x - this.v0.x, e.v0.y - this.v0.y),
                        n = new r.A(e.v1.x - this.v0.x, e.v1.y - this.v0.y),
                        a = new r.A(this.v0.x - e.v0.x, this.v0.y - e.v0.y),
                        l = new r.A(this.v1.x - e.v0.x, this.v1.y - e.v0.y);
                    return s.A.isBothSide(t, o, n) && s.A.isBothSide(i, a, l)
                }
                isIntersectOfBound(e) {
                    return e.isIntersectOfSegment(s.A.transformPointToArray(this.v0), s.A.transformPointToArray(this.v1))
                }
                constructor(e, t) {
                    this.v0 = new r.A(e.x, e.y), this.v1 = new r.A(t.x, t.y)
                }
            };
            var a = i("oHkN");
            const l = {
                Vector2: r.A,
                Line: n,
                Bound: o.A,
                Polyline: class {
                    getBound() {
                        let e = Number.MAX_VALUE,
                            t = Number.MAX_VALUE,
                            i = -Number.MAX_VALUE,
                            r = -Number.MAX_VALUE,
                            s = this.coordinates.slice(0);
                        for (; s.length > 0;) {
                            const o = s.pop();
                            if (void 0 === o) break;
                            Array.isArray(o) ? s = s.concat(o) : (e = Math.min(o.x, e), i = Math.max(o.x, i), t = Math.min(o.y, t), r = Math.max(o.y, r))
                        }
                        return new o.A(e, t, i - e, r - t)
                    }
                    getNearestPoint(e) {
                        let t = e,
                            i = Number.MAX_SAFE_INTEGER,
                            r = this.coordinates.slice(0);
                        for (; r.length > 0;) {
                            const o = r.pop();
                            if (Array.isArray(o))
                                if ((0, a.Gv)(o[0]))
                                    for (let r = 0, s = o.length; r < s - 1; r++) {
                                        const {
                                            pos: s,
                                            dis: n
                                        } = this.getDisAndPointAtLine(e, o[r], o[r + 1]);
                                        i > n && (i = n, t = s)
                                    } else r = r.concat(o);
                                else if ((0, a.Gv)(o) && r[r.length - 1]) {
                                const {
                                    pos: s,
                                    dis: n
                                } = this.getDisAndPointAtLine(e, o, r[r.length - 1]);
                                i > n && (i = n, t = s)
                            }
                        }
                        return {
                            point: t,
                            dis: i
                        }
                    }
                    getDisAndPointAtLine(e, t, i) {
                        const r = n.getNearestPointToSegment(e, t, i);
                        return {
                            pos: r,
                            dis: s.A.getSquareDistance(e, r)
                        }
                    }
                    constructor(e) {
                        this.coordinates = e, this.coordinates = e
                    }
                },
                Algorith: s.A
            }
        },
        jg2Q: (e, t, i) => {
            i.d(t, {
                A: () => s
            });
            var r = i("oHkN"),
                o = i("W4k5");
            let s = class e {
                static lerp(t, i, r) {
                    const o = new e(i.x - t.x, i.y - t.y);
                    return t.add(o.scale(r))
                }
                add(e) {
                    return this.x += Number(e.x), this.y += Number(e.y), this
                }
                substract(e) {
                    return this.x -= Number(e.x), this.y -= Number(e.y), this
                }
                normalize() {
                    const t = this.getModelLength();
                    return 0 === t ? new e(0, 0) : new e(this.x / t, this.y / t)
                }
                clone() {
                    return new e(this.x, this.y)
                }
                rotate(e) {
                    const t = o.A.degreeToRadius(e),
                        i = this.x * Math.cos(t) - this.y * Math.sin(t),
                        r = this.x * Math.sin(t) + this.y * Math.cos(t);
                    return this.x = i, this.y = r, this
                }
                scale(e, t) {
                    return this.x *= e, this.y *= t || e, this
                }
                getSquareLength() {
                    return this.x ** 2 + this.y ** 2
                }
                getModelLength() {
                    return Math.sqrt(this.x ** 2 + this.y ** 2)
                }
                toArray() {
                    return [this.x, this.y]
                }
                toXY() {
                    return {
                        x: this.x,
                        y: this.y
                    }
                }
                constructor(e, t) {
                    this.x = 0, this.y = 0, "number" === typeof e && "number" === typeof t ? (this.x = e, this.y = t) : Array.isArray(e) ? [this.x, this.y] = e : (0, r.Gv)(e) && (this.x = e.x, this.y = e.y)
                }
            }
        },
        "CKB+": (e, t, i) => {
            i.d(t, {
                A: () => s
            });
            var r = i("oHkN"),
                o = i("p7cX");
            let s = class {
                isInvalid() {
                    return !(0, r.Et)(this._min) || !(0, r.Et)(this._max)
                }
                getMinValue() {
                    return this._min
                }
                setMinValue(e) {
                    return this._min = e, this
                }
                getMaxValue() {
                    return this._max
                }
                setMaxValue(e) {
                    return this._max = e, this
                }
                getInterval() {
                    return this._max - this._min
                }
                getExtent() {
                    return [this._min, this._max]
                }
                getDifference() {
                    return Math.max(this._max, this._min) - Math.min(this._max, this._min)
                }
                scaleAroundCenter(e) {
                    if (!(0, r.Et)(e)) return;
                    const t = .5 * (this._min + this._max),
                        i = .5 * (this._max - this._min) * e;
                    this._min = t - i, this._max = t + i
                }
                scaleAroundPoint(e, t) {
                    if (!(0, r.Et)(e) || !(0, r.Et)(t)) return;
                    const i = e - this.getMinValue(),
                        o = this.getMaxValue() - e;
                    this._min = e - i * t, this._max = e + o * t
                }
                scaleAboveBottom(e) {
                    if (!(0, r.Et)(e)) return;
                    const t = this.getInterval();
                    this._max = this._min + t * e
                }
                shift(e) {
                    return (0, r.Et)(e) ? (this._min += e, this._max += e, this) : this
                }
                contain(e, t = !1) {
                    return t ? e > this.getMinValue() && e < this.getMaxValue() : e >= this.getMinValue() && e <= this.getMaxValue()
                }
                sliceArray(e, t) {
                    if (0 === e.length) return e;
                    const i = (0, o.El)(e, (e => {
                            const i = t(e);
                            return this._min <= i ? -1 : 1
                        })),
                        r = (0, o.El)(e, (e => {
                            const i = t(e);
                            return this._max < i ? -1 : 1
                        }));
                    return e.slice(i, r)
                }
                getSliceArrayIndexs(e, t) {
                    if (0 === e.length) return [0, 0];
                    return [(0, o.El)(e, (e => {
                        const i = t(e);
                        return this._min <= i ? -1 : 1
                    })), (0, o.El)(e, (e => {
                        const i = t(e);
                        return this._max < i ? -1 : 1
                    }))]
                }
                constructor(e, t) {
                    this._min = 0, this._max = 0, this._min = e, this._max = t
                }
            }
        },
        jYFu: (e, t, i) => {
            i.d(t, {
                Cn: () => l,
                Io: () => h,
                MT: () => d,
                O5: () => v,
                OH: () => f,
                On: () => c,
                Pf: () => y,
                Q$: () => x,
                SE: () => g,
                Tr: () => u,
                XK: () => s,
                Xl: () => n,
                YN: () => m,
                b1: () => o,
                bw: () => a,
                yo: () => b
            });
            var r = i("HV0L");
            const o = {
                    [r.Wx.Month]: 2592e6,
                    [r.Wx.Day]: 864e5,
                    [r.Wx.Hour]: 36e5,
                    [r.Wx.Minute]: 6e4,
                    [r.Wx.Second]: 1e3
                },
                s = 1e-5,
                n = ["click", "dblclick", "mousedown", "mousemove", "mouseup", "mouseout", "wheel", "gesturestart", "gesturechange", "gestureend", "contextmenu"],
                a = [{
                    type: r.Wx.Month,
                    number: 36
                }, {
                    type: r.Wx.Month,
                    number: 24
                }, {
                    type: r.Wx.Month,
                    number: 12
                }, {
                    type: r.Wx.Month,
                    number: 6
                }, {
                    type: r.Wx.Month,
                    number: 3
                }, {
                    type: r.Wx.Month,
                    number: 1
                }, {
                    type: r.Wx.Day,
                    number: 7
                }, {
                    type: r.Wx.Day,
                    number: 3
                }, {
                    type: r.Wx.Day,
                    number: 1
                }, {
                    type: r.Wx.Hour,
                    number: 12
                }, {
                    type: r.Wx.Hour,
                    number: 6
                }, {
                    type: r.Wx.Hour,
                    number: 4
                }, {
                    type: r.Wx.Hour,
                    number: 2
                }, {
                    type: r.Wx.Hour,
                    number: 1
                }, {
                    type: r.Wx.Minute,
                    number: 30
                }, {
                    type: r.Wx.Minute,
                    number: 15
                }, {
                    type: r.Wx.Minute,
                    number: 5
                }, {
                    type: r.Wx.Minute,
                    number: 3
                }, {
                    type: r.Wx.Minute,
                    number: 1
                }, {
                    type: r.Wx.Second,
                    number: 30
                }],
                l = new Set(["strokeStyle", "fillStyle", "globalAlpha", "lineWidth", "lineCap", "lineJoin", "miterLimit", "shadowOffsetX", "shadowOffsetY", "shadowBlur", "shadowColor", "globalCompositeOperation", "font", "textAlign", "textBaseline", "direction", "lineDashOffset"]),
                c = { ...{
                        background: "",
                        "candle.upBarColor": "",
                        "candle.downBarColor": "",
                        "candle.lineColor": "",
                        "frame.borderLineColor": "",
                        "text.defaultColor": "",
                        "text.unavailable": r._j.Gray10,
                        "text.minMaxPrice": r._j.Gray10,
                        "icon.plus": "",
                        "axis.tickLineColor": "",
                        "axis.tickTextColor": "",
                        "area.stroke": "",
                        "area.fill1": "",
                        "volume.upBarColor": "",
                        "volume.downBarColor": "",
                        "volume.maLineColor": "",
                        "volume.upTextColor": "",
                        "volume.downTextColor": "",
                        defaultColor: r._j.CandleBlue,
                        "cross.labelTextColor": "",
                        "cross.borderLineColor": "",
                        "cross.upLabelBorderColor": r._j.Green500,
                        "cross.upLabelBgColor": r._j.Green600,
                        "cross.downLabelBgColor": r._j.Red600,
                        "cross.downLabelBorderColor": r._j.Red500,
                        "cross.defaultLabelTextColor": "",
                        "cross.defaultLabelBgColor": "",
                        "cross.defaultLabelBorderColor": "",
                        "boll.fillColor": "",
                        "grid.borderLineColor": "",
                        "countdown.upTextColor": r._j.Gray600,
                        "countdown.upBgColor": r._j.CandleGreen,
                        "countdown.upBorderColor": r._j.CandleGreen,
                        "countdown.downTextColor": r._j.Gray600,
                        "countdown.downBgColor": r._j.CandleRed,
                        "countdown.downBorderColor": r._j.CandleRed,
                        "vertGridLine.color": r._j.Gray10,
                        "horzGridLine.color": r._j.Gray10,
                        "LSratio.outline": "",
                        "LSratio.area": "",
                        "oi.bar": "",
                        "BS.buy": "",
                        "BS.sell": "",
                        "indicator.1": "",
                        "indicator.2": "",
                        "indicator.3": "",
                        "indicator.4": "",
                        "indicator.5": "",
                        "indicator.6": "",
                        "indicator.7": "",
                        "indicator.8": "",
                        "indicator.9": "",
                        "indicator.10": ""
                    },
                    background: r._j.White,
                    "candle.upBarColor": r._j.CandleGreen,
                    "candle.downBarColor": r._j.CandleRed,
                    "candle.lineColor": "#5a9ad8",
                    "frame.borderLineColor": r._j.Gray50,
                    "text.defaultColor": r._j.Gray600,
                    "axis.tickLineColor": r._j.Gray300,
                    "axis.tickTextColor": r._j.Gray300,
                    "cross.labelTextColor": r._j.White,
                    "cross.borderLineColor": r._j.Gray600,
                    "grid.borderLineColor": r._j.Gray10,
                    "volume.upBarColor": r._j.CandleGreen,
                    "volume.downBarColor": r._j.CandleRed,
                    "volume.maLineColor": r._j.LineColor1,
                    "volume.upTextColor": r._j.Green500,
                    "volume.downTextColor": r._j.Red500,
                    "boll.fillColor": r._j.AreaFillColor1,
                    "cross.defaultLabelTextColor": r._j.Gray600,
                    "cross.defaultLabelBgColor": r._j.Gray10,
                    "cross.defaultLabelBorderColor": r._j.Gray50,
                    "horzGridLine.color": r._j.Gray10,
                    "vertGridLine.color": r._j.Gray10,
                    "text.minMaxPrice": r._j.Gray10,
                    "text.unavailable": r._j.Gray10
                },
                d = { ...c,
                    background: r._j.Gray900,
                    "candle.lineColor": r._j.White,
                    "text.defaultColor": r._j.Gray200,
                    "frame.borderLineColor": r._j.Gray700,
                    "axis.tickLineColor": r._j.Gray500,
                    "axis.tickTextColor": r._j.Gray500,
                    "cross.borderLineColor": r._j.Gray200,
                    "grid.borderLineColor": r._j.Gray800,
                    "volume.upBarColor": r._j.Green700,
                    "volume.downBarColor": r._j.Red700,
                    "boll.fillColor": r._j.AreaFillColor2,
                    "cross.defaultLabelTextColor": r._j.Gray0,
                    "cross.defaultLabelBgColor": r._j.Gray700,
                    "cross.defaultLabelBorderColor": r._j.Gray600,
                    "horzGridLine.color": r._j.Gray800,
                    "vertGridLine.color": r._j.Gray800
                };
            var h, u, g;
            ! function(e) {
                e.MOUSE = "MOUSE", e.MOUSE_DOWN = "MOUSE_DOWN", e.MOUSE_DOWN_MOVE = "MOUSE_DOWN_MOVE", e.MOUSE_DOWN_UP = "MOUSE_DOWN_UP", e.MOUSE_MOVE = "MOUSE_MOVE", e.MOUSE_CLICK = "MOUSE_CLICK"
            }(h || (h = {})),
            function(e) {
                e.DRAW_TREND_LINE = "draw-trendline", e.DRAW_HORIZONTAL_EXTENDED_LINE = "draw-horizontal-extended-line", e.DRAW_EX_TREND_LINE = "draw-exTrendLine", e.DRAW_FIB_LINE = "draw-fibLine", e.DRAW_INFO_LINE = "draw-infoLine", e.DRAW_HORIZONTAL_LINE = "draw-horizontalLine", e.DRAW_VERTICAL_LINE = "draw-verticalLine", e.DRAW_PARRLLEL_LINE = "draw-parallelLine", e.DRAW_RAY_LINE = "draw-rayLine", e.DRAW_PRICE_LINE = "draw-priceLine", e.DRAW_ARROW_LINE = "draw-arrowLine", e.DRAW_UP_ARROW = "draw-upArrow", e.DRAW_DOWN_ARROW = "draw-downArrow", e.DRAW_LEFT_ARROW = "draw-leftArrow", e.DRAW_RIGHT_ARROW = "draw-rightArrow", e.DRAW_CROSS_LINE = "draw-crossLine", e.DRAW_TEXT = "draw-text", e.DRAW_RECTANGLE = "draw-rectangle", e.DRAW_DELETE_ALL = "draw-deleteAll", e.DRAW_MAGNET = "draw-magnet", e.DRAW_BAR = "draw-bar", e.DRAW_DAY = "draw-day", e.DRAW_HOUR = "draw-hour", e.DRAW_MINUTE = "draw-minute", e.DRAW_DEFAULT_CURSOR = "draw-defaultCursor", e.DRAW_CROSS_CURSOR = "draw-crossCursor", e.DRAW_CONTINUE = "draw-continue", e.DRAW_LOCK = "draw-lock", e.DRAW_TOGGLE = "draw-toggle-visible", e.NOTIFICATION_MAGNET_ENABLED = "magnet-enabled-prompt", e.ANNOTATION_DEFAULT = "annotation-back-default", e.ANNOTATION_COLOR = "annotation-color", e.ANNOTATION_BACKGROUND = "annotation-background", e.ANNOTATION_LINE_WIDTH = "annotation-line-width", e.ANNOTATION_LINE_STYLE = "annotation-line-style", e.ANNOTATION_LOCK = "annotation-lock", e.ANNOTATION_UNLOCK = "annotation-unLock", e.ANNOTATION_DELETE = "annotation-delete", e.ANNOTATION_FONT_SIZE = "annotation-font-size", e.ANNOTATION_FONT_BOLD = "annotation-font-bold", e.ANNOTATION_EDIT_TEXT = "annotation-edit-text", e.ICON_FOLD = "icon-fold", e.ICON_UNFOLD = "icon-unfold"
            }(u || (u = {})),
            function(e) {
                e.DEFAULT = "default", e.CROSSHAIR = "crosshair", e.NSRESIZE = "ns-resize", e.EWRESIZE = "ew-resize", e.POINTER = "pointer", e.GRAB = "grab", e.GRABBING = "grabbing"
            }(g || (g = {}));
            const p = 6e4,
                m = {
                    "1s": 1e3,
                    "1m": p,
                    "3m": 18e4,
                    "5m": 3e5,
                    "15m": 9e5,
                    "30m": 18e5,
                    "1h": 36e5,
                    "2h": 72e5,
                    "4h": 144e5,
                    "6h": 216e5,
                    "8h": 288e5,
                    "12h": 432e5,
                    "1d": 864e5,
                    "3d": 2592e5,
                    "1w": 6048e5,
                    "1M": 2592e6
                },
                x = Object.keys(m),
                f = e => m[e] || 0;
            var y, b, v;
            ! function(e) {
                e.BackToDefault = "BackToDefault", e.Color = "Color", e.LineWidth = "LineWidth", e.LineStyle = "LineStyle", e.Background = "Background", e.Lock = "Lock", e.TextFontSize = "TextFontSize", e.TextColor = "TextColor", e.TextBold = "TextBold", e.TextEdit = "TextEdit", e.Delete = "Delete"
            }(y || (y = {})),
            function(e) {
                e.Hide = "Hide", e.Setting = "Setting", e.Delete = "Delete"
            }(b || (b = {})),
            function(e) {
                e.QuickOrderFloatingWindow = "QuickOrderFloatingWindow", e.ChartTrading = "ChartTrading", e.AskBid = "AskBid", e.PriceLine = "PriceLine", e.Countdown = "Countdown", e.PercentageScale = "PercentageScale", e.LogarithmicScale = "LogarithmicScale", e.InvertedScale = "InvertedScale", e.BuyAveragePrice = "BuyAveragePrice", e.SellAveragePrice = "SellAveragePrice", e.InformationMines = "InformationMines", e.GoDate = "goDate", e.Setting = "setting", e.RightClickPlaceOrder = "RightClickPlaceOrder"
            }(v || (v = {}))
        },
        HV0L: (e, t, i) => {
            var r, o, s, n, a, l, c, d, h, u, g, p, m, x, f, y;
            i.d(t, {
                    BC: () => f,
                    HP: () => d,
                    NB: () => g,
                    OP: () => u,
                    OQ: () => a,
                    Sc: () => x,
                    Tf: () => s,
                    Wx: () => o,
                    X2: () => m,
                    _b: () => l,
                    _j: () => c,
                    cs: () => y,
                    dp: () => p,
                    lw: () => h,
                    nO: () => n
                }),
                function(e) {
                    e.Up = "up", e.Down = "down"
                }(r || (r = {})),
                function(e) {
                    e.Year = "Year", e.Month = "Month", e.Week = "Week", e.Day = "Day", e.Hour = "Hour", e.Minute = "Minute", e.Second = "Second"
                }(o || (o = {})),
                function(e) {
                    e.Alphabetic = "alphabetic", e.Top = "top", e.Hanging = "hanging", e.Middle = "middle", e.Ideographic = "ideographic", e.Bottom = "bottom"
                }(s || (s = {})),
                function(e) {
                    e.Start = "start", e.End = "end", e.Center = "center", e.Left = "left", e.Right = "right"
                }(n || (n = {})),
                function(e) {
                    e.All = "All", e.Marks = "Marks", e.Resize = "Resize"
                }(a || (a = {})),
                function(e) {
                    e.DEFAULT = "", e.CANDLE = "CANDLE", e.MACD = "MACD", e.EMA = "EMA", e.MA = "MA", e.SMA = "SMA", e.MOMENTUM = "MOMENTUM", e.ATR = "ATR", e.BOLL = "BOLL", e.VOL = "VOL"
                }(l || (l = {})),
                function(e) {
                    e.White = "#ffffff", e.Black = "#000000", e.Gray = "#2d2d2d", e.CandleRed = "#E0294A", e.CandleGreen = "#2EBD85", e.CandleBlue = "#0303F7", e.LightGray = "#9a9b9a", e.GrayD = "#D8D8D8", e.GrayF = "#F2F2F2", e.Gray8 = "#848E9C", e.GrayE = "#EAECEF", e.GrayC = "#C1C6CD", e.YellowF = "#F0B90B", e.Dark4 = "#48515D", e.Dark2 = "#212833", e.Dark2A = "#2A2F37", e.Dark1F = "#1F2124", e.Blue3 = "#328DFD", e.Gray0 = "#FFFFFF", e.Gray5 = "#FAFAFA", e.Gray10 = "#F5F5F5", e.Gray50 = "#E6E8EA", e.Gray100 = "#CACED3", e.Gray200 = "#AEB4BC", e.Gray300 = "#929AA5", e.Gray400 = "#76808F", e.Gray500 = "#5E6673", e.Gray600 = "#474D57", e.Gray700 = "#2B2F36", e.Gray800 = "#1E2026", e.Gray900 = "#14151A", e.Gray1000 = "#0B0E11", e.Red5 = "#FEF6F7", e.Red10 = "#FEF1F2", e.Red50 = "#FDDDDE", e.Red100 = "#FDBAB9", e.Red200 = "#FC9897", e.Red300 = "#FC6E75", e.Red400 = "#F84960", e.Red500 = "#D9304E", e.Red600 = "#982A42", e.Red700 = "#5C1929", e.Red800 = "#35141D", e.Red900 = "#221113", e.Green5 = "#F0FFFA", e.Green10 = "#E2FDF4", e.Green50 = "#CBF6E8", e.Green100 = "#9BE8CD", e.Green200 = "#54E8B4", e.Green300 = "#2ED191", e.Green400 = "#02C076", e.Green500 = "#0F8F62", e.Green600 = "#1E644E", e.Green700 = "#143D31", e.Green800 = "#102821", e.Green900 = "#0B1915", e.LineColor1 = "#ff00ff", e.LineColor2 = "#cc0066", e.LineColor3 = "#00cccc", e.LineColor4 = "#2ED191", e.LineColor5 = "#bd930b", e.LineColor6 = "#c305c6", e.AreaFillColor1 = "#e5e5f2", e.AreaFillColor2 = "#161833"
                }(c || (c = {})),
                function(e) {
                    e.BASE = "BASE", e.EXT = "EXT"
                }(d || (d = {})),
                function(e) {
                    e.Normal = "NORMAL", e.Percentage = "PERCENTAGE"
                }(h || (h = {})),
                function(e) {
                    e.Up = "UP", e.Down = "DOWN", e.Right = "RIGHT", e.Left = "LEFT"
                }(u || (u = {})),
                function(e) {
                    e.Line = "LINE", e.Bar = "BAR", e.BarCandle = "BAR_CANDLE", e.CandleBar = "CANDLEBAR", e.Area = "AREA", e.GradientArea = "GRADIENTAREA", e.TimeGradientArea = "TIMEGRADIENTAREA", e.Point = "POINT", e.CrossLine = "CROSSLINE", e.Transcation = "TRANSCATION", e.HollowCandleBar = "HOLLOW_CANDLEBAR", e.HollowBar = "HOLLOW_BAR"
                }(g || (g = {})),
                function(e) {
                    e.Width = "WIDTH", e.Height = "HIGHT", e.All = "ALL"
                }(p || (p = {})),
                function(e) {
                    e.DefaultCursor = "DEFAULTCURSOR", e.CrossHairCursor = "CROSSHAIRCURSOR", e.TrendLine = "TRENDLINE", e.HorizontalExtendedLine = "HROZONTAL_EXTENDED_LINE", e.ExtendTrendLine = "EXTRENDLINE", e.FibonacciLine = "FIBONACCILINE", e.InfoLine = "INFOLINE", e.HorizontalLine = "HORIZONTALLINE", e.VerticalLine = "VERTICALLINE", e.CrossLine = "CROSSLINE", e.ParallelLine = "PARALLELLINE", e.UpArrow = "UPARROW", e.DownArrow = "DOWNARROW", e.LeftArrow = "LEFTARROW", e.RightArrow = "RIGHTARROW", e.Text = "TEXT", e.Rectangle = "RECTANGLE", e.RayLine = "RAYLINE", e.PriceLine = "PRICELINE", e.ArrowLine = "ARROWLINE", e.OpenOrders = "OPEN_ORDERS", e.LabelLines = "LABELLINES", e.SingleLabelLines = "SINGLE_LABEL_LINES", e.Alerts = "ALERTS", e.Positions = "POSITIONS", e.InformationMines = "INFORMATION_MINES", e.ExecutionOrders = "EXECUTION_ORDERS", e.ToolTip = "TOOLTIP", e.Delete = "DELETE", e.KeepDrawing = "KeepDrawing", e.LockDraw = "LOCKDRAW", e.ToggleVisible = "TOGGLEVISIBLE", e.Empty = "Empty", e.Magnet = "Magnet", e.LegacyArrow = "ARROW", e.LegacyStraightLine = "STRAIGHTLINE"
                }(m || (m = {})),
                function(e) {
                    e.SOLID = "solid", e.DASHED = "dashed", e.DOTTED = "dotted", e.DASHED_2 = "dashed_2"
                }(x || (x = {})),
                function(e) {
                    e.BOLD = "bold", e.NORMAL = "NORMAL"
                }(f || (f = {})),
                function(e) {
                    e.EDIT = "EDIT", e.ADD = "ADD", e.REMOVE = "REMOVE"
                }(y || (y = {}))
        },
        ynAk: (e, t, i) => {
            i.d(t, {
                XG: () => l,
                Zf: () => d,
                iX: () => a,
                l5: () => c,
                rN: () => h
            });
            var r = i("bmS5"),
                o = i.n(r),
                s = i("HV0L"),
                n = i("p7cX");
            const a = e => e.reduce(((e, t) => Math.max(e, (({
                    open: e,
                    close: t,
                    high: i,
                    low: r
                }) => [e, t, i, r].map((e => e.toString())).reduce(((e, t) => Math.max(e, (e => {
                    const [, t = ""] = e.split(".");
                    return t.length
                })(t))), 0))(t))), 0),
                l = (e, {
                    abortPredicate: t,
                    onAbort: i,
                    handleLoadLeft: r,
                    handleLoadRight: o
                }) => {
                    const s = e.shiftedMaxTime - e.shiftedMinTime,
                        n = (e.minTime - e.shiftedMinTime) / s,
                        a = (e.shiftedMaxTime - e.maxTime) / s;
                    if (t()) return i ? .();
                    n >= .3 ? r(e) : a >= .5 && o(e)
                },
                c = ({
                    chartType: e,
                    candlestickItem: {
                        high: t,
                        low: i,
                        close: r
                    }
                }) => {
                    switch (e) {
                        case s.NB.CandleBar:
                        case s.NB.HollowCandleBar:
                        case s.NB.BarCandle:
                            return {
                                h: t,
                                l: i
                            };
                        default:
                            return {
                                h: r,
                                l: r
                            }
                    }
                },
                d = ({
                    previousItem: e,
                    currentItem: t
                }) => t && e ? (0, n.e8)((t.close - e.close) / e.close) : "",
                h = ({
                    time: e,
                    tolerance: t,
                    seriesData: i
                }) => {
                    if (i.length < 0) return;
                    const r = (({
                            time: e,
                            tolerance: t
                        }) => i => Math.abs(e - i.time) < t ? 0 : e - i.time)({
                            time: e,
                            tolerance: t
                        }),
                        s = (0, n.El)(i, r);
                    return i[o()(s, 0, i.length - 1)]
                }
        },
        hpT2: (e, t, i) => {
            i.d(t, {
                A: () => s
            });
            var r = i("p7cX");
            const o = "GLOBAL_CANVS";
            let s = class e {
                static getBufferCanvas(t) {
                    return e._globalCache.get(t)
                }
                static setBufferCanvas(t, i) {
                    e._globalCache.set(t, i)
                }
                static drawLine(e, t, i, r, o) {
                    e.moveTo(t, i), e.lineTo(r, o)
                }
                static drawLines(e, t) {
                    for (let i = 0; i < t.length; i++) {
                        const {
                            x: r,
                            y: o
                        } = t[i];
                        0 === i ? e.moveTo(r, o) : e.lineTo(r, o)
                    }
                }
                static drawPoints(e, t, i) {
                    if (i) {
                        const {
                            width: r,
                            height: o
                        } = i, s = .5 * r, n = .5 * o;
                        t.forEach((({
                            x: t,
                            y: a
                        }) => {
                            e.drawImage(i, t - s, a - n, r, o)
                        }))
                    } else {
                        const i = 2,
                            r = .5 * i;
                        t.forEach((t => {
                            e.strokeRect(t.x - r, t.y - r, i, i)
                        }))
                    }
                }
                static drawCrossLines(e, t) {
                    t.forEach((({
                        x: t,
                        y: i
                    }) => {
                        this.drawLine(e, t - 2, i, t + 2, i), this.drawLine(e, t, i - 2, t, i + 2)
                    }))
                }
                static drawBackground(e, t = "#FFFFFF", i) {
                    i || (i = {
                        x: 0,
                        y: 0,
                        width: e.canvas.width,
                        height: e.canvas.height
                    }), e.fillStyle = t, e.fillRect(i.x, i.y, i.width, i.height)
                }
                static clearRect(e, t) {
                    e && (t || (t = {
                        x: 0,
                        y: 0,
                        width: e.canvas.width,
                        height: e.canvas.height
                    }), e ? .clearRect ? .(t.x, t.y, t.width, t.height))
                }
                static drawText(e, t, i, r, o) {
                    e.fillText(t, i, r, o)
                }
                static strokeRect(e, t, i, r, o) {
                    e.strokeRect(t, i, r, o)
                }
                static fillRect(e, t, i, r, o) {
                    e.fillRect(t, i, r, o)
                }
                static roundRect(e, {
                    x: t,
                    y: i,
                    width: r,
                    height: o
                }, s) {
                    if (e.roundRect) return void e.roundRect(t, i, r, o, s);
                    const [n, a, l, c] = "number" === typeof s ? [s, s, s, s] : s;
                    e.beginPath(), e.moveTo(t, i + n), e.arc(t + n, i + n, n, Math.PI, 1.5 * Math.PI), e.lineTo(t + r - a, i), e.arc(t + r - a, i + a, a, 1.5 * Math.PI, 2 * Math.PI), e.lineTo(t + r, i + o - l), e.arc(t + r - l, i + o - l, l, 0, .5 * Math.PI), e.lineTo(t + c, i + o), e.arc(t + c, i + o - c, c, .5 * Math.PI, Math.PI), e.closePath()
                }
                static drawCircle(e, t, i, r) {
                    e.arc(t, i, r, 0, 2 * Math.PI)
                }
                static fillPath2D(e, t) {
                    e.fill(t)
                }
                static strokePath2D(e, t) {
                    e.stroke(t)
                }
                static drawImage(e, t, i, r, o, s) {
                    t ? .width < 1 || t ? .height < 1 || (o && s ? e.drawImage(t, i, r, o, s) : e.drawImage(t, i, r))
                }
                static getCanvas() {
                    let e = this.getBufferCanvas(o);
                    return e || (e = (0, r.n)("canvas", {}), this.setBufferCanvas(o, e)), e
                }
                static getContext() {
                    const e = this.getCanvas();
                    return this._context || (this._context = e.getContext("2d")), this._context
                }
                static measureTextWidth(e, t) {
                    const i = this.getContext();
                    if (!i) return 0;
                    i.save(), t ? .font && (i.font = t ? .font);
                    const r = i.measureText(e);
                    return i.restore(), 5 * Math.floor(r.width / 5) + r.width % 5
                }
            };
            s._globalCache = new Map
        },
        GKEL: (e, t, i) => {
            i.d(t, {
                J4: () => u,
                SR: () => h,
                V1: () => c,
                WZ: () => d,
                gZ: () => a,
                iQ: () => s,
                vy: () => n
            });
            var r = i("p7cX");
            const o = new Map;

            function s(e, t) {
                e.classList.contains(t) || e.classList.add(t)
            }

            function n(e, t) {
                e.classList && e.classList.remove(t)
            }

            function a(e, t) {
                e.innerHTML = t
            }
            const l = (() => {
                let e, t, i;
                const o = ["Up", "Down", "Left", "Right"],
                    a = e => {
                        i && clearTimeout(i), i = e
                    };
                return (l, c) => {
                    if (!e) {
                        e = (0, r.n)("div", {
                            display: "none"
                        }, "tooltip-wrap"), t = (0, r.n)("div", {}, "tooltip-text");
                        const i = (0, r.n)("div", {}, "tooltip-arrow");
                        e.append(t, i)
                    }
                    return c && (o.forEach((t => t !== c && n(e, t.toLowerCase()))), s(e, c.toLowerCase())), l && (t.innerText = l), {
                        tooltip: e,
                        timer: i,
                        setTimer: a
                    }
                }
            })();

            function c(e, t = "Up") {
                e.addEventListener("mouseenter", (() => {
                    const i = e.getAttribute("tooltip") || "",
                        {
                            tooltip: o,
                            timer: s
                        } = l(i, t);
                    s && clearTimeout(s), o.parentNode !== e && e.append(o), (0, r.EM)(o, {
                        display: "block"
                    })
                })), e.addEventListener("mouseleave", (() => {
                    const {
                        tooltip: e,
                        setTimer: i
                    } = l("", t);
                    i(setTimeout((() => {
                        (0, r.EM)(e, {
                            display: "none"
                        })
                    }), 100))
                }))
            }

            function d(e, t = !0) {
                if (t && o.has(e)) {
                    const t = o.get(e);
                    if (!t) return new Promise(((e, t) => t(new Error("cache not found"))));
                    const i = t.image;
                    return new Promise((e => {
                        i.complete ? e(i) : i.onload = () => {
                            e(i)
                        }
                    }))
                }
                return new Promise((t => {
                    "undefined" === typeof window && t(null);
                    const i = new Image,
                        r = URL.createObjectURL(new Blob([e], {
                            type: "image/svg+xml"
                        }));
                    i.src = r, i.onload = () => {
                        t(i)
                    }, o.set(e, {
                        url: r,
                        image: i
                    })
                }))
            }
            const h = ({
                    url: e,
                    width: t,
                    height: i
                }) => new Promise(((r, o) => {
                    window || o();
                    const s = new Image(t, i);
                    s.src = e, s.onload = () => {
                        r(s)
                    }
                })),
                u = ({
                    svg: e,
                    id: t,
                    className: i = "icon-box",
                    style: o = {}
                }) => {
                    const s = (0, r.n)("div", o, i);
                    return t && s.setAttribute("id", t), s.innerHTML = e, s
                }
        },
        p7cX: (e, t, i) => {
            i.d(t, {
                Bo: () => N,
                De: () => U,
                EM: () => f,
                El: () => E,
                Fr: () => I,
                Fy: () => L,
                GO: () => T,
                J0: () => R,
                Mg: () => w,
                Ni: () => S,
                No: () => X,
                Os: () => j,
                Pt: () => b,
                ZH: () => F,
                ZV: () => z,
                _: () => k,
                be: () => y,
                e8: () => _,
                fU: () => C,
                gR: () => W,
                jS: () => x,
                lP: () => p,
                mZ: () => D,
                n: () => m,
                nF: () => M,
                oZ: () => O,
                pb: () => H,
                rL: () => B,
                sg: () => V,
                yQ: () => A
            });
            var r = i("84F9"),
                o = i.n(r),
                s = i("IcKY"),
                n = i.n(s),
                a = i("Ufvw"),
                l = i.n(a),
                c = i("J+v0"),
                d = i.n(c),
                h = i("HV0L"),
                u = i("jYFu"),
                g = i("oHkN");

            function p(e, t, i = {
                style: {
                    position: "reletive",
                    width: "100%",
                    height: "100%"
                }
            }) {
                const r = document.createElement("canvas");
                r.width = e * D(), r.height = t * D(), i.className && (r.className = i.className);
                const {
                    style: o
                } = i;
                return o && f(r, o), r
            }

            function m(e, t, i) {
                const r = document.createElement(e);
                return f(r, t), i && r.classList.add(i), r
            }

            function x(e, t) {
                Object.keys(t || {}).forEach((i => {
                    const r = t[i];
                    void 0 !== r && u.Cn.has(i) && e && (e[i] = r)
                }))
            }

            function f(e, t = {}) {
                e && e.style && Object.keys(t).forEach((i => {
                    e.style[i] = t[i]
                }))
            }

            function y(e, t = u.XK) {
                return Math.abs(e) < t
            }

            function b(e) {
                const {
                    offsetX: t,
                    offsetY: i
                } = e.originEvent;
                if ((void 0 === t || void 0 === i) && e.target) {
                    const {
                        left: t = 0,
                        top: i = 0
                    } = e.target.getBoundingClientRect(), {
                        clientX: r,
                        clientY: o
                    } = e;
                    return {
                        x: r - t,
                        y: o - i
                    }
                }
                return {
                    x: t,
                    y: i
                }
            }

            function v(e) {
                return (0, g.Et)(e) ? e : e instanceof Date ? e.getTime() : (0, g.Kg)(e) ? e.replace(/\//g, "-") : NaN
            }

            function C(e, t = "YYYY-MM-DD hh:mm:ss") {
                const i = v(e);
                return isNaN(i) ? t : d()(i).format(t)
            }

            function w(e, t) {
                const i = parseFloat(`${e}`);
                if (isNaN(i) || isNaN(t)) return "NaN";
                if (t <= 0) return i.toFixed(0);
                if (e === 1 / 0 || e === -1 / 0) return e.toLocaleString();
                return l()(+e).toFixed(t).toString()
            }

            function A(e, t) {
                const i = new Date(e);
                if (t === h.Wx.Month) {
                    return C(e, 0 === i.getUTCMonth() ? "YYYY" : "MM/DD")
                }
                if (0 === i.getUTCHours()) {
                    return C(e, {
                        [h.Wx.Month]: "MM/DD",
                        [h.Wx.Day]: "MM/DD",
                        [h.Wx.Hour]: "MM/DD",
                        [h.Wx.Minute]: "HH:mm",
                        [h.Wx.Second]: "HH:mm:ss"
                    }[t])
                }
                return C(e, {
                    [h.Wx.Day]: "MM/DD",
                    [h.Wx.Hour]: "HH:00",
                    [h.Wx.Minute]: "HH:mm",
                    [h.Wx.Second]: "HH:mm:ss"
                }[t])
            }

            function S(e, t) {
                let i = "YYYY/MM/DD HH:mm:ss";
                return t === h.Wx.Month || t === h.Wx.Day ? i = "YYYY/MM/DD HH:00" : t !== h.Wx.Minute && t !== h.Wx.Hour || (i = "YYYY/MM/DD HH:mm"), C(e, i)
            }

            function T(e, t = 2) {
                if (Math.abs(e) < 1e-9 && Math.abs(e) > 0) return `${e.toExponential(2)}`;
                if (Math.abs(e) < 1e3) return k(e, t);
                const i = [{
                    value: 1,
                    symbol: ""
                }, {
                    value: 1e3,
                    symbol: "K"
                }, {
                    value: 1e6,
                    symbol: "M"
                }, {
                    value: 1e9,
                    symbol: "B"
                }, {
                    value: 1e12,
                    symbol: "T"
                }, {
                    value: 1e15,
                    symbol: "P"
                }, {
                    value: 1e18,
                    symbol: "E"
                }];
                let r;
                for (r = i.length - 1; r > 0 && !(Math.abs(e) >= i[r].value); r--);
                return (e / i[r].value).toFixed(t).replace(/\.0+$|(\.[0-9]*[1-9])0+$/, "$1") + i[r].symbol
            }

            function k(e, t, i = !1) {
                if (isNaN(e)) return "NaN";
                if (t <= 0) return `${Math.floor(e)}`;
                if (i) {
                    const i = e.toLocaleString("en-US", {
                            maximumFractionDigits: t + 2,
                            minimumFractionDigits: t + 2,
                            useGrouping: !1
                        }),
                        [r, o = ""] = i.split(".");
                    return `${r}.${o.slice(0,t).padEnd(t,"0")}`
                }
                if (e === 1 / 0) return e.toLocaleString();
                return new(l())(+e).toFixed(t)
            }

            function L(e, t = 0) {
                if (isNaN(e)) return "NaN";
                if (e === Number.POSITIVE_INFINITY || e === Number.NEGATIVE_INFINITY) return e.toLocaleString();
                const i = (100 * e).toLocaleString("en-US", {
                        maximumFractionDigits: t + 1,
                        minimumFractionDigits: t + 1,
                        useGrouping: !1
                    }),
                    [r, o] = i.split(".");
                if (t > 0) {
                    return `${r}.${o.slice(0,t)}%`
                }
                return `${r}%`
            }

            function _(e, t = 2) {
                return (0, g.Et)(e) ? `${(100*e).toFixed(t)}%` : "0.00%"
            }
            let P;

            function D() {
                return "undefined" !== typeof P ? P : "undefined" !== typeof window && window.devicePixelRatio || 1
            }

            function I() {
                if ("undefined" !== typeof navigator) {
                    const e = navigator.userAgent;
                    return /Android|webOS|iPhone|iPod|BlackBerry/i.test(e)
                }
                return !1
            }

            function V(e, t = 0, i = !1) {
                let r = null;
                return (...o) => {
                    r && clearTimeout(r), i && null === r ? e.apply(null, [...o]) : r = setTimeout((() => {
                        e.apply(null, [...o])
                    }), t)
                }
            }

            function M(e, t) {
                let i;
                return (...r) => {
                    const o = +new Date;
                    (!i || o - i > t) && (e.call(null, ...r), i = o)
                }
            }

            function B(e, ...t) {
                if (!t.length) return e;
                const i = t.shift();
                return void 0 === i ? e : ((0, g.Gv)(e) && (0, g.Gv)(i) && Object.keys(i).forEach((t => {
                    (0, g.Gv)(i[t]) ? (e[t] || (e[t] = {}), B(e[t], i[t])) : e[t] = i[t]
                })), B(e, ...t))
            }

            function E(e, t) {
                let i, r = 0,
                    o = e.length;
                for (; r < o;) {
                    i = Math.floor((o + r) / 2);
                    const s = t(e[i]);
                    if (!(0, g.Et)(s)) throw new Error(`binarySearch result is not number: ${s}`);
                    if (s < 0 && (o = i), 0 === s) return i;
                    s > 0 && (r = i + 1)
                }
                return i = Math.floor((o + r) / 2), i
            }

            function j() {
                return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (e => {
                    const t = 16 * Math.random() | 0;
                    return ("x" === e ? t : 3 & t | 8).toString(16)
                }))
            }

            function O(e) {
                if (e.startsWith("#")) return {
                    r: parseInt(e.slice(1, 3), 16),
                    g: parseInt(e.slice(3, 5), 16),
                    b: parseInt(e.slice(5, 7), 16),
                    a: 1
                };
                const t = e.match(/\(([^)]*)\)/);
                if (t) {
                    const e = t[1],
                        [i, r, o, s] = e.split(",");
                    return {
                        r: parseInt(i, 10),
                        g: parseInt(r, 10),
                        b: parseInt(o, 10),
                        a: void 0 === s ? 1 : parseFloat(s)
                    }
                }
                return {
                    r: 255,
                    g: 255,
                    b: 255,
                    a: 0
                }
            }

            function H(e, t) {
                const i = [],
                    r = [];
                for (let o = 0, s = e.length; o < s; o++) t(e[o]) ? i.push(e[o]) : r.push(e[o]);
                return [i, r]
            }

            function R(e, t) {
                let i, r;
                return o => {
                    i && clearTimeout(i), r = e(o, r), i = setTimeout((() => {
                        t.call(null, r), r = void 0
                    }), 16)
                }
            }

            function N(e) {
                const t = Object.keys(e || {});
                return JSON.stringify(t.sort().reduce(((t, i) => (t[i] = e[i], t)), {}))
            }

            function W(e, t) {
                const i = Object.keys(t || {}),
                    r = o()(e, i);
                return n()(r, t)
            }

            function F(e) {
                return e.replace(/^\S/, (e => e.toUpperCase()))
            }
            const z = ({
                    number: e,
                    digits: t
                }) => e.toLocaleString("en-US", {
                    maximumFractionDigits: t,
                    minimumFractionDigits: t,
                    useGrouping: !1
                }),
                X = (e, t) => {
                    const [i] = /(#\w+)/g.exec(e) || [];
                    return i ? ((e, t) => {
                        const i = e.replace("#", "");
                        return `rgba(${parseInt(i.substring(0,2),16)},${parseInt(i.substring(2,4),16)},${parseInt(i.substring(4,6),16)},${t})`
                    })(i, t) : e
                },
                U = e => getComputedStyle(document.body).getPropertyValue(e)
        },
        oHkN: (e, t, i) => {
            function r(e) {
                return "[object String]" === Object.prototype.toString.call(e)
            }

            function o(e) {
                return "number" === typeof e && isFinite(e)
            }

            function s(e) {
                return null !== e && "[object Object]" === Object.prototype.toString.call(e)
            }
            i.d(t, {
                Et: () => o,
                Gv: () => s,
                Kg: () => r
            })
        },
        NbzZ: (e, t, i) => {
            i.d(t, {
                t: () => u
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i.n(o),
                n = i("w2W/"),
                a = i("k+xn");
            const l = ({
                    sentryEventId: e,
                    name: t,
                    resetErrorBoundary: i
                }) => {
                    const s = (0, o.useCallback)((() => {
                            window.location.reload()
                        }), []),
                        l = (0, o.useCallback)((() => {
                            e && (0, n.l)(e)
                        }), [e]);
                    return (0, r.jsxs)("div", {
                        className: "error-boundary-default",
                        children: [(0, r.jsxs)("p", {
                            className: "error-boundary-default-tip",
                            children: ["Sorry, ", t || "something", " went wrong."]
                        }), !!e && (0, r.jsxs)("p", {
                            className: "error-boundary-default-id",
                            onClick: l,
                            children: [e, (0, r.jsx)(a.A, {})]
                        }), (0, r.jsxs)("p", {
                            className: "error-boundary-default-tip",
                            children: [(0, r.jsx)("span", {
                                className: "error-boundary-default-action",
                                onClick: i,
                                children: "Reload"
                            }), " ", "it or", " ", (0, r.jsx)("span", {
                                className: "error-boundary-default-action",
                                onClick: s,
                                children: "refresh"
                            }), " ", "the page."]
                        })]
                    })
                },
                c = {
                    hasError: !1,
                    error: null,
                    info: null,
                    sentryEventId: null
                },
                d = "fatal";
            let h = !1;
            class u extends s().Component {
                static getDerivedStateFromError() {
                    return {
                        hasError: !0
                    }
                }
                componentDidCatch(e, t) {
                    const {
                        name: i,
                        beforeCapture: r
                    } = this.props, o = t ? .componentStack;
                    console.error(`${i||"Something"} went wrong.`, e, o);
                    try {
                        if ("undefined" !== typeof window && "undefined" !== typeof window.Sentry) {
                            const t = window.Sentry.captureException(e, (function(t) {
                                return r ? .(t, e, o), t.setExtra("componentStack", o), t.setLevel(d), t.setTag("component", i || "ErrorBoundary ".concat(e.message)), t
                            }));
                            this.setState({
                                sentryEventId: t
                            })
                        }
                    } catch (s) {
                        console.error("Error reporting failed: ", s)
                    }
                    this.props.onError ? .(e, t ? .componentStack, null), this.setState({
                        error: e,
                        info: t,
                        hasError: !0
                    })
                }
                componentDidMount() {
                    const {
                        onComponentMounting: e
                    } = this.props;
                    e && e()
                }
                componentWillUnmount() {
                    const {
                        error: e,
                        info: t
                    } = this.state, {
                        onUnmount: i
                    } = this.props;
                    i && i(e, t ? .componentStack, null)
                }
                render() {
                    const {
                        error: e,
                        info: t,
                        hasError: i,
                        sentryEventId: o
                    } = this.state, {
                        fallbackRender: n,
                        FallbackComponent: a,
                        fallback: c,
                        name: d
                    } = this.props;
                    if (i) {
                        const i = {
                            componentStack: t ? .componentStack,
                            error: e,
                            resetErrorBoundary: this.resetErrorBoundary,
                            eventId: null
                        };
                        return s().isValidElement(c) ? c : "function" === typeof n ? n(i) : "function" === typeof a ? (0, r.jsx)(a, { ...i
                        }) : (0, r.jsx)(l, {
                            name: d,
                            sentryEventId: o,
                            resetErrorBoundary: this.resetErrorBoundary
                        })
                    }
                    return this.props.children
                }
                constructor(e) {
                    super(e), this.state = c, this.resetErrorBoundary = () => {
                        const {
                            error: e,
                            info: t,
                            sentryEventId: i
                        } = this.state, {
                            onReset: r
                        } = this.props;
                        r && r(e, t ? .componentStack, i), this.setState(c)
                    }, !h && "undefined" !== typeof Sentry && "addGlobalEventProcessor" in Sentry && (Sentry.addGlobalEventProcessor((e => {
                        try {
                            return e.level === d && e.exception && e.exception.values.forEach((e => {
                                e.mechanism.handled = !1
                            })), e
                        } catch (t) {
                            return e
                        }
                    })), h = !0)
                }
            }
        },
        "9RIf": (e, t, i) => {
            i.d(t, {
                A: () => f
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i("OlNZ"),
                n = i.n(s),
                a = i("V080"),
                l = i("xqbL"),
                c = i.n(l),
                d = i("2IQ4"),
                h = i("Vhyo"),
                u = i("XB2G"),
                g = i("vOeE"),
                p = i("61q2"),
                m = i("KRuP");
            var x = i("iEsh");
            let f = class extends o.Component {
                componentDidMount() {
                    const {
                        autoplay: e
                    } = this.props;
                    e && window.addEventListener("resize", this.onWindowResized), this.innerSlider = this.slick && this.slick.innerSlider
                }
                componentDidUpdate(e) {
                    JSON.stringify(this.props.content) !== JSON.stringify(e.content) && this.goTo(this.props.initialSlide || 0, !1)
                }
                componentWillUnmount() {
                    const {
                        autoplay: e
                    } = this.props;
                    e && (window.removeEventListener("resize", this.onWindowResized), this.onWindowResized.cancel())
                }
                goTo(e, t = !1) {
                    this.slick.slickGoTo(e, t)
                }
                render() {
                    return this.state.closeAll || 0 === this.props.content.length ? null : (0, r.jsxs)(r.Fragment, {
                        children: [this.renderCarousel(), (0, r.jsx)(m.mL, {
                            styles: m.AH `
            ${"\n.trade-carousel-vertical {\n  background: #3B2601;\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  margin: 0;\n  font-size: 14px;\n  font-variant: tabular-nums;\n  list-style: none;\n  -webkit-font-feature-settings: 'tnum';\n          font-feature-settings: 'tnum';\n}\n\n.trade-carousel-vertical .trade-carousel-icon {\n  height: 20px;\n  line-height: 20px;\n  margin-right: 10px;\n}\n\n.trade-carousel .slick-slider {\n  position: relative;\n  flex-grow: 0;\n  height: 100%;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  -webkit-touch-callout: none;\n  -ms-touch-action: pan-y;\n  touch-action: pan-y;\n  -webkit-tap-highlight-color: transparent;\n}\n.trade-carousel .slick-slider .slick-list {\n  position: relative;\n  height: 36px;\n  margin: 0;\n  padding: 0;\n  overflow: hidden;\n}\n.trade-carousel .slick-list:focus {\n  outline: none;\n}\n\n.trade-carousel .slick-list .slick-slide > div > div {\n  vertical-align: bottom;\n}\n.trade-carousel .slick-slider .slick-track,\n.trade-carousel .slick-slider .slick-list {\n  -webkit-transform: translate3d(0, 0, 0);\n          transform: translate3d(0, 0, 0);\n}\n.trade-carousel .slick-track {\n  position: relative;\n  top: 0;\n  left: 0;\n  display: block;\n}\n.trade-carousel .slick-track::before,\n.trade-carousel .slick-track::after {\n  display: table;\n  content: '';\n}\n.trade-carousel .slick-track::after {\n  clear: both;\n}\n.trade-carousel .slick-slide {\n  float: left;\n  height: 100%;\n  min-height: 1px;\n}\n\n.trade-carousel .slick-initialized .slick-slide {\n  display: block;\n}\n.trade-carousel .slick-vertical .slick-slide {\n  display: block;\n  height: auto;\n}\n\n.trade-carousel-rtl {\n  direction: rtl;\n}\n.trade-carousel-rtl .trade-carousel-vertical .slick-track {\n  right: 0;\n  left: auto;\n}\n.list-link {\n  color:#F0B90B;\n  text-decoration: none;\n  cursor: pointer;\n}\n.slide-container {\n  zIndex: 1;\n  position: relative;\n  outline: none;\n}\n.trade-carousel-vertical .slide-container .slide-item {\n  color: white;\n  line-height: 36px;\n  height: 36px;\n}\n.slide-container .slide-close {\n  cursor: pointer;\n}\n"}
          `
                        })]
                    })
                }
                constructor(e) {
                    super(e), this.saveSlick = e => {
                        this.slick = e
                    }, this.resizedCallback = () => {
                        const {
                            autoplay: e
                        } = this.props;
                        e && this.slick && this.slick.innerSlider && this.slick.innerSlider.autoPlay && this.slick.innerSlider.autoPlay()
                    }, this.onWindowResized = n()(this.resizedCallback, 500, {
                        leading: !1
                    }), this.renderIcon = () => (0, r.jsx)("span", {
                        className: "trade-carousel-icon",
                        children: (0, r.jsx)(u.A, {
                            size: 20,
                            color: "t.yellow200"
                        })
                    }), this.handleClose = e => {
                        const {
                            onClose: t
                        } = this.props;
                        t && t(e)
                    }, this.renderCarousel = () => {
                        const e = { ...this.props
                        };
                        "fade" === e.effect && (e.fade = !0);
                        const t = "trade-carousel",
                            i = c()(t, {
                                [`${t}-vertical`]: !0
                            }),
                            {
                                content: o,
                                textColor: s
                            } = this.props,
                            n = o.map(((e, t) => (0, r.jsx)("div", {
                                className: "slide-container",
                                children: (0, r.jsxs)(d.A, {
                                    sx: {
                                        lineHeight: [1, "36px"],
                                        height: ["54px", "36px"],
                                        outline: "none",
                                        display: "flex",
                                        alignItems: "flex-start",
                                        justifyContent: "space-between",
                                        "& .list-link": {
                                            marginTop: ["4px", "0px"],
                                            marginLeft: ["0px", "8px"],
                                            display: ["block", "inline-block"]
                                        },
                                        "& .slide-close": {
                                            padding: "0 4px"
                                        }
                                    },
                                    children: [(0, r.jsxs)(h.A, {
                                        sx: {
                                            display: "inline-block"
                                        },
                                        color: s || "#EAECEF",
                                        children: [(0, r.jsx)(x.A, {
                                            children: e.text
                                        }), (0, r.jsxs)("a", {
                                            href: e.link,
                                            className: "list-link",
                                            children: [e.linkText, (0, r.jsx)(g.A, {
                                                size: 12,
                                                mt: "2px",
                                                ml: "4px",
                                                color: "t.yellow200"
                                            })]
                                        })]
                                    }), (0, r.jsx)("span", {
                                        className: "slide-close",
                                        onClick: () => this.handleClose(t),
                                        children: (0, r.jsx)(p.A, {
                                            sx: {
                                                ml: "10px"
                                            },
                                            size: 12,
                                            color: "t.secondary"
                                        })
                                    })]
                                })
                            }, t)));
                        return (0, r.jsx)("div", {
                            children: (0, r.jsxs)(d.A, {
                                className: i,
                                sx: {
                                    height: ["82px", "36px"],
                                    px: ["14px", "28px"],
                                    py: ["14px", "0px"],
                                    background: e.bg || "#3B2601",
                                    alignItems: ["flex-start", "center"],
                                    "& .slick-slider": {
                                        width: ["92%", "98%"]
                                    }
                                },
                                children: [this.renderIcon(), (0, r.jsx)(a.A, {
                                    ref: this.saveSlick,
                                    vertical: !0,
                                    dots: !1,
                                    autoplaySpeed: 5e3,
                                    children: n,
                                    accessibility: !0,
                                    ...e
                                })]
                            })
                        })
                    }, this.onWindowResized = n()(this.onWindowResized, 500, {
                        leading: !1
                    });
                    this.state = {
                        closeAll: !1
                    }
                }
            };
            f.defaultProps = {
                arrows: !1,
                draggable: !1
            }
        },
        U7O6: (e, t, i) => {
            i.d(t, {
                R: () => n
            });
            var r = i("mXdx"),
                o = (i("DTvD"), i("2IQ4")),
                s = i("d6PB");
            const n = () => (0, r.jsx)(o.A, {
                sx: {
                    position: "absolute",
                    top: 0,
                    left: 0,
                    width: "100%",
                    height: "100%",
                    background: "radial-gradient(rgba(0, 0, 0, 0.05) 30%, transparent)",
                    display: "flex",
                    justifyContent: "center",
                    alignItems: "center",
                    zIndex: "mask"
                },
                children: (0, r.jsx)(s.A, {
                    sx: {
                        zIndex: 100
                    }
                })
            })
        },
        ntli: (e, t, i) => {
            i.d(t, {
                b: () => a
            });
            var r = i("mXdx"),
                o = (i("DTvD"), i("xAfo")),
                s = i("GIr8"),
                n = i("Vhyo");
            const a = ({
                resetErrorBoundary: e,
                mainText: t,
                btnText: i
            }) => ((0, o.A)((() => {
                console.warn("[trade-widget] the component has been deprecated.")
            })), (0, r.jsxs)(s.A, {
                sx: {
                    width: "100%",
                    height: "100%",
                    flexDirection: "column",
                    alignItems: "center",
                    justifyContent: "center"
                },
                children: [(0, r.jsx)(n.A, {
                    fontSize: 3,
                    color: "t.primary",
                    children: t
                }), (0, r.jsx)(n.A, {
                    fontSize: "14px",
                    sx: {
                        textDecoration: "underline",
                        cursor: "pointer",
                        color: "t.yellow",
                        mt: 3
                    },
                    onClick: e,
                    children: i
                })]
            }))
        },
        fLxG: (e, t, i) => {
            i.d(t, {
                y: () => g
            });
            var r = i("mXdx"),
                o = (i("DTvD"), i("xAfo")),
                s = i("Vhyo"),
                n = i("GIr8"),
                a = i("2IQ4"),
                l = i("zX7I"),
                c = i("6ScU"),
                d = i("HEid");
            const h = ({
                    children: e
                }) => (0, r.jsx)(s.A, {
                    sx: {
                        ml: "8px",
                        color: "t.disabled"
                    },
                    children: e
                }),
                u = ({
                    children: e
                }) => (0, r.jsx)(s.A, {
                    sx: {
                        mr: "8px",
                        color: "t.disabled"
                    },
                    children: e
                }),
                g = ({
                    visible: e,
                    priceField: t,
                    amountField: i,
                    submitText: s,
                    cancelText: g,
                    onSubmit: p,
                    onCancel: m
                }) => ((0, o.A)((() => {
                    console.warn("[trade-widget] the component has been deprecated.")
                })), (0, r.jsx)(c.Ay.Modal, {
                    visible: e,
                    sx: {
                        minWidth: "288px",
                        height: "176px",
                        p: 0,
                        bg: "modalBg"
                    },
                    onMaskClick: m,
                    children: (0, r.jsxs)(n.A, {
                        sx: {
                            p: "16px",
                            flexDirection: "column",
                            "& > *:not(:last-child)": {
                                marginBottom: "16px"
                            }
                        },
                        children: [(0, r.jsx)(a.A, {
                            children: (0, r.jsx)(d.A, {
                                variant: "filled",
                                textAlign: "right",
                                prefix: (0, r.jsx)(h, {
                                    children: t.placeholder
                                }),
                                suffix: (0, r.jsx)(u, {
                                    children: t.suffixText
                                }),
                                boxProps: {
                                    sx: {
                                        width: "100%",
                                        height: "40px",
                                        bg: "bg3"
                                    }
                                },
                                ...t
                            })
                        }), (0, r.jsx)(a.A, {
                            children: (0, r.jsx)(d.A, {
                                variant: "filled",
                                textAlign: "right",
                                prefix: (0, r.jsx)(h, {
                                    children: i.placeholder
                                }),
                                suffix: (0, r.jsx)(u, {
                                    children: i.suffixText
                                }),
                                boxProps: {
                                    sx: {
                                        width: "100%",
                                        height: "40px"
                                    }
                                },
                                ...i
                            })
                        }), (0, r.jsxs)(n.A, {
                            sx: {
                                "& > *": {
                                    width: "100%",
                                    height: "32px"
                                },
                                "& > *:not(:last-child)": {
                                    marginRight: "8px"
                                }
                            },
                            children: [(0, r.jsx)(l.A, {
                                onClick: m,
                                sx: {
                                    bg: "line",
                                    backgroundImage: "none",
                                    color: "t.primary",
                                    "&:hover:not(:disabled):not(:active):not(.inactive)": {
                                        bg: "bg3",
                                        backgroundImage: "none"
                                    }
                                },
                                children: g
                            }), (0, r.jsx)(l.A, {
                                onClick: p,
                                sx: {
                                    bg: "primary",
                                    backgroundImage: "none",
                                    color: "bg5",
                                    "&:hover:not(:disabled):not(:active):not(.inactive)": {
                                        backgroundImage: "none"
                                    }
                                },
                                children: s
                            })]
                        })]
                    })
                }))
        },
        "6+Mh": (e, t, i) => {
            i.d(t, {
                HJ: () => n,
                S5: () => a,
                oT: () => s
            });
            var r = i("T9sr"),
                o = i.n(r);
            const s = ["dont_show_boolean_study_arguments", "hide_last_na_study_output", "snapshot_trading_drawings"],
                n = ["drawing_templates", "display_market_status", "border_around_the_chart", "remove_library_container_border", "volume_force_overlay", "legend_context_menu", "right_toolbar", "trading_account_manager", "order_panel", "header_widget", "header_symbol_search", "header_interval_dialog_button", "header_fullscreen_button", "header_layouttoggle", "header_undo_redo", "symbol_search_hot_key", "symbol_info", "show_interval_dialog_on_key_press"],
                a = ({
                    tradingViewSave: e,
                    styles: t
                }, {
                    symbol: i,
                    interval: r,
                    theme: a = "Dark",
                    library_path: l,
                    custom_css_url: c = "./themed.css",
                    locale: d = "en",
                    overrides: h,
                    debug: u = !1,
                    time_frames: g = [],
                    autosize: p = !0,
                    toolbar_bg: m = "transparent",
                    studies_overrides: x,
                    loading_screen: f,
                    enabled_features: y = s,
                    disabled_features: b = n,
                    ...v
                }) => {
                    let C = "Asia/Shanghai";
                    try {
                        C = Intl.DateTimeFormat().resolvedOptions().timeZone
                    } catch (A) {}
                    const w = o()(e);
                    if (w)
                        for (let o = 0; o < w.charts[0].panes.length; o++) w.charts[0].panes[o].sources[0].state.symbol = i, w.charts[0].panes[o].sources[0].state.interval = r;
                    return { ...v,
                        symbol: i,
                        interval: r,
                        timezone: C,
                        theme: a,
                        library_path: l,
                        custom_css_url: c,
                        locale: d,
                        overrides: h,
                        debug: u,
                        time_frames: g,
                        autosize: p,
                        toolbar_bg: m,
                        studies_overrides: x,
                        loading_screen: f || {
                            backgroundColor: t.overrides["paneProperties.background"]
                        },
                        enabled_features: y,
                        disabled_features: b,
                        saved_data: w || void 0
                    }
                }
        },
        "+ilk": (e, t, i) => {
            i.d(t, {
                Y: () => s
            });
            var r = i("eT23");
            const o = ({
                    chart: e,
                    styles: t
                }) => {
                    const i = e.getAllStudies().find((e => "volume" === e ? .name ? .toLowerCase()));
                    i && e.getStudyById(i.id).applyOverrides({
                        "volume.color.0": (0, r.N)(t.overrides["candleStyle.downColor"], .5),
                        "volume.color.1": (0, r.N)(t.overrides["candleStyle.upColor"], .5)
                    })
                },
                s = ({
                    widget: e,
                    theme: t,
                    styles: i,
                    onSave: r = () => null,
                    onSetThemeDone: s
                }) => ((({
                    widget: e,
                    theme: t
                }) => {
                    const i = [];
                    for (let o = 0; o < e.chartsCount(); o++) i.push(e.chart(o).getCheckableActionState("showCountdown"));
                    e.changeTheme(t);
                    const r = [];
                    for (let o = 0; o < e.chartsCount(); o++) i[o] && r.push(new Promise((t => {
                        setTimeout((() => {
                            e.chart(o).executeActionById("showCountdown"), t()
                        }), 0)
                    })));
                    Promise.all(r)
                })({
                    widget: e,
                    theme: t
                }), new Promise((t => {
                    setTimeout((() => {
                        e.applyOverrides(i.overrides), (({
                            widget: e,
                            styles: t
                        }) => {
                            for (let i = 0; i < e.chartsCount(); i++) o({
                                chart: e.chart(i),
                                styles: t
                            })
                        })({
                            widget: e,
                            styles: i
                        }), e.save(r), s ? .(), t()
                    }), 0)
                })))
        },
        "2qt+": (e, t, i) => {
            i.d(t, {
                L: () => o,
                b: () => r
            });
            const r = e => ({ ...e
                }),
                o = ({
                    customSettings: e,
                    widget: t
                }) => {
                    e && void 0 !== e.activeChartIndex && t.setActiveChart(e.activeChartIndex)
                }
        },
        mgce: (e, t, i) => {
            i.d(t, {
                Y: () => s
            });
            var r = i("eT23");
            const o = ({
                    chart: e,
                    overrides: t
                }) => {
                    const i = e.getAllStudies().find((e => "volume" === e ? .name ? .toLowerCase()));
                    i && e.getStudyById(i.id).applyOverrides({
                        "volume.color.0": (0, r.N)(t["mainSeriesProperties.candleStyle.downColor"], .5),
                        "volume.color.1": (0, r.N)(t["mainSeriesProperties.candleStyle.upColor"], .5)
                    })
                },
                s = async ({
                    widget: e,
                    theme: t,
                    overrides: i,
                    onSave: r = () => null,
                    onSetThemeDone: s
                }) => {
                    await e.changeTheme(t), e.applyOverrides(i), (({
                        widget: e,
                        overrides: t
                    }) => {
                        try {
                            const i = e.chartsCount();
                            for (let r = 0; r < i; r++) {
                                const i = e.chart(r);
                                o({
                                    chart: i,
                                    overrides: t
                                })
                            }
                        } catch (i) {}
                    })({
                        widget: e,
                        overrides: i
                    }), e.save(r), s ? .()
                }
        },
        akcQ: (e, t, i) => {
            i.d(t, {
                _: () => r
            });
            const r = e => {
                const t = {
                    buy: e.Buy,
                    sell: e.Sell,
                    line: e.Line,
                    basicBg: e.BasicBg,
                    tertiaryText: e.TertiaryText,
                    secondaryText: e.SecondaryText
                };
                return {
                    volumePaneSize: "medium",
                    "symbolWatermarkProperties.transparency": 85,
                    "symbolWatermarkProperties.color": "rgba(0, 0, 0, 0)",
                    "scalesProperties.textColor": t.tertiaryText,
                    "scalesProperties.lineColor": t.line,
                    "scalesProperties.backgroundColor": t.basicBg,
                    "paneProperties.background": t.basicBg,
                    "paneProperties.backgroundType": "solid",
                    "paneProperties.horzGridProperties.color": t.line,
                    "paneProperties.vertGridProperties.color": t.line,
                    "paneProperties.crossHairProperties.color": t.secondaryText,
                    "mainSeriesProperties.candleStyle.upColor": t.buy,
                    "mainSeriesProperties.candleStyle.downColor": t.sell,
                    "mainSeriesProperties.candleStyle.drawWick": !0,
                    "mainSeriesProperties.candleStyle.drawBorder": !0,
                    "mainSeriesProperties.candleStyle.borderColor": "transparent",
                    "mainSeriesProperties.candleStyle.borderUpColor": t.buy,
                    "mainSeriesProperties.candleStyle.borderDownColor": t.sell,
                    "mainSeriesProperties.candleStyle.wickUpColor": t.buy,
                    "mainSeriesProperties.candleStyle.wickDownColor": t.sell,
                    "mainSeriesProperties.hollowCandleStyle.upColor": t.buy,
                    "mainSeriesProperties.hollowCandleStyle.downColor": t.sell,
                    "mainSeriesProperties.hollowCandleStyle.drawWick": !0,
                    "mainSeriesProperties.hollowCandleStyle.drawBorder": !0,
                    "mainSeriesProperties.hollowCandleStyle.borderColor": "transparent",
                    "mainSeriesProperties.hollowCandleStyle.borderUpColor": t.buy,
                    "mainSeriesProperties.hollowCandleStyle.borderDownColor": t.sell,
                    "mainSeriesProperties.hollowCandleStyle.wickUpColor": t.buy,
                    "mainSeriesProperties.hollowCandleStyle.wickDownColor": t.sell,
                    "mainSeriesProperties.hollowCandleStyle.drawBody": !0,
                    "mainSeriesProperties.haStyle.upColor": t.buy,
                    "mainSeriesProperties.haStyle.downColor": t.sell,
                    "mainSeriesProperties.haStyle.drawWick": !0,
                    "mainSeriesProperties.haStyle.drawBorder": !0,
                    "mainSeriesProperties.haStyle.borderColor": "transparent",
                    "mainSeriesProperties.haStyle.borderUpColor": t.buy,
                    "mainSeriesProperties.haStyle.borderDownColor": t.sell,
                    "mainSeriesProperties.haStyle.wickUpColor": t.buy,
                    "mainSeriesProperties.haStyle.wickDownColor": t.sell,
                    "mainSeriesProperties.haStyle.barColorsOnPrevClose": !1,
                    "mainSeriesProperties.haStyle.drawBody": !0,
                    "mainSeriesProperties.barStyle.upColor": t.buy,
                    "mainSeriesProperties.barStyle.downColor": t.sell,
                    "mainSeriesProperties.barStyle.barColorsOnPrevClose": !1,
                    "mainSeriesProperties.barStyle.dontDrawOpen": !1,
                    "mainSeriesProperties.barStyle.thinBars": !0,
                    "mainSeriesProperties.columnStyle.upColor": t.buy,
                    "mainSeriesProperties.columnStyle.downColor": t.sell,
                    "mainSeriesProperties.columnStyle.barColorsOnPrevClose": !0,
                    "mainSeriesProperties.columnStyle.priceSource": "close",
                    "mainSeriesProperties.lineStyle.color": t.buy,
                    "mainSeriesProperties.lineStyle.linewidth": 2,
                    "mainSeriesProperties.lineStyle.priceSource": "close",
                    "mainSeriesProperties.areaStyle.color1": t.buy,
                    "mainSeriesProperties.areaStyle.color2": t.sell,
                    "mainSeriesProperties.areaStyle.linecolor": t.sell,
                    "mainSeriesProperties.areaStyle.linewidth": 2,
                    "mainSeriesProperties.areaStyle.priceSource": "close",
                    "mainSeriesProperties.areaStyle.transparency": 50,
                    "mainSeriesProperties.baselineStyle.baselineColor": t.buy,
                    "mainSeriesProperties.baselineStyle.topFillColor1": t.buy,
                    "mainSeriesProperties.baselineStyle.topFillColor2": t.sell,
                    "mainSeriesProperties.baselineStyle.bottomFillColor1": t.buy,
                    "mainSeriesProperties.baselineStyle.bottomFillColor2": t.sell,
                    "mainSeriesProperties.baselineStyle.topLineColor": t.buy,
                    "mainSeriesProperties.baselineStyle.bottomLineColor": t.sell,
                    "mainSeriesProperties.baselineStyle.topLineWidth": 2,
                    "mainSeriesProperties.baselineStyle.bottomLineWidth": 2,
                    "mainSeriesProperties.baselineStyle.priceSource": "close",
                    "mainSeriesProperties.baselineStyle.transparency": 50,
                    "mainSeriesProperties.baselineStyle.baseLevelPercentage": 50,
                    "mainSeriesProperties.hiloStyle.color": t.buy,
                    "mainSeriesProperties.hiloStyle.showBorders": !0,
                    "mainSeriesProperties.hiloStyle.borderColor": t.buy,
                    "mainSeriesProperties.hiloStyle.showLabels": !0,
                    "mainSeriesProperties.hiloStyle.labelColor": t.buy,
                    "mainSeriesProperties.pbStyle.upColor": t.buy,
                    "mainSeriesProperties.pbStyle.downColor": t.sell,
                    "mainSeriesProperties.pbStyle.borderUpColor": t.buy,
                    "mainSeriesProperties.pbStyle.borderDownColor": t.sell,
                    "mainSeriesProperties.pbStyle.upColorProjection": t.buy,
                    "mainSeriesProperties.pbStyle.downColorProjection": t.sell,
                    "mainSeriesProperties.pbStyle.borderUpColorProjection": t.buy,
                    "mainSeriesProperties.pbStyle.borderDownColorProjection": t.sell,
                    "mainSeriesProperties.renkoStyle.upColor": t.buy,
                    "mainSeriesProperties.renkoStyle.downColor": t.sell,
                    "mainSeriesProperties.renkoStyle.borderUpColor": t.buy,
                    "mainSeriesProperties.renkoStyle.borderDownColor": t.sell,
                    "mainSeriesProperties.renkoStyle.upColorProjection": t.buy,
                    "mainSeriesProperties.renkoStyle.downColorProjection": t.sell,
                    "mainSeriesProperties.renkoStyle.borderUpColorProjection": t.buy,
                    "mainSeriesProperties.renkoStyle.borderDownColorProjection": t.sell,
                    "mainSeriesProperties.renkoStyle.wickUpColor": t.buy,
                    "mainSeriesProperties.renkoStyle.wickDownColor": t.sell,
                    "mainSeriesProperties.kagiStyle.upColor": t.buy,
                    "mainSeriesProperties.kagiStyle.downColor": t.sell,
                    "mainSeriesProperties.kagiStyle.upColorProjection": t.buy,
                    "mainSeriesProperties.kagiStyle.downColorProjection": t.sell,
                    "mainSeriesProperties.pnfStyle.upColor": t.buy,
                    "mainSeriesProperties.pnfStyle.downColor": t.sell,
                    "mainSeriesProperties.pnfStyle.upColorProjection": t.buy,
                    "mainSeriesProperties.pnfStyle.downColorProjection": t.sell,
                    "mainSeriesProperties.rangeStyle.upColor": t.buy,
                    "mainSeriesProperties.rangeStyle.downColor": t.sell,
                    "mainSeriesProperties.rangeStyle.thinBars": "true",
                    "mainSeriesProperties.rangeStyle.upColorProjection": t.buy,
                    "mainSeriesProperties.rangeStyle.downColorProjection": t.sell
                }
            }
        },
        "19p4": (e, t, i) => {
            i.r(t), i.d(t, {
                ChartNamespace: () => n,
                DefaultIntervalOptions: () => s,
                DefaultTVStorageName: () => a,
                IntervalFilterTypes: () => r
            });
            var r, o = i("qv9I");
            ! function(e) {
                e[e.ExtraSmall = 0] = "ExtraSmall", e[e.Small = 1] = "Small", e[e.Small2 = 2] = "Small2", e[e.Medium = 3] = "Medium"
            }(r || (r = {}));
            const s = [o.DisplayIntervals.Time, o.DisplayIntervals["1m"], o.DisplayIntervals["3m"], o.DisplayIntervals["5m"], o.DisplayIntervals["15m"], o.DisplayIntervals["30m"], o.DisplayIntervals["1h"], o.DisplayIntervals["2h"], o.DisplayIntervals["4h"], o.DisplayIntervals["6h"], o.DisplayIntervals["8h"], o.DisplayIntervals["12h"], o.DisplayIntervals["1d"], o.DisplayIntervals["3d"], o.DisplayIntervals["1w"], o.DisplayIntervals["1M"]],
                n = {
                    EOPTIONS: "chart_eoptions"
                },
                a = "myTradingView"
        },
        "/oTD": (e, t, i) => {
            i.d(t, {
                A: () => B
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i("qFGl"),
                n = i.n(s),
                a = i("9YZR"),
                l = i("vjpm"),
                c = i("U7O6"),
                d = i("T9sr"),
                h = i.n(d);
            const u = {
                    line: "LINE",
                    histogram: "BAR",
                    area: "AREA",
                    point: "POINT",
                    cross: "CROSSLINE"
                },
                g = {
                    int: "INT",
                    float: "FLOAT",
                    source: "SOURCE"
                },
                p = (e, t) => {
                    const i = ((e, t) => {
                        let i, r = 0,
                            o = e.length;
                        for (; r < o;) {
                            i = Math.floor((o + r) / 2);
                            let s = t(e[i]);
                            if (s < 0 && (o = i), 0 === s) return i;
                            s > 0 && (r = i + 1)
                        }
                        return i = Math.floor((o + r) / 2), i
                    })(e, (e => {
                        const {
                            time: i
                        } = e;
                        return t - i
                    }));
                    return e[i] && e[i].time === t ? e[i] : void 0
                };
            const m = e => ({
                    defaultProps: {
                        id: "",
                        title: "",
                        isCustom: !0,
                        isHistBase: !1,
                        isScaleCenter: !1
                    },
                    paramMetas: [],
                    getResult(t, i, r) {
                        let o = -1;
                        this.paramMetas = [], e.ChartInterface.Chart.input = e => (-1 === o && (this.paramMetas = []), o++, this.paramMetas.push({
                            key: `params${o}`,
                            label: e.title,
                            type: g[e.type],
                            defaultValue: e.defval
                        }), i[`params${o}`] || e.defval);
                        try {
                            e.runSync(t)
                        } catch (l) {
                            console.warn(l.message)
                        }
                        const s = [],
                            n = h()(e.ChartInterface.Chart && e.ChartInterface.Chart.plots) || {},
                            a = h()(e.ChartInterface.Chart && e.ChartInterface.Chart.fills) || [];
                        Object.keys(n).forEach((e => {
                            const i = n[e],
                                r = i.series || [],
                                [o] = ((e, t) => t.map((t => {
                                    const i = e.length - t.length;
                                    return t.map(((t, r) => ({
                                        time: e[r + i].time,
                                        value: t
                                    })))
                                })))(t, [r]),
                                l = u[i.style];
                            switch (l) {
                                case "POINT":
                                case "AREA":
                                case "BAR":
                                case "LINE":
                                    Object.keys(a).forEach((e => {
                                        const t = a[e]; - 1 !== t.data.indexOf(i.id) && (t.source || (t.source = []), t.source.push(o))
                                    }));
                                case "CROSSLINE":
                                    s.push({
                                        data: o,
                                        colors: i.color,
                                        transp: i.transp || 0,
                                        chartType: l,
                                        lineWidth: i.linewidth,
                                        histBase: i.histbase,
                                        zIndex: 1
                                    })
                            }
                        })), Object.keys(a).forEach((e => {
                            const t = a[e];
                            s.push({
                                data: t.source[0],
                                borderData: t.source[1],
                                colors: t.color,
                                transp: t.transp || 0,
                                type: "nolabel",
                                chartType: "AREA",
                                zIndex: 1
                            })
                        })), r(s)
                    },
                    updateResult(t, i, r, o) {
                        if (!o) return;
                        try {
                            e.update(o)
                        } catch (n) {
                            console.warn(n)
                        }
                        const s = h()(e.ChartInterface.Chart && e.ChartInterface.Chart.plots) || {};
                        try {
                            Object.keys(s).forEach(((e, r) => {
                                const n = s[e];
                                i[r].data[t] = i[r].data[t] || {}, i[r].data[t].time = o.time, i[r].data[t].value = n.series[t], i[r].colors = n.color
                            }))
                        } catch (a) {
                            console.warn(a)
                        }
                    },
                    getLabel({
                        time: e,
                        results: t,
                        params: i
                    }) {
                        const r = [];
                        return 0 === this.paramMetas.length ? r.push({
                            label: `${this.defaultProps.title||""}()`,
                            key: "title",
                            styles: {
                                paddingRight: "0px"
                            }
                        }) : r.push({
                            label: `${this.defaultProps.title||""}(`,
                            key: "title",
                            styles: {
                                paddingRight: "0px"
                            }
                        }), this.paramMetas.forEach(((e, t) => {
                            const o = this.paramMetas.find((e => e.key === `params${t}`)) ? .defaultValue;
                            r.push({
                                label: t === this.paramMetas.length - 1 ? `${i[`params${t}`]||o})` : `${i[`params${t}`]||o}`,
                                key: `${t}`
                            })
                        })), t.forEach((({
                            data: t,
                            colors: o,
                            type: s
                        }, n) => {
                            if (!e) return;
                            const a = t.findIndex((t => t.time === e)),
                                l = p(t, e);
                            if (l && "nolabel" !== s) {
                                const e = `${c=l.value,d=i.precision,void 0!==d?Number(isNaN(c)?NaN:c?.toFixed(d)):c}`;
                                r.push({
                                    label: e,
                                    key: `CUSTOM${n}`,
                                    styles: {
                                        color: o ? .[a]
                                    }
                                })
                            }
                            var c, d
                        })), r
                    }
                }),
                x = ({
                    bizType: e,
                    symbolDisplay: t,
                    isBacktest: i = !1
                }) => {
                    (({
                        url: e,
                        width: t,
                        height: i
                    }) => {
                        const r = window ? .screenLeft || window.screenX,
                            o = window ? .screenTop || window.screenY,
                            s = window ? .innerWidth || document.documentElement ? .clientWidth || screen.width,
                            n = window ? .innerHeight || document.documentElement ? .clientHeight || screen.height,
                            a = s / window.screen.availWidth,
                            l = (n - i) / 2 / a + o,
                            c = (s - t) / 2 / a + r,
                            d = window.open(e, "_blank", `\n    popup=true,\n    width=${t},\n    height=${i},\n    top=${l},\n    left=${c}`);
                        d ? .focus()
                    })({
                        url: `/${`${i?"backtest":"customindicator"}/${e}/workspace/${t}`}`,
                        width: 1e3,
                        height: 600
                    })
                },
                f = (e, t) => {
                    try {
                        return JSON.parse(e)
                    } catch {
                        return t || e
                    }
                };
            const y = ({
                    isBacktest: e
                } = {}) => e ? "backtestFiles" : "customIndicatorFiles",
                b = ({
                    isBacktest: e
                } = {}) => e ? "backtestCurFileName" : "customIndicatorCurFileName",
                v = async ({
                    symbolDisplayRef: e,
                    candlestick: t,
                    bizType: r,
                    setMessageInfo: o,
                    storedData: s,
                    onGetStorageItem: n,
                    onSetStorageItem: a
                }) => {
                    const l = (() => {
                        let e = null;
                        return async () => {
                            if (e) return e;
                            const {
                                Compiler: t
                            } = await Promise.all([i.e(8645), i.e(5822)]).then(i.bind(i, "KUq0"));
                            return e = new t, e
                        }
                    })();
                    let c, d, h;
                    const u = async () => {
                            const e = await l();
                            e.Errors ? .length <= 0 || o({
                                message: "Failed to compile custom indicator, please check your code!",
                                variant: "error",
                                autoHideDuration: 3500
                            })
                        },
                        g = async e => {
                            const i = y({
                                    isBacktest: e
                                }),
                                r = await n(i),
                                o = f(r);
                            return o && Object.entries(o).forEach((([i, r]) => {
                                const o = r.id || `@${i}_v1`;
                                t.registerCustomIndicator(o, {
                                    defaultProps: {
                                        isCustom: !0,
                                        isBacktest: e,
                                        id: o,
                                        title: i
                                    }
                                })
                            })), o
                        },
                        p = await g(!1);
                    c = p;
                    const v = await g(!0);
                    d = v;
                    const C = function(e) {
                        const t = e.length;
                        return function i(r) {
                            if (r >= t) return null;
                            const {
                                indicators: o
                            } = e[r];
                            return o ? .find((e => e.isCustom)) || i(r + 1)
                        }(0)
                    }(s || []);
                    if (C) {
                        const {
                            id: e,
                            name: i,
                            type: r
                        } = C, o = p[r] || p[i] || v[r] || v[i], s = Boolean(d ? .[i] || d ? .[e]);
                        if (o) {
                            const {
                                code: n
                            } = o;
                            try {
                                const o = await l();
                                o.compile(n), await u(), o.runOnce();
                                const a = m(o),
                                    c = o.ChartInterface ? .Chart;
                                if (c.study && !s) a.defaultProps = { ...a.defaultProps,
                                    isHistBase: c.study.overlay || !1,
                                    title: i || c.study.title || "",
                                    isScaleCenter: !0,
                                    isCustom: !0,
                                    isBacktest: Boolean(v[r] || v[i]),
                                    id: e
                                };
                                else if (s) {
                                    const {
                                        overlay: t
                                    } = o.scriptParams || {};
                                    a.defaultProps = { ...a.defaultProps,
                                        title: i || "",
                                        isHistBase: t || !1,
                                        isScaleCenter: !0,
                                        isCustom: !0,
                                        isBacktest: !0,
                                        id: e
                                    }
                                }
                                t.registerCustomIndicator(e, a), t.addIndicatorByName(e), h = e
                            } catch (w) {
                                console.error(w)
                            }
                        }
                    }
                    t.registerCustomIndicatorCallback({
                        onAdd: async (t = {}) => {
                            const i = await n(y(t)),
                                o = f(i, {}),
                                s = Object.keys(o),
                                l = b(t);
                            if (s.find((e => e.startsWith("untitled-")))) {
                                const e = Math.max.apply(null, s.filter((e => e.startsWith("untitled-"))).map((e => +e.split("-")[1])));
                                await a(l, `untitled-${e+1}`)
                            } else s.find((e => e.startsWith("untitled"))) ? await a(l, "untitled-1") : await a(l, "untitled");
                            x({
                                symbolDisplay: e.current,
                                bizType: r,
                                isBacktest: t.isBacktest
                            })
                        },
                        onEdit: async ({
                            name: t
                        }, i = {}) => {
                            const o = b(i);
                            await a(o, t), x({
                                symbolDisplay: e.current,
                                bizType: r,
                                isBacktest: i.isBacktest
                            })
                        },
                        async onRemove(e, i) {
                            t.removeCustomIndicatorByName(e);
                            const r = await n(y(i)),
                                o = f(r, {}),
                                s = Object.fromEntries(Object.entries(o).filter((([t, i]) => (i.id || `@${t}_v1`) !== e)));
                            await a(y(i), JSON.stringify(s))
                        }
                    }), t.on("customIndicatorClick", (async ({
                        data: {
                            name: e,
                            id: i
                        }
                    }) => {
                        t.closeIndicatorByName(h);
                        const {
                            code: r = ""
                        } = c ? .[e] || c ? .[i] || d ? .[e] || d ? .[i] || {
                            code: ""
                        }, o = Boolean(d ? .[e] || d ? .[i]);
                        try {
                            const s = await l();
                            s.compile(r), await u(), s.runOnce();
                            const n = m(s),
                                a = s.ChartInterface.Chart;
                            if (a.study && !o) n.defaultProps = { ...n.defaultProps,
                                isHistBase: a.study.overlay || !1,
                                title: e || a.study.title || "",
                                isScaleCenter: !0,
                                isCustom: !0,
                                id: i
                            };
                            else if (o) {
                                const {
                                    overlay: t
                                } = s.scriptParams || {};
                                n.defaultProps = { ...n.defaultProps,
                                    title: e || "",
                                    isHistBase: t || !1,
                                    isScaleCenter: !0,
                                    isCustom: !0,
                                    isBacktest: !0,
                                    id: i
                                }
                            }
                            t.registerCustomIndicator(i, n), t.addIndicatorByName(i), h = i
                        } catch (w) {
                            console.error(w)
                        }
                    }))
                };
            var C = i("qv9I"),
                w = i("7asw"),
                A = i("rPbR"),
                S = i("T0Sc"),
                T = i("sMAH");
            const k = ({
                    isBuy: e,
                    theme: t
                }) => {
                    const i = e ? t ? .colors ? .Buy : t ? .colors ? .Sell;
                    return {
                        dragSquareIconColor: i,
                        dragSquareBackgroundColor: t ? .colors ? .CardBg,
                        dragSquareDraggingBackgroundColor: t ? .colors ? .line,
                        closeIconColor: i,
                        priceBackground: i,
                        priceColor: t ? .colors ? .RedGreenBgText,
                        priceBorderColor: i,
                        quantityBackground: t ? .colors ? .CardBg,
                        quantityColor: i,
                        quantityBorderColor: i,
                        borderColor: i,
                        priceLabelBackground: t ? .colors ? .CardBg,
                        priceLabelBorderColor: i,
                        priceLabelColor: i,
                        lineColor: i,
                        lineDash: [2, 2],
                        draggingLineDash: [0, 0],
                        tooltipTextColor: t ? .colors ? .SecondaryBg,
                        tooltipBorderColor: t ? .colors ? .PrimaryText,
                        tooltipBackgroundColor: t ? .colors ? .PrimaryText
                    }
                },
                L = ({
                    isBuy: e,
                    pnl: t,
                    theme: i
                }) => {
                    const r = e ? i ? .colors ? .Buy : i ? .colors ? .Sell,
                        o = t > 0 ? i ? .colors ? .Buy : t < 0 ? i ? .colors ? .Sell : r;
                    return {
                        priceColor: i ? .colors ? .RedGreenBgText,
                        priceBorderColor: o,
                        priceBackgroundColor: o,
                        quantityColor: r,
                        quantityBorderColor: r,
                        quantityBackgroundColor: i ? .colors ? .CardBg,
                        priceLabelColor: r,
                        priceLabelBorderColor: r,
                        priceLabelBackgroundColor: i ? .colors ? .CardBg,
                        tpslYLabelColor: i.colors ? .PrimaryText,
                        tpslYLabelBackgroundColor: i.colors ? .InputLine,
                        tpslYLabelBorderColor: i.colors ? .InputLine,
                        tpslLabelColor: r,
                        tpslLabelBorderColor: r,
                        tpslLabelBackgroundColor: i ? .colors ? .CardBg,
                        tpslDraggingTextLabelColor: i ? .colors ? .PrimaryText,
                        tpslDraggingTextLabelBorderColor: i ? .colors ? .InputLine,
                        tpslDraggingTextLabelBackgroundColor: i ? .colors ? .InputLine,
                        tpslDraggingPriceLabelProfitColor: i.colors ? .TextBuy,
                        tpslDraggingPriceLabelLossColor: i.colors ? .TextSell,
                        tpslDraggingPriceLabelFlatColor: i.colors ? .PrimaryText,
                        tpslDraggingPriceLabelBorderColor: i.colors ? .InputLine,
                        tpslDraggingPriceLabelBackgroundColor: i.colors ? .BasicBg,
                        lineColor: r,
                        lineDash: [2, 2],
                        reverseIconColor: r,
                        reverseBorderColor: r,
                        reverseBackgroundColor: i ? .colors ? .CardBg,
                        tooltipTextColor: i ? .colors ? .SecondaryBg,
                        tooltipBorderColor: i ? .colors ? .PrimaryText,
                        tooltipBackgroundColor: i ? .colors ? .PrimaryText,
                        closeIconColor: r,
                        closeIconBorderColor: r,
                        closeIconBackgroundColor: i ? .colors ? .CardBg,
                        diamond1Color: i.colors ? .DisabledText,
                        diamond2Color: i.colors ? .PrimaryText
                    }
                };
            var _ = i("eT23");
            const P = ({
                    isBuy: e,
                    theme: t
                }) => {
                    const i = e ? t ? .colors.Buy : t ? .colors.Sell,
                        r = (0, _.N)(t ? .colors.PrimaryText, .95);
                    return {
                        textColor: t.colors ? .RedGreenBgText,
                        borderColor: i,
                        backgroundColor: i,
                        tooltipBorderColor: r,
                        tooltipBackgroundColor: r,
                        tooltipTextColor: t.colors.SecondaryBg
                    }
                },
                D = ({
                    theme: e,
                    isBuy: t
                }) => {
                    const i = t ? e ? .colors ? .Buy : e ? .colors ? .Sell;
                    return {
                        textBackground: i,
                        textBorderColor: i,
                        textColor: e ? .colors.textWhite,
                        priceBackground: e ? .colors.CardBg,
                        priceBorderColor: i,
                        priceColor: i,
                        lineColor: i,
                        lineDash: [2, 2]
                    }
                },
                I = ({
                    theme: e
                }) => ({
                    textBackground: e ? .colors.InputLine,
                    textBorderColor: e ? .colors.InputLine,
                    textColor: e ? .colors.textPrimary,
                    closeBackground: e ? .colors.BasicBg,
                    closeColor: e ? .colors.iconNormal,
                    closeBorderColor: e ? .colors.InputLine,
                    lineColor: e ? .colors.textThird,
                    lineDash: [2, 2],
                    arrowColor: e ? .colors.textThird
                }),
                V = a.mE,
                M = (0, o.memo)((({
                    klineOptions: e,
                    customIndicators: t = [],
                    setMessageInfo: i = () => null,
                    symbolDisplay: s = "",
                    bizType: d = "",
                    orders: h,
                    positions: u,
                    executionOrders: g,
                    labelLines: p,
                    singleLabelLines: m,
                    alerts: x,
                    enableCustomIndicator: f = !1,
                    enableBacktest: y = !1,
                    electron: b = {},
                    customCandleRef: _,
                    onLoadingChange: M
                }) => {
                    const B = (0, C.createStore)(e.namespace),
                        E = (0, A.createStore)(e.namespace),
                        j = (0, w.y)(e.namespace),
                        [O] = B(C.getInterval),
                        H = B(C.getTrueInterval),
                        [R] = B(C.getPriceType),
                        [N] = B(C.getActiveTab),
                        [W, F] = j(w.N),
                        {
                            isMobile: z,
                            isIPad: X
                        } = (0, l.Q)(),
                        [U, G] = E(A.getCandlestickReference),
                        $ = (0, o.useMemo)((() => f && !z && !X), [f, X, z]),
                        Y = (0, o.useMemo)((() => y && !z && !X), [y, X, z]),
                        [Z] = (0, o.useState)(1),
                        K = (0, o.useCallback)((e => ("function" === typeof M && M(e), F(e))), [F, M]),
                        q = (0, o.useRef)(null),
                        Q = _ || q,
                        J = (0, o.useRef)(O),
                        ee = (0, o.useRef)(s);
                    (0, o.useEffect)((() => {
                        ee.current = s
                    }), [s]), (0, o.useEffect)((() => {
                        J.current = O
                    }), [O]);
                    const te = Q.current ? .getCandlestick ? .();
                    (0, o.useEffect)((() => {
                        G(te)
                    }), [G, e.symbol, te]);
                    const ie = (0, o.useCallback)((() => {
                            U && J.current === C.DisplayIntervals.Time && U.setChartType(a.NB.TimeGradientArea)
                        }), [U]),
                        re = (0, o.useCallback)((() => {
                            U && J.current === C.DisplayIntervals.Time && U.setChartType(a.NB.TimeGradientArea)
                        }), [U]),
                        oe = (0, o.useRef)(!0);
                    (0, o.useEffect)((() => {
                        oe.current = !0
                    }), [e.symbol]);
                    const se = (0, o.useCallback)((({
                        displayInterval: e
                    }) => {
                        if (!U) return;
                        if (!U.isStoreLoaded()) return;
                        if (oe.current) return void(oe.current = !1);
                        const {
                            typeFromSetting: t
                        } = U.getCalculatedChartType() || {};
                        if (!t) return;
                        const i = e === C.DisplayIntervals.Time ? a.NB.TimeGradientArea : t;
                        U.setChartType(i)
                    }), [U]);
                    (0, o.useEffect)((() => {
                        if (!U) return;
                        const e = () => se({
                            displayInterval: J.current
                        });
                        return U.on("doneDataFetching", e), U.on("chartLoaded", e), () => {
                            U.off("doneDataFetching", e), U.off("chartLoaded", e)
                        }
                    }), [U, se]), (0, o.useEffect)((() => {
                        se({
                            displayInterval: O
                        })
                    }), [se, O]);
                    const ne = (0, o.useCallback)((() => (({
                            customIndicators: e,
                            candleRef: t
                        }) => {
                            e.forEach((({
                                name: e,
                                indicator: i
                            }) => {
                                t.current ? .getCandlestick ? .() ? .registerCustomIndicator(e, i)
                            }))
                        })({
                            candleRef: Q,
                            customIndicators: t
                        })), [t]),
                        ae = (0, o.useCallback)((async e => window.localStorage.getItem(e) || ""), [b ? .storage]),
                        le = (0, o.useCallback)((async (e, t) => {
                            window.localStorage.setItem(e, t)
                        }), [b ? .storage]),
                        ce = (0, o.useCallback)((async t => {
                            if (await (e.beforeChartReady ? .(t)), ne(), $ && Q.current) {
                                const e = Q.current.getCandlestick();
                                if (!e) return;
                                await v({
                                    setMessageInfo: i,
                                    bizType: d,
                                    symbolDisplayRef: ee,
                                    storedData: t.storedData,
                                    candlestick: e,
                                    onGetStorageItem: ae,
                                    onSetStorageItem: le
                                })
                            }
                        }), [d, $, ne, e, ae, le, i]),
                        de = (0, o.useMemo)((() => n()(ce)), []);
                    (({
                        namespace: e,
                        orders: t
                    }) => {
                        const i = (0, T.w)(),
                            r = (0, C.createStore)(e),
                            s = (0, A.createStore)(e),
                            [n] = r(C.getShowLimitOrder),
                            [a] = r(C.getShowBotPreviewOrder),
                            [l] = s(A.getCandlestickReference),
                            {
                                getI18n: c
                            } = (0, S.o)("", "kline-ui"),
                            d = (0, o.useMemo)((() => c("order-drag-tooltip", {
                                defaultValue: "Drag for price modify"
                            })), [c]),
                            h = (0, o.useMemo)((() => c("order-modify-tooltip", {
                                defaultValue: "Click for modify"
                            })), [c]),
                            u = (0, o.useMemo)((() => c("order-cancel-tooltip", {
                                defaultValue: "Click for cancel"
                            })), [c]),
                            g = (0, o.useMemo)((() => (t || []).filter((({
                                limitOrderType: e
                            }) => (void 0 === e || e === C.LimitOrderType.LimitOrder) && n))), [t, n]),
                            p = (0, o.useMemo)((() => (t || []).filter((({
                                limitOrderType: e
                            }) => e === C.LimitOrderType.BotPreview && a))), [t, a]),
                            m = (0, o.useMemo)((() => [...g, ...p]), [g, p]),
                            x = (0, o.useMemo)((() => m.map((e => ({ ...e,
                                ...k({
                                    isBuy: e.isBuy,
                                    theme: i
                                }),
                                priceTooltipText: e.priceTooltipText ? ? d,
                                quantityTooltipText: e.quantityTooltipText ? ? h,
                                closeTooltipText: e.closeTooltipText ? ? u
                            })))), [u, m, d, h, i]),
                            f = (0, o.useMemo)((() => e ? x : []), [e, x]);
                        (0, o.useEffect)((() => {
                            void 0 !== t && l ? .manageOrderLines(f)
                        }), [l, f, t])
                    })({
                        namespace: e.namespace,
                        orders: h
                    }), (({
                        namespace: e,
                        positions: t
                    }) => {
                        const i = (0, T.w)(),
                            r = (0, C.createStore)(e),
                            s = (0, A.createStore)(e),
                            [n] = r(C.getShowPositionOrder),
                            [a] = s(A.getCandlestickReference),
                            {
                                getI18n: l
                            } = (0, S.o)("", "kline-ui"),
                            c = (0, o.useMemo)((() => l("position-reverse", {
                                defaultValue: "Reverse Position"
                            })), [l]),
                            d = (0, o.useMemo)((() => (t || []).map((e => ({ ...e,
                                ...L({
                                    isBuy: e.isBuy,
                                    pnl: +(e ? .pnl || 0),
                                    theme: i
                                }),
                                reverseOrderTooltipText: e.reverseOrderTooltipText ? ? c
                            })))), [t, c, i]);
                        (0, o.useEffect)((() => {
                            if (void 0 === t) return;
                            const i = e && n ? d : [];
                            a ? .managePositionLines(i)
                        }), [a, e, n, d, t])
                    })({
                        namespace: e.namespace,
                        positions: u
                    }), (({
                        namespace: e,
                        executionOrders: t
                    }) => {
                        const i = (0, T.w)(),
                            r = (0, C.createStore)(e),
                            s = (0, A.createStore)(e),
                            [n] = r(C.getShowExecutionOrder),
                            [a] = s(A.getCandlestickReference),
                            l = (0, o.useMemo)((() => (t || []).map((e => ({ ...e,
                                ...P({
                                    isBuy: e.isBuy,
                                    theme: i
                                })
                            })))), [t, i]);
                        (0, o.useEffect)((() => {
                            if (void 0 === t) return;
                            const i = e && n ? l : [];
                            a ? .manageExecutionOrders(i)
                        }), [a, e, l, n, t])
                    })({
                        namespace: e.namespace,
                        executionOrders: g
                    }), (({
                        namespace: e,
                        labelLines: t
                    }) => {
                        const i = (0, T.w)(),
                            r = (0, C.createStore)(e),
                            s = (0, A.createStore)(e),
                            [n] = r(C.getShowAverageBuyPrice),
                            [a] = r(C.getShowAverageSellPrice),
                            [l] = r(C.getShowBreakEvenPrice),
                            [c] = s(A.getCandlestickReference),
                            d = (t || []).filter((e => e.type === C.LabelLineType.AverageBuyPrice)).map((e => ({ ...e,
                                ...D({
                                    theme: i,
                                    isBuy: !0
                                }),
                                group: "average-cost"
                            }))),
                            h = (t || []).filter((e => e.type === C.LabelLineType.AverageSellPrice)).map((e => ({ ...e,
                                ...D({
                                    theme: i,
                                    isBuy: !1
                                }),
                                group: "average-cost"
                            }))),
                            u = (t || []).filter((e => e.type === C.LabelLineType.BreakEvenPrice)).map((e => ({ ...e,
                                ...D({
                                    theme: i,
                                    isBuy: !0
                                })
                            }))),
                            g = c ? .isLoaded() || !1;
                        (0, o.useEffect)((() => {
                            if (void 0 === t) return;
                            const i = [...n ? d : [], ...a ? h : [], ...l ? u : []],
                                r = e ? i : [];
                            c ? .manageLabelLines(r)
                        }), [c, e, n, g, d, l, u, t, a, h])
                    })({
                        namespace: e.namespace,
                        labelLines: p
                    }), (({
                        namespace: e,
                        singleLabelLines: t = []
                    }) => {
                        const i = (0, T.w)(),
                            r = (0, C.createStore)(e),
                            s = (0, A.createStore)(e),
                            [n] = r(C.getShowLiquidationPrice),
                            [a] = s(A.getCandlestickReference),
                            l = a ? .isLoaded(),
                            c = (0, o.useMemo)((() => {
                                const e = i ? .colors.EmphasizeText,
                                    r = i ? .colors.RedGreenBgText;
                                return t.map((t => ({ ...t,
                                    textBackground: e,
                                    textBorderColor: e,
                                    textColor: r,
                                    lineColor: e
                                })))
                            }), [t, i]);
                        (0, o.useEffect)((() => {
                            if (void 0 === t || !l) return;
                            const i = e && n ? c : [];
                            a ? .manageSingleLabelLines(i)
                        }), [a, t, c, e, n, l])
                    })({
                        namespace: e.namespace,
                        singleLabelLines: m
                    }), (({
                        namespace: e,
                        alerts: t = []
                    }) => {
                        const i = (0, T.w)(),
                            r = (0, C.createStore)(e),
                            s = (0, A.createStore)(e),
                            [n] = r(C.getShowPriceAlert),
                            [a] = s(A.getCandlestickReference),
                            l = (0, o.useMemo)((() => t.map((e => ({ ...e,
                                ...I({
                                    theme: i
                                })
                            })))), [t, i]);
                        (0, o.useEffect)((() => {
                            const t = e && n ? l : [];
                            a ? .manageAlerts(t)
                        }), [a, e, l, n])
                    })({
                        namespace: e.namespace,
                        alerts: x
                    });
                    const he = (0, o.useMemo)((() => ({
                            isFloor: !0,
                            ...e.candlestick
                        })), [e.candlestick]),
                        ue = (0, o.useMemo)((() => "focus-area h-full flex-1 " + (N !== C.Tabs.Origin ? "hidden" : "block")), [N]);
                    return (0, r.jsxs)("div", {
                        className: ue,
                        "data-testid": "kline",
                        children: [(0, r.jsx)(V, { ...e,
                            beforeChartReady: de,
                            ref: Q,
                            interval: H,
                            candlestick: he,
                            isStock: R !== C.PriceType.Last,
                            setLoading: K,
                            isShowCustomIndicator: $,
                            isShowBacktest: Y,
                            onSettingChanged: ie,
                            onSettingReset: re
                        }), W && (0, r.jsx)(c.R, {})]
                    }, Z)
                })),
                B = (0, o.memo)(M)
        },
        XD8z: (e, t, i) => {
            i.d(t, {
                A: () => d
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i.n(o),
                n = i("iOZB"),
                a = i("T0Sc");
            const l = s().lazy((() => i.e(7886).then(i.bind(i, "iqzT")))),
                c = ({
                    isReady: e,
                    children: t,
                    ...i
                }) => e ? t : i.openTime ? (0, r.jsx)(o.Suspense, {
                    fallback: (0, r.jsx)("div", {
                        className: "hidden"
                    }),
                    children: (0, r.jsx)(l, { ...i
                    })
                }) : null,
                d = ({
                    symbol: e,
                    symbolDisplay: t,
                    hostAddress: i,
                    willOpenInText: s,
                    checkTradeStatus: l,
                    children: d
                }) => {
                    const {
                        getI18n: h
                    } = (0, a.o)("trd-chart", "trade-ui"), [u, g] = (0, o.useState)(!0), [p, m] = (0, o.useState)(Date.now()), [x, f] = (0, o.useState)(0);
                    (0, o.useEffect)((() => {
                        (async () => {
                            const {
                                isReadyToTrade: t,
                                openTime: i
                            } = await l(e);
                            g(t), m(i)
                        })()
                    }), [l, e]), (0, n.A)((() => {
                        const e = p - Date.now();
                        f(Math.max(0, e)), g(e <= 0)
                    }), p - Date.now() > 0 ? 500 : null);
                    const y = (({
                            hostAddress: e
                        }) => `${e}${(0,o.useMemo)((()=>"/static/images/kline/stopwatch.gif"),[])}`)({
                            hostAddress: i
                        }),
                        b = (0, o.useMemo)((() => h("will-be-open", {
                            defaultValue: "will be open for trading in"
                        }) || ""), [h]);
                    return (0, r.jsx)(c, {
                        backgroundImagePath: y,
                        willOpenInText: s || b,
                        timeLeft: x,
                        isReady: u,
                        openTime: p,
                        symbol: t,
                        children: d
                    })
                }
        },
        KCmZ: (e, t, i) => {
            i.d(t, {
                A: () => m
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i("xqbL"),
                n = i.n(s),
                a = i("vjpm"),
                l = i("BbzZ"),
                c = i("vkGi"),
                d = i("tgKj"),
                h = i("Olbk");
            const u = ({
                    headerClassName: e,
                    headerSlot: t,
                    children: i
                }, o) => (0, r.jsxs)(d.A, {
                    className: "h-full flex-col",
                    ref: o,
                    children: [(0, r.jsx)(h.Ay, {
                        className: n()("border-b-[1px] border-x-0 border-t-0 border-solid border-Line", e),
                        children: t
                    }), (0, r.jsx)(h.Ay, {
                        className: "draggableCancel h-full relative",
                        children: i
                    })]
                }),
                g = (0, o.forwardRef)(u);
            var p = i("U/FS");
            const m = ({
                namespace: e,
                useMiniHeader: t,
                headerSlot: i,
                children: s
            }) => {
                const d = (0, p.y)(e),
                    [, h] = d(p.h),
                    {
                        isMobile: u
                    } = (0, a.Q)(),
                    [m, {
                        width: x
                    }] = (0, l.A)(),
                    f = (0, c.A)(x, 100);
                (0, o.useEffect)((() => h(f)), [f, h]);
                const y = u || t;
                return (0, r.jsx)(g, {
                    ref: m,
                    headerClassName: n()({
                        "pl-[0px]": y,
                        "pl-[16px]": !y,
                        "pr-[0px]": u,
                        "pr-[16px]": !u
                    }, "min-h-[40px]"),
                    headerSlot: i,
                    children: s
                })
            }
        },
        Q8OD: (e, t, i) => {
            i.r(t), i.d(t, {
                ChartModeDropdown: () => A,
                default: () => S
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i("T0Sc"),
                n = i("qv9I"),
                a = i("5XRN"),
                l = i("PzHQ");
            const c = e => (0, r.jsx)(l.A, {
                    viewBox: "0 0 14 14",
                    fill: "none",
                    ...e,
                    children: (0, r.jsx)("path", {
                        d: "M0.333496 0.333496H13.6668V13.6668H0.333496V0.333496Z",
                        fill: "currentColor"
                    })
                }),
                d = e => (0, r.jsx)(l.A, {
                    viewBox: "0 0 14 14",
                    fill: "none",
                    ...e,
                    children: (0, r.jsx)("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M13.6665 0.333496H7.83317V13.6668H13.6665V0.333496ZM6.16634 0.333659H0.333008V13.667H6.16634V0.333659Z",
                        fill: "currentColor"
                    })
                }),
                h = e => (0, r.jsx)(l.A, {
                    viewBox: "0 0 14 14",
                    fill: "none",
                    ...e,
                    children: (0, r.jsx)("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M0.333008 0.333497L0.333008 6.16683L13.6663 6.16683L13.6663 0.333496L0.333008 0.333497ZM0.333008 7.8335L0.333008 13.6668L13.6663 13.6668L13.6663 7.8335L0.333008 7.8335Z",
                        fill: "currentColor"
                    })
                }),
                u = e => (0, r.jsx)(l.A, {
                    viewBox: "0 0 14 14",
                    fill: "none",
                    ...e,
                    children: (0, r.jsx)("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M10.3332 0.333496H13.6665V13.6668H10.3332V0.333496ZM0.333008 0.333659H3.66634V13.667H0.333008V0.333659ZM8.6665 0.333496H5.33317V13.6668H8.6665V0.333496Z",
                        fill: "currentColor"
                    })
                }),
                g = e => (0, r.jsx)(l.A, {
                    viewBox: "0 0 14 14",
                    fill: "none",
                    ...e,
                    children: (0, r.jsx)("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M0.333008 3.66683L0.333008 0.333497L13.6663 0.333496V3.66683L0.333008 3.66683ZM0.333008 13.6668L0.333008 10.3335L13.6663 10.3335V13.6668L0.333008 13.6668ZM0.333008 5.3335L0.333008 8.66683L13.6663 8.66683V5.3335L0.333008 5.3335Z",
                        fill: "currentColor"
                    })
                }),
                p = e => (0, r.jsx)(l.A, {
                    viewBox: "0 0 14 14",
                    fill: "none",
                    ...e,
                    children: (0, r.jsx)("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M7.83317 0.333496H13.6665V6.16683H7.83317V0.333496ZM6.16634 0.333659H0.333008V6.16699H6.16634V0.333659ZM6.1665 7.8335H0.333171V13.6668H6.1665V7.8335ZM13.6665 7.8335H7.83317V13.6668H13.6665V7.8335Z",
                        fill: "currentColor"
                    })
                });
            var m = i("tgKj"),
                x = i("kcvK"),
                f = i("Olbk");
            const y = ({
                options: e,
                value: t,
                title: i,
                tooltip: o,
                onClick: s
            }) => (0, r.jsxs)(m.A, {
                style: {
                    padding: "10px 10px 16px 10px",
                    flexDirection: "column",
                    backgroundColor: "var(--color-CardBg)",
                    boxShadow: "var(--shadow-shadow1)",
                    borderRadius: "12px",
                    gap: "16px",
                    fontSize: "12px",
                    fontWeight: 400,
                    lineHeight: "16px",
                    color: "var(--color-iconNormal)"
                },
                children: [(0, r.jsx)(m.A, {
                    style: {
                        alignItems: "center",
                        gap: "2px",
                        lineHeight: "18px"
                    },
                    children: (0, r.jsx)(x.A, {
                        arrow: !0,
                        className: "text-[12px]",
                        trigger: "hover",
                        placement: "bottom-start",
                        tooltips: o,
                        children: (0, r.jsx)(f.Ay, {
                            style: {
                                textDecorationStyle: "dashed",
                                textDecorationLine: "underline",
                                cursor: "pointer"
                            },
                            children: i
                        })
                    })
                }), e.map(((e, i) => (0, r.jsxs)(m.A, {
                    style: {
                        gap: "16px",
                        alignItems: "center"
                    },
                    children: [(0, r.jsx)(f.Ay, {
                        children: i + 1
                    }), e.map(((e, i) => {
                        const o = (e => {
                            switch (e) {
                                case n.ChartMode.Single:
                                    return c;
                                case n.ChartMode.VerticalTwo:
                                    return d;
                                case n.ChartMode.HorizontalTwo:
                                    return h;
                                case n.ChartMode.VerticalThree:
                                    return u;
                                case n.ChartMode.HorizontalThree:
                                    return g;
                                case n.ChartMode.Four:
                                    return p;
                                default:
                                    return null
                            }
                        })(e);
                        return o ? (0, r.jsx)(o, {
                            sx: {
                                cursor: "pointer",
                                color: t === e ? "var(--color-textPrimary)" : "var(--color-iconNormal)",
                                width: "20px",
                                height: "20px",
                                padding: "2px"
                            },
                            className: "hover:text-SecondaryText",
                            onClick: () => s(e)
                        }, i) : null
                    }))]
                }, i)))]
            });
            var b = i("gbWK");
            const v = e => {
                    const [t, i] = (0, o.useState)(!1), s = (0, o.useCallback)((() => i(!0)), []), n = (0, o.useCallback)((() => i(!1)), []), l = (0, o.useCallback)((() => i((e => !e))), []), c = (0, o.useCallback)((t => {
                        i(!1), e.onClickItem(t)
                    }), [e]), d = (0, o.useMemo)((() => (0, r.jsx)(y, { ...e,
                        onClick: c
                    })), [e, c]);
                    return (0, r.jsx)(a.Ay, {
                        placement: "bottom-end",
                        enablePortal: !0,
                        open: t,
                        onMouseEnter: s,
                        onMouseLeave: n,
                        overlay: d,
                        sx: {
                            width: "20px",
                            height: "20px"
                        },
                        children: (0, r.jsx)(b.A, {
                            size: 20,
                            className: "text-iconNormal hover:text-SecondaryText",
                            style: {
                                cursor: "pointer"
                            },
                            onClick: l
                        })
                    })
                },
                C = [
                    [n.ChartMode.Single],
                    [n.ChartMode.VerticalTwo, n.ChartMode.HorizontalTwo],
                    [n.ChartMode.VerticalThree, n.ChartMode.HorizontalThree],
                    [n.ChartMode.Four]
                ],
                w = [
                    [n.ChartMode.Single],
                    [n.ChartMode.Four]
                ],
                A = ({
                    namespace: e,
                    onClick: t,
                    options: i = {
                        original: C,
                        tradingView: w
                    }
                }) => {
                    const a = (0, n.createStore)(e),
                        [l] = a(n.getActiveTab),
                        [c, d] = a(n.getChartMode),
                        {
                            getI18n: h
                        } = (0, s.o)("trd-chart", "trade-ui"),
                        u = (0, o.useMemo)((() => h("multi-chart", {
                            defaultValue: "Multi Chart"
                        }) || ""), [h]),
                        g = (0, o.useMemo)((() => h("miniMultiChartTooltip", {
                            defaultValue: "Price charts may experience latency issues when displayed in multi-charts mode"
                        }) || ""), [h]),
                        p = (0, o.useCallback)((e => {
                            d(e), t ? .(e)
                        }), [t, d]),
                        m = (0, o.useMemo)((() => {
                            switch (l) {
                                case n.Tabs.TradingView:
                                    return i ? .tradingView || w;
                                case n.Tabs.Origin:
                                default:
                                    return i ? .original || C
                            }
                        }), [l, i ? .original, i ? .tradingView]);
                    return (0, r.jsx)(v, {
                        options: m,
                        value: c,
                        title: u,
                        tooltip: g,
                        onClickItem: p
                    })
                },
                S = A
        },
        KepC: (e, t, i) => {
            i.r(t), i.d(t, {
                Fullscreen: () => n,
                default: () => a
            });
            var r = i("mXdx"),
                o = (i("DTvD"), i("w3mT")),
                s = i("xjyB");
            const n = ({
                    expanded: e,
                    onClick: t
                }) => {
                    const i = e ? o.A : s.A;
                    return (0, r.jsx)(i, {
                        className: " chart-fullscreen-icon min-w-[16px] min-h-[16px] cursor-pointer text-[--color-IconNormal] hover:text-SecondaryText ",
                        onClick: t
                    })
                },
                a = n
        },
        "A//A": (e, t, i) => {
            i.d(t, {
                A: () => k
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i.n(o),
                n = i("mrhq"),
                a = i("KCmZ"),
                l = i("XD8z"),
                c = i("qv9I"),
                d = i("rPbR"),
                h = i("U7O6");
            const u = ({
                basicKline: e,
                tradingView: t,
                depth: i,
                symbol: s,
                namespace: n,
                unmountTime: a = 6e5,
                electron: l
            }) => {
                const u = (0, c.createStore)(n),
                    g = (0, d.createStore)(n),
                    [p, m] = (0, o.useState)(!0),
                    [x, f] = (0, o.useState)(!0),
                    [y, b] = (0, o.useState)(!1),
                    v = (0, o.useRef)(),
                    C = (0, o.useRef)(!0),
                    [w] = u(c.getActiveTab),
                    [A] = u(c.getInterval),
                    [S] = u(c.getPriceType),
                    [T, k] = g(d.getTvKey),
                    [L, _] = g(d.getCandlestickKey);
                (0, o.useEffect)((() => {
                    const e = () => {
                        k(), _()
                    };
                    return window.addEventListener("online", e), () => window.removeEventListener("online", e)
                }), [_, k]);
                const P = (0, o.useCallback)((({
                    key: e,
                    newValue: t,
                    oldValue: i
                }) => {
                    "customIndicatorPassFilesTime" !== e && "customIndicatorPassFiles" !== e && "backtestFiles" !== e || t === i || _()
                }), [_]);
                return (0, o.useEffect)((() => (window.addEventListener("storage", P), () => window.removeEventListener("storage", P))), [l ? .storage, P]), (0, o.useEffect)((() => {
                    if (w === c.Tabs.TradingView && C.current && (C.current = !1), w === c.Tabs.TradingView) {
                        if (setTimeout((() => {
                                f(!1)
                            }), 0), clearTimeout(v.current), v.current = window.setTimeout(m, a, !0), !y) return;
                        _(), b(!1)
                    } else if (w === c.Tabs.Origin) {
                        if (setTimeout((() => {
                                m(!1)
                            }), 0), clearTimeout(v.current), v.current = window.setTimeout(f, a, !0), !y) return;
                        _(), b(!1)
                    } else w === c.Tabs.Depth && (clearTimeout(v.current), v.current = window.setTimeout((() => {
                        m(!0), f(!0), b(!0)
                    }), a));
                    return () => clearTimeout(v.current)
                }), [w]), (0, o.useEffect)((() => {
                    switch (w) {
                        case c.Tabs.TradingView:
                            m(!0);
                            break;
                        case c.Tabs.Origin:
                            f(!0)
                    }
                }), [s, A, S]), (0, r.jsxs)(r.Fragment, {
                    children: [p && x && w !== c.Tabs.Depth && (0, r.jsx)("div", {
                        className: "h-full relative",
                        children: (0, r.jsx)(h.R, {})
                    }), p ? null : (0, r.jsx)(o.Fragment, {
                        children: e({
                            symbol: s,
                            namespace: n
                        })
                    }, `bk-${L}`), x || C.current && w !== c.Tabs.TradingView ? null : (0, r.jsx)(o.Fragment, {
                        children: t({
                            symbol: s,
                            namespace: n
                        })
                    }, `tv-${T}`), w === c.Tabs.Depth ? i({
                        symbol: s,
                        namespace: n
                    }) : null]
                })
            };
            var g = i("vjpm"),
                p = i("U/FS"),
                m = i("19p4");
            var x = i("+K15");
            const f = (e, t) => {
                    if ("localStorage" in window) try {
                        const i = window.localStorage.getItem(e);
                        if ("" === i || null === i || void 0 === i) return;
                        let r = i;
                        if (r = JSON.parse(i), "" === r || null === r || void 0 === r) return;
                        t(r), localStorage.removeItem(e)
                    } catch (i) {
                        console.warn("[trade-widget/chart] errors while migrating legacy storage", e, i)
                    }
                },
                y = ({
                    namespace: e
                }) => {
                    (e => {
                        const t = (0, c.createStore)(e),
                            [, i] = t(c.getInterval),
                            r = (0, o.useMemo)((() => `${e}-chart-interval`), [e]);
                        (0, o.useEffect)((() => f(r, (e => i(e)))), [r, e, i])
                    })(e), (e => {
                        const t = (0, c.createStore)(e),
                            [, i] = t(c.getSelectedIntervals);
                        (0, o.useEffect)((() => f(`${e}-selected-intervals`, (e => i(e.map((({
                            value: e
                        }) => e)))))), [e, i])
                    })(e), (e => {
                        const t = (0, c.createStore)(e),
                            [, i] = t(c.getActiveTab);
                        (0, o.useEffect)((() => f(`${e}-chart-active-tab`, i)), [e, i])
                    })(e), (e => {
                        const t = (0, c.createStore)(e),
                            [, i] = t(c.getShowLimitOrder);
                        (0, o.useEffect)((() => f(`${e}-show-limit-orders`, i)), [e, i])
                    })(e), (e => {
                        const t = (0, c.createStore)(e),
                            [, i] = t(c.getShowPositionOrder);
                        (0, o.useEffect)((() => f(`${e}-show-position-orders`, i)), [e, i])
                    })(e), (e => {
                        const t = (0, c.createStore)(e),
                            [, i] = t(c.getShowExecutionOrder);
                        (0, o.useEffect)((() => f(`${e}-show-execution-orders`, i)), [e, i])
                    })(e), (e => {
                        const t = (0, c.createStore)(e),
                            [, i] = t(c.getPriceType);
                        (0, o.useEffect)((() => f(`${e}-chart-priceType`, i)), [e, i])
                    })(e), (e => {
                        const t = (0, c.createStore)(e),
                            [, i] = t(c.getOriginalChartStyle);
                        (0, o.useEffect)((() => f(`${e}-chart-type`, i)), [e, i])
                    })(e), (e => {
                        const t = (0, c.createStore)(e),
                            [, i] = t(c.getTvChartStyle);
                        (0, o.useEffect)((() => f(`${e}-chart-tvChartStyle`, i)), [e, i])
                    })(e), (e => {
                        const t = (0, c.createStore)(e),
                            [, i] = t(c.getChartMode);
                        (0, o.useEffect)((() => f(`${e}-chart-miniMultiChartType`, i)), [e, i])
                    })(e), (e => {
                        const t = (0, c.createStore)(e),
                            [, i] = t(c.getLastSelectedMiniMultiChartWindow);
                        (0, o.useEffect)((() => f(`${e}-chart-lastSelectedMiniMultiChartWindow`, i)), [e, i])
                    })(e), (e => {
                        const t = (0, c.createStore)(e),
                            [, i] = t(c.getMiniMultiChartWindows);
                        (0, o.useEffect)((() => f(`${e}-chart-miniMultiChartWindows`, i)), [e, i])
                    })(e), (e => {
                        (0, o.useEffect)((() => {
                            x.IG.removeItem(`${e}-interval-config-open`)
                        }), [e])
                    })(e)
                };
            var b = i("Rhdc"),
                v = i("Xz3K");
            const C = ({
                    namespace: e,
                    intervalOptions: t = m.DefaultIntervalOptions,
                    shortcutEnabled: i = !1,
                    electron: r
                }) => {
                    const {
                        selectSelectedIntervalByNumber: s,
                        selectNextInterval: n,
                        onChartZoomIn: a,
                        onChartZoomOut: l,
                        onChartForward: h,
                        onChartBackward: u
                    } = (({
                        namespace: e,
                        intervalOptions: t
                    }) => {
                        const i = (0, c.createStore)(e),
                            r = (0, d.createStore)(e),
                            [s] = i(c.getActiveTab),
                            [n] = r(d.getCandlestickReference),
                            [a] = r(d.getIsChartFocused),
                            [l, h] = i(c.getInterval),
                            [u] = i(c.getSelectedIntervals),
                            [g] = i(c.getChartMode);
                        return {
                            selectSelectedIntervalByNumber: (0, o.useCallback)((e => {
                                if (!a) return;
                                if (g !== c.ChartMode.Single) return;
                                const t = u[0 === e ? 9 : e - 1];
                                t && h(t)
                            }), [g, a, u, h]),
                            selectNextInterval: (0, o.useCallback)((() => {
                                let e = t.indexOf(l) + 1;
                                const i = t[e % t.length];
                                h(i)
                            }), [l, t, h]),
                            onChartZoomIn: (0, o.useCallback)((() => {
                                s === c.Tabs.Origin && n ? .zoomIn()
                            }), [n, s]),
                            onChartZoomOut: (0, o.useCallback)((() => {
                                s === c.Tabs.Origin && n ? .zoomOut()
                            }), [n, s]),
                            onChartForward: (0, o.useCallback)((() => {
                                s === c.Tabs.Origin && n ? .goForward()
                            }), [n, s]),
                            onChartBackward: (0, o.useCallback)((() => {
                                s === c.Tabs.Origin && n ? .goNext()
                            }), [n, s])
                        }
                    })({
                        namespace: e,
                        intervalOptions: t
                    });
                    (0, o.useEffect)((() => () => null), [n, a, l, u, h, i, r, s]), (0, o.useEffect)((() => i ? (0, b.r)((e => {
                        switch (e) {
                            case v.mC.KLINE_MOVEL:
                                return u();
                            case v.mC.KLINE_MOVER:
                                return h();
                            case v.mC.KLINE_ZOOMIN:
                                return a();
                            case v.mC.KLINE_ZOOMOUT:
                                return l();
                            case v.mC.KLINE_SWITCH:
                                return n();
                            case v.mC.KLINE_INTERVAL_0:
                                return s(0);
                            case v.mC.KLINE_INTERVAL_1:
                                return s(1);
                            case v.mC.KLINE_INTERVAL_2:
                                return s(2);
                            case v.mC.KLINE_INTERVAL_3:
                                return s(3);
                            case v.mC.KLINE_INTERVAL_4:
                                return s(4);
                            case v.mC.KLINE_INTERVAL_5:
                                return s(5);
                            case v.mC.KLINE_INTERVAL_6:
                                return s(6);
                            case v.mC.KLINE_INTERVAL_7:
                                return s(7);
                            case v.mC.KLINE_INTERVAL_8:
                                return s(8);
                            case v.mC.KLINE_INTERVAL_9:
                                return s(9)
                        }
                    })) : () => null), [u, h, a, l, n, s, i])
                },
                w = s().lazy((() => i.e(7911).then(i.bind(i, "407d")))),
                A = s().lazy((() => i.e(6226).then(i.bind(i, "lGYZ")))),
                S = e => (0, n.v)() ? (0, r.jsx)(o.Suspense, {
                    fallback: (0, r.jsx)("div", {
                        className: "hidden"
                    }),
                    children: (0, r.jsx)(w, { ...e
                    })
                }) : (0, r.jsx)(r.Fragment, {}),
                T = e => (0, n.v)() ? (0, r.jsx)(o.Suspense, {
                    fallback: (0, r.jsx)("div", {
                        className: "hidden"
                    }),
                    children: (0, r.jsx)(A, { ...e
                    })
                }) : (0, r.jsx)(r.Fragment, {}),
                k = ({
                    namespace: e,
                    miniChartNamespace: t,
                    hostAddress: i,
                    themeName: s,
                    getSymbolDisplayName: n,
                    checkMiniSymbolAvaliablility: h,
                    beforeMiniChartSymbolChange: x,
                    hasDoneFetchingSymbols: f,
                    generateToolbar: b,
                    generateMiniToolbar: v,
                    basicKline: w,
                    tradingView: A,
                    depth: k,
                    symbol: L,
                    checkTradeStatus: _,
                    isHiddenLogo: P,
                    electron: D,
                    shortcutEnabled: I,
                    intervalOptions: V,
                    willOpenInText: M
                }) => {
                    y({
                        namespace: e
                    });
                    const B = (0, c.createStore)(e),
                        E = (0, d.createStore)(e),
                        [j] = B(c.getChartMode),
                        [O] = B(c.getActiveTab),
                        [, H] = E(d.getIsChartFocused),
                        R = (e => {
                            const t = (0, p.y)(e),
                                [i] = t(p.h),
                                {
                                    isMobile: r
                                } = (0, g.Q)();
                            return (0, o.useMemo)((() => r || i < 580 && i > 0 ? m.IntervalFilterTypes.Small : m.IntervalFilterTypes.Medium), [r, i])
                        })(e),
                        N = (({
                            namespace: e,
                            beforeMiniChartSymbolChange: t
                        }) => {
                            const i = (0, c.createStore)(e),
                                [, r] = i(c.getLastSelectedMiniMultiChartWindow),
                                [s] = i(c.getMiniMultiChartWindows);
                            return (0, o.useCallback)((e => {
                                const i = s[e];
                                t({
                                    symbol: i
                                }), r(e)
                            }), [s, t, r])
                        })({
                            namespace: e,
                            beforeMiniChartSymbolChange: x
                        }),
                        W = (0, o.useMemo)((() => (0, r.jsx)(S, {
                            namespace: e,
                            miniChartNamespace: t,
                            symbol: L,
                            hostAddress: i,
                            themeName: s,
                            checkMiniSymbolAvaliablility: h,
                            checkTradeStatus: _,
                            onSymbolChange: N,
                            getSymbolDisplayName: n,
                            basicKline: w,
                            generateToolbar: v,
                            isHiddenLogo: P,
                            hasDoneFetchingSymbols: f
                        })), [w, h, _, v, n, f, i, P, t, e, N, L, s]),
                        F = (0, o.useMemo)((() => (0, r.jsx)(u, {
                            basicKline: w,
                            tradingView: A,
                            depth: k,
                            symbol: L,
                            namespace: e,
                            electron: D
                        })), [w, k, D, e, L, A]);
                    C({
                        namespace: e,
                        shortcutEnabled: I,
                        electron: D,
                        intervalOptions: V
                    });
                    const z = (0, o.useMemo)((() => j === c.ChartMode.Single), [j]),
                        X = (0, o.useMemo)((() => O === c.Tabs.TradingView), [O]),
                        U = (0, o.useMemo)((() => {
                            switch (O) {
                                case c.Tabs.Origin:
                                    return z ? F : W;
                                case c.Tabs.TradingView:
                                default:
                                    return F
                            }
                        }), [O, z, W, F]),
                        G = (0, o.useMemo)((() => n(L)), [n, L]),
                        $ = (0, o.useMemo)((() => b({
                            onSymbolChange: N
                        })), [b, N]),
                        Y = (0, o.useRef)(null);
                    (0, o.useEffect)((() => {
                        const e = Y.current;
                        if (!e) return;
                        const t = () => H(!0),
                            i = () => H(!1);
                        return e.addEventListener("focus", t), e.addEventListener("blur", i), () => {
                            e.removeEventListener("focus", t), e.removeEventListener("blur", i)
                        }
                    }), [H]);
                    const Z = (0, o.useMemo)((() => (0, r.jsx)(a.A, {
                        useMiniHeader: O === c.Tabs.Origin && !z,
                        namespace: e,
                        headerSlot: (0, r.jsx)(T, {
                            symbol: L,
                            getSymbolDisplayName: n,
                            namespace: e,
                            miniChartNamespace: t,
                            generateToolbar: $,
                            intervalFilterType: R
                        }),
                        children: U
                    })), [O, U, n, R, z, t, e, L, $]);
                    return (0, r.jsx)("div", {
                        className: "h-full w-full",
                        ref: Y,
                        tabIndex: -1,
                        children: z || X ? (0, r.jsx)(l.A, {
                            symbol: L,
                            symbolDisplay: G,
                            hostAddress: i,
                            themeName: s,
                            willOpenInText: M,
                            checkTradeStatus: _,
                            children: Z
                        }) : Z
                    })
                }
        },
        IyNj: (e, t, i) => {
            i.d(t, {
                A: () => u
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i("tM9B"),
                n = i("vY9W"),
                a = i("eT23");
            var l = i("lhEX"),
                c = i("K/eC");
            const d = (0, o.lazy)((() => i.e(7807).then(i.bind(i, "jYEz")))),
                h = (0, o.lazy)((() => i.e(6085).then(i.bind(i, "0Yrr")))),
                u = ({
                    namespace: e,
                    symbol: t,
                    theme: i,
                    asks: u,
                    bids: g,
                    width: p,
                    height: m,
                    mode: x,
                    pricePrecision: f,
                    filterPricePrecision: y
                }) => {
                    const b = (0, n.createStore)(e),
                        [v, C] = b(n.getDepthScale),
                        w = (0, o.useMemo)((() => ((e, t) => ({
                            tag: t,
                            background: e ? .colors ? .PrimaryText,
                            d1: {
                                lineColor: e ? .colors ? .Sell,
                                fillColor: (0, a.N)(e ? .colors ? .Sell, .1)
                            },
                            d2: {
                                lineColor: e ? .colors ? .Buy,
                                fillColor: (0, a.N)(e ? .colors ? .Buy, .1)
                            },
                            hoverBgColor: (0, a.N)(e ? .colors ? .Input, .5),
                            textColor: e ? .colors ? .SecondaryText,
                            tagColor: e ? .colors ? .SecondaryBg
                        }))(i, {
                            width: 124,
                            height: 62
                        })), [i]),
                        A = (0, o.useCallback)((e => (0, l.D$)((0, s.ZV)(e, f))), [f]),
                        S = (0, o.useCallback)((e => (0, l.rx)(e, 2)), []),
                        T = (0, o.useCallback)((e => (0, l.D$)(e, y)), [y]),
                        k = (0, o.useCallback)((e => (0, l.rx)(e)), []),
                        L = (0, o.useCallback)(((e, t) => `+${(0,l.e8)((e-t)/t,1)}`), []),
                        _ = (0, o.useCallback)(((e, t) => `${(0,l.e8)((e-t)/t,1)}`), []);
                    return x === c.Kt.Horizontal ? (0, r.jsx)(o.Suspense, {
                        fallback: null,
                        children: (0, r.jsx)(d, {
                            symbol: t,
                            d1Group: u,
                            d2Group: g,
                            canvas: {
                                width: p,
                                height: m
                            },
                            styles: w,
                            scale: v,
                            setScale: C,
                            xTicksFormatter: A,
                            yTicksFormatter: S,
                            d1XValueFormatter: T,
                            d2XValueFormatter: T,
                            d1YValueFormatter: k,
                            d2YValueFormatter: k,
                            d1DeltaXValueFormatter: L,
                            d2DeltaXValueFormatter: _
                        })
                    }) : (0, r.jsx)(o.Suspense, {
                        fallback: null,
                        children: (0, r.jsx)(h, {
                            symbol: t,
                            d1Group: u,
                            d2Group: g,
                            canvas: {
                                width: p,
                                height: m
                            },
                            styles: w,
                            scale: v,
                            setScale: C,
                            yTicksFormatter: e => (0, s.ZV)(e, f),
                            d1XValueFormatter: T,
                            d2XValueFormatter: T,
                            d1YValueFormatter: k,
                            d2YValueFormatter: k
                        })
                    })
                }
        },
        "K/eC": (e, t, i) => {
            var r;
            i.d(t, {
                    Kt: () => r
                }),
                function(e) {
                    e[e.Horizontal = 0] = "Horizontal", e[e.Vertical = 1] = "Vertical"
                }(r || (r = {}))
        },
        VhcG: (e, t, i) => {
            i.d(t, {
                L7: () => a,
                Rc: () => d,
                ty: () => l
            });
            var r = i("wpca"),
                o = i.n(r),
                s = i("K9aZ"),
                n = i.n(s);
            const a = ["1S", "1", "3", "5", "15", "30", "60", "120", "240", "360", "480", "720", "1D", "3D", "1W", "1M"],
                l = ({
                    symbol: e,
                    params: t
                }) => `${e}@${new URLSearchParams(t).toString()}`,
                c = e => {
                    const [t, i] = e.split("@"), r = new URLSearchParams(i).entries();
                    return {
                        symbol: t,
                        params: o()(Array.from(r))
                    }
                },
                d = () => {
                    const e = new Map;
                    let t = {},
                        i = [],
                        r = {
                            onReady: () => null,
                            resolveSymbol: () => null,
                            searchSymbols: () => null,
                            getBars: () => null,
                            subscribeBars: () => null,
                            unsubscribeBars: () => null
                        };
                    return ({
                        config: o,
                        onSymbolResolved: s,
                        onFetchSymbolsInfo: d,
                        onFetchBars: h,
                        onSubscribeBars: u,
                        onUnsubscribeBars: g,
                        onFetchServerTimeApi: p,
                        onTransformSymbolInfo: m = ({
                            template: e
                        }) => e
                    }) => (r = {
                        onReady: e => {
                            setTimeout((async () => {
                                const r = (await d()).map((e => ({ ...e,
                                    ticker: l({
                                        symbol: e.symbol,
                                        params: e.params || {}
                                    })
                                })));
                                i = r.map((({
                                    ticker: e,
                                    symbol: t,
                                    fullName: i,
                                    description: r = "",
                                    exchange: o = "",
                                    type: s = ""
                                }) => ({
                                    symbol: t,
                                    ticker: e,
                                    full_name: i,
                                    description: r,
                                    exchange: o,
                                    type: s
                                }))), t = n()(r, "ticker"), e({
                                    exchanges: [],
                                    symbols_types: [],
                                    supported_resolutions: a,
                                    supports_marks: !1,
                                    supports_timescale_marks: !1,
                                    supports_time: !0,
                                    ...o
                                })
                            }))
                        },
                        resolveSymbol: (e, i, r) => {
                            const o = t[e];
                            if (!o) return void r(`cannot resolve symbol - ${e}`);
                            const n = m({
                                info: o,
                                template: {
                                    description: o.description || "",
                                    fractional: !1,
                                    has_seconds: !0,
                                    seconds_multipliers: ["1"],
                                    has_intraday: !0,
                                    has_daily: !0,
                                    daily_multipliers: ["1", "3"],
                                    has_weekly_and_monthly: !0,
                                    minmov: 1,
                                    minmove2: 0,
                                    name: o.symbol,
                                    full_name: o.fullName,
                                    ticker: o.ticker,
                                    timezone: "Etc/UTC",
                                    pricescale: o.tickSize,
                                    session: "24x7",
                                    type: o.type || "",
                                    exchange: o.exchange || "",
                                    listed_exchange: o.exchange || "",
                                    format: "price",
                                    supported_resolutions: o.supportedResolutions || a
                                }
                            });
                            setTimeout((() => {
                                i(n), s ? .(n)
                            }))
                        },
                        searchSymbols: (e, t, r, o) => {
                            const s = new RegExp(e, "i"),
                                n = new RegExp(t, "i"),
                                a = new RegExp(r, "i");
                            o(i.filter((({
                                symbol: e,
                                ticker: t,
                                full_name: i,
                                description: r = "",
                                exchange: o = "",
                                type: l = ""
                            }) => [e, t, i, r].some((e => s.test(e))) && n.test(o) && a.test(l))))
                        },
                        getBars: async (e, t, i, r, o) => {
                            const {
                                from: s,
                                to: n
                            } = i;
                            let a = [];
                            try {
                                if (n >= 0) {
                                    const i = c(e.ticker || "");
                                    a = await h({
                                        symbolInfo: e,
                                        resolution: t,
                                        rangeStartDate: s,
                                        rangeEndDate: n,
                                        tickerInfo: i
                                    })
                                }
                                r(a, {
                                    noData: 0 === a.length
                                })
                            } catch (l) {
                                o(l.toString())
                            }
                        },
                        subscribeBars: (t, i, r, o, s) => {
                            const n = c(t.ticker || ""),
                                a = u({
                                    symbolInfo: t,
                                    resolution: i,
                                    callback: r,
                                    onResetCacheNeededCallback: s,
                                    tickerInfo: n
                                });
                            e.set(o, a)
                        },
                        unsubscribeBars: t => {
                            e ? .get(t) ? .(), e ? .delete(t), g ? .(t)
                        },
                        getServerTime: async e => {
                            try {
                                e(await p())
                            } catch (t) {
                                e(Date.now() / 1e3)
                            }
                        }
                    }, {
                        datafeed: r,
                        observers: e,
                        symbolsInfo: t
                    })
                }
        },
        JcxF: (e, t, i) => {
            i.d(t, {
                A: () => I
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i("xAfo"),
                n = i("UXyB"),
                a = i("v5Y+"),
                l = i.n(a),
                c = i("BmHO"),
                d = i.n(c),
                h = i("2IQ4"),
                u = i("zHUU"),
                g = i("T0Sc"),
                p = i("z9eP"),
                m = i("ntli"),
                x = i("qv9I"),
                f = i("rPbR"),
                y = i("7asw"),
                b = i("19p4"),
                v = i("J0/w");
            var C = i("Ov3/"),
                w = i("hufm");
            const A = e => ({
                volumePaneSize: "medium",
                "symbolWatermarkProperties.transparency": 85,
                "symbolWatermarkProperties.color": "rgba(0, 0, 0, 0)",
                "scalesProperties.textColor": e ? .colors ? .t ? .third,
                "scalesProperties.lineColor": e ? .colors ? .line,
                "scalesProperties.backgroundColor": e ? .colors ? .background,
                "paneProperties.background": e ? .colors ? .moduleBg,
                "paneProperties.backgroundType": "solid",
                "paneProperties.horzGridProperties.color": e ? .colors ? .lineForK,
                "paneProperties.vertGridProperties.color": e ? .colors ? .lineForK,
                "paneProperties.crossHairProperties.color": e ? .colors ? .t ? .secondary,
                "candleStyle.upColor": e ? .colors ? .buy,
                "candleStyle.downColor": e ? .colors ? .sell,
                "candleStyle.drawWick": !0,
                "candleStyle.drawBorder": !0,
                "candleStyle.borderColor": "transparent",
                "candleStyle.borderUpColor": e ? .colors ? .buy,
                "candleStyle.borderDownColor": e ? .colors ? .sell,
                "candleStyle.wickUpColor": e ? .colors ? .buy,
                "candleStyle.wickDownColor": e ? .colors ? .sell,
                "hollowCandleStyle.upColor": e ? .colors ? .buy,
                "hollowCandleStyle.downColor": e ? .colors ? .sell,
                "hollowCandleStyle.drawWick": !0,
                "hollowCandleStyle.drawBorder": !0,
                "hollowCandleStyle.borderColor": "transparent",
                "hollowCandleStyle.borderUpColor": e ? .colors ? .buy,
                "hollowCandleStyle.borderDownColor": e ? .colors ? .sell,
                "hollowCandleStyle.wickUpColor": e ? .colors ? .buy,
                "hollowCandleStyle.wickDownColor": e ? .colors ? .sell,
                "hollowCandleStyle.drawBody": !0,
                "haStyle.upColor": e ? .colors ? .buy,
                "haStyle.downColor": e ? .colors ? .sell,
                "haStyle.drawWick": !0,
                "haStyle.drawBorder": !0,
                "haStyle.borderColor": "transparent",
                "haStyle.borderUpColor": e ? .colors ? .buy,
                "haStyle.borderDownColor": e ? .colors ? .sell,
                "haStyle.wickUpColor": e ? .colors ? .buy,
                "haStyle.wickDownColor": e ? .colors ? .sell,
                "haStyle.barColorsOnPrevClose": !1,
                "haStyle.drawBody": !0,
                "barStyle.upColor": e ? .colors ? .buy,
                "barStyle.downColor": e ? .colors ? .sell,
                "barStyle.barColorsOnPrevClose": !1,
                "barStyle.dontDrawOpen": !1,
                "barStyle.thinBars": !0,
                "columnStyle.upColor": e ? .colors ? .buy,
                "columnStyle.downColor": e ? .colors ? .sell,
                "columnStyle.barColorsOnPrevClose": !0,
                "columnStyle.priceSource": "close",
                "lineStyle.color": e ? .colors ? .buy,
                "lineStyle.linewidth": 2,
                "lineStyle.priceSource": "close",
                "areaStyle.color1": e ? .colors ? .buy,
                "areaStyle.color2": e ? .colors ? .sell,
                "areaStyle.linecolor": e ? .colors ? .sell,
                "areaStyle.linewidth": 2,
                "areaStyle.priceSource": "close",
                "areaStyle.transparency": 100,
                "baselineStyle.baselineColor": e ? .colors ? .buy,
                "baselineStyle.topFillColor1": e ? .colors ? .buy,
                "baselineStyle.topFillColor2": e ? .colors ? .sell,
                "baselineStyle.bottomFillColor1": e ? .colors ? .buy,
                "baselineStyle.bottomFillColor2": e ? .colors ? .sell,
                "baselineStyle.topLineColor": e ? .colors ? .buy,
                "baselineStyle.bottomLineColor": e ? .colors ? .sell,
                "baselineStyle.topLineWidth": 2,
                "baselineStyle.bottomLineWidth": 2,
                "baselineStyle.priceSource": "close",
                "baselineStyle.transparency": 50,
                "baselineStyle.baseLevelPercentage": 50,
                "hiloStyle.color": e ? .colors ? .buy,
                "hiloStyle.showBorders": !0,
                "hiloStyle.borderColor": e ? .colors ? .buy,
                "hiloStyle.showLabels": !0,
                "hiloStyle.labelColor": e ? .colors ? .buy,
                "hiloStyle.fontSize": 7,
                "pbStyle.upColor": e ? .colors ? .buy,
                "pbStyle.downColor": e ? .colors ? .sell,
                "pbStyle.borderUpColor": e ? .colors ? .buy,
                "pbStyle.borderDownColor": e ? .colors ? .sell,
                "pbStyle.upColorProjection": e ? .colors ? .buy,
                "pbStyle.downColorProjection": e ? .colors ? .sell,
                "pbStyle.borderUpColorProjection": e ? .colors ? .buy,
                "pbStyle.borderDownColorProjection": e ? .colors ? .sell,
                "renkoStyle.upColor": e ? .colors ? .buy,
                "renkoStyle.downColor": e ? .colors ? .sell,
                "renkoStyle.borderUpColor": e ? .colors ? .buy,
                "renkoStyle.borderDownColor": e ? .colors ? .sell,
                "renkoStyle.upColorProjection": e ? .colors ? .buy,
                "renkoStyle.downColorProjection": e ? .colors ? .sell,
                "renkoStyle.borderUpColorProjection": e ? .colors ? .buy,
                "renkoStyle.borderDownColorProjection": e ? .colors ? .sell,
                "renkoStyle.wickUpColor": e ? .colors ? .buy,
                "renkoStyle.wickDownColor": e ? .colors ? .sell,
                "kagiStyle.upColor": e ? .colors ? .buy,
                "kagiStyle.downColor": e ? .colors ? .sell,
                "kagiStyle.upColorProjection": e ? .colors ? .buy,
                "kagiStyle.downColorProjection": e ? .colors ? .sell,
                "pnfStyle.upColor": e ? .colors ? .buy,
                "pnfStyle.downColor": e ? .colors ? .sell,
                "pnfStyle.upColorProjection": e ? .colors ? .buy,
                "pnfStyle.downColorProjection": e ? .colors ? .sell,
                "rangeStyle.upColor": e ? .colors ? .buy,
                "rangeStyle.downColor": e ? .colors ? .sell,
                "rangeStyle.thinBars": "true",
                "rangeStyle.upColorProjection": e ? .colors ? .buy,
                "rangeStyle.downColorProjection": e ? .colors ? .sell
            });
            var S = i("+ilk"),
                T = i("VhcG");
            const k = (0, o.lazy)((() => i.e(4493).then(i.bind(i, "mXSc")))),
                L = e => (0, o.useMemo)((() => d().createInstance({
                    name: e
                })), [e]),
                _ = ({
                    key: e,
                    layout: t
                }) => "s" === t ? e : `${e}-${t}`,
                P = e => {
                    switch (e) {
                        case x.ChartMode.HorizontalTwo:
                            return "2v";
                        case x.ChartMode.VerticalTwo:
                            return "2h";
                        case x.ChartMode.HorizontalThree:
                            return "3v";
                        case x.ChartMode.VerticalThree:
                            return "3h";
                        case x.ChartMode.Four:
                            return "4";
                        case x.ChartMode.Single:
                        default:
                            return "s"
                    }
                },
                D = ({
                    tradingViewProps: e,
                    namespace: t,
                    theme: i,
                    storageName: a = b.DefaultTVStorageName,
                    containerId: c = "tradingview",
                    symbolsInfo: d = {},
                    electron: p = {}
                }) => {
                    (0, s.A)((() => {
                        console.warn("[trade-widget] the component has been deprecated, Please use Chart/containers/TradingViewTP27 instead.")
                    }));
                    const D = (0, x.createStore)(t),
                        I = (0, f.createStore)(t),
                        V = (0, y.y)(t),
                        [M, B] = D(x.getInterval),
                        E = D(x.getTrueInterval),
                        [j] = D(x.getActiveTab),
                        [O, H] = D(x.getPriceType),
                        [R, N] = D(x.getTvChartStyle),
                        [W] = D(x.getChartMode),
                        [, F] = V(y.N),
                        [, z] = I(f.getTradingViewReference),
                        [X, U] = (0, o.useState)(!1),
                        G = L(t),
                        $ = (0, u.Bl)(),
                        Y = (0, o.useMemo)((() => (e => {
                            switch (e) {
                                case "zh-CN":
                                case "cn":
                                    return "zh";
                                case "zh-HK":
                                case "zh-TW":
                                case "zh-TC":
                                case "tw":
                                    return "zh_TW";
                                case "ja":
                                    return "ja";
                                case "ko":
                                    return "ko";
                                case "th":
                                    return "th";
                                case "he":
                                    return "he_IL";
                                case "ru":
                                    return "ru";
                                case "cs":
                                    return "cs";
                                case "sv":
                                    return "sv";
                                case "vi":
                                case "vn":
                                    return "vi";
                                case "tr":
                                    return "tr";
                                case "ro":
                                    return "ro";
                                case "pt-PT":
                                case "pt-BR":
                                case "pt":
                                    return "pt";
                                case "pl":
                                    return "pl";
                                case "nl":
                                    return "nl_NL";
                                case "it":
                                    return "it";
                                case "fr":
                                    return "fr";
                                case "es":
                                case "es-LA":
                                    return "es";
                                case "de":
                                    return "de";
                                case "id":
                                    return "id_ID";
                                default:
                                    return "en"
                            }
                        })($)), [$]),
                        Z = (0, o.useMemo)((() => (e => ({
                            originalTheme: e,
                            overrides: A(e)
                        }))(i)), [i]),
                        K = (0, o.useMemo)((() => `${t}-${c}`), [c, t]),
                        q = (0, o.useMemo)((() => v.TrueIntervalToTVResolution[E]), [E]),
                        Q = (0, o.useRef)(),
                        J = (0, o.useRef)(M),
                        ee = (0, o.useRef)(R),
                        te = (0, o.useRef)(d),
                        ie = (0, o.useRef)(W),
                        re = (0, o.useRef)(G),
                        oe = (0, o.useRef)(a),
                        se = (0, o.useRef)(!1),
                        ne = (0, o.useRef)(e.theme),
                        ae = (0, o.useRef)(Z);
                    (0, o.useEffect)((() => {
                        J.current = M
                    }), [M]), (0, o.useEffect)((() => {
                        ee.current = R
                    }), [R]), (0, o.useEffect)((() => {
                        te.current = d
                    }), [d]), (0, o.useEffect)((() => {
                        ie.current = W
                    }), [W]), (0, o.useEffect)((() => {
                        re.current = G
                    }), [G]), (0, o.useEffect)((() => {
                        oe.current = a
                    }), [a]), (0, o.useEffect)((() => {
                        ne.current = e.theme
                    }), [e.theme]), (0, o.useEffect)((() => {
                        ae.current = Z
                    }), [Z]);
                    const le = (({
                            namespace: e,
                            orders: t
                        }) => {
                            const i = (0, x.createStore)(e),
                                [r] = i(x.getShowLimitOrder),
                                [s] = i(x.getShowBotPreviewOrder),
                                {
                                    getI18n: n
                                } = (0, g.o)("", "kline-ui"),
                                a = (0, o.useMemo)((() => n("order-drag-tooltip", {
                                    defaultValue: "Drag for price modify"
                                }) || ""), [n]),
                                l = (0, o.useMemo)((() => n("order-modify-tooltip", {
                                    defaultValue: "Click for modify"
                                }) || ""), [n]),
                                c = (0, o.useMemo)((() => n("order-cancel-tooltip", {
                                    defaultValue: "Click for cancel"
                                }) || ""), [n]),
                                d = (0, o.useMemo)((() => t.filter((({
                                    limitOrderType: e
                                }) => (void 0 === e || e === x.LimitOrderType.LimitOrder) && r))), [t, r]),
                                h = (0, o.useMemo)((() => t.filter((({
                                    limitOrderType: e
                                }) => e === x.LimitOrderType.BotPreview && s))), [t, s]),
                                u = (0, o.useMemo)((() => [...d, ...h]), [d, h]);
                            return (0, o.useMemo)((() => u.map((e => ({ ...e,
                                tooltip: e.tooltip ? ? a,
                                modifyTooltip: e.modifyTooltip ? ? l,
                                cancelTooltip: e.cancelTooltip ? ? c
                            })))), [c, a, l, u])
                        })({
                            namespace: t,
                            orders: e.limitOrders
                        }),
                        ce = (({
                            namespace: e,
                            orders: t
                        }) => {
                            const i = (0, x.createStore)(e),
                                [r] = i(x.getShowPositionOrder);
                            return r ? t : []
                        })({
                            namespace: t,
                            orders: e.positionOrders
                        }),
                        de = (({
                            namespace: e,
                            orders: t
                        }) => {
                            const i = (0, x.createStore)(e),
                                [r] = i(x.getShowExecutionOrder);
                            return r ? t : []
                        })({
                            namespace: t,
                            orders: e.executionOrders
                        }),
                        he = (({
                            namespace: e,
                            labelLines: t
                        }) => {
                            const i = (0, x.createStore)(e),
                                [r] = i(x.getShowAverageBuyPrice),
                                [o] = i(x.getShowAverageSellPrice),
                                [s] = i(x.getShowBreakEvenPrice),
                                n = t.filter((e => e.type === x.LabelLineType.AverageBuyPrice)),
                                a = t.filter((e => e.type === x.LabelLineType.AverageSellPrice)),
                                l = t.filter((e => e.type === x.LabelLineType.BreakEvenPrice));
                            return [...r ? n : [], ...o ? a : [], ...s ? l : []]
                        })({
                            namespace: t,
                            labelLines: e.labelLines
                        }),
                        {
                            syncThemeCounterWithGlobalCounter: ue,
                            overwritingThemeOnLoaded: ge
                        } = (({
                            namespace: e,
                            electron: t = {}
                        }) => {
                            const {
                                getThemeCounter: i,
                                shouldResetTradingViewKey: r
                            } = (0, w.DP)(), [a, l] = (0, C.A)(`${e}_tvThemeCounter`, 0), [c, d] = (0, o.useState)(-1), h = (0, o.useCallback)((() => {
                                d(i())
                            }), [i]);
                            (0, s.A)((() => h())), (0, n.A)((() => h())), (0, o.useEffect)((() => {}), [t, r]);
                            const u = (0, o.useCallback)((() => l(i())), [i, l]),
                                g = (0, o.useMemo)((() => -1 !== c), [c]);
                            return {
                                syncThemeCounterWithGlobalCounter: u,
                                overwritingThemeOnLoaded: (0, o.useMemo)((() => g && c !== a), [g, c, a])
                            }
                        })({
                            namespace: t,
                            electron: p
                        });
                    (0, o.useEffect)((() => {
                        ge && (se.current = !0)
                    }), [ge]);
                    const pe = (0, o.useMemo)((() => (0, T.ty)({
                            symbol: e.symbol,
                            params: {
                                priceType: O
                            }
                        })), [O, e.symbol]),
                        me = (0, o.useCallback)((({
                            resolution: e,
                            chartType: t
                        }) => {
                            const i = v.TVResolutionToTrueInterval[e],
                                r = 2 === t;
                            B(i === x.DisplayIntervals["1m"] && r ? x.DisplayIntervals.Time : i)
                        }), [B]),
                        xe = (0, o.useCallback)((async e => {
                            if (!Q.current) return;
                            const t = _({
                                key: oe.current,
                                layout: Q.current.layout()
                            });
                            await re.current.setItem(t, e)
                        }), []),
                        fe = (0, o.useCallback)((async e => {
                            const t = _({
                                key: oe.current,
                                layout: P(e)
                            });
                            return re.current.getItem(t)
                        }), []),
                        ye = (0, o.useCallback)((e => l()(te.current, (t => t.fullName === e ? .full_name || t.symbol === e ? .full_name))), []),
                        be = (0, o.useCallback)((async t => {
                            await xe(t), await (e.initialConfig.onSave ? .(t))
                        }), [xe, e.initialConfig]),
                        ve = (0, o.useCallback)((async () => {
                            const t = await fe(ie.current);
                            return e.initialConfig.onLoadConfig ? .(), t
                        }), [fe, e.initialConfig]),
                        Ce = (0, o.useCallback)((t => {
                            F(t), e.initialConfig.onLoading ? .(t)
                        }), [F, e.initialConfig]),
                        we = (0, o.useCallback)((() => {
                            z(Q.current), setTimeout((() => {
                                if (!Q.current) return;
                                const e = Q.current ? .activeChart();
                                e.setChartType(J.current === x.DisplayIntervals.Time ? 3 : ee.current)
                            }), 0), U(!0), e.initialConfig.onChartReadyDone ? .()
                        }), [z, e.initialConfig]),
                        Ae = (0, o.useCallback)((() => {
                            ue(), e.initialConfig.onSetThemeDone ? .()
                        }), [ue, e.initialConfig]),
                        Se = (0, o.useCallback)((() => {
                            ue(), e.initialConfig.onFirstTimeSetThemeDone ? .()
                        }), [ue, e.initialConfig]),
                        Te = (0, o.useCallback)((e => {
                            e.setChartType(J.current === x.DisplayIntervals.Time ? 3 : ee.current)
                        }), []),
                        ke = (0, o.useCallback)((t => e.initialConfig.onIntervalChanged ? .(t)), [e.initialConfig]),
                        Le = (0, o.useCallback)((t => {
                            const {
                                chart: i
                            } = t, r = i.symbolExt();
                            if (!r) return;
                            const o = i.chartType();
                            me({
                                resolution: i.resolution(),
                                chartType: o
                            }), N(o);
                            const s = ye(r),
                                {
                                    params: {
                                        priceType: n = ""
                                    } = {}
                                } = s || {};
                            n && H(n), e.initialConfig.onActiveChartChanged ? .(t)
                        }), [ye, me, H, N, e.initialConfig]),
                        _e = (0, o.useCallback)((e => {
                            window.open(`https://www.tradingview.com/x/${e}`, "_blank")
                        }), []),
                        Pe = (0, o.useCallback)((t => {
                            e.initialConfig.onAddStudy ? .(t)
                        }), [e.initialConfig]),
                        De = (0, o.useCallback)((t => {
                            e.initialConfig.onSymbolChanged ? .(t)
                        }), [e.initialConfig]),
                        Ie = (0, o.useCallback)((t => {
                            e.initialConfig.onFirstTimeDataLoadedDone ? .(t)
                        }), [e.initialConfig]),
                        Ve = (0, o.useCallback)((t => {
                            e.initialConfig.onDataLoadedDone ? .(t)
                        }), [e.initialConfig]),
                        Me = (0, o.useCallback)((({
                            chart: e,
                            tradingViewSave: t
                        }) => {
                            if (t) return;
                            [{
                                length: 7,
                                color: "rgba(241, 156, 56, 0.7)"
                            }, {
                                length: 25,
                                color: "rgba(234, 61, 247, 0.7)"
                            }, {
                                length: 99,
                                color: "rgba(116, 252, 253, 0.7)"
                            }].forEach((({
                                length: t,
                                color: i
                            }) => {
                                e.createStudy("Moving Average", !1, !1, {
                                    length: t
                                }, {
                                    "plot.linewidth": 1,
                                    "plot.color": i,
                                    showLabelsOnPriceScale: !1
                                })
                            }))
                        }), []),
                        Be = (0, o.useMemo)((() => e.initialConfig.onInitChart || Me), [Me, e.initialConfig.onInitChart]),
                        Ee = (0, o.useCallback)((() => {
                            se.current && Q.current && (se.current = !1, (0, S.Y)({
                                widget: Q.current,
                                theme: ne.current,
                                styles: ae.current,
                                onSave: be,
                                onSetThemeDone: Ae
                            }))
                        }), []);
                    (0, o.useEffect)((() => {
                        X && Q.current && Q.current.activeChart().setChartType(R)
                    }), [R, X]), (0, o.useEffect)((() => {
                        X && Q.current && Te(Q.current.activeChart())
                    }), [X, M, Te]), (0, n.A)((() => {
                        (async () => {
                            if (!Q.current) return;
                            const e = await fe(W);
                            if (e) {
                                const t = Q.current.activeChart(),
                                    i = ye(t.symbolExt()),
                                    r = t.resolution();
                                if (Q.current.load(e), !i) return;
                                setTimeout((() => {
                                    if (!Q.current) return;
                                    const e = Q.current.activeChart();
                                    e.setSymbol(i.ticker, (() => {
                                        e.setResolution(r, (() => {
                                            me({
                                                resolution: e.resolution(),
                                                chartType: e.chartType()
                                            })
                                        }))
                                    }))
                                }), 0)
                            } else Q.current.setLayout(P(W))
                        })()
                    }), [W, ye, me]);
                    const {
                        showError: je,
                        mainText: Oe,
                        buttonText: He,
                        buttonCallback: Re,
                        onScriptLoadingError: Ne,
                        onTradingViewInitError: We,
                        onChartReadyError: Fe
                    } = (({
                        storage: e,
                        storageName: t
                    }) => {
                        const {
                            getI18n: i
                        } = (0, g.o)("", "trade-ui"), r = (0, o.useMemo)((() => i("trd-chart-tv-load-timeout", {
                            defaultValue: "Failed to load TradingView due to network issues."
                        }) || ""), [i]), s = (0, o.useMemo)((() => i("trd-chart-tv-initialization-error", {
                            defaultValue: "Something went wrong while initializing TradingView."
                        }) || ""), [i]), n = (0, o.useMemo)((() => i("trd-chart-crash-reload", {
                            defaultValue: "Refresh"
                        }) || ""), [i]), a = (0, o.useMemo)((() => i("trd-chart-init-error", {
                            defaultValue: "Failed to initialize TradingView due to malformed config, please try to refresh"
                        }) || ""), [i]), l = (0, o.useCallback)((() => window.location.reload()), []), c = (0, o.useCallback)((async () => {
                            await e.removeItem(t), l()
                        }), [l, e, t]), [d, h] = (0, o.useState)(!1), [u, p] = (0, o.useState)(""), [m, x] = (0, o.useState)(""), [f, y] = (0, o.useState)((async () => {}));
                        return {
                            showError: d,
                            mainText: u,
                            buttonText: m,
                            buttonCallback: f,
                            onScriptLoadingError: (0, o.useCallback)((() => {
                                h(!0), p(r), x(n), y(l)
                            }), [r, n, l]),
                            onTradingViewInitError: (0, o.useCallback)((() => {
                                h(!0), p(a), x(n), y(c)
                            }), [c, n, a]),
                            onChartReadyError: (0, o.useCallback)((() => {
                                h(!0), p(s), x(n), y(l)
                            }), [s, n, l])
                        }
                    })({
                        storage: G,
                        storageName: a
                    }), ze = (0, o.useMemo)((() => ({ ...e.initialConfig,
                        tvConfig: { ...e.initialConfig.tvConfig,
                            symbol: pe,
                            container: K,
                            container_id: K,
                            interval: q,
                            locale: Y
                        },
                        onSave: be,
                        onLoadConfig: ve,
                        onLoading: Ce,
                        onChartReadyDone: we,
                        onChartReadyError: Fe,
                        onScriptLoadingError: Ne,
                        onTradingViewInitError: We,
                        onIntervalChanged: ke,
                        onFirstTimeSetThemeDone: Se,
                        onSetThemeDone: Ae,
                        onFirstTimeDataLoadedDone: Ie,
                        onDataLoadedDone: Ve,
                        onInitChart: Be,
                        onActiveChartChanged: Le,
                        onSymbolChanged: De,
                        onAddStudy: Pe,
                        onScreenshotReady: _e,
                        onLayoutChanged: Ee
                    })), [K, pe, q, Y, Le, Pe, we, Fe, Ve, Ie, Se, Be, ke, Ee, ve, Ce, be, _e, Ne, Ae, De, We, e.initialConfig]);
                    return je ? (0, r.jsx)(m.b, {
                        mainText: Oe,
                        btnText: He,
                        resetErrorBoundary: Re
                    }) : (0, r.jsx)(h.A, {
                        sx: {
                            height: "100%",
                            display: j !== x.Tabs.TradingView ? "none" : "block"
                        },
                        children: (0, r.jsx)(o.Suspense, {
                            fallback: null,
                            children: (0, r.jsx)(k, { ...e,
                                symbol: pe,
                                interval: q,
                                styles: Z,
                                limitOrders: le,
                                positionOrders: ce,
                                executionOrders: de,
                                labelLines: he,
                                widget: Q,
                                overwritingThemeOnLoaded: ge,
                                initialConfig: ze
                            })
                        })
                    })
                },
                I = ({
                    errorBoundaryProps: e,
                    ...t
                }) => {
                    const {
                        namespace: i
                    } = t, {
                        getI18n: s
                    } = (0, g.o)("", "trade-ui"), n = L(i), a = (0, o.useMemo)((() => s("trd-chart-crash-info", {
                        defaultValue: "Something is wrong with the chart."
                    }) || ""), [s]), l = (0, o.useMemo)((() => s("trd-chart-crash-refresh", {
                        defaultValue: "Refresh"
                    }) || ""), [s]), c = (0, o.useCallback)((() => {
                        n.removeItem("myTradingView"), e ? .onReset ? .()
                    }), [e, n]);
                    return (0, r.jsx)(p.A, { ...e,
                        name: "trading_view",
                        FallbackComponent: ({
                            resetErrorBoundary: e
                        }) => (0, r.jsx)(m.b, {
                            mainText: a,
                            btnText: l,
                            resetErrorBoundary: e
                        }),
                        onReset: c,
                        children: (0, r.jsx)(D, { ...t
                        })
                    })
                }
        },
        "0ReU": (e, t, i) => {
            i.d(t, {
                L7: () => a,
                Rc: () => d,
                ty: () => l
            });
            var r = i("wpca"),
                o = i.n(r),
                s = i("K9aZ"),
                n = i.n(s);
            const a = ["1S", "1", "3", "5", "15", "30", "60", "120", "240", "360", "480", "720", "1D", "3D", "1W", "1M"],
                l = ({
                    symbol: e,
                    params: t
                }) => `${e}@${new URLSearchParams(t).toString()}`,
                c = e => {
                    const [t, i] = e.split("@"), r = new URLSearchParams(i).entries();
                    return {
                        symbol: t,
                        params: o()(Array.from(r))
                    }
                },
                d = () => {
                    const e = new Map;
                    let t = {},
                        i = [],
                        r = {
                            onReady: () => null,
                            resolveSymbol: () => null,
                            searchSymbols: () => null,
                            getBars: () => null,
                            subscribeBars: () => null,
                            unsubscribeBars: () => null
                        };
                    return ({
                        config: o,
                        onSymbolResolving: s,
                        onSymbolResolved: d,
                        onFetchSymbolsInfo: h,
                        onFetchBars: u,
                        onSubscribeBars: g,
                        onUnsubscribeBars: p,
                        onFetchServerTimeApi: m,
                        onTransformSymbolInfo: x = ({
                            template: e
                        }) => e
                    }) => (r = {
                        onReady: e => {
                            setTimeout((async () => {
                                const r = (await h()).map((e => ({ ...e,
                                    ticker: l({
                                        symbol: e.symbol,
                                        params: e.params || {}
                                    })
                                })));
                                i = r.map((({
                                    ticker: e,
                                    symbol: t,
                                    fullName: i,
                                    description: r = "",
                                    exchange: o = "",
                                    type: s = ""
                                }) => ({
                                    symbol: t,
                                    ticker: e,
                                    full_name: i,
                                    description: r,
                                    exchange: o,
                                    type: s
                                }))), t = n()(r, "ticker"), e({
                                    exchanges: [],
                                    symbols_types: [],
                                    supported_resolutions: a,
                                    supports_marks: !1,
                                    supports_timescale_marks: !1,
                                    supports_time: !0,
                                    ...o
                                })
                            }))
                        },
                        resolveSymbol: async (e, i, r) => {
                            const o = t[e];
                            if (!o) return void r(`cannot resolve symbol - ${e}`);
                            const n = x({
                                info: o,
                                template: {
                                    description: o.description || "",
                                    fractional: !1,
                                    has_seconds: !0,
                                    seconds_multipliers: ["1"],
                                    has_intraday: !0,
                                    has_daily: !0,
                                    daily_multipliers: ["1", "3"],
                                    has_weekly_and_monthly: !0,
                                    minmov: 1,
                                    minmove2: 0,
                                    name: o.symbol,
                                    full_name: o.fullName,
                                    ticker: o.ticker,
                                    timezone: "Etc/UTC",
                                    pricescale: o.tickSize,
                                    session: "24x7",
                                    type: o.type || "",
                                    exchange: o.exchange || "",
                                    listed_exchange: o.exchange || "",
                                    format: "price",
                                    supported_resolutions: o.supportedResolutions || a,
                                    visible_plots_set: "ohlcv",
                                    volume_precision: 3
                                }
                            });
                            if (s) {
                                if (!(await s({
                                        symbol: e,
                                        info: n
                                    }))) return void r(`symbol resolving error - ${e}`)
                            }
                            setTimeout((() => {
                                i(n), d ? .(n)
                            }))
                        },
                        searchSymbols: (e, t, r, o) => {
                            const s = new RegExp(e, "i"),
                                n = new RegExp(t, "i"),
                                a = new RegExp(r, "i");
                            o(i.filter((({
                                symbol: e,
                                ticker: t,
                                full_name: i,
                                description: r = "",
                                exchange: o = "",
                                type: l = ""
                            }) => [e, t, i, r].some((e => s.test(e || ""))) && n.test(o) && a.test(l))))
                        },
                        getBars: async (e, t, i, r, o) => {
                            const {
                                from: s,
                                to: n
                            } = i;
                            let a = [];
                            try {
                                if (n >= 0) {
                                    const i = c(e.ticker || "");
                                    a = await u({
                                        symbolInfo: e,
                                        resolution: t,
                                        rangeStartDate: s,
                                        rangeEndDate: n,
                                        tickerInfo: i
                                    })
                                }
                                r(a, {
                                    noData: 0 === a.length
                                })
                            } catch (l) {
                                o(l.toString())
                            }
                        },
                        subscribeBars: (t, i, r, o, s) => {
                            const n = c(t.ticker || ""),
                                a = g({
                                    symbolInfo: t,
                                    resolution: i,
                                    callback: r,
                                    onResetCacheNeededCallback: s,
                                    tickerInfo: n
                                });
                            e.set(o, a)
                        },
                        unsubscribeBars: t => {
                            e ? .get(t) ? .(), e ? .delete(t), p ? .(t)
                        },
                        getServerTime: async e => {
                            try {
                                e(await m())
                            } catch (t) {
                                e(Date.now() / 1e3)
                            }
                        }
                    }, {
                        datafeed: r,
                        observers: e,
                        symbolsInfo: t
                    })
                }
        },
        r0Je: (e, t, i) => {
            i.d(t, {
                A: () => X
            });
            var r = i("mXdx"),
                o = i("zHUU"),
                s = i("BmHO"),
                n = i.n(s),
                a = i("v5Y+"),
                l = i.n(a),
                c = i("DTvD"),
                d = i("UXyB"),
                h = i("sMAH"),
                u = i("mgce"),
                g = i("19p4"),
                p = i("7asw"),
                m = i("rPbR"),
                x = i("qv9I"),
                f = i("J0/w"),
                y = i("T0Sc");
            var b = i("Ov3/"),
                v = i("xAfo"),
                C = i("hufm");
            var w = i("akcQ"),
                A = i("0ReU");
            var S = i("T9sr"),
                T = i.n(S),
                k = i("0Igy"),
                L = i.n(k),
                _ = i("7N5u"),
                P = i.n(_),
                D = i("K9aZ"),
                I = i.n(D),
                V = i("vCb5"),
                M = i.n(V),
                B = i("mQ6W"),
                E = i.n(B),
                j = i("ZOsC"),
                O = i.n(j),
                H = i("2qt+");
            const R = e => `${e}.customSettings`,
                N = e => `${e}.layout`,
                W = e => e.chartId,
                F = async ({
                    storage: e,
                    save: t,
                    key: i,
                    widget: r
                }) => {
                    if (!r) return {
                        chartSave: t,
                        drawingsSave: {}
                    };
                    const {
                        drawings: o,
                        charts: s
                    } = (({
                        save: e
                    }) => {
                        const t = {},
                            i = [],
                            r = e.charts.reduce(((e, r) => {
                                const o = r.panes.reduce(((e, r) => {
                                    const o = r.sources.find((e => "MainSeries" === e.type));
                                    o ? .state.symbol && (t[o ? .state.symbol.toUpperCase()] = []);
                                    const [s, n] = E()(r.sources, (e => (e => /^(LineTool)/g.test(e))(e.type)));
                                    return i.push(...s), [...e, { ...r,
                                        sources: n
                                    }]
                                }), []);
                                return [...e, { ...r,
                                    panes: o
                                }]
                            }), []),
                            o = M()(i, (e => e.id)),
                            s = P()(o, (e => e.state.symbol));
                        return {
                            charts: r,
                            drawings: { ...t,
                                ...s
                            }
                        }
                    })({
                        save: t
                    }), n = { ...t,
                        charts: s
                    };
                    return await e.setItem(i, n), await (async ({
                        storage: e,
                        key: t,
                        charts: i
                    }) => {
                        const r = N(t),
                            o = await e.getItem(r) || [],
                            s = I()(o, W),
                            n = I()(i, W),
                            a = o.map(W),
                            l = i.map(W),
                            c = O()([...a, ...l]).map((e => n[e] || s[e])).sort(((e, t) => +e.chartId - +t.chartId));
                        return await e.setItem(r, c), c
                    })({
                        storage: e,
                        key: i,
                        charts: s
                    }), await Promise.all(Object.keys(o).map((t => e.setItem(`#TV_SYMBOL-${t}`, o[t])))), {
                        chartSave: n,
                        drawingsSave: o
                    }
                },
                z = (0, c.lazy)((() => i.e(613).then(i.bind(i, "39mu")))),
                X = ({
                    tradingViewProps: e,
                    namespace: t,
                    storageName: i = g.DefaultTVStorageName,
                    containerId: s = "tradingview",
                    symbolsInfo: a = {},
                    electron: S = {}
                }) => {
                    const k = (0, x.createStore)(t),
                        _ = (0, m.createStore)(t),
                        D = (0, p.y)(t),
                        [I, V] = k(x.getInterval),
                        M = k(x.getTrueInterval),
                        [B] = k(x.getActiveTab),
                        [E, j] = k(x.getPriceType),
                        [O, W] = k(x.getTvChartStyle),
                        [X] = k(x.getChartMode),
                        [, U] = D(p.N),
                        [, G] = _(m.getTradingViewReference),
                        [$, Y] = (0, c.useState)(!1),
                        Z = (e => (0, c.useMemo)((() => n().createInstance({
                            name: e
                        })), [e]))(t),
                        K = (0, o.Bl)(),
                        q = (0, c.useMemo)((() => (e => {
                            switch (e) {
                                case "zh-CN":
                                case "cn":
                                    return "zh";
                                case "zh-HK":
                                case "zh-TW":
                                case "zh-TC":
                                case "tw":
                                    return "zh_TW";
                                case "ja":
                                    return "ja";
                                case "ko":
                                    return "ko";
                                case "th":
                                    return "th";
                                case "he":
                                    return "he_IL";
                                case "ru":
                                    return "ru";
                                case "cs":
                                    return "cs";
                                case "sv":
                                    return "sv";
                                case "vi":
                                case "vn":
                                    return "vi";
                                case "tr":
                                    return "tr";
                                case "ro":
                                    return "ro";
                                case "pt-PT":
                                case "pt-BR":
                                case "pt":
                                    return "pt";
                                case "pl":
                                    return "pl";
                                case "nl":
                                    return "nl_NL";
                                case "it":
                                    return "it";
                                case "fr":
                                    return "fr";
                                case "es":
                                case "es-LA":
                                    return "es";
                                case "de":
                                    return "de";
                                case "id":
                                    return "id_ID";
                                default:
                                    return "en"
                            }
                        })(K)), [K]),
                        Q = (0, h.w)(),
                        J = (0, c.useMemo)((() => `${t}-${s}`), [s, t]),
                        ee = (0, c.useMemo)((() => f.TrueIntervalToTVResolution[M]), [M]),
                        te = (0, c.useRef)(),
                        ie = (0, c.useRef)(I),
                        re = (0, c.useRef)(O),
                        oe = (0, c.useRef)(a),
                        se = (0, c.useRef)(X),
                        ne = (0, c.useRef)(Z),
                        ae = (0, c.useRef)(i),
                        le = (0, c.useRef)(!1),
                        ce = (0, c.useRef)(e.theme),
                        de = (0, c.useRef)($),
                        he = (0, c.useRef)(Q);
                    (0, c.useEffect)((() => {
                        ie.current = I
                    }), [I]), (0, c.useEffect)((() => {
                        re.current = O
                    }), [O]), (0, c.useEffect)((() => {
                        oe.current = a
                    }), [a]), (0, c.useEffect)((() => {
                        se.current = X
                    }), [X]), (0, c.useEffect)((() => {
                        ne.current = Z
                    }), [Z]), (0, c.useEffect)((() => {
                        ae.current = i
                    }), [i]), (0, c.useEffect)((() => {
                        ce.current = e.theme
                    }), [e.theme]), (0, c.useEffect)((() => {
                        he.current = Q
                    }), [Q]), (0, c.useEffect)((() => {
                        de.current = $
                    }), [$]);
                    const ue = (({
                            namespace: e,
                            orders: t
                        }) => {
                            const i = (0, x.createStore)(e),
                                [r] = i(x.getShowLimitOrder),
                                [o] = i(x.getShowBotPreviewOrder),
                                {
                                    getI18n: s
                                } = (0, y.o)("", "kline-ui"),
                                n = (0, c.useMemo)((() => s("order-drag-tooltip", {
                                    defaultValue: "Drag for price modify"
                                }) || ""), [s]),
                                a = (0, c.useMemo)((() => s("order-modify-tooltip", {
                                    defaultValue: "Click for modify"
                                }) || ""), [s]),
                                l = (0, c.useMemo)((() => s("order-cancel-tooltip", {
                                    defaultValue: "Click for cancel"
                                }) || ""), [s]),
                                d = (0, c.useMemo)((() => t.filter((({
                                    limitOrderType: e
                                }) => (void 0 === e || e === x.LimitOrderType.LimitOrder) && r))), [t, r]),
                                h = (0, c.useMemo)((() => t.filter((({
                                    limitOrderType: e
                                }) => e === x.LimitOrderType.BotPreview && o))), [t, o]),
                                u = (0, c.useMemo)((() => [...d, ...h]), [d, h]);
                            return (0, c.useMemo)((() => u.map((e => ({ ...e,
                                tooltip: e.tooltip ? ? n,
                                modifyTooltip: e.modifyTooltip ? ? a,
                                cancelTooltip: e.cancelTooltip ? ? l
                            })))), [l, n, a, u])
                        })({
                            namespace: t,
                            orders: e.limitOrders
                        }),
                        ge = (({
                            namespace: e,
                            orders: t
                        }) => {
                            const i = (0, x.createStore)(e),
                                [r] = i(x.getShowPositionOrder);
                            return r ? t : []
                        })({
                            namespace: t,
                            orders: e.positionOrders
                        }),
                        pe = (({
                            namespace: e,
                            orders: t
                        }) => {
                            const i = (0, x.createStore)(e),
                                [r] = i(x.getShowExecutionOrder);
                            return r ? t : []
                        })({
                            namespace: t,
                            orders: e.executionOrders
                        }),
                        me = (({
                            namespace: e,
                            labelLines: t
                        }) => {
                            const i = (0, x.createStore)(e),
                                [r] = i(x.getShowAverageBuyPrice),
                                [o] = i(x.getShowAverageSellPrice),
                                [s] = i(x.getShowBreakEvenPrice),
                                [n] = i(x.getShowLiquidationPrice);
                            return [...(0, c.useMemo)((() => r ? t.filter((e => e.type === x.LabelLineType.AverageBuyPrice)) : []), [t, r]), ...(0, c.useMemo)((() => o ? t.filter((e => e.type === x.LabelLineType.AverageSellPrice)) : []), [t, o]), ...(0, c.useMemo)((() => s ? t.filter((e => e.type === x.LabelLineType.BreakEvenPrice)) : []), [t, s]), ...(0, c.useMemo)((() => n ? t.filter((e => e.type === x.LabelLineType.LiquidationPrice)) : []), [t, n])]
                        })({
                            namespace: t,
                            labelLines: e.labelLines
                        }),
                        {
                            syncThemeCounterWithGlobalCounter: xe,
                            overwritingThemeOnLoaded: fe
                        } = (({
                            namespace: e,
                            electron: t = {}
                        }) => {
                            const {
                                getThemeCounter: i,
                                shouldResetTradingViewKey: r
                            } = (0, C.DP)(), [o, s] = (0, b.A)(`${e}_tvThemeCounter`, 0), [n, a] = (0, c.useState)(-1), l = (0, c.useCallback)((() => {
                                a(i())
                            }), [i]);
                            (0, v.A)((() => l())), (0, d.A)((() => l())), (0, c.useEffect)((() => {}), [t, r]);
                            const h = (0, c.useCallback)((() => s(i())), [i, s]),
                                u = (0, c.useMemo)((() => -1 !== n), [n]);
                            return {
                                syncThemeCounterWithGlobalCounter: h,
                                overwritingThemeOnLoaded: (0, c.useMemo)((() => u && n !== o), [u, n, o])
                            }
                        })({
                            namespace: t,
                            electron: S
                        });
                    (0, c.useEffect)((() => {
                        fe && (le.current = !0)
                    }), [fe]);
                    const ye = (0, c.useMemo)((() => (0, A.ty)({
                            symbol: e.symbol,
                            params: {
                                priceType: E
                            }
                        })), [E, e.symbol]),
                        be = (0, c.useCallback)((({
                            resolution: e,
                            chartType: t
                        }) => {
                            const i = f.TVResolutionToTrueInterval[e],
                                r = 3 === t;
                            V(i === x.DisplayIntervals["1m"] && r ? x.DisplayIntervals.Time : i)
                        }), [V]),
                        ve = (0, c.useCallback)((async () => {
                            te.current && await (async ({
                                storage: e,
                                key: t,
                                widget: i
                            }) => {
                                if (!i) return (0, H.b)({
                                    activeChartIndex: 0
                                });
                                const r = R(t),
                                    o = i.activeChartIndex(),
                                    s = (0, H.b)({
                                        activeChartIndex: o
                                    });
                                return await e.setItem(r, s), s
                            })({
                                storage: ne.current,
                                key: ae.current,
                                widget: te.current
                            })
                        }), []),
                        Ce = (0, c.useCallback)((async e => (async ({
                            storage: e,
                            key: t
                        }) => {
                            const i = (await e.keys()).filter((e => /^(#TV_SYMBOL-)/g.test(e))).map((async t => e.getItem(t))),
                                r = await Promise.all(i),
                                o = L()(r).filter((e => !!e)),
                                s = P()(o, (e => e.ownerSource)),
                                n = N(t),
                                a = R(t),
                                l = await e.getItem(t),
                                c = await e.getItem(a);
                            if (!l) return {
                                chartSave: l,
                                customSettings: c
                            };
                            const d = (await e.getItem(n) || l.charts).reduce(((e, t) => {
                                const i = t.panes.reduce(((e, t) => {
                                    const i = T()(t.sources),
                                        r = s[t.mainSourceId] || [];
                                    return i.push(...r), [...e, { ...t,
                                        sources: i
                                    }]
                                }), []);
                                return [...e, { ...t,
                                    panes: i
                                }]
                            }), []);
                            return {
                                chartSave: { ...l,
                                    charts: d
                                },
                                customSettings: c
                            }
                        })({
                            storage: ne.current,
                            key: ae.current
                        })), []),
                        we = (0, c.useCallback)((e => l()(oe.current, (t => t.fullName === e ? .full_name || t.symbol === e ? .full_name))), []),
                        Ae = (0, c.useCallback)((async t => {
                            const {
                                chartSave: i
                            } = await F({
                                storage: ne.current,
                                save: t,
                                key: ae.current,
                                widget: te.current
                            });
                            await (e.initialConfig.onSave ? .(i))
                        }), [e.initialConfig]),
                        Se = (0, c.useCallback)((async () => {
                            const t = await Ce(se.current);
                            return e.initialConfig.onLoadConfig ? .(), t
                        }), [Ce, e.initialConfig]),
                        Te = (0, c.useCallback)((t => {
                            U(t), e.initialConfig.onLoading ? .(t)
                        }), [U, e.initialConfig]),
                        ke = (0, c.useCallback)(((e, t = !0) => {
                            t ? e.setChartType(ie.current === x.DisplayIntervals.Time ? 2 : re.current) : ie.current === x.DisplayIntervals.Time && e.setChartType(2)
                        }), []),
                        Le = (0, c.useCallback)((e => {
                            te.current = e, G(e)
                        }), [G]),
                        _e = (0, c.useCallback)((() => {
                            setTimeout((() => {
                                if (te.current) try {
                                    const e = te.current ? .activeChart();
                                    ke(e)
                                } catch (e) {}
                            }), 0), Y(!0), e.initialConfig.onChartReadyDone ? .()
                        }), [ke, e.initialConfig]),
                        Pe = (0, c.useCallback)((() => {
                            xe(), e.initialConfig.onSetThemeDone ? .()
                        }), [xe, e.initialConfig]),
                        De = (0, c.useCallback)((() => {
                            xe(), e.initialConfig.onFirstTimeSetThemeDone ? .()
                        }), [xe, e.initialConfig]),
                        Ie = (0, c.useCallback)((t => {
                            e.initialConfig.onIntervalChanged ? .(t)
                        }), [e.initialConfig]),
                        Ve = (0, c.useCallback)((async t => {
                            const {
                                chart: i
                            } = t, r = i.symbolExt();
                            if (!r) return;
                            const o = i.chartType();
                            W(o), be({
                                resolution: i.resolution(),
                                chartType: o
                            });
                            const s = we(r),
                                {
                                    params: {
                                        priceType: n = ""
                                    } = {}
                                } = s || {};
                            n && j(n), await ve(), e.initialConfig.onActiveChartChanged ? .(t)
                        }), [we, ve, be, j, W, e.initialConfig]),
                        Me = (0, c.useCallback)((e => {
                            window.open(`https://www.tradingview.com/x/${e}`, "_blank")
                        }), []),
                        Be = (0, c.useCallback)((t => {
                            e.initialConfig.onAddStudy ? .(t)
                        }), [e.initialConfig]),
                        Ee = (0, c.useCallback)((t => {
                            e.initialConfig.onSymbolChanged ? .(t)
                        }), [e.initialConfig]),
                        je = (0, c.useCallback)((t => {
                            e.initialConfig.onFirstTimeDataLoadedDone ? .(t)
                        }), [e.initialConfig]),
                        Oe = (0, c.useCallback)((t => {
                            e.initialConfig.onDataLoadedDone ? .(t)
                        }), [e.initialConfig]),
                        He = (0, c.useCallback)((({
                            chart: e,
                            tradingViewSave: t
                        }) => {
                            if (t) return;
                            [{
                                length: 7,
                                color: "rgba(241, 156, 56, 0.7)"
                            }, {
                                length: 25,
                                color: "rgba(234, 61, 247, 0.7)"
                            }, {
                                length: 99,
                                color: "rgba(116, 252, 253, 0.7)"
                            }].forEach((({
                                length: t,
                                color: i
                            }) => {
                                e.createStudy("Moving Average", !1, !1, {
                                    length: t
                                }, {
                                    "plot.linewidth": 1,
                                    "plot.color": i,
                                    showLabelsOnPriceScale: !1
                                })
                            }))
                        }), []),
                        Re = (0, c.useMemo)((() => e.initialConfig.onInitChart || He), [He, e.initialConfig.onInitChart]),
                        Ne = (0, c.useCallback)((() => {
                            if (le.current && te.current) {
                                le.current = !1;
                                const e = (0, w._)(he.current.colors);
                                (0, u.Y)({
                                    widget: te.current,
                                    theme: ce.current,
                                    overrides: e,
                                    onSave: Ae,
                                    onSetThemeDone: Pe
                                })
                            }
                            setTimeout((() => {
                                if (te.current) try {
                                    const e = te.current.activeChartIndex(),
                                        t = te.current.activeChart(),
                                        i = t.chartType();
                                    Ve({
                                        chart: t,
                                        index: e
                                    }), W(i), te.current.save((e => {
                                        Ae(e)
                                    }))
                                } catch (e) {}
                            }), 100)
                        }), []);
                    (0, c.useEffect)((() => {
                        if ($ && te.current) try {
                            te.current.activeChart().setChartType(O)
                        } catch (e) {}
                    }), [O, $]), (0, c.useEffect)((() => {
                        if ($ && te.current) try {
                            ke(te.current.activeChart())
                        } catch (e) {}
                    }), [$, I, ke]), (0, d.A)((() => {
                        if (de.current && te.current) try {
                            te.current ? .setLayout((e => {
                                switch (e) {
                                    case x.ChartMode.HorizontalTwo:
                                        return "2v";
                                    case x.ChartMode.VerticalTwo:
                                        return "2h";
                                    case x.ChartMode.HorizontalThree:
                                        return "3v";
                                    case x.ChartMode.VerticalThree:
                                        return "3h";
                                    case x.ChartMode.Four:
                                        return "4";
                                    case x.ChartMode.Single:
                                    default:
                                        return "s"
                                }
                            })(X))
                        } catch (e) {}
                    }), [X]), (0, c.useEffect)((function() {
                        if ($ && te.current) try {
                            const e = te.current.activeChart();
                            e.onChartTypeChanged().subscribe({}, (() => {
                                ke(e, !1)
                            }))
                        } catch {}
                    }), [ke, $]);
                    const {
                        onScriptLoadingError: We,
                        onTradingViewInitError: Fe,
                        onChartReadyError: ze
                    } = (({
                        storage: e,
                        storageName: t
                    }) => {
                        const {
                            getI18n: i
                        } = (0, y.o)("", "trade-ui"), r = (0, c.useMemo)((() => i("trd-chart-tv-load-timeout", {
                            defaultValue: "Failed to load TradingView due to network issues."
                        }) || ""), [i]), o = (0, c.useMemo)((() => i("trd-chart-tv-initialization-error", {
                            defaultValue: "Something went wrong while initializing TradingView."
                        }) || ""), [i]), s = (0, c.useMemo)((() => i("trd-chart-crash-reload", {
                            defaultValue: "Refresh"
                        }) || ""), [i]), n = (0, c.useMemo)((() => i("trd-chart-init-error", {
                            defaultValue: "Failed to initialize TradingView due to malformed config, please try to refresh"
                        }) || ""), [i]), a = (0, c.useCallback)((() => window.location.reload()), []), l = (0, c.useCallback)((async () => {
                            await e.removeItem(t), a()
                        }), [a, e, t]), [d, h] = (0, c.useState)(!1), [u, g] = (0, c.useState)(""), [p, m] = (0, c.useState)(""), [x, f] = (0, c.useState)((async () => {}));
                        return {
                            showError: d,
                            mainText: u,
                            buttonText: p,
                            buttonCallback: x,
                            onScriptLoadingError: (0, c.useCallback)((() => {
                                h(!0), g(r), m(s), f(a)
                            }), [r, s, a]),
                            onTradingViewInitError: (0, c.useCallback)((() => {
                                h(!0), g(n), m(s), f(l)
                            }), [l, s, n]),
                            onChartReadyError: (0, c.useCallback)((() => {
                                h(!0), g(o), m(s), f(a)
                            }), [o, s, a])
                        }
                    })({
                        storage: Z,
                        storageName: i
                    }), Xe = (0, c.useMemo)((() => ({ ...e.initialConfig,
                        tvConfig: { ...e.initialConfig.tvConfig,
                            symbol: ye,
                            container: J,
                            interval: ee,
                            locale: q
                        },
                        onSave: Ae,
                        onLoadConfig: Se,
                        onLoading: Te,
                        onChartReadyDone: _e,
                        onChartReadyError: ze,
                        onScriptLoadingError: We,
                        onTradingViewInitError: Fe,
                        onIntervalChanged: Ie,
                        onFirstTimeSetThemeDone: De,
                        onSetThemeDone: Pe,
                        onFirstTimeDataLoadedDone: je,
                        onDataLoadedDone: Oe,
                        onInitChart: Re,
                        onActiveChartChanged: Ve,
                        onSymbolChanged: Ee,
                        onAddStudy: Be,
                        onScreenshotReady: Me,
                        onLayoutChanged: Ne
                    })), [J, ye, ee, q, Ve, Be, _e, ze, Oe, je, De, Re, Ie, Ne, Se, Te, Ae, Me, We, Pe, Ee, Fe, e.initialConfig]);
                    return (0, r.jsx)("div", {
                        className: "h-full",
                        style: {
                            display: B !== x.Tabs.TradingView ? "none" : "block"
                        },
                        children: (0, r.jsx)(c.Suspense, {
                            fallback: null,
                            children: (0, r.jsx)(z, { ...e,
                                symbol: ye,
                                interval: ee,
                                limitOrders: ue,
                                positionOrders: ge,
                                executionOrders: pe,
                                labelLines: me,
                                overwritingThemeOnLoaded: fe,
                                themeConfig: Q,
                                initialConfig: Xe,
                                onInitialized: Le
                            })
                        })
                    })
                }
        },
        cvvB: (e, t, i) => {
            i.d(t, {
                t1: () => gi,
                W7: () => L.ChartNamespace,
                A$: () => C.PriceType,
                AI: () => ui
            });
            var r = {};
            i.r(r), i.d(r, {
                ExtraSmall: () => ne,
                Medium: () => q,
                Small: () => ee,
                Small2: () => oe
            });
            var o = {};
            i.r(o), i.d(o, {
                Medium: () => fe,
                Small: () => xe
            });
            var s = {};
            i.r(s), i.d(s, {
                Name: () => Ae,
                PriceDrop: () => Te,
                PriceFlat: () => ke,
                PriceRise: () => Se,
                Status: () => Le
            });
            var n = {};
            i.r(n), i.d(n, {
                ChartStyleDropdown: () => Ke,
                ChartStyles: () => Ye,
                MultiChartDropdown: () => Ne,
                MultiChartDropdownType: () => Re,
                OrderMarkDropdown: () => Ee,
                TextDropdown: () => je,
                UniversalDropdown: () => te
            });
            var a = {};
            i.r(a), i.d(a, {
                Plain: () => Qe,
                SymbolTab: () => _e
            });
            var l = {};
            i.r(l), i.d(l, {
                Area: () => Ge,
                Bar: () => We,
                Baseline: () => $e,
                Camera: () => et,
                Candle: () => Fe,
                Close: () => we,
                Compare: () => it,
                Fullscreen: () => st,
                HeikinAshi: () => Xe,
                HollowCandle: () => ze,
                Indicator: () => at,
                Kagi: () => ut,
                Line: () => Ue,
                LineBreak: () => ht,
                Logo: () => ve,
                OrderMark: () => lt,
                PointAndFugure: () => gt,
                Range: () => pt,
                Renko: () => dt,
                ResumeWindow: () => ct
            });
            var c = {};
            i.r(c), i.d(c, {
                MiniMultiChartPrompt: () => ei
            });
            var d = i("fLxG"),
                h = i("6+Mh"),
                u = i("A//A"),
                g = i("/oTD"),
                p = i("JcxF"),
                m = i("r0Je"),
                x = i("VhcG"),
                f = i("IyNj"),
                y = i("K/eC"),
                b = i("Q8OD"),
                v = i("KepC"),
                C = i("qv9I"),
                w = i("rPbR"),
                A = i("PIXh"),
                S = i("DH0w"),
                T = i("vY9W"),
                k = i("J0/w"),
                L = i("19p4"),
                _ = i("mXdx"),
                P = i("DTvD"),
                D = i.n(P),
                I = i("xAfo"),
                V = i("GIr8"),
                M = i("mKKx");
            const B = D().forwardRef((({
                    active: e,
                    hidden: t = !1,
                    ...i
                }, r) => t ? null : (0, _.jsx)(V.A, { ...i,
                    sx: {
                        alignItems: "center",
                        justifyContent: "center",
                        color: e ? "t.yellow" : "t.third",
                        cursor: "pointer",
                        fontSize: 0,
                        lineHeight: "16px",
                        p: "minor",
                        borderRadius: "2px",
                        "&:hover": {
                            color: "t.yellow"
                        },
                        ...i.sx
                    },
                    ref: r
                }))),
                E = ({
                    text: e,
                    value: t,
                    active: i,
                    onClick: r,
                    onObscured: o,
                    onRevealed: s
                }) => {
                    const n = (0, P.useRef)(null),
                        a = (0, M.A)(n, {
                            root: null,
                            rootMargin: "0px",
                            threshold: 1
                        });
                    return (0, P.useEffect)((() => {
                        a && (a.intersectionRatio < 1 ? o(t) : s(t))
                    }), [a]), (0, _.jsx)(B, {
                        id: t,
                        active: i,
                        onClick: r,
                        ref: n,
                        sx: {
                            mr: 2
                        },
                        children: e
                    })
                };
            var j = i("JI82"),
                O = i("8Qyq"),
                H = i("Vhyo");
            const R = ({
                dropdownExpanded: e,
                onDropdownMouseEnter: t,
                onDropdownMouseLeave: i,
                onDropdownButtonClick: r,
                isDropdownButtonActive: o,
                dropdownText: s,
                overlay: n
            }) => (0, _.jsx)(O.A, {
                open: e,
                onMouseEnter: t,
                onMouseLeave: i,
                overlay: n,
                sx: {
                    position: "relative",
                    height: "24px",
                    flex: "1 0 auto",
                    mr: 2,
                    "&:hover": {
                        ".interval-expand-btn": {
                            color: "t.primary",
                            transform: "rotate(180deg)"
                        }
                    }
                },
                enablePortal: !0,
                children: (0, _.jsx)(B, {
                    onClick: r,
                    sx: {
                        width: "100%",
                        height: "100%"
                    },
                    active: o,
                    children: (0, _.jsxs)(V.A, {
                        sx: {
                            alignItems: "center",
                            justifyContent: "center"
                        },
                        children: [s && (0, _.jsx)(H.A, {
                            children: s
                        }), (0, _.jsx)(j.A, {
                            className: "interval-expand-btn",
                            size: 3,
                            sx: {
                                color: "t.third",
                                transition: "transform .2s, color .2s",
                                "&:not(:first-of-type)": {
                                    marginLeft: "4px"
                                }
                            }
                        })]
                    })
                })
            });
            var N = i("cSeX"),
                W = i("2IQ4"),
                F = i("nAXn");
            const z = ({
                onChange: e,
                value: t,
                checked: i,
                checkboxSize: r = 13
            }) => (0, _.jsxs)(W.A, {
                sx: {
                    position: "absolute",
                    top: `-${r/2}px`,
                    right: `-${r/2}px`
                },
                children: [(0, _.jsx)("input", {
                    type: "checkbox",
                    value: t,
                    onChange: e,
                    hidden: !0
                }), (0, _.jsx)(V.A, {
                    sx: {
                        alignItems: "center",
                        justifyContent: "center",
                        width: "16px",
                        height: "16px",
                        borderRadius: "100%",
                        background: e => i ? e.colors.primary : e.colors.t.placeholder
                    },
                    children: (0, _.jsx)(F.A, {
                        color: "modalBg",
                        size: r
                    })
                })]
            });
            var X = i("eT23");
            const U = ({
                showCheckbox: e,
                checked: t,
                value: i,
                onChange: r,
                onClick: o,
                children: s,
                className: n = "interval-option"
            }) => (0, _.jsxs)(N.A, {
                className: n,
                onClick: o,
                alignItems: "center",
                justifyContent: "center",
                sx: {
                    fontWeight: "normal",
                    fontSize: "14px",
                    lineHeight: 1.43,
                    color: "t.primary",
                    width: "60px",
                    height: "24px",
                    position: "relative",
                    transition: "background-color 0.2s ease 0s",
                    cursor: "pointer",
                    bg: e => t ? (0, X.N)(e.colors.primary, .15) : (0, X.N)(e.colors.line, .5),
                    "&:hover": {
                        bg: e => t ? (0, X.N)(e.colors.primary, .3) : e.colors.line
                    },
                    borderRadius: "2px"
                },
                children: [(0, _.jsx)(H.A, {
                    sx: {
                        color: t ? "t.yellow" : "t.primary",
                        fontSize: "12px"
                    },
                    children: s
                }), e && (0, _.jsx)(z, {
                    onChange: r,
                    value: i,
                    checked: t
                })]
            });
            var G = i("zX7I");
            const $ = ({
                children: e,
                onClick: t
            }) => (0, _.jsx)(G.A, {
                sz: "s",
                sx: {
                    lineHeight: "16px",
                    fontSize: 12,
                    wordBreak: "keep-all",
                    minHeight: "24px",
                    border: "none",
                    color: "primary",
                    fontWeight: "normal",
                    padding: "0",
                    backgroundImage: "none",
                    bg: "transparent",
                    "&:hover:not(:disabled):not(:active):not(.inactive)": {
                        backgroundImage: "none"
                    },
                    "&:active:not(:disabled):not(.inactive)": {
                        backgroundColor: "transparent"
                    }
                },
                onClick: t,
                children: e
            });

            function Y({
                options: e,
                onClickEdit: t,
                editText: i,
                title: r
            }) {
                return (0, _.jsxs)(V.A, {
                    sx: {
                        bg: "modalBg",
                        marginTop: "8px",
                        flexDirection: "column",
                        boxShadow: "0px 0px 1px rgba(20, 21, 26, 0.1), 0px 7px 14px rgba(71, 77, 87, 0.08), 0px 3px 6px rgba(20, 21, 26, 0.08)",
                        borderRadius: "4px",
                        padding: "12px 16px 2px",
                        width: "300px"
                    },
                    children: [(0, _.jsxs)(V.A, {
                        sx: {
                            flexDirection: "row",
                            alignItems: "center",
                            justifyContent: "space-between",
                            marginBottom: "12px"
                        },
                        children: [(0, _.jsx)(H.A, {
                            sx: {
                                color: "t.third",
                                fontSize: "12px"
                            },
                            children: r
                        }), (0, _.jsx)($, {
                            onClick: t,
                            children: i
                        })]
                    }), (0, _.jsx)(V.A, {
                        sx: {
                            flexDirection: "row",
                            flexWrap: "wrap",
                            justifyContent: "space-between",
                            "&>.interval-option": {
                                marginBottom: "10px"
                            }
                        },
                        children: e.map((({
                            text: e,
                            value: t,
                            showCheckbox: i,
                            checked: r,
                            onClick: o,
                            onChange: s
                        }) => (0, _.jsx)(U, {
                            value: t,
                            checked: r,
                            showCheckbox: i,
                            onClick: o,
                            onChange: s,
                            children: e
                        }, t)))
                    })]
                })
            }
            const Z = ({
                    dropdownExpanded: e,
                    onDropdownMouseEnter: t,
                    onDropdownMouseLeave: i,
                    onDropdownButtonClick: r,
                    isDropdownButtonActive: o,
                    dropdownText: s,
                    options: n,
                    onClickEdit: a,
                    editText: l,
                    title: c,
                    displayedOptions: d
                }) => (0, _.jsxs)(V.A, {
                    height: 24,
                    children: [(0, _.jsx)(V.A, {
                        sx: {
                            flexWrap: "wrap",
                            overflow: "hidden",
                            justifyContent: "space-between"
                        },
                        children: d.map((({
                            text: e,
                            value: t,
                            active: i,
                            onClick: r,
                            onObscured: o,
                            onRevealed: s
                        }) => (0, _.jsx)(E, {
                            text: e,
                            value: t,
                            active: i,
                            onClick: r,
                            onObscured: o,
                            onRevealed: s
                        }, t)))
                    }), (0, _.jsx)(R, {
                        dropdownExpanded: e,
                        onDropdownMouseEnter: t,
                        onDropdownMouseLeave: i,
                        onDropdownButtonClick: r,
                        isDropdownButtonActive: o,
                        dropdownText: s,
                        overlay: (0, _.jsx)(Y, {
                            options: n,
                            onClickEdit: a,
                            editText: l,
                            title: c
                        })
                    })]
                }),
                K = () => null,
                q = e => {
                    (0, I.A)((() => {
                        console.warn("[trade-widget] the component has been deprecated")
                    }));
                    const t = (({
                        options: e,
                        value: t,
                        isEditing: i,
                        onClickEdit: r,
                        title: o,
                        saveText: s,
                        editText: n,
                        dropdownExpanded: a,
                        onDropdownMouseEnter: l,
                        onDropdownMouseLeave: c,
                        onDropdownButtonClick: d,
                        onClickItem: h,
                        ...u
                    }) => {
                        const [g, p] = (0, P.useState)(e), [m, x] = (0, P.useState)({});
                        (0, P.useEffect)((() => p(e)), [e]);
                        const f = g.map((e => ({
                                text: e.text,
                                value: e.text,
                                checked: e.selected,
                                showCheckbox: i,
                                onClick: i ? K : () => h(e.value),
                                onChange: () => p((t => t.map((t => ({ ...t,
                                    selected: t.value === e.value ? !t.selected : t.selected
                                })))))
                            }))),
                            y = e.filter((e => e.selected)).map((e => ({
                                text: e.text,
                                value: e.value,
                                active: e.value === t,
                                onClick: () => h(e.value),
                                onObscured: e => {
                                    x((t => {
                                        const i = { ...t
                                        };
                                        return i[e] = !0, i
                                    }))
                                },
                                onRevealed: e => {
                                    x((t => {
                                        const i = { ...t
                                        };
                                        return i[e] = !1, i
                                    }))
                                }
                            }))),
                            b = e.find((e => e.value === t && (!e.selected || m[e.value])));
                        return {
                            options: f,
                            displayedOptions: y,
                            editText: i ? s : n,
                            dropdownText: b ? .text || "",
                            dropdownExpanded: a,
                            onDropdownMouseEnter: l,
                            onDropdownMouseLeave: t => {
                                p(e), c(t)
                            },
                            onDropdownButtonClick: () => d(b ? .value || ""),
                            title: o,
                            isDropdownButtonActive: !!b,
                            onClickEdit: () => r(g),
                            ...u
                        }
                    })(e);
                    return (0, _.jsx)(Z, { ...t
                    })
                };
            var Q = i("5XRN");
            const J = ({
                    isActive: e,
                    children: t,
                    ...i
                }) => (0, _.jsx)(V.A, {
                    width: .2,
                    ...i,
                    sx: {
                        alignItems: "center",
                        justifyContent: "center",
                        py: "minor",
                        color: e ? "t.yellow" : "t.primary",
                        textAlign: "center",
                        cursor: "pointer",
                        ...i.sx
                    },
                    children: (0, _.jsx)(H.A, {
                        sx: {
                            fontSize: 1
                        },
                        children: t
                    })
                }),
                ee = ({
                    options: e,
                    value: t,
                    showDropdown: i,
                    onMouseEnterDropdwon: r,
                    onMouseLeaveDropdown: o,
                    onClickDropdownButton: s,
                    onClickItem: n
                }) => {
                    (0, I.A)((() => {
                        console.warn("[trade-widget] the component has been deprecated.")
                    }));
                    const a = e.slice(1),
                        l = a.find((e => e.value === t)) || a[0],
                        c = (0, _.jsx)(V.A, {
                            sx: {
                                flexWrap: "wrap",
                                p: "md",
                                bg: "modalBg",
                                mt: "minor",
                                py: "xs",
                                borderRadius: "2px",
                                boxShadow: "0px 0px 8px rgba(0, 0, 0, 0.15)"
                            },
                            children: a.map((e => (0, _.jsx)(J, {
                                isActive: e.value === t,
                                onClick: () => n(e.value),
                                children: e.text
                            }, e.value)))
                        });
                    return (0, _.jsxs)(V.A, {
                        children: [(0, _.jsx)(B, {
                            active: e[0].value === t,
                            onClick: () => n(e[0].value),
                            sx: {
                                minWidth: "32px"
                            },
                            children: e[0].text
                        }), (0, _.jsx)(Q.Ay, {
                            open: i,
                            onMouseEnter: r,
                            onMouseLeave: o,
                            overlay: c,
                            enablePortal: !0,
                            children: (0, _.jsxs)(B, {
                                active: !!a.find((e => e.value === t)),
                                onClick: s,
                                sx: {
                                    ml: "minor",
                                    minWidth: "32px"
                                },
                                children: [l.text, (0, _.jsx)(j.A, {
                                    sx: {
                                        transform: "scale(1.8)"
                                    },
                                    size: 8
                                })]
                            })
                        })]
                    })
                },
                te = ({
                    options: e,
                    value: t,
                    showArrowIcon: i = !1,
                    onClickDropdownButton: r,
                    overlay: o,
                    ...s
                }) => {
                    (0, I.A)((() => {
                        console.warn("[trade-widget] the component has been deprecated.")
                    }));
                    const n = e.find((e => e.value === t));
                    return (0, _.jsx)(Q.Ay, { ...s,
                        enablePortal: !0,
                        overlay: o({
                            option: n,
                            options: e
                        }),
                        sx: {
                            cursor: "pointer",
                            minWidth: "auto",
                            "&:hover": {
                                ".interval-expand-btn": {
                                    color: "t.primary",
                                    transform: "rotate(180deg)"
                                }
                            },
                            ...s.sx
                        },
                        children: (0, _.jsxs)(V.A, {
                            onClick: r,
                            sx: {
                                minWidth: "auto",
                                alignItems: "center",
                                justifyContent: "center"
                            },
                            children: [n ? .display, i && (0, _.jsx)(j.A, {
                                className: "interval-expand-btn",
                                size: 3,
                                sx: {
                                    color: "t.third",
                                    transition: "transform .2s, color .2s",
                                    "&:not(:first-of-type)": {
                                        ml: "minor"
                                    }
                                }
                            })]
                        })
                    })
                },
                ie = ({
                    active: e,
                    onClick: t,
                    children: i,
                    ...r
                }) => (0, _.jsx)(V.A, { ...r,
                    onClick: t,
                    sx: {
                        alignItems: "center",
                        justifyContent: "center",
                        borderRadius: "2px",
                        bg: e ? "line" : "bg3",
                        color: "t.primary",
                        fontSize: "xs",
                        cursor: "pointer",
                        ":hover": {
                            bg: "line"
                        },
                        ...r.sx
                    },
                    children: i
                }),
                re = ({
                    children: e,
                    ...t
                }) => (0, _.jsx)(W.A, { ...t,
                    sx: {
                        display: "grid",
                        gridTemplateColumns: "repeat(5, 60px)",
                        gridTemplateRows: "repeat(4, 24px)",
                        gridGap: "10px",
                        bg: "popupBg",
                        shadow: "0 2 16px rgba(0,0,0,.25)",
                        p: "sm",
                        ...t.sx
                    },
                    children: e
                }),
                oe = ({
                    onClickItem: e,
                    options: t,
                    ...i
                }) => {
                    (0, I.A)((() => {
                        console.warn("[trade-widget] the component has been deprecated.")
                    }));
                    const r = t.map((t => ({
                        value: t.value,
                        display: (0, _.jsx)(V.A, {
                            sx: {
                                color: "t.third",
                                fontSize: "xs",
                                alignItems: "center"
                            },
                            children: t.text
                        }),
                        children: (0, _.jsx)(ie, {
                            active: t.value === i.value,
                            onClick: () => e(t.value),
                            children: t.text
                        }, t.value)
                    })));
                    return (0, _.jsx)(te, { ...i,
                        showArrowIcon: !0,
                        options: r,
                        overlay: () => (0, _.jsx)(re, {
                            sx: i.overlaySx || {},
                            children: r.map((e => e.children))
                        })
                    })
                },
                se = ({
                    isActive: e,
                    children: t,
                    ...i
                }) => (0, _.jsx)(V.A, { ...i,
                    sx: {
                        alignItems: "center",
                        justifyContent: "center",
                        py: "minor",
                        color: e ? "t.yellow" : "t.primary",
                        ...i.sx
                    },
                    children: t
                }),
                ne = ({
                    options: e,
                    value: t,
                    isDropdownActive: i,
                    showDropdown: r,
                    onClickDropdownButton: o,
                    onClickItem: s
                }) => {
                    (0, I.A)((() => {
                        console.warn("[trade-widget] the component has been deprecated.")
                    }));
                    const n = e.find((e => e.value === t));
                    return (0, _.jsx)(Q.Ay, {
                        open: r,
                        isFixed: !0,
                        placement: "bottom-start",
                        enablePortal: !0,
                        sx: {
                            width: "100%"
                        },
                        overlay: (0, _.jsx)(V.A, {
                            sx: {
                                flexWrap: "wrap",
                                p: "xs",
                                bg: "modalBg",
                                mt: "minor",
                                width: 300
                            },
                            children: e.map((e => (0, _.jsx)(se, {
                                isActive: e.value === t,
                                onClick: () => s(e.value),
                                width: .2,
                                sx: {
                                    textAlign: "center",
                                    padding: "6px 0 6px 0"
                                },
                                children: (0, _.jsx)(H.A, {
                                    fontSize: 1,
                                    children: e.text
                                })
                            }, e.value)))
                        }),
                        children: (0, _.jsxs)(B, {
                            active: i,
                            onClick: o,
                            children: [(0, _.jsx)(H.A, {
                                sx: {
                                    fontSize: 1
                                },
                                children: n ? .text
                            }), (0, _.jsx)(j.A, {
                                sx: {
                                    transform: "scale(1.8)"
                                },
                                size: 12
                            })]
                        })
                    })
                };
            var ae = i("lRQZ");
            const le = ({
                isReady: e,
                children: t,
                ...r
            }) => {
                if (e) return t;
                if (r.openTime) {
                    const e = D().lazy((() => Promise.resolve().then(i.bind(i, "lRQZ"))));
                    return (0, _.jsx)(P.Suspense, {
                        fallback: null,
                        children: (0, _.jsx)(e, { ...r
                        })
                    })
                }
                return null
            };
            var ce = i("d6PB");
            const de = () => (0, _.jsx)("div", {
                    style: {
                        position: "absolute",
                        top: 0,
                        left: 0,
                        width: "100%",
                        height: "100%",
                        background: "radial-gradient(rgba(0, 0, 0, 0.05) 30%, transparent)",
                        display: "flex",
                        justifyContent: "center",
                        alignItems: "center",
                        zIndex: 2e3
                    },
                    children: (0, _.jsx)(ce.A, {
                        sx: {
                            zIndex: 100
                        }
                    })
                }),
                he = ({
                    height: e = "100%",
                    headerHeight: t,
                    headerSlot: i,
                    showLoading: r,
                    children: o
                }, s) => (0, _.jsxs)(V.A, {
                    sx: {
                        height: e,
                        flexDirection: "column"
                    },
                    ref: s,
                    children: [(0, _.jsx)(W.A, {
                        sx: {
                            height: t,
                            flex: "0 0 auto"
                        },
                        children: i
                    }), (0, _.jsxs)(W.A, {
                        sx: {
                            height: "100%",
                            position: "relative"
                        },
                        className: "draggableCancel",
                        children: [o, r && (0, _.jsx)(de, {})]
                    })]
                }),
                ue = (0, P.forwardRef)(he),
                ge = ({
                    countdownProps: e,
                    layoutProps: t,
                    children: i
                }, r) => ((0, I.A)((() => {
                    console.warn("[trade-widget] the component has been deprecated. Please use Chart/containers/Chart instead.")
                })), (0, _.jsx)(le, { ...e,
                    children: (0, _.jsx)(ue, { ...t,
                        ref: r,
                        children: i
                    })
                })),
                pe = (0, P.forwardRef)(ge),
                me = ({
                    isActive: e,
                    children: t,
                    ...i
                }) => (0, _.jsx)(V.A, { ...i,
                    sx: {
                        alignItems: "center",
                        justifyContent: "center",
                        py: "minor",
                        color: e ? "t.yellow" : "t.primary",
                        ...i.sx
                    },
                    children: t
                }),
                xe = ({
                    children: e,
                    indicatorText: t,
                    depthText: i,
                    onClickIndicator: r,
                    onClickDepth: o,
                    isDepthActive: s
                }) => ((0, I.A)((() => {
                    console.warn("[trade-widget] the component has been deprecated.")
                })), (0, _.jsxs)(V.A, {
                    sx: {
                        justifyContent: "space-between",
                        alignItems: "center",
                        textAlign: "center",
                        py: "xs"
                    },
                    children: [(0, _.jsx)(me, {
                        isActive: !1,
                        sx: {
                            flex: 1,
                            height: 32
                        },
                        children: e
                    }), (0, _.jsx)(me, {
                        isActive: !1,
                        onClick: r,
                        sx: {
                            py: 0,
                            flex: 1,
                            height: 32
                        },
                        children: (0, _.jsx)(H.A, {
                            sx: {
                                fontSize: 1,
                                textAlign: "center",
                                padding: "8px",
                                width: "100%"
                            },
                            children: t
                        })
                    }), (0, _.jsx)(me, {
                        isActive: s,
                        onClick: o,
                        sx: {
                            py: 0,
                            flex: 1,
                            height: 32
                        },
                        children: (0, _.jsx)(H.A, {
                            sx: {
                                fontSize: 1
                            },
                            children: i
                        })
                    })]
                })),
                fe = ({
                    head: e,
                    mid: t,
                    tail: i,
                    useDraggableHandle: r = !1,
                    sx: o
                }) => ((0, I.A)((() => {
                    console.warn("[trade-widget] the component has been deprecated")
                })), (0, _.jsxs)(V.A, {
                    className: "focus-area",
                    sx: {
                        height: 40,
                        justifyContent: "space-between",
                        py: "minor",
                        px: "sm",
                        borderBottom: "1px solid",
                        borderBottomColor: "newLine",
                        ...o
                    },
                    children: [(0, _.jsx)(V.A, {
                        sx: {
                            justifyContent: "space-between",
                            alignItems: "center",
                            py: "minor",
                            maxWidth: "55%",
                            "& > *:not(:first-of-type)": {
                                ml: "sm"
                            }
                        },
                        children: e
                    }), (0, _.jsx)(V.A, {
                        className: r ? "draggableHandle" : "",
                        sx: {
                            flex: 1,
                            minWidth: "20px",
                            alignItems: "center",
                            justifyContent: "center",
                            "& > *:not(:first-of-type)": {
                                ml: "sm"
                            }
                        },
                        children: t
                    }), (0, _.jsx)(V.A, {
                        sx: {
                            alignItems: "center",
                            justifyContent: "flex-end",
                            "& > *:not(:first-of-type)": {
                                ml: "sm"
                            }
                        },
                        children: i
                    })]
                })),
                ye = ({
                    resetErrorBoundary: e,
                    mainText: t,
                    btnText: i
                }) => ((0, I.A)((() => {
                    console.warn("[trade-widget] the component has been deprecated.")
                })), (0, _.jsxs)(V.A, {
                    sx: {
                        width: "100%",
                        height: "100%",
                        flexDirection: "column",
                        alignItems: "center",
                        justifyContent: "center"
                    },
                    children: [(0, _.jsx)(H.A, {
                        fontSize: 3,
                        color: "t.primary",
                        children: t
                    }), (0, _.jsx)(H.A, {
                        fontSize: "14px",
                        sx: {
                            textDecoration: "underline",
                            cursor: "pointer",
                            color: "t.yellow",
                            mt: 3
                        },
                        onClick: e,
                        children: i
                    })]
                }));
            var be = i("PzHQ");
            const ve = e => (0, _.jsx)(be.A, {
                width: "225",
                height: "45",
                viewBox: "0 0 225 45",
                fill: "none",
                ...e,
                sx: {
                    width: "255px",
                    height: "45px",
                    color: "t.primary",
                    opacity: "0.07",
                    ...e.sx
                },
                children: (0, _.jsx)("path", {
                    d: "M10.2072 22.5L5.12569 27.5537L0 22.5L5.12569 17.4023L10.2072 22.5ZM22.6237 10.1514L31.3727 18.8525L36.4984 13.7549L22.6237 0L8.74902 13.7988L13.8747 18.8965L22.6237 10.1514ZM40.1218 17.4023L35.0403 22.5L40.1659 27.5977L45.2916 22.5L40.1218 17.4023ZM22.6237 34.8486L13.8747 26.1035L8.74902 31.2012L22.6237 45L36.4984 31.2012L31.3727 26.1035L22.6237 34.8486ZM22.6237 27.5537L27.7494 22.4561L22.6237 17.4023L17.498 22.5L22.6237 27.5537ZM76.5318 28.0811V27.9932C76.5318 24.6973 74.7643 23.0273 71.8922 21.9287C73.6597 20.9619 75.162 19.3799 75.162 16.6113V16.5234C75.162 12.6562 72.0247 10.1514 66.9874 10.1514H55.4546V34.8047H67.2525C72.8643 34.8486 76.5318 32.5635 76.5318 28.0811ZM69.727 17.5342C69.727 19.3799 68.2247 20.127 65.7944 20.127H60.7571V14.8975H66.1479C68.4456 14.8975 69.727 15.8203 69.727 17.4463V17.5342ZM71.0968 27.3779C71.0968 29.2236 69.6386 30.0586 67.2525 30.0586H60.7571V24.6533H67.0758C69.8596 24.6533 71.0968 25.6641 71.0968 27.334V27.3779ZM87.9762 34.8486V10.1514H82.497V34.8047H87.9762V34.8486ZM117.316 34.8486V10.1514H111.926V25.3564L100.304 10.1514H95.2671V34.8047H100.658V19.1602L112.677 34.8486H117.316ZM147.54 34.8486L136.891 10.0195H131.854L121.205 34.8486H126.817L129.07 29.3115H139.542L141.796 34.8486H147.54ZM137.598 24.5215H131.014L134.328 16.5234L137.598 24.5215ZM173.566 34.8486V10.1514H168.176V25.3564L156.554 10.1514H151.517V34.8047H156.908V19.1602L168.927 34.8486H173.566ZM201.713 30.8496L198.223 27.3779C196.278 29.1357 194.555 30.2783 191.683 30.2783C187.441 30.2783 184.481 26.7627 184.481 22.5439V22.4121C184.481 18.1934 187.485 14.7217 191.683 14.7217C194.157 14.7217 196.102 15.7764 198.046 17.4902L201.537 13.4912C199.239 11.25 196.455 9.66797 191.771 9.66797C184.171 9.66797 178.825 15.4248 178.825 22.4121V22.5C178.825 29.5752 184.26 35.2002 191.55 35.2002C196.323 35.2441 199.151 33.5742 201.713 30.8496ZM225 34.8486V30.0147H211.523V24.8291H223.233V19.9951H211.523V14.9854H224.823V10.1514H206.132V34.8047H225V34.8486Z",
                    fill: "currentColor"
                })
            });
            var Ce = i("NSeK");
            const we = e => (0, _.jsx)(Ce.A, { ...e,
                    sx: {
                        flexShrink: 0,
                        color: "icons.close",
                        cursor: "pointer",
                        "&:hover": {
                            color: "t.third"
                        },
                        ...e.sx
                    },
                    className: "pro-layout-close-button"
                }),
                Ae = ({
                    children: e
                }) => ((0, I.A)((() => {
                    console.warn("[trade-widget] the component has been deprecated.")
                })), (0, _.jsx)(W.A, {
                    sx: {
                        color: "t.primary",
                        fontSize: "sm",
                        letterSpacing: ".16px",
                        whiteSpace: "nowrap",
                        overflow: "hidden",
                        textOverflow: "ellipsis"
                    },
                    children: e
                })),
                Se = ({
                    children: e
                }) => ((0, I.A)((() => {
                    console.warn("[trade-widget] the component has been deprecated.")
                })), (0, _.jsx)(W.A, {
                    sx: {
                        color: "t.buy",
                        fontSize: "xs",
                        letterSpacing: ".32px"
                    },
                    children: e
                })),
                Te = ({
                    children: e
                }) => ((0, I.A)((() => {
                    console.warn("[trade-widget] the component has been deprecated.")
                })), (0, _.jsx)(W.A, {
                    sx: {
                        color: "t.sell",
                        fontSize: "xs",
                        letterSpacing: ".32px"
                    },
                    children: e
                })),
                ke = ({
                    children: e
                }) => ((0, I.A)((() => {
                    console.warn("[trade-widget] the component has been deprecated.")
                })), (0, _.jsx)(W.A, {
                    sx: {
                        color: "t.primary",
                        fontSize: "xs",
                        letterSpacing: ".32px"
                    },
                    children: e
                })),
                Le = ({
                    name: e,
                    price: t,
                    change: i
                }) => ((0, I.A)((() => {
                    console.warn("[trade-widget] the component has been deprecated.")
                })), (0, _.jsxs)(V.A, {
                    sx: {
                        alignItems: "center"
                    },
                    children: [(0, _.jsx)(V.A, {
                        sx: {
                            alignItems: "center",
                            flex: "1"
                        },
                        children: e
                    }), (0, _.jsx)(V.A, {
                        sx: {
                            alignItems: "center",
                            pl: "minor"
                        },
                        children: t
                    }), (0, _.jsx)(V.A, {
                        sx: {
                            alignItems: "center",
                            pl: "minor"
                        },
                        children: i
                    })]
                })),
                _e = ({
                    options: e,
                    value: t,
                    onChange: i,
                    onClose: r
                }) => ((0, I.A)((() => {
                    console.warn("[trade-widget] the component has been deprecated.")
                })), (0, _.jsx)(V.A, {
                    children: e.map((e => (0, _.jsxs)(V.A, {
                        onClick: () => i(e),
                        sx: {
                            alignItems: "center",
                            cursor: "pointer",
                            p: "xs",
                            bg: e.value === t ? "bg3" : "transparent"
                        },
                        children: [(0, _.jsx)(Le, {
                            name: e.name,
                            price: e.price
                        }), e.showClose && (0, _.jsx)(we, {
                            size: 16,
                            onClick: t => {
                                t.stopPropagation(), r(e)
                            }
                        })]
                    }, `${e.value}`)))
                }));
            var Pe = i("oY5g"),
                De = i("8aEf"),
                Ie = i("zIIt"),
                Ve = i("cyn9");
            const Me = ({
                    onClick: e,
                    active: t,
                    children: i,
                    ...r
                }) => (0, _.jsx)(V.A, { ...r,
                    onClick: e,
                    sx: {
                        px: "ls",
                        py: "sm",
                        fontSize: "xs",
                        color: t ? "t.yellow" : "t.primary",
                        bg: "transparent",
                        cursor: "pointer",
                        alignItems: "center",
                        ":hover": {
                            bg: "bg3"
                        },
                        "& > *:not(:last-child)": {
                            mr: "5px"
                        },
                        ...r.sx
                    },
                    children: i
                }),
                Be = ({
                    children: e,
                    ...t
                }) => (0, _.jsx)(V.A, { ...t,
                    sx: {
                        bg: "popupBg",
                        shadow: "0px 7px 14px rgba(0, 0, 0, 0.08), 0px 3px 6px rgba(0, 0, 0, 0.08), inset 0px 0px 1px rgba(94, 102, 115, 0.9)",
                        borderRadius: "4px",
                        py: "5px",
                        flexDirection: "column",
                        ...t.sx
                    },
                    children: e
                }),
                Ee = ({
                    values: e,
                    options: t,
                    onClickDropdownItem: i
                }) => {
                    (0, I.A)((() => {
                        console.warn("[trade-widget] the component has been deprecated.")
                    }));
                    const r = (0, _.jsx)(Be, {
                        children: t.map((({
                            value: t,
                            children: r,
                            tooltip: o
                        }) => (0, _.jsx)(Me, {
                            active: !1,
                            onClick: e => {
                                e.stopPropagation(), i ? .(t)
                            },
                            sx: {
                                px: "xs",
                                py: "ls"
                            },
                            children: (0, _.jsxs)(W.A, {
                                sx: {
                                    width: "100%",
                                    display: "grid",
                                    gridTemplateColumns: "1fr auto auto"
                                },
                                children: [(0, _.jsx)(V.A, {
                                    sx: {
                                        alignItems: "center",
                                        fontSize: "12px",
                                        lineHeight: "16px",
                                        marginRight: "5px"
                                    },
                                    children: r
                                }), (0, _.jsx)(V.A, {
                                    sx: {
                                        marginRight: "16px"
                                    },
                                    children: o ? (0, _.jsx)(De.Ay, {
                                        enablePortal: !0,
                                        arrow: !0,
                                        placement: "top",
                                        tip: o,
                                        sx: {
                                            display: "flex",
                                            alignItems: "center"
                                        },
                                        children: (0, _.jsx)(Ie.A, {
                                            size: 14,
                                            color: "t.third"
                                        })
                                    }) : null
                                }), (0, _.jsx)(V.A, {
                                    sx: {
                                        alignItems: "center"
                                    },
                                    children: (0, _.jsx)(Pe.A, {
                                        sx: {
                                            width: "20px",
                                            height: "20px",
                                            margin: "0px"
                                        },
                                        checked: e.includes(t)
                                    })
                                })]
                            })
                        }, `${t}`)))
                    });
                    return (0, _.jsx)(Q.Ay, {
                        enablePortal: !0,
                        trigger: "hover",
                        overlay: r,
                        sx: {
                            display: "block"
                        },
                        children: (0, _.jsx)(Ve.A, {
                            sx: {
                                display: "block"
                            },
                            color: e.length > 0 ? "t.yellow" : "t.third",
                            size: 20
                        })
                    })
                },
                je = ({
                    onClickItem: e,
                    options: t,
                    ...i
                }) => {
                    (0, I.A)((() => {
                        console.warn("[trade-widget] the component has been deprecated")
                    }));
                    const r = t.map(((t, r) => ({
                        value: t.value,
                        display: (0, _.jsx)(V.A, {
                            sx: {
                                fontSize: "xs",
                                color: "t.third"
                            },
                            children: t.text
                        }),
                        children: (0, _.jsx)(Me, {
                            active: t.value === i.value,
                            onClick: () => e(t.value),
                            sx: {
                                px: "xs",
                                py: "ls"
                            },
                            children: t.text
                        }, r)
                    })));
                    return (0, _.jsx)(te, { ...i,
                        options: r,
                        overlay: () => (0, _.jsx)(Be, {
                            sx: {
                                position: "absolute",
                                left: "-8px",
                                width: "max-content"
                            },
                            children: r.map((e => e.children))
                        })
                    })
                };
            var Oe = i("Czjh"),
                He = i("rpER");
            var Re;
            ! function(e) {
                e[e.Single = 1] = "Single", e[e.Four = 4] = "Four"
            }(Re || (Re = {}));
            const Ne = ({
                    value: e,
                    onClickItem: t,
                    singleOptionText: i,
                    multiOptionText: r,
                    tooltipText: o,
                    ...s
                }) => {
                    (0, I.A)((() => {
                        console.warn("[trade-widget] the component has been deprecated")
                    }));
                    const n = [{
                        value: 1,
                        display: (0, _.jsx)(Oe.A, {
                            size: 20,
                            color: "icons.close"
                        }),
                        children: (0, _.jsxs)(Me, {
                            onClick: () => t(1),
                            active: 1 === e,
                            children: [(0, _.jsx)(He.A, {
                                size: 20,
                                color: "slider.line"
                            }), (0, _.jsx)(W.A, {
                                sx: {
                                    fontSize: "xs",
                                    color: "t.primary"
                                },
                                children: i
                            })]
                        }, "1")
                    }, {
                        value: 4,
                        display: (0, _.jsx)(Oe.A, {
                            size: 20,
                            color: "icons.close"
                        }),
                        children: (0, _.jsxs)(Me, {
                            onClick: () => t(4),
                            active: 4 === e,
                            children: [(0, _.jsx)(Oe.A, {
                                size: 20,
                                color: "icons.close"
                            }), (0, _.jsx)(W.A, {
                                sx: {
                                    fontSize: "xs",
                                    color: "t.primary"
                                },
                                children: r
                            }), (0, _.jsx)(De.Ay, {
                                enablePortal: !0,
                                arrow: !0,
                                placement: "bottom-start",
                                tip: o,
                                sx: {
                                    display: "flex",
                                    alignItems: "center"
                                },
                                children: (0, _.jsx)(Ie.A, {
                                    size: 20,
                                    color: "icons.close"
                                })
                            })]
                        }, "4")
                    }];
                    return (0, _.jsx)(te, {
                        placement: "bottom",
                        options: n,
                        value: e,
                        overlay: () => (0, _.jsx)(Be, {
                            children: n.map((e => e.children))
                        }),
                        ...s
                    })
                },
                We = e => (0, _.jsx)(be.A, {
                    viewBox: "0 0 20 20",
                    fill: "none",
                    ...e,
                    children: (0, _.jsx)("path", {
                        d: "M16.0714 11.7857H14.2857M7.5 5.35717V16.0715V5.35717ZM5.35714 14.6429H7.14285H5.35714ZM9.64285 8.21431H7.85714H9.64285ZM13.9286 4.64288V15.3572V4.64288ZM11.7857 6.78574H13.5714H11.7857Z",
                        stroke: "currentColor",
                        strokeLinecap: "square"
                    })
                }),
                Fe = e => (0, _.jsxs)(be.A, {
                    viewBox: "0 0 16 19",
                    fill: "none",
                    ...e,
                    children: [(0, _.jsx)("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M11.3333 0.833313H13V3.33331H15.5V15H13V18.3333H11.3333V15H8.83333V3.33331H11.3333V0.833313ZM13.8333 13.3333V4.99998H10.5V13.3333H13.8333Z",
                        fill: "#848E9C"
                    }), (0, _.jsx)("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M3 5.83331H4.66667V8.33331H7.16667V15H4.66667V18.3333H3V15H0.5V8.33331H3V5.83331ZM5.5 13.3333V9.99998H2.16667V13.3333H5.5Z",
                        fill: "#848E9C"
                    })]
                }),
                ze = e => (0, _.jsx)(be.A, {
                    viewBox: "0 0 10 15",
                    fill: "none",
                    ...e,
                    children: (0, _.jsx)("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M2.85714 0.857117H2.14286V2.99998H1.07143C0.976713 2.99998 0.885872 3.0376 0.818895 3.10458C0.751918 3.17156 0.714291 3.2624 0.714291 3.35712V11.9285C0.714291 12.0233 0.751918 12.1141 0.818895 12.1811C0.885872 12.2481 0.976713 12.2857 1.07143 12.2857H2.14286V14.4285H2.85714V12.2857H3.92858C4.0233 12.2857 4.11414 12.2481 4.18111 12.1811C4.24809 12.1141 4.28572 12.0233 4.28572 11.9285V3.35712C4.28572 3.2624 4.24809 3.17156 4.18111 3.10458C4.11414 3.0376 4.0233 2.99998 3.92858 2.99998H2.85714V0.857117ZM2.14286 3.71426H1.42858V4.42855H2.14286V5.14283H1.42858V5.85712H2.14286V6.5714H1.42858V7.28569H2.14286V7.99997H1.42858V8.71426H2.14286V9.42855H1.42858V10.1428H2.14286V10.8571H1.42858V11.5714H2.14286V10.8571H2.85714V11.5714H3.57143V10.8571H2.85714V10.1428H3.57143V9.42855H2.85714V8.71426H3.57143V7.99997H2.85714V7.28569H3.57143V6.5714H2.85714V5.85712H3.57143V5.14283H2.85714V4.42855H3.57143V3.71426H2.85714V4.42855H2.14286V3.71426ZM2.85714 5.14283V5.85712H2.14286V5.14283H2.85714ZM2.85714 6.5714V7.28569H2.14286V6.5714H2.85714ZM2.85714 7.99997V8.71426H2.14286V7.99997H2.85714ZM2.85714 9.42855V10.1428H2.14286V9.42855H2.85714ZM8.57143 2.99998H7.85715V5.14284H6.78572C6.691 5.14284 6.60016 5.18046 6.53319 5.24744C6.46621 5.31442 6.42858 5.40526 6.42858 5.49998V10.5C6.42858 10.5947 6.46621 10.6855 6.53319 10.7525C6.60016 10.8195 6.691 10.8571 6.78572 10.8571H7.85715V13H8.57143V10.8571H9.64287C9.73759 10.8571 9.82843 10.8195 9.8954 10.7525C9.96238 10.6855 10 10.5947 10 10.5V5.49998C10 5.40526 9.96238 5.31442 9.8954 5.24744C9.82843 5.18046 9.73759 5.14284 9.64287 5.14284H8.57143V2.99998ZM7.14287 10.1428V5.85712H9.28572V10.1428H7.14287Z",
                        fill: "currentColor"
                    })
                }),
                Xe = e => (0, _.jsx)(be.A, {
                    viewBox: "0 0 10 14",
                    fill: "none",
                    ...e,
                    children: (0, _.jsx)("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M8.57144 0.428528H7.85716V2.57147H6.78429C6.58215 2.57147 6.42858 2.73147 6.42858 2.92862V7.92861C6.42914 8.02292 6.46675 8.11322 6.5333 8.18003C6.59985 8.24685 6.68999 8.28482 6.78429 8.28576H9.64429C9.84644 8.28576 10 8.12576 10 7.92861V2.92862C10 2.73576 9.84072 2.57147 9.64429 2.57147H8.57144V0.428528ZM2.85713 1.85716H2.14284V4H1.06998C0.867838 4 0.714267 4.15929 0.714267 4.35571V13.6443C0.714078 13.6911 0.723149 13.7374 0.740959 13.7806C0.758768 13.8239 0.784963 13.8632 0.818032 13.8962C0.851101 13.9293 0.890389 13.9555 0.933632 13.9733C0.976874 13.9911 1.02322 14.0002 1.06998 14H3.92998C3.97683 14.0005 4.0233 13.9916 4.06667 13.9739C4.11004 13.9562 4.14945 13.93 4.18257 13.8969C4.2157 13.8638 4.24188 13.8243 4.25959 13.781C4.2773 13.7376 4.28617 13.6911 4.28569 13.6443V4.35571C4.28569 4.15714 4.12641 4 3.92998 4H2.85713V1.85716ZM1.42855 13.2857V4.71429H3.57141V13.2857H1.42855ZM7.14286 3.28576V7.57147H9.28572V3.28576H7.14286Z",
                        fill: "currentColor"
                    })
                }),
                Ue = e => (0, _.jsxs)(be.A, {
                    viewBox: "0 0 20 20",
                    fill: "none",
                    ...e,
                    children: [(0, _.jsx)("g", {
                        clipPath: "url(#clip0)",
                        children: (0, _.jsx)("path", {
                            d: "M8.55857 11.9207L12.28 8.57145H14.4464L17.41 5.23716L16.8757 4.76288L14.1257 7.85716H12.0057L8.58428 10.9364L6.42857 8.78074L3.31857 11.89L3.82428 12.3957L6.42857 9.79073L8.55857 11.9207Z",
                            fill: "currentColor"
                        })
                    }), (0, _.jsx)("defs", {
                        children: (0, _.jsx)("clipPath", {
                            id: "clip0",
                            children: (0, _.jsx)("rect", {
                                width: "20",
                                height: "20",
                                fill: "currentColor"
                            })
                        })
                    })]
                }),
                Ge = e => (0, _.jsxs)(be.A, {
                    viewBox: "0 0 20 20",
                    fill: "none",
                    ...e,
                    children: [(0, _.jsx)("path", {
                        d: "M8.92857 12.2907L13.3621 7.85713H14.7907L17.3957 5.25285L16.89 4.74713L14.495 7.14285H13.0664L8.92857 11.2807L6.78571 9.13785L3.31857 12.6043L3.82428 13.11L6.78571 10.1478L8.92857 12.2907Z",
                        fill: "currentColor"
                    }), (0, _.jsx)("path", {
                        d: "M6.42857 11.4286H7.14286V12.1429H6.42857V11.4286ZM7.14286 12.1429H7.85714V12.8572H7.14286V12.1429ZM6.42857 12.8572H7.14286V13.5715H6.42857V12.8572ZM7.85714 12.8572H8.57143V13.5715H7.85714V12.8572ZM7.14286 13.5715H7.85714V14.2857H7.14286V13.5715ZM6.42857 14.2857H7.14286V15H6.42857V14.2857ZM7.85714 14.2857H8.57143V15H7.85714V14.2857ZM5.71429 12.1429H6.42857V12.8572H5.71429V12.1429ZM5 12.8572H5.71429V13.5715H5V12.8572ZM4.28572 13.5715H5V14.2857H4.28572V13.5715ZM5.71429 13.5715H6.42857V14.2857H5.71429V13.5715ZM5 14.2857H5.71429V15H5V14.2857ZM3.57143 14.2857H4.28572V15H3.57143V14.2857ZM15.7143 7.85717H16.4286V8.57145H15.7143V7.85717ZM16.4286 7.14288H17.1429V7.85717H16.4286V7.14288ZM16.4286 8.57145H17.1429V9.28574H16.4286V8.57145ZM15.7143 9.28574H16.4286V10H15.7143V9.28574ZM15 10H15.7143V10.7143H15V10ZM16.4286 10H17.1429V10.7143H16.4286V10ZM15.7143 10.7143H16.4286V11.4286H15.7143V10.7143ZM15 11.4286H15.7143V12.1429H15V11.4286ZM16.4286 11.4286H17.1429V12.1429H16.4286V11.4286ZM15.7143 12.1429H16.4286V12.8572H15.7143V12.1429ZM15 12.8572H15.7143V13.5715H15V12.8572ZM16.4286 12.8572H17.1429V13.5715H16.4286V12.8572ZM15.7143 13.5715H16.4286V14.2857H15.7143V13.5715ZM15 14.2857H15.7143V15H15V14.2857ZM16.4286 14.2857H17.1429V15H16.4286V14.2857ZM12.8571 9.28574H13.5714V10H12.8571V9.28574ZM14.2857 9.28574H15V10H14.2857V9.28574ZM15 8.57145H15.7143V9.28574H15V8.57145ZM13.5714 10H14.2857V10.7143H13.5714V10ZM12.8571 10.7143H13.5714V11.4286H12.8571V10.7143ZM14.2857 10.7143H15V11.4286H14.2857V10.7143ZM13.5714 11.4286H14.2857V12.1429H13.5714V11.4286ZM12.8571 12.1429H13.5714V12.8572H12.8571V12.1429ZM14.2857 12.1429H15V12.8572H14.2857V12.1429ZM13.5714 12.8572H14.2857V13.5715H13.5714V12.8572ZM12.8571 13.5715H13.5714V14.2857H12.8571V13.5715ZM14.2857 13.5715H15V14.2857H14.2857V13.5715ZM13.5714 14.2857H14.2857V15H13.5714V14.2857ZM12.1429 10H12.8571V10.7143H12.1429V10ZM11.4286 10.7143H12.1429V11.4286H11.4286V10.7143ZM10.7143 11.4286H11.4286V12.1429H10.7143V11.4286ZM12.1429 11.4286H12.8571V12.1429H12.1429V11.4286ZM11.4286 12.1429H12.1429V12.8572H11.4286V12.1429ZM10.7143 12.8572H11.4286V13.5715H10.7143V12.8572ZM12.1429 12.8572H12.8571V13.5715H12.1429V12.8572ZM11.4286 13.5715H12.1429V14.2857H11.4286V13.5715ZM10.7143 14.2857H11.4286V15H10.7143V14.2857ZM12.1429 14.2857H12.8571V15H12.1429V14.2857ZM10 12.1429H10.7143V12.8572H10V12.1429ZM9.28572 12.8572H10V13.5715H9.28572V12.8572ZM8.57143 13.5715H9.28572V14.2857H8.57143V13.5715ZM10 13.5715H10.7143V14.2857H10V13.5715ZM9.28572 14.2857H10V15H9.28572V14.2857Z",
                        fill: "currentColor"
                    })]
                }),
                $e = e => (0, _.jsx)(be.A, {
                    viewBox: "0 0 20 20",
                    fill: "none",
                    ...e,
                    children: (0, _.jsx)("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M9.37578 4.41928C9.29109 4.24988 9.11796 4.14288 8.92857 4.14288C8.73918 4.14288 8.56605 4.24988 8.48136 4.41928L7.5 6.38199L7.23293 5.84785C7.14823 5.67846 6.9751 5.57145 6.78571 5.57145C6.59633 5.57145 6.42319 5.67846 6.3385 5.84785L4.90993 8.70499C4.78643 8.95198 4.88654 9.25232 5.13353 9.37581C5.38052 9.49931 5.68086 9.39919 5.80435 9.1522L6.78571 7.18949L7.05278 7.72363C7.13748 7.89303 7.31061 8.00003 7.5 8.00003C7.68938 8.00003 7.86252 7.89303 7.94721 7.72363L8.92857 5.76092L10.6242 9.1522C10.7477 9.39919 11.048 9.49931 11.295 9.37581C11.542 9.25232 11.6421 8.95198 11.5186 8.70499L9.37578 4.41928ZM2.85714 10.8572H3.34821V9.8572H2.85714V10.8572ZM4.33035 10.8572H5.3125V9.8572H4.33035V10.8572ZM6.29464 10.8572H7.27678V9.8572H6.29464V10.8572ZM8.25893 10.8572H9.24107V9.8572H8.25893V10.8572ZM10.2232 10.8572H11.2054V9.8572H10.2232V10.8572ZM12.1875 10.8572H13.1696V9.8572H12.1875V10.8572ZM14.1518 10.8572H15.1339V9.8572H14.1518V10.8572ZM16.1161 10.8572H17.0982V9.8572H16.1161V10.8572ZM18.0804 10.8572H18.5714V9.8572H18.0804V10.8572ZM4.15219 11.3385C4.39918 11.462 4.49929 11.7623 4.3758 12.0093L3.66151 13.4379C3.53802 13.6849 3.23768 13.785 2.99069 13.6615C2.7437 13.538 2.64359 13.2377 2.76708 12.9907L3.48137 11.5621C3.60487 11.3151 3.9052 11.215 4.15219 11.3385ZM17.9472 7.72365C18.0707 7.47666 17.9706 7.17632 17.7236 7.05283C17.4766 6.92933 17.1763 7.02944 17.0528 7.27643L16.3385 8.70501C16.215 8.95199 16.3151 9.25233 16.5621 9.37583C16.8091 9.49932 17.1094 9.39921 17.2329 9.15222L17.9472 7.72365ZM12.5 11.2858C12.3267 11.2858 12.1658 11.3755 12.0747 11.5229C11.9836 11.6703 11.9753 11.8544 12.0528 12.0094L13.4813 14.8665C13.566 15.0359 13.7392 15.1429 13.9286 15.1429C14.1179 15.1429 14.2911 15.0359 14.3758 14.8665L15.8043 12.0094C15.8818 11.8544 15.8736 11.6703 15.7825 11.5229C15.6913 11.3755 15.5304 11.2858 15.3571 11.2858H12.5ZM13.9286 13.5249L13.309 12.2858H14.5481L13.9286 13.5249Z",
                        fill: "currentColor"
                    })
                });
            var Ye;
            ! function(e) {
                e[e.Bars = 0] = "Bars", e[e.Candles = 1] = "Candles", e[e.Line = 2] = "Line", e[e.Area = 3] = "Area", e[e.HeikinAshi = 8] = "HeikinAshi", e[e.HollowCandles = 9] = "HollowCandles", e[e.Baseline = 10] = "Baseline"
            }(Ye || (Ye = {}));
            const Ze = [{
                    value: 0,
                    icon: We
                }, {
                    value: 1,
                    icon: Fe
                }, {
                    value: 9,
                    icon: ze
                }, {
                    value: 8,
                    icon: Xe
                }, {
                    value: 2,
                    icon: Ue
                }, {
                    value: 3,
                    icon: Ge
                }, {
                    value: 10,
                    icon: $e
                }],
                Ke = ({
                    value: e,
                    onClickItem: t,
                    optionText: i,
                    ...r
                }) => {
                    (0, I.A)((() => {
                        console.warn("[trade-widget] the component has been deprecated")
                    }));
                    const o = Ze.map((({
                        value: r,
                        icon: o
                    }, s) => ({
                        value: r,
                        display: (0, _.jsx)(o, {
                            sx: {
                                minWidth: "20px",
                                minHeight: "20px"
                            },
                            size: 20,
                            color: "t.secondary"
                        }),
                        children: (0, _.jsxs)(Me, {
                            onClick: () => t(r),
                            active: e === r,
                            sx: {
                                py: "ls"
                            },
                            children: [(0, _.jsx)(o, {
                                size: 20,
                                sx: {
                                    color: e === r ? "t.yellow" : "t.secondary",
                                    mr: "xs"
                                }
                            }), (0, _.jsx)(W.A, {
                                children: i[s]
                            })]
                        }, s)
                    })));
                    return (0, _.jsx)(te, {
                        placement: "bottom-start",
                        options: o,
                        value: e,
                        overlay: () => (0, _.jsx)(Be, {
                            sx: {
                                position: "absolute",
                                left: "-12px",
                                width: "max-content"
                            },
                            children: o.map((e => e.children))
                        }),
                        ...r
                    })
                };
            var qe = i("Jsxa");
            const Qe = ({
                name: e,
                options: t,
                value: i,
                onChange: r
            }) => ((0, I.A)((() => {
                console.warn("[trade-widget] the component has been deprecated.")
            })), (0, _.jsx)(qe.Q$, {
                name: e,
                value: i,
                onChange: r,
                children: t.map((e => (0, _.jsx)(qe.Ay, {
                    value: e.value,
                    label: e.label,
                    sx: {
                        "&:not(:first-of-type)": {
                            ml: "10px"
                        },
                        "& label": {
                            cursor: "pointer",
                            color: e.value === i ? "t.yellow" : "t.third",
                            "&:hover": {
                                color: "t.yellow"
                            },
                            "& div": {
                                ml: 0,
                                p: "minor",
                                fontSize: "12px",
                                lineHeight: "16px",
                                letterSpacing: "0.32px"
                            }
                        },
                        "& svg": {
                            display: "none"
                        }
                    }
                }, e.value)))
            }));
            var Je = i("KYIa");
            const et = e => (0, _.jsx)(De.Ay, { ...e,
                placement: "top",
                enablePortal: !0,
                arrow: !0,
                sx: {
                    cursor: "pointer",
                    display: "flex",
                    minWidth: "auto",
                    alignItems: "center",
                    justifyContent: "center",
                    ...e.sx
                },
                children: (0, _.jsx)(Je.A, {
                    sx: {
                        minWidth: "20px",
                        minHeight: "20px"
                    },
                    size: 20,
                    color: "t.third"
                })
            });
            var tt = i("2eJO");
            const it = e => (0, _.jsx)(De.Ay, { ...e,
                placement: "top",
                enablePortal: !0,
                arrow: !0,
                sx: {
                    cursor: "pointer",
                    display: "flex",
                    minWidth: "auto",
                    alignItems: "center",
                    justifyContent: "center",
                    ...e.sx
                },
                children: (0, _.jsx)(tt.A, {
                    sx: {
                        minWidth: "20px",
                        minHeight: "20px"
                    },
                    size: 20,
                    color: "t.third"
                })
            });
            var rt = i("Ij22"),
                ot = i("BYEp");
            const st = ({
                expanded: e,
                ...t
            }) => {
                const i = { ...t,
                    sx: {
                        flexShrink: 0,
                        color: "icons.close",
                        cursor: "pointer",
                        "&:hover": {
                            color: "t.third"
                        },
                        ...t.sx
                    }
                };
                return e ? (0, _.jsx)(rt.A, { ...i
                }) : (0, _.jsx)(ot.A, { ...i
                })
            };
            var nt = i("OMC8");
            const at = e => (0, _.jsx)(De.Ay, { ...e,
                    placement: "top",
                    enablePortal: !0,
                    arrow: !0,
                    sx: {
                        cursor: "pointer",
                        display: "flex",
                        minWidth: "auto",
                        alignItems: "center",
                        justifyContent: "center",
                        ...e.sx
                    },
                    children: (0, _.jsx)(nt.A, {
                        sx: {
                            minWidth: "20px",
                            minHeight: "20px"
                        },
                        size: 20,
                        color: "t.third"
                    })
                }),
                lt = ({
                    toggled: e,
                    ...t
                }) => (0, _.jsx)(De.Ay, { ...t,
                    placement: "top",
                    enablePortal: !0,
                    arrow: !0,
                    sx: {
                        cursor: "pointer",
                        display: "flex",
                        alignItems: "center",
                        justifyContent: "center",
                        ...t.sx
                    },
                    children: (0, _.jsx)(Ve.A, {
                        sx: {
                            minWidth: "20px",
                            minHeight: "20px"
                        },
                        size: 20,
                        color: e ? "t.yellow" : "t.third"
                    })
                }),
                ct = e => (0, _.jsxs)(be.A, {
                    width: "20",
                    height: "20",
                    viewBox: "0 0 20 20",
                    fill: "none",
                    ...e,
                    sx: {
                        flexShrink: 0,
                        color: "icons.close",
                        cursor: "pointer",
                        "&:hover": {
                            color: "t.third"
                        },
                        ...e.sx
                    },
                    children: [(0, _.jsx)("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M17.5 3.33331L2.5 3.33331V9.16665H4.16667V4.99998H15.8333V15.8333H10.8333V17.5H17.5V3.33331Z",
                        fill: "currentColor"
                    }), (0, _.jsx)("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M9.1665 10.8333H2.49984V17.5H9.1665V10.8333ZM7.49984 12.5V15.8333H4.1665V12.5H7.49984Z",
                        fill: "currentColor"
                    }), (0, _.jsx)("path", {
                        d: "M14.1665 13.3334L14.1665 6.66669L7.49984 6.66669L7.49984 8.33335L11.3603 8.33335L7.49984 11.6667L8.67835 12.8452L12.4998 9.51186L12.4998 13.3334L14.1665 13.3334Z",
                        fill: "currentColor"
                    })]
                }),
                dt = e => (0, _.jsx)(be.A, {
                    viewBox: "0 0 20 20",
                    fill: "none",
                    ...e,
                    children: (0, _.jsx)("path", {
                        d: "M12.8571 3.57146V7.14289H15V3.57146H12.8571ZM12.1429 2.85718H15.7143V7.85718H12.1429V2.85718ZM9.28571 12.1429H11.4286V8.57146H9.28571V12.1429ZM8.57143 7.85718H12.1429V12.8572H8.57143V7.85718ZM5.71429 17.1429H7.85714V13.5715H5.71429V17.1429ZM5 12.8572H8.57143V17.8572H5V12.8572Z",
                        fill: "currentColor"
                    })
                }),
                ht = e => (0, _.jsx)(be.A, {
                    viewBox: "0 0 20 20",
                    fill: "none",
                    ...e,
                    children: (0, _.jsx)("path", {
                        d: "M12.8571 17.1429H15V8.57145H12.8571V17.1429ZM12.1429 7.85716H15.7143V17.8572H12.1429V7.85716ZM9.28571 2.14287V7.14287H11.4286V2.14287H9.28571ZM8.57143 1.42859H12.1429V7.85716H8.57143V1.42859ZM5.71429 13.5714H7.85714V8.57145H5.71429V13.5714ZM5 7.85716H8.57143V14.2857H5V7.85716Z",
                        fill: "currentColor"
                    })
                }),
                ut = e => (0, _.jsx)(be.A, {
                    viewBox: "0 0 20 20",
                    fill: "none",
                    ...e,
                    children: (0, _.jsx)("path", {
                        d: "M7.85714 3.57146H10V12.1429H13.5714V5.71432H15.7143V15H16.4286V5.00004H12.8571V11.4286H10.7143V2.85718H7.14285V15.7143H5V12.1429H4.28571V16.4286H7.85714V3.57146Z",
                        fill: "currentColo"
                    })
                }),
                gt = e => (0, _.jsx)(be.A, {
                    viewBox: "0 0 20 20",
                    fill: "none",
                    ...e,
                    children: (0, _.jsx)("path", {
                        fillRule: "evenodd",
                        clipRule: "evenodd",
                        d: "M9.09445 10.9056C9.42933 11.2404 9.88354 11.4286 10.3571 11.4286C10.8307 11.4286 11.2849 11.2404 11.6198 10.9056C11.9547 10.5707 12.1429 10.1165 12.1429 9.64287C12.1429 9.16927 11.9547 8.71507 11.6198 8.38018C11.2849 8.04529 10.8307 7.85715 10.3571 7.85715C9.88354 7.85715 9.42933 8.04529 9.09445 8.38018C8.75956 8.71507 8.57142 9.16927 8.57142 9.64287C8.57142 10.1165 8.75956 10.5707 9.09445 10.9056ZM11.1148 10.4005C10.9138 10.6014 10.6413 10.7143 10.3571 10.7143C10.073 10.7143 9.80045 10.6014 9.59952 10.4005C9.39859 10.1996 9.28571 9.92703 9.28571 9.64287C9.28571 9.35871 9.39859 9.08619 9.59952 8.88525C9.80045 8.68432 10.073 8.57144 10.3571 8.57144C10.6413 8.57144 10.9138 8.68432 11.1148 8.88525C11.3157 9.08619 11.4286 9.35871 11.4286 9.64287C11.4286 9.92703 11.3157 10.1996 11.1148 10.4005ZM9.09445 15.1913C9.42933 15.5262 9.88354 15.7143 10.3571 15.7143C10.8307 15.7143 11.2849 15.5262 11.6198 15.1913C11.9547 14.8564 12.1429 14.4022 12.1429 13.9286C12.1429 13.455 11.9547 13.0008 11.6198 12.6659C11.2849 12.331 10.8307 12.1429 10.3571 12.1429C9.88354 12.1429 9.42933 12.331 9.09445 12.6659C8.75956 13.0008 8.57142 13.455 8.57142 13.9286C8.57142 14.4022 8.75956 14.8564 9.09445 15.1913ZM11.1148 14.6862C10.9138 14.8871 10.6413 15 10.3571 15C10.073 15 9.80045 14.8871 9.59952 14.6862C9.39859 14.4853 9.28571 14.2127 9.28571 13.9286C9.28571 13.6444 9.39859 13.3719 9.59952 13.171C9.80045 12.97 10.073 12.8572 10.3571 12.8572C10.6413 12.8572 10.9138 12.97 11.1148 13.171C11.3157 13.3719 11.4286 13.6444 11.4286 13.9286C11.4286 14.2127 11.3157 14.4853 11.1148 14.6862ZM14.1379 5.35717L12.7093 3.92858L13.2143 3.42358L14.6429 4.85217L16.0714 3.42358L16.5764 3.92858L15.1479 5.35717L16.5764 6.78573L16.0714 7.29073L14.6429 5.86217L13.2143 7.29073L12.7093 6.78573L14.1379 5.35717ZM16.0714 11.5764L14.6429 10.1479L13.2143 11.5764L12.7093 11.0714L14.1379 9.64286L12.7093 8.2143L13.2143 7.7093L14.6429 9.13786L16.0714 7.70927L16.5765 8.21427L15.1479 9.64286L16.5764 11.0714L16.0714 11.5764ZM6.07146 14.4336L7.50002 15.8621L8.00502 15.3571L6.57646 13.9286L8.00502 12.5L7.50002 11.995L6.07146 13.4236L4.64288 11.995L4.13788 12.5L5.56646 13.9286L4.13788 15.3572L4.64288 15.8622L6.07146 14.4336ZM7.50002 7.29073L6.07145 5.86215L4.64288 7.29073L4.13788 6.78573L5.56645 5.35716L4.13788 3.92858L4.64288 3.42358L6.07145 4.85216L7.50002 3.42358L8.00502 3.92858L6.57645 5.35716L8.00502 6.78573L7.50002 7.29073ZM6.07144 10.1479L7.50002 11.5764L8.00502 11.0714L6.57644 9.64285L8.00502 8.21427L7.50002 7.70927L6.07144 9.13786L4.64288 7.7093L4.13788 8.2143L5.56644 9.64285L4.13788 11.0714L4.64288 11.5764L6.07144 10.1479Z",
                        fill: "currentColor"
                    })
                }),
                pt = e => (0, _.jsx)(be.A, {
                    viewBox: "0 0 20 20",
                    fill: "none",
                    ...e,
                    children: (0, _.jsx)("path", {
                        d: "M15.3571 15.7143L14.2857 13.9285M7.5 6.42854V15V6.42854ZM5 13.2143H7.5H5ZM10 6.78568H7.5H10ZM13.9286 2.14282V10.7143V2.14282ZM11.4286 4.64282H13.9286H11.4286ZM16.4286 10.3571H13.9286H16.4286ZM13.2143 13.9285H14.6429C14.8323 13.9285 15.014 13.8533 15.1479 13.7193C15.2819 13.5854 15.3571 13.4037 15.3571 13.2143C15.3571 13.0248 15.2819 12.8431 15.1479 12.7092C15.014 12.5752 14.8323 12.5 14.6429 12.5H13.2143V15.7143V13.9285Z",
                        stroke: "currentColor"
                    })
                });
            var mt = i("6ScU"),
                xt = i("HEid");
            const ft = ({
                    children: e
                }) => (0, _.jsx)(H.A, {
                    sx: {
                        ml: "8px",
                        color: "t.disabled"
                    },
                    children: e
                }),
                yt = ({
                    children: e
                }) => (0, _.jsx)(H.A, {
                    sx: {
                        mr: "8px",
                        color: "t.disabled"
                    },
                    children: e
                });
            var bt = i("ad0Q");
            const vt = (e, t, i, r) => r - e(t) >= e(i) - r ? i : t,
                Ct = (e, t, i) => {
                    const r = e.length;
                    if (i <= t(e[0])) return e[0];
                    if (i >= t(e[r - 1])) return e[r - 1];
                    let o = 0,
                        s = r,
                        n = 0;
                    for (; o < s;) {
                        if (n = (o + s) / 2 >>> 0, t(e[n]) === i) return e[n];
                        if (i < t(e[n])) {
                            if (n > 0 && i > t(e[n - 1])) return vt(t, e[n - 1], e[n], i);
                            s = n
                        } else {
                            if (n < r - 1 && i < t(e[n + 1])) return vt(t, e[n], e[n + 1], i);
                            o = n + 1
                        }
                    }
                    return e[n]
                },
                wt = (e, t) => {
                    if (!e.length) return null;
                    let i = e.length - 1,
                        r = 0;
                    const o = t(e[r]);
                    if (t(e[i]) === o) return null;
                    let s, n;
                    for (; i >= r;) s = (i + r) / 2 >>> 0, n = t(e[s]), n === o ? r = s + 1 : i = s - 1;
                    return r
                },
                At = {
                    desktop: 1260,
                    tablet: 768,
                    phone: 480
                },
                St = ({
                    xData: e,
                    yData: t
                }) => ({
                    xData: t,
                    yData: e
                }),
                Tt = e => {
                    if ("undefined" === typeof window) return !1;
                    return (window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth) <= At[e]
                },
                kt = ({
                    symbol: e,
                    d1Group: t,
                    d2Group: i,
                    width: r,
                    height: o,
                    cursor: s,
                    scale: n,
                    yAxisScale: a = .6
                }) => {
                    const l = r / 2,
                        c = (0, P.useRef)(Number.NEGATIVE_INFINITY),
                        d = (0, P.useRef)(Number.NEGATIVE_INFINITY);
                    (0, P.useEffect)((() => {
                        c.current = Number.NEGATIVE_INFINITY, d.current = Number.NEGATIVE_INFINITY
                    }), [e]);
                    const {
                        d1: h,
                        d2: u
                    } = ((e, t, i = 10) => ({
                        d1: {
                            low: e[0] ? .xData,
                            high: e[e.length - 1] ? .xData,
                            atIndex: e[i - 1] ? .xData
                        },
                        d2: {
                            low: t[t.length - 1] ? .xData,
                            high: t[0] ? .xData,
                            atIndex: t[i - 1] ? .xData
                        }
                    }))(t, i), g = (p = u.high, m = h.low, (p + m) / 2);
                    var p, m;
                    const {
                        min: x,
                        max: f
                    } = ((e, t) => ({
                        min: 1 / Math.max(e.high - e.low, t.high - t.low) || -1 / 0,
                        max: 1 / Math.max((e.atIndex || e.high) - e.low, t.high - (t.atIndex || t.low)) || -1 / 0
                    }))(h, u);
                    c.current = Math.max(x, c.current), d.current = Math.max(f, d.current);
                    const y = ((e, t, i) => e + (t - e) / 1e3 * i)(c.current, d.current, n),
                        b = (0, P.useCallback)((e => (({
                            value: e,
                            width: t,
                            scale: i,
                            midValue: r
                        }) => (e - r) * i * t + t)({
                            value: e,
                            width: l,
                            scale: y,
                            midValue: g
                        })), [l, y, g]),
                        v = (0, P.useCallback)((e => (({
                            x: e,
                            width: t,
                            scale: i,
                            midValue: r
                        }) => (e - t) / t / i + r)({
                            x: e,
                            width: l,
                            scale: y,
                            midValue: g
                        })), [l, y, g]),
                        {
                            max: C,
                            maxD1Index: w,
                            maxD2Index: A
                        } = (({
                            d1Group: e,
                            d2Group: t,
                            d1Predicate: i,
                            d2Predicate: r
                        }) => {
                            const o = wt(e, i) || e.length,
                                s = wt(t, r) || t.length,
                                n = e[o - 1] ? .yData,
                                a = t[s - 1] ? .yData;
                            return {
                                max: Math.max(a, n),
                                maxD1Index: o,
                                maxD2Index: s
                            }
                        })({
                            d1Group: t,
                            d2Group: i,
                            d1Predicate: e => b(e.xData) > r,
                            d2Predicate: e => b(e.xData) < 0
                        }),
                        S = (0, P.useCallback)((e => (({
                            value: e,
                            height: t,
                            scale: i,
                            maxValue: r
                        }) => t - e / r * i * t - 1)({
                            value: e,
                            height: o,
                            scale: a,
                            maxValue: C
                        })), [o, C]),
                        T = t.slice(0, w - 1),
                        k = i.slice(0, A - 1),
                        {
                            d1: L,
                            d2: _
                        } = (({
                            d1Group: e,
                            d2Group: t,
                            x: i,
                            midValue: r,
                            breakpoint: o,
                            xToValueFn: s,
                            valueToXFn: n,
                            valueToYFn: a
                        }) => {
                            let l = {
                                    xData: NaN,
                                    yData: NaN
                                },
                                c = {
                                    xData: NaN,
                                    yData: NaN
                                };
                            if (i && e.length) {
                                let n;
                                i > o ? (l = Ct(e, (e => e ? .xData), s(i)), n = 2 * r - l ? .xData, c = Ct(t, (e => -e ? .xData), -n)) : (c = Ct(t, (e => -e ? .xData), -s(i)), n = 2 * r - c ? .xData, l = Ct(e, (e => e ? .xData), n))
                            }
                            return {
                                d1: { ...l,
                                    x: n(l ? .xData) || 0,
                                    y: a(l ? .yData) || 0
                                },
                                d2: { ...c,
                                    x: n(c ? .xData) || 0,
                                    y: a(c ? .yData) || 0
                                }
                            }
                        })({
                            d1Group: T,
                            d2Group: k,
                            x: s.x,
                            midValue: g,
                            breakpoint: l,
                            xToValueFn: v,
                            valueToXFn: b,
                            valueToYFn: S
                        }),
                        D = C / a,
                        I = ((e, t, i) => {
                            let r;
                            r = e >= t ? Tt("mobile") || e < 500 ? 3 : Tt("tablet") || e < 800 ? 5 : 10 : t < 500 ? 3 : t < 800 ? 5 : 10;
                            const o = i(0),
                                s = (i(e) - o) / r,
                                n = [];
                            let a = o + s / 2;
                            for (let l = 0; l < r; l++) a && (a > 0 && n.push(a), a += s);
                            return n
                        })(r, o, v),
                        V = ((e, t, i) => {
                            const r = [20, 50, 100],
                                o = (t - e) / Math.floor(i / 40);
                            let s = Math.floor(Math.log10(o) - 1);
                            s = 10 ** s;
                            const n = o / s;
                            let a = 0,
                                l = 0;
                            for (l = 0; l < r.length; l++)
                                if (r[l] >= n) {
                                    a = r[l] * s;
                                    break
                                }
                            let c = 0,
                                d = 0;
                            c = Math.ceil(t / a) * a, d = Math.floor(e / a) * a;
                            const h = [];
                            for (; d < c;) h.push(parseFloat((d + a).toPrecision(12))), d += a;
                            return h
                        })(0, D, o);
                    return {
                        width: r,
                        height: o,
                        halfWidth: l,
                        midValue: g,
                        d1: L,
                        d2: _,
                        xTicks: I,
                        yTicks: V,
                        valueToX: b,
                        valueToY: S
                    }
                },
                Lt = ({
                    initCursorState: e = {
                        x: 0,
                        y: 0
                    },
                    scale: t,
                    setScale: i = () => null
                }) => {
                    const [r, o] = (0, P.useState)(e);
                    return {
                        cursor: r,
                        onMouseMove: e => o({
                            x: e.evt.offsetX,
                            y: e.evt.offsetY
                        }),
                        onMouseLeave: () => o(e),
                        onMouseWheel: (0, P.useCallback)((e => {
                            const r = e ? .evt ? .deltaY < 0 ? Math.min(t + 5, 1e3) : Math.max(0, t - 5);
                            i ? .(r), e ? .evt ? .preventDefault()
                        }), [t, i])
                    }
                };
            i("y32I"), i("4uxp"), i("s8Gf"), i("IbH0"), i("zMxV");
            const _t = ["dont_show_boolean_study_arguments", "hide_last_na_study_output", "left_toolbar", "timeframes_toolbar", "keep_left_toolbar_visible_on_small_screens", "save_chart_properties_to_local_storage", "compare_symbol", "snapshot_trading_drawings"],
                Pt = ["header_widget", "header_symbol_search", "symbol_info", "header_compare", "header_chart_type", "display_market_status", "symbol_search_hot_key", "border_around_the_chart", "remove_library_container_border", "symbol_info", "header_interval_dialog_button", "show_interval_dialog_on_key_press", "volume_force_overlay", "header_resolutions", "legend_context_menu"],
                Dt = e => ({
                    volumePaneSize: "medium",
                    "symbolWatermarkProperties.transparency": 85,
                    "symbolWatermarkProperties.color": "rgba(0, 0, 0, 0)",
                    "scalesProperties.textColor": e ? .colors ? .t ? .third,
                    "scalesProperties.lineColor": e ? .colors ? .line,
                    "scalesProperties.backgroundColor": e ? .colors ? .background,
                    "paneProperties.background": e ? .colors ? .moduleBg,
                    "paneProperties.horzGridProperties.color": e ? .colors ? .lineForK,
                    "paneProperties.vertGridProperties.color": e ? .colors ? .lineForK,
                    "paneProperties.crossHairProperties.color": e ? .colors ? .t ? .secondary,
                    "candleStyle.upColor": e ? .colors ? .buy,
                    "candleStyle.downColor": e ? .colors ? .sell,
                    "candleStyle.drawWick": !0,
                    "candleStyle.drawBorder": !0,
                    "candleStyle.borderColor": "transparent",
                    "candleStyle.borderUpColor": e ? .colors ? .buy,
                    "candleStyle.borderDownColor": e ? .colors ? .sell,
                    "candleStyle.wickUpColor": e ? .colors ? .buy,
                    "candleStyle.wickDownColor": e ? .colors ? .sell,
                    "hollowCandleStyle.upColor": e ? .colors ? .buy,
                    "hollowCandleStyle.downColor": e ? .colors ? .sell,
                    "hollowCandleStyle.drawWick": !0,
                    "hollowCandleStyle.drawBorder": !0,
                    "hollowCandleStyle.borderColor": "transparent",
                    "hollowCandleStyle.borderUpColor": e ? .colors ? .buy,
                    "hollowCandleStyle.borderDownColor": e ? .colors ? .sell,
                    "hollowCandleStyle.wickUpColor": e ? .colors ? .buy,
                    "hollowCandleStyle.wickDownColor": e ? .colors ? .sell,
                    "haStyle.upColor": e ? .colors ? .buy,
                    "haStyle.downColor": e ? .colors ? .sell,
                    "haStyle.drawWick": !0,
                    "haStyle.drawBorder": !0,
                    "haStyle.borderColor": "transparent",
                    "haStyle.borderUpColor": e ? .colors ? .buy,
                    "haStyle.borderDownColor": e ? .colors ? .sell,
                    "haStyle.wickUpColor": e ? .colors ? .buy,
                    "haStyle.wickDownColor": e ? .colors ? .sell,
                    "barStyle.upColor": e ? .colors ? .buy,
                    "barStyle.downColor": e ? .colors ? .sell,
                    "lineStyle.color": e ? .colors ? .buy,
                    "areaStyle.color1": e ? .colors ? .buy,
                    "areaStyle.color2": e ? .colors ? .sell,
                    "areaStyle.linecolor": e ? .colors ? .sell,
                    "baselineStyle.baselineColor": e ? .colors ? .buy,
                    "baselineStyle.topFillColor1": e ? .colors ? .buy,
                    "baselineStyle.topFillColor2": e ? .colors ? .sell,
                    "baselineStyle.bottomFillColor1": e ? .colors ? .buy,
                    "baselineStyle.bottomFillColor2": e ? .colors ? .sell,
                    "baselineStyle.topLineColor": e ? .colors ? .buy,
                    "baselineStyle.bottomLineColor": e ? .colors ? .sell
                }),
                It = e => ({
                    originalTheme: e,
                    overrides: Dt(e)
                }),
                Vt = ["1S", "1", "3", "5", "15", "30", "60", "120", "240", "360", "480", "720", "1D", "3D", "1W", "1M"];
            var Mt = i("T9sr"),
                Bt = i.n(Mt),
                Et = i("HzRw"),
                jt = i("UXyB");
            const Ot = ({
                    widget: e,
                    theme: t,
                    styles: i,
                    onSave: r = () => null,
                    onSetThemeDone: o
                }) => ((({
                    widget: e,
                    theme: t
                }) => {
                    const i = e.chart().getCheckableActionState("showCountdown");
                    e.changeTheme(t), i ? new Promise((t => {
                        setTimeout((() => {
                            e.chart().executeActionById("showCountdown"), t()
                        }), 0)
                    })) : Promise.resolve()
                })({
                    widget: e,
                    theme: t
                }), new Promise((t => {
                    setTimeout((() => {
                        e.applyOverrides(i.overrides), (({
                            widget: e,
                            styles: t
                        }) => {
                            try {
                                const i = e.activeChart().getAllStudies().find((e => "volume" === e ? .name ? .toLowerCase()));
                                i && e.activeChart().getStudyById(i.id).applyOverrides({
                                    "volume.color.0": (0, X.N)(t.overrides["candleStyle.downColor"], .5),
                                    "volume.color.1": (0, X.N)(t.overrides["candleStyle.upColor"], .5)
                                })
                            } catch (i) {}
                        })({
                            widget: e,
                            styles: i
                        }), e.save(r), o ? .(), t()
                    }), 0)
                }))),
                Ht = ({
                    widget: e,
                    seriesStyle: t
                }) => {
                    e.applyOverrides({
                        "mainSeriesProperties.style": t
                    })
                },
                Rt = async ({
                    tradingViewSave: e,
                    theme: t,
                    styles: i,
                    seriesStyle: r,
                    widget: o,
                    onInitStudies: s
                }) => {
                    await (async ({
                        tradingViewSave: e,
                        widget: t,
                        theme: i,
                        styles: r
                    }) => {
                        if (e) return Promise.resolve();
                        await Ot({
                            widget: t,
                            theme: i,
                            styles: r
                        })
                    })({
                        widget: o,
                        tradingViewSave: e,
                        theme: t,
                        styles: i
                    }), s ? .({
                        tradingViewSave: e,
                        widget: o
                    }), Ht({
                        widget: o,
                        seriesStyle: r
                    })
                },
                Nt = ({
                    symbol: e,
                    symbolsInfo: t = {},
                    interval: i,
                    theme: r,
                    styles: o,
                    limitOrders: s = [],
                    positionOrders: n = [],
                    executionOrders: a = [],
                    seriesStyle: l,
                    showIndicators: c,
                    isChartReady: d,
                    overwritingThemeOnLoaded: h = !1,
                    widget: u,
                    initialConfig: {
                        tvConfig: g,
                        onSave: p,
                        onCreateOrderShapesError: m,
                        onLoadConfig: x = () => Promise.resolve(null),
                        onLoading: f,
                        onWidgetInitialized: y,
                        onChartReadyDone: b,
                        onChartReadyError: v,
                        onWillUnmount: C,
                        onWidgetRefNotFoundError: w,
                        onScriptLoaded: A,
                        onScriptLoadingError: S,
                        onFirstTimeSetThemeDone: T,
                        onSetThemeDone: k,
                        onFirstTimeDataLoadedDone: L,
                        onDataLoadedDone: D,
                        onTradingViewInitError: I,
                        onVisibleRangeChanged: V,
                        onSymbolWillChange: M,
                        onSymbolChanged: B,
                        onIntervalChanged: E,
                        onInitStudies: j
                    }
                }) => {
                    const [O, H] = (0, P.useState)(0), R = (0, P.useCallback)((() => H((e => e + 1))), [H]), N = (0, P.useRef)([]), F = (0, P.useRef)([]), z = (0, P.useRef)([]), X = (0, P.useRef)(), U = (0, P.useRef)(e), G = (0, P.useRef)(t), $ = (0, P.useRef)(r), Y = (0, P.useRef)(o), Z = (0, P.useRef)(h), K = g.container_id;
                    (0, P.useEffect)((() => {
                        $.current = r
                    }), [r]), (0, P.useEffect)((() => {
                        Y.current = o
                    }), [o]), (0, P.useEffect)((() => {
                        Z.current = h
                    }), [h]), (0, P.useEffect)((() => {
                        U.current = e
                    }), [e]), (0, P.useEffect)((() => {
                        G.current = t
                    }), [t]);
                    const q = (0, P.useCallback)((() => {
                            X.current && (({
                                widget: e,
                                onSave: t = () => Promise.resolve()
                            }) => {
                                e.save(t)
                            })({
                                widget: X.current,
                                onSave: p
                            })
                        }), [p]),
                        Q = (0, P.useCallback)((e => {
                            if (!X.current || !e) return;
                            const t = X.current.activeChart().getStudyById(e),
                                i = U.current,
                                r = G.current[i],
                                {
                                    tickSize: o = 1e7
                                } = r || {},
                                s = Math.log10(o);
                            t ? .applyOverrides({
                                precision: s
                            })
                        }), []),
                        J = (0, P.useCallback)((() => {
                            if (!X.current) return;
                            X.current.activeChart().getAllStudies().filter((({
                                name: e
                            }) => "Volume" !== e)).forEach((({
                                id: e
                            }) => Q(e)))
                        }), [Q]),
                        ee = (0, P.useCallback)((() => {
                            setTimeout((() => {
                                if (!X.current) return;
                                const e = X.current.activeChart().getAllStudies();
                                Q(e[0] ? .id), q()
                            }), 0)
                        }), [Q, q]),
                        te = (0, P.useCallback)((() => {
                            f ? .(!0), B ? .(), J()
                        }), [J, f, B]),
                        ie = (0, P.useCallback)((() => {
                            f ? .(!0), E ? .()
                        }), [E, f]),
                        re = (0, P.useCallback)((() => {
                            f ? .(!1), R(), L ? .(), J()
                        }), [J, R, L, f]),
                        oe = (0, P.useCallback)((() => {
                            f ? .(!1), R(), D ? .()
                        }), [R, D, f]),
                        se = (0, P.useCallback)((({
                            from: e,
                            to: t
                        }) => {
                            V ? .({
                                startTime: 1e3 * e,
                                endTime: 1e3 * t
                            })
                        }), [V]),
                        ne = (0, P.useCallback)((async () => {
                            A ? .();
                            const e = await x(),
                                t = (({
                                    tradingViewSave: e,
                                    styles: t
                                }, {
                                    symbol: i,
                                    interval: r,
                                    theme: o = "Dark",
                                    library_path: s,
                                    custom_css_url: n = "./themed.css",
                                    locale: a = "en",
                                    overrides: l,
                                    debug: c = !1,
                                    time_frames: d = [],
                                    autosize: h = !0,
                                    toolbar_bg: u = "transparent",
                                    studies_overrides: g,
                                    loading_screen: p,
                                    enabled_features: m = _t,
                                    disabled_features: x = Pt,
                                    ...f
                                }) => {
                                    let y = "Asia/Shanghai";
                                    try {
                                        y = Intl.DateTimeFormat().resolvedOptions().timeZone
                                    } catch (v) {}
                                    const b = Bt()(e);
                                    if (b)
                                        for (let C = 0; C < b.charts[0].panes.length; C++) b.charts[0].panes[C].sources[0].state.symbol = i, b.charts[0].panes[C].sources[0].state.interval = r;
                                    return { ...f,
                                        symbol: i,
                                        interval: r,
                                        timezone: y,
                                        theme: o,
                                        library_path: s,
                                        custom_css_url: n,
                                        locale: a,
                                        overrides: l,
                                        debug: c,
                                        time_frames: d,
                                        autosize: h,
                                        toolbar_bg: u,
                                        studies_overrides: g,
                                        loading_screen: p || {
                                            backgroundColor: t.overrides["paneProperties.background"]
                                        },
                                        enabled_features: m,
                                        disabled_features: x,
                                        saved_data: b || void 0
                                    }
                                })({
                                    tradingViewSave: e,
                                    styles: o
                                }, g);
                            try {
                                X.current = new window.TradingView.widget(t), y ? .(), X.current ? .onChartReady((async () => {
                                    if (!X.current) return w ? .();
                                    try {
                                        X.current.subscribe("onAutoSaveNeeded", q), X.current.subscribe("study", ee), X.current.chart().onDataLoaded().subscribe(null, re, !0), X.current.chart().onDataLoaded().subscribe(null, oe), X.current.chart().onSymbolChanged().subscribe(null, te), X.current.chart().onIntervalChanged().subscribe(null, ie), X.current.chart().onVisibleRangeChanged().subscribe(null, se), await Rt({
                                            tradingViewSave: e,
                                            theme: r,
                                            styles: o,
                                            seriesStyle: l,
                                            widget: X.current,
                                            onInitStudies: j
                                        }), Z.current && await Ot({
                                            widget: X.current,
                                            theme: $.current,
                                            styles: Y.current,
                                            onSave: p,
                                            onSetThemeDone: T
                                        }), setTimeout(J, 0), b ? .()
                                    } catch (t) {
                                        v ? .(t)
                                    }
                                }))
                            } catch (i) {
                                I ? .(i)
                            }
                        }), []);
                    return (0, P.useLayoutEffect)((() => {
                        if (window.TradingView) ne();
                        else {
                            const e = document.createElement("script");
                            e.src = `${g.library_path}charting_library.js`, e.async = !1, e.addEventListener("load", ne), e.addEventListener("error", (e => S ? .(e))), document.head.appendChild(e)
                        }
                    }), []), (0, Et.A)((() => {
                        X.current && (X.current ? .remove(), X.current = void 0, C ? .())
                    })), (0, jt.A)((() => {
                        if (0 !== O && X.current) try {
                            N.current ? .forEach((e => e.remove())), N.current = (({
                                widget: e,
                                shapes: t,
                                styles: i
                            }) => t.map((t => (({
                                widget: e,
                                order: {
                                    id: t,
                                    text: i,
                                    price: r,
                                    quantity: o,
                                    isBuy: s,
                                    tooltip: n = "",
                                    modifyTooltip: a = "",
                                    cancelTooltip: l = "",
                                    editable: c,
                                    onMove: d,
                                    onModify: h,
                                    onCancel: u
                                },
                                styles: g
                            }) => {
                                const p = s ? g.originalTheme ? .colors ? .buy : g.originalTheme ? .colors ? .sell,
                                    m = e.chart().createOrderLine({}).setText(i).setPrice(r).setQuantity(o).setTooltip(n).setModifyTooltip(a).setCancelTooltip(l).setEditable(c).setExtendLeft(!1).setLineLength(65).setLineStyle(2).setLineColor(p).setBodyFont("normal 14pt Verdana").setQuantityFont("normal 14pt Verdana").setBodyBorderColor(p).setBodyBackgroundColor(p).setBodyTextColor(g.originalTheme ? .colors ? .t ? .primary).setQuantityBorderColor(g.originalTheme ? .colors ? .line).setQuantityBackgroundColor(g.originalTheme ? .colors ? .popupBg).setQuantityTextColor(g.originalTheme ? .colors ? .t ? .secondary).setCancelButtonBorderColor(g.originalTheme ? .colors ? .line).setCancelButtonBackgroundColor(g.originalTheme ? .colors ? .popupBg).setCancelButtonIconColor(g.originalTheme ? .colors ? .t ? .secondary);
                                return m.onModify((() => h({
                                    id: t,
                                    text: m.getText(),
                                    price: m.getPrice(),
                                    quantity: m.getQuantity()
                                }))).onMove((() => d({
                                    id: t,
                                    text: m.getText(),
                                    price: m.getPrice(),
                                    quantity: m.getQuantity()
                                }))).onCancel((() => u({
                                    id: t,
                                    text: m.getText(),
                                    price: m.getPrice(),
                                    quantity: m.getQuantity()
                                }))), m
                            })({
                                widget: e,
                                order: t,
                                styles: i
                            }))))({
                                widget: X.current,
                                styles: o,
                                shapes: s
                            })
                        } catch (e) {
                            m ? .(e)
                        }
                    }), [O, s, o]), (0, jt.A)((() => {
                        if (0 !== O && X.current) try {
                            F.current ? .forEach((e => e.remove())), F.current = (({
                                widget: e,
                                shapes: t,
                                styles: i
                            }) => t.map((t => (({
                                widget: e,
                                position: {
                                    text: t,
                                    price: i,
                                    PNL: r,
                                    quantity: o,
                                    tooltip: s
                                },
                                styles: n
                            }) => {
                                const a = +o > 0 ? n.originalTheme ? .colors ? .buy : n.originalTheme ? .colors ? .sell,
                                    l = r > 0 ? n.originalTheme ? .colors ? .buy : r < 0 ? n.originalTheme ? .colors ? .sell : a;
                                return e.chart().createPositionLine({}).setText(t).setPrice(i).setQuantity(o).setTooltip(s).setExtendLeft(!1).setLineLength(100).setLineStyle(2).setLineColor(l).setBodyFont("normal 14pt Verdana").setQuantityFont("normal 14pt Verdana").setBodyBorderColor(l).setBodyBackgroundColor(l).setBodyTextColor(n.originalTheme ? .colors ? .t ? .primary).setQuantityBorderColor(a).setQuantityBackgroundColor(n.originalTheme ? .colors ? .popupBg).setQuantityTextColor(n.originalTheme ? .colors ? .t ? .primary)
                            })({
                                widget: e,
                                position: t,
                                styles: i
                            }))))({
                                widget: X.current,
                                styles: o,
                                shapes: n
                            })
                        } catch (e) {
                            m ? .(e)
                        }
                    }), [O, n, o]), (0, jt.A)((() => {
                        if (0 !== O && X.current) try {
                            z.current ? .forEach((e => e.remove())), z.current = (({
                                widget: e,
                                shapes: t,
                                styles: i
                            }) => t.map((t => (({
                                widget: e,
                                executionShape: {
                                    price: t,
                                    time: i,
                                    text: r,
                                    tooltip: o,
                                    isBuy: s
                                },
                                styles: n
                            }) => {
                                const a = s ? n.originalTheme ? .colors ? .buy : n.originalTheme ? .colors ? .sell;
                                return e.chart().createExecutionShape({}).setPrice(t).setTime(i).setDirection(s ? "buy" : "sell").setText(r).setTooltip(o).setArrowHeight(8).setArrowSpacing(1).setArrowColor(a).setTextColor(n.originalTheme ? .colors ? .t ? .primary).setFont("normal 14pt Verdana")
                            })({
                                widget: e,
                                executionShape: t,
                                styles: i
                            }))))({
                                widget: X.current,
                                styles: o,
                                shapes: a
                            })
                        } catch (e) {
                            m ? .(e)
                        }
                    }), [O, a, o]), (0, jt.A)((() => {
                        d && X.current && Ht({
                            widget: X.current,
                            seriesStyle: l
                        })
                    }), [l]), (0, jt.A)((() => {
                        d && X.current && M ? .(e)
                    }), [d, M, e]), (0, jt.A)((() => {
                        d && X.current && (({
                            widget: e,
                            symbol: t,
                            interval: i,
                            onDone: r = () => null
                        }) => {
                            e.setSymbol(t, i, (() => {
                                e.activeChart().symbol() !== t ? e.setSymbol(t, i, r) : r()
                            }))
                        })({
                            widget: X.current,
                            symbol: e,
                            interval: i
                        })
                    }), [e, i]), (0, P.useEffect)((() => {
                        d && X.current && Ot({
                            widget: X.current,
                            theme: r,
                            styles: o,
                            onSetThemeDone: k,
                            onSave: p
                        })
                    }), [K, d, r, o, p]), (0, jt.A)((() => {
                        d && X.current && (e => {
                            e.chart().executeActionById("insertIndicator")
                        })(X.current)
                    }), [c]), (0, P.useImperativeHandle)(u, (() => X.current)), (0, _.jsx)(W.A, {
                        id: g.container_id,
                        style: {
                            height: "100%"
                        }
                    })
                },
                Wt = e => {
                    (0, I.A)((() => {
                        console.warn("[trade-widget] the component has been deprecated. Please use Chart/containers/TradingViewTP27 instead.")
                    }));
                    const [t, i] = (0, P.useState)(!1), r = (0, P.useMemo)((() => Bt()(e.initialConfig)), []), o = (0, P.useCallback)((() => {
                        i(!0), r.onChartReadyDone ? .()
                    }), [r]), s = { ...e,
                        isChartReady: t,
                        initialConfig: { ...r,
                            onChartReadyDone: o
                        }
                    };
                    return (0, _.jsxs)(W.A, {
                        sx: {
                            height: "100%",
                            position: "relative"
                        },
                        children: [(0, _.jsx)(Nt, { ...s
                        }), !t && (0, _.jsx)(W.A, {
                            sx: {
                                height: "100%",
                                width: "100%",
                                background: e.styles.overrides["paneProperties.background"],
                                position: "absolute",
                                left: 0,
                                top: 0
                            },
                            children: (0, _.jsx)(de, {})
                        })]
                    })
                };
            var Ft = i("qFGl"),
                zt = i.n(Ft),
                Xt = i("9YZR");
            const Ut = {
                    line: "LINE",
                    histogram: "BAR",
                    area: "AREA",
                    point: "POINT",
                    cross: "CROSSLINE"
                },
                Gt = {
                    int: "INT",
                    float: "FLOAT",
                    source: "SOURCE"
                },
                $t = (e, t) => {
                    const i = ((e, t) => {
                        let i, r = 0,
                            o = e.length;
                        for (; r < o;) {
                            i = Math.floor((o + r) / 2);
                            let s = t(e[i]);
                            if (s < 0 && (o = i), 0 === s) return i;
                            s > 0 && (r = i + 1)
                        }
                        return i = Math.floor((o + r) / 2), i
                    })(e, (e => {
                        const {
                            time: i
                        } = e;
                        return t - i
                    }));
                    return e[i] && e[i].time === t ? e[i] : void 0
                };
            const Yt = e => ({
                    defaultProps: {
                        id: "",
                        title: "",
                        isCustom: !0,
                        isHistBase: !1,
                        isScaleCenter: !1
                    },
                    paramMetas: [],
                    getResult(t, i, r) {
                        let o = -1;
                        this.paramMetas = [], e.ChartInterface.Chart.input = e => (-1 === o && (this.paramMetas = []), o++, this.paramMetas.push({
                            key: `params${o}`,
                            label: e.title,
                            type: Gt[e.type],
                            defaultValue: e.defval
                        }), i[`params${o}`] || e.defval);
                        try {
                            e.runSync(t)
                        } catch (l) {
                            console.warn(l.message)
                        }
                        const s = [],
                            n = Bt()(e.ChartInterface.Chart && e.ChartInterface.Chart.plots) || {},
                            a = Bt()(e.ChartInterface.Chart && e.ChartInterface.Chart.fills) || [];
                        Object.keys(n).forEach((e => {
                            const i = n[e],
                                r = i.series || [],
                                [o] = ((e, t) => t.map((t => {
                                    const i = e.length - t.length;
                                    return t.map(((t, r) => ({
                                        time: e[r + i].time,
                                        value: t
                                    })))
                                })))(t, [r]),
                                l = Ut[i.style];
                            switch (l) {
                                case "POINT":
                                case "AREA":
                                case "BAR":
                                case "LINE":
                                    Object.keys(a).forEach((e => {
                                        const t = a[e]; - 1 !== t.data.indexOf(i.id) && (t.source || (t.source = []), t.source.push(o))
                                    }));
                                case "CROSSLINE":
                                    s.push({
                                        data: o,
                                        colors: i.color,
                                        transp: i.transp || 0,
                                        chartType: l,
                                        lineWidth: i.linewidth,
                                        histBase: i.histbase,
                                        zIndex: 1
                                    })
                            }
                        })), Object.keys(a).forEach((e => {
                            const t = a[e];
                            s.push({
                                data: t.source[0],
                                borderData: t.source[1],
                                colors: t.color,
                                transp: t.transp || 0,
                                type: "nolabel",
                                chartType: "AREA",
                                zIndex: 1
                            })
                        })), r(s)
                    },
                    updateResult(t, i, r, o) {
                        if (!o) return;
                        try {
                            e.update(o)
                        } catch (a) {
                            console.warn(a)
                        }
                        const s = Bt()(i),
                            n = Bt()(e.ChartInterface.Chart && e.ChartInterface.Chart.plots) || {};
                        try {
                            Object.keys(n).forEach(((e, i) => {
                                const r = n[e];
                                s[i].data[t] = s[i].data[t] || {}, s[i].data[t].time = o.time, s[i].data[t].value = r.series[t], s[i].colors = r.color
                            }))
                        } catch (l) {
                            console.warn(l)
                        }
                        return s
                    },
                    getLabel({
                        time: e,
                        results: t,
                        params: i
                    }) {
                        const r = [];
                        return 0 === this.paramMetas.length ? r.push({
                            label: `${this.defaultProps.title||""}()`,
                            key: "title",
                            styles: {
                                paddingRight: "0px"
                            }
                        }) : r.push({
                            label: `${this.defaultProps.title||""}(`,
                            key: "title",
                            styles: {
                                paddingRight: "0px"
                            }
                        }), this.paramMetas.forEach(((e, t) => {
                            const o = this.paramMetas.find((e => e.key === `params${t}`)) ? .defaultValue;
                            r.push({
                                label: t === this.paramMetas.length - 1 ? `${i[`params${t}`]||o})` : `${i[`params${t}`]||o}`,
                                key: `${t}`
                            })
                        })), t.forEach((({
                            data: t,
                            colors: o,
                            type: s
                        }, n) => {
                            if (!e) return;
                            const a = t.findIndex((t => t.time === e)),
                                l = $t(t, e);
                            if (l && "nolabel" !== s) {
                                const e = `${c=l.value,d=i.precision,void 0!==d?Number(isNaN(c)?NaN:c?.toFixed(d)):c}`;
                                r.push({
                                    label: e,
                                    key: `CUSTOM${n}`,
                                    styles: {
                                        color: o ? .[a]
                                    }
                                })
                            }
                            var c, d
                        })), r
                    },
                    getMobileLabel: () => []
                }),
                Zt = ({
                    bizType: e,
                    symbolDisplay: t
                }) => {
                    window.open(`binance://customindicator/${e}/workspace/${t}`)
                },
                Kt = (e, t) => {
                    try {
                        return JSON.parse(e)
                    } catch {
                        return t || e
                    }
                };
            const qt = async ({
                    candleRef: e,
                    symbolDisplayRef: t,
                    bizType: i,
                    setMessageInfo: r,
                    storedData: o,
                    electron: s,
                    enabled: n,
                    compiler: a
                }) => {
                    if (!n || !s || !e.current) return;
                    try {
                        await (({
                            checker: e,
                            interval: t = 1e3,
                            timeout: i = 1e4
                        }) => {
                            let r;
                            return Promise.race([new Promise((i => {
                                r = setInterval((() => e() && i()), t)
                            })), new Promise(((e, t) => {
                                setTimeout((() => t(new Error("timeout"))), i)
                            }))]).finally((() => clearInterval(r)))
                        })({
                            checker: () => !!a
                        })
                    } catch (x) {
                        console.error(`Compiler module not found ${x.message}`)
                    }
                    if (!a) return;
                    const l = new a,
                        c = e.current ? .getCandlestick();
                    let d, h;
                    const u = () => {
                            l.Errors ? .length <= 0 || r({
                                message: "Failed to compile custom indicator, please check your code!",
                                variant: "error",
                                autoHideDuration: 3500
                            })
                        },
                        g = await (s ? .storage.getItem("customIndicatorFiles")),
                        p = Kt(g);
                    p && (d = p, Object.entries(d).forEach((([e, t]) => {
                        const i = t.id || `@${e}_v1`;
                        c ? .registerCustomIndicator(i, {
                            defaultProps: {
                                isCustom: !0,
                                id: i,
                                title: e
                            }
                        })
                    })));
                    const m = function(e) {
                        const t = e.length;
                        return function i(r) {
                            if (r >= t) return null;
                            const {
                                indicators: o
                            } = e[r];
                            return o ? .find((e => e.isCustom)) || i(r + 1)
                        }(0)
                    }(o || []);
                    if (m) {
                        const {
                            id: e,
                            name: t,
                            type: i
                        } = m, r = p[i] || p[t];
                        if (r) {
                            const {
                                code: i
                            } = r;
                            try {
                                l.compile(i), u(), l.runOnce();
                                const r = Yt(l),
                                    o = l.ChartInterface ? .Chart;
                                o.study && (r.defaultProps = { ...r.defaultProps,
                                    isHistBase: o.study.overlay || !1,
                                    title: t || o.study.title || "",
                                    isScaleCenter: !0,
                                    isCustom: !0,
                                    id: e
                                }), c ? .registerCustomIndicator(e, r), c ? .addIndicatorByName(e), h = e
                            } catch (x) {
                                console.error(x)
                            }
                        }
                    }
                    c ? .registerCustomIndicatorCallback({
                        onAdd: async () => {
                            const e = await (s ? .storage.getItem("customIndicatorPassFiles")),
                                r = Kt(e, {}),
                                o = Object.keys(r);
                            if (o.find((e => e.startsWith("untitled-")))) {
                                const e = Math.max.apply(null, o.filter((e => e.startsWith("untitled-"))).map((e => +e.split("-")[1])));
                                await (s ? .storage.setItem("customIndicatorCurFileName", `untitled-${e+1}`))
                            } else o.find((e => e.startsWith("untitled"))) ? await (s ? .storage.setItem("customIndicatorCurFileName", "untitled-1")) : await (s ? .storage.setItem("customIndicatorCurFileName", "untitled"));
                            Zt({
                                symbolDisplay: t.current,
                                bizType: i
                            })
                        },
                        onEdit: async ({
                            name: e
                        }) => {
                            await (s ? .storage.setItem("customIndicatorCurFileName", e)), Zt({
                                symbolDisplay: t.current,
                                bizType: i
                            })
                        },
                        async onRemove(e) {
                            c.removeCustomIndicatorByName(e);
                            const t = await (s ? .storage.getItem("customIndicatorFiles")),
                                i = Kt(t, {}),
                                r = Object.fromEntries(Object.entries(i).filter((([t, i]) => (i.id || `@${t}_v1`) !== e)));
                            await (s ? .storage.setItem("customIndicatorFiles", JSON.stringify(r)))
                        }
                    }), c ? .on("customIndicatorClick", (({
                        data: {
                            name: e,
                            id: t
                        }
                    }) => {
                        c.closeIndicatorByName(h);
                        const {
                            code: i = ""
                        } = d ? .[e] || d ? .[t] || {};
                        try {
                            l.compile(i), u(), l.runOnce();
                            const r = Yt(l),
                                o = l.ChartInterface.Chart;
                            o.study && (r.defaultProps = { ...r.defaultProps,
                                isHistBase: o.study.overlay || !1,
                                title: e || o.study.title || "",
                                isScaleCenter: !0,
                                isCustom: !0,
                                id: t
                            }), c.registerCustomIndicator(t, r), c.addIndicatorByName(t), h = t
                        } catch (x) {
                            console.error(x)
                        }
                    }))
                },
                Qt = ({
                    klineOptions: e,
                    showIndicatorMenu: t,
                    customIndicators: i = [],
                    electronShortcutOptions: r = {
                        symbol: "",
                        value: "",
                        options: [],
                        setInterval: () => null,
                        setChartType: () => null,
                        enabled: !1
                    },
                    userDefinedIndicatorOptions: o = {
                        getNextChartTick: () => null,
                        setMessageInfo: () => null,
                        symbolDisplay: "",
                        bizType: "",
                        enabled: !1,
                        compiler: null,
                        electron: {}
                    }
                }, s) => {
                    (0, I.A)((() => {
                        console.warn("[trade-widget] the component has been deprecated, please switch the to Chart/containers/BasicKline instead.")
                    }));
                    const n = (0, P.useRef)(null),
                        a = (0, P.useRef)(null),
                        l = (0, P.useRef)(o ? .symbolDisplay);
                    l.current = o ? .symbolDisplay, (0, P.useEffect)((() => {}), []), (0, P.useImperativeHandle)(s, (() => ({
                        getCandlestick: () => n.current ? .getCandlestick(),
                        registerColorTable: () => null
                    }))), (0, jt.A)((() => {
                        n.current ? .getCandlestick ? .() ? .showIndicatorsDialog()
                    }), [t]), (({
                        candlestick: e,
                        options: t,
                        symbol: i,
                        value: r,
                        setInterval: o,
                        setChartType: s,
                        electron: n,
                        enabled: a
                    }) => {
                        const [l, c] = (0, P.useState)(!1), d = (0, P.useCallback)((e => {
                            e.preventDefault(), e.stopPropagation()
                        }), []), h = (0, P.useCallback)((() => c(!0)), [c]), u = (0, P.useCallback)((e => t => {
                            t.target ? .matches(".focus-area") || t.composedPath().some((t => e.includes(t))) || c(!1)
                        }), [c]), g = (0, P.useCallback)((t => {
                            if (l) switch (t.key) {
                                case "+":
                                case "ArrowUp":
                                    e ? .zoomIn(), d(t);
                                    break;
                                case "-":
                                case "ArrowDown":
                                    e ? .zoomOut(), d(t);
                                    break;
                                case "ArrowLeft":
                                    e ? .goForward(), d(t);
                                    break;
                                case "ArrowRight":
                                    e ? .goNext(), d(t)
                            }
                        }), [d, l, e]), p = (0, P.useCallback)((() => {
                            const e = t.indexOf(r) + 1,
                                i = t[e % t.length];
                            o("Time" === i ? "1m" : i), s("Time" === i ? Xt.NB.Line : Xt.NB.CandleBar)
                        }), [r, t, o, s]);
                        (0, P.useEffect)((() => {
                            if (!a || !n) return;
                            const e = document.querySelectorAll(".focus-area"),
                                t = u(Array.from(e));
                            e.forEach((e => e.addEventListener("click", h))), document.addEventListener("click", t), document.addEventListener("keydown", g);
                            const i = n.registerActionHandle((({
                                name: e
                            }) => {
                                l && e === n.constants.ACTION_K_LINE_SWITCH_PERIOD && p()
                            }));
                            return () => {
                                i(), e ? .forEach((e => e.removeEventListener("click", h))), document.removeEventListener("click", t), document.removeEventListener("keydown", g)
                            }
                        }), [l, i, d, h, u, g, p, n, a])
                    })({ ...r,
                        candlestick: n.current ? .getCandlestick()
                    });
                    const c = e.beforeChartReady,
                        d = (0, P.useCallback)((() => (({
                            customIndicators: e,
                            candleRef: t
                        }) => {
                            e.forEach((({
                                name: e,
                                indicator: i
                            }) => {
                                t.current ? .getCandlestick ? .() ? .registerCustomIndicator(e, i)
                            }))
                        })({
                            candleRef: n,
                            customIndicators: i
                        })), [i]),
                        h = (0, P.useCallback)((e => qt({ ...o,
                            symbolDisplayRef: l,
                            compiler: a.current,
                            enabled: !1,
                            storedData: e.storedData,
                            candleRef: n
                        })), [o]),
                        u = (0, P.useCallback)((async e => {
                            await (c ? .(e)), d(), await h(e)
                        }), [d, h, c]),
                        g = (0, P.useMemo)((() => zt()(u)), []);
                    return (0, _.jsx)(Xt.mE, {
                        style: {
                            width: "100%",
                            height: "100%",
                            position: "relative"
                        },
                        ...e,
                        beforeChartReady: g,
                        ref: n
                    })
                },
                Jt = (0, P.forwardRef)(Qt),
                ei = ({
                    promptText: e,
                    buttonText: t,
                    onClick: i
                }) => ((0, I.A)((() => {
                    console.warn("[trade-widget] the component has been deprecated.")
                })), (0, _.jsxs)(V.A, {
                    sx: {
                        flexDirection: "column",
                        px: "4px",
                        py: "4px"
                    },
                    children: [(0, _.jsx)(H.A, {
                        sx: {
                            color: "bg5",
                            fontSize: "14px"
                        },
                        children: e
                    }), (0, _.jsx)(V.A, {
                        sx: {
                            justifyContent: "flex-end",
                            marginTop: "10px"
                        },
                        children: (0, _.jsx)(G.A, {
                            onClick: i,
                            sx: {
                                borderRadius: "12px",
                                bg: "t.white",
                                backgroundImage: "none",
                                color: "bg5",
                                minWidth: "62px",
                                height: "24px"
                            },
                            children: t
                        })
                    })]
                }));
            var ti = i("BmHO"),
                ii = i.n(ti),
                ri = i("T0Sc"),
                oi = i("zHUU"),
                si = i("z9eP"),
                ni = i("7asw");
            var ai = i("Ov3/"),
                li = i("hufm");
            const ci = "myTradingView",
                di = e => (0, P.useMemo)((() => ii().createInstance({
                    name: e
                })), [e]),
                hi = ({
                    tradingViewProps: e,
                    namespace: t,
                    theme: i,
                    storageName: r = ci,
                    containerId: o = `${t}-tradingview`
                }) => {
                    (0, I.A)((() => {
                        console.warn("[trade-widget] the component has been deprecated. Please use Chart/containers/TradingViewTP27 instead.")
                    }));
                    const s = (0, C.createStore)(t),
                        n = (0, w.createStore)(t),
                        a = (0, ni.y)(t),
                        l = (0, P.useRef)(),
                        c = di(t),
                        [d] = s(C.getInterval),
                        h = s(C.getTrueInterval),
                        [u] = s(C.getActiveTab),
                        [g] = s(C.getTvChartStyle),
                        [p] = s(C.getShowLimitOrder),
                        [m] = s(C.getShowPositionOrder),
                        [x] = s(C.getShowExecutionOrder),
                        [, f] = a(ni.N),
                        [, y] = n(w.getTradingViewReference),
                        {
                            getI18n: b
                        } = (0, ri.o)("", "kline-ui"),
                        v = (0, oi.Bl)(),
                        A = (0, P.useMemo)((() => (e => {
                            switch (e) {
                                case "zh-CN":
                                case "cn":
                                    return "zh";
                                case "zh-HK":
                                case "zh-TW":
                                case "zh-TC":
                                case "tw":
                                    return "zh_TW";
                                case "ja":
                                    return "ja";
                                case "ko":
                                    return "ko";
                                case "th":
                                    return "th";
                                case "he":
                                    return "he_IL";
                                case "ru":
                                    return "ru";
                                case "cs":
                                    return "cs";
                                case "sv":
                                    return "sv";
                                case "vi":
                                case "vn":
                                    return "vi";
                                case "tr":
                                    return "tr";
                                case "ro":
                                    return "ro";
                                case "pt-PT":
                                case "pt-BR":
                                case "pt":
                                    return "pt";
                                case "pl":
                                    return "pl";
                                case "nl":
                                    return "nl_NL";
                                case "it":
                                    return "it";
                                case "fr":
                                    return "fr";
                                case "es":
                                case "es-LA":
                                    return "es";
                                case "de":
                                    return "de";
                                case "id":
                                    return "id_ID";
                                default:
                                    return "en"
                            }
                        })(v)), [v]),
                        S = (0, P.useMemo)((() => b("order-drag-tooltip", {
                            defaultValue: "Drag for price modify"
                        }) || ""), [b]),
                        T = (0, P.useMemo)((() => b("order-modify-tooltip", {
                            defaultValue: "Click for modify"
                        }) || ""), [b]),
                        L = (0, P.useMemo)((() => b("order-cancel-tooltip", {
                            defaultValue: "Click for cancel"
                        }) || ""), [b]),
                        D = (0, P.useMemo)((() => e.limitOrders.map((e => ({ ...e,
                            tooltip: e.tooltip || S,
                            modifyTooltip: e.modifyTooltip || T,
                            cancelTooltip: e.cancelTooltip || L
                        })))), [L, S, T, e.limitOrders]),
                        {
                            onSetThemeDone: V,
                            overwritingThemeOnLoaded: M
                        } = (({
                            namespace: e
                        }) => {
                            const {
                                getThemeCounter: t
                            } = (0, li.DP)(), [i, r] = (0, ai.A)(`${e}_tvThemeCounter`, 0), [o, s] = (0, P.useState)(-1), n = (0, P.useCallback)((() => s(t())), [t]);
                            (0, I.A)((() => n())), (0, jt.A)((() => n()));
                            const a = (0, P.useCallback)((() => {
                                    r(t())
                                }), [t, r]),
                                l = (0, P.useMemo)((() => -1 !== o), [o]);
                            return {
                                onSetThemeDone: a,
                                overwritingThemeOnLoaded: (0, P.useMemo)((() => l && o !== i), [l, o, i])
                            }
                        })({
                            namespace: t
                        }),
                        B = (0, P.useMemo)((() => It(i)), [i]),
                        E = (0, P.useMemo)((() => `${t}-${o}`), [o, t]),
                        j = (0, P.useMemo)((() => d === C.DisplayIntervals.Time ? C.SeriesStyle.Line : g), [d, g]),
                        O = (0, P.useMemo)((() => k.TrueIntervalToTVResolution[h]), [h]),
                        H = (0, P.useCallback)((async t => {
                            await c.setItem(r, t), await (e.initialConfig.onSave ? .(t))
                        }), [c, r, e.initialConfig]),
                        R = (0, P.useCallback)((async () => {
                            const t = await c.getItem(r);
                            return e.initialConfig.onLoadConfig ? .(), t
                        }), [c, r, e.initialConfig]),
                        N = (0, P.useCallback)((t => {
                            f(t), e.initialConfig.onLoading ? .(t)
                        }), [f, e.initialConfig]),
                        F = (0, P.useCallback)((() => {
                            y(l.current), e.initialConfig.onChartReadyDone ? .()
                        }), [y, e.initialConfig]),
                        z = (0, P.useCallback)((() => {
                            V(), e.initialConfig.onSetThemeDone ? .()
                        }), [V, e.initialConfig]),
                        X = (0, P.useCallback)((() => {
                            V(), e.initialConfig.onFirstTimeSetThemeDone ? .()
                        }), [V, e.initialConfig]),
                        U = (0, P.useCallback)((({
                            widget: e,
                            tradingViewSave: t
                        }) => {
                            t || (e.chart().createStudy("Moving Average", !1, !1, [7], {
                                "plot.linewidth": 1,
                                "plot.color": "rgba(241, 156, 56, 0.7)",
                                precision: 8
                            }), e.chart().createStudy("Moving Average", !1, !1, [25], {
                                "plot.linewidth": 1,
                                "plot.color": "rgba(234, 61, 247, 0.7)",
                                precision: 8
                            }), e.chart().createStudy("Moving Average", !1, !1, [99], {
                                "plot.linewidth": 1,
                                "plot.color": "rgba(116, 252, 253, 0.7)",
                                precision: 8
                            }))
                        }), []),
                        G = (0, P.useMemo)((() => e.initialConfig.onInitStudies || U), [U, e.initialConfig.onInitStudies]),
                        {
                            showError: $,
                            mainText: Y,
                            buttonText: Z,
                            buttonCallback: K,
                            onScriptLoadingError: q,
                            onTradingViewInitError: Q,
                            onChartReadyError: J
                        } = (({
                            storage: e,
                            storageName: t
                        }) => {
                            const {
                                getI18n: i
                            } = (0, ri.o)("", "trade-ui"), r = (0, P.useMemo)((() => i("trd-chart-tv-load-timeout", {
                                defaultValue: "Failed to load TradingView due to network issues."
                            }) || ""), [i]), o = (0, P.useMemo)((() => i("trd-chart-tv-initialization-error", {
                                defaultValue: "Something went wrong while initializing TradingView."
                            }) || ""), [i]), s = (0, P.useMemo)((() => i("trd-chart-crash-reload", {
                                defaultValue: "Refresh"
                            }) || ""), [i]), n = (0, P.useMemo)((() => i("trd-chart-init-error", {
                                defaultValue: "Failed to initialize TradingView due to malformed config, please try to refresh"
                            }) || ""), [i]), a = (0, P.useCallback)((() => window.location.reload()), []), l = (0, P.useCallback)((async () => {
                                await e.removeItem(t), a()
                            }), [a, e, t]), [c, d] = (0, P.useState)(!1), [h, u] = (0, P.useState)(""), [g, p] = (0, P.useState)(""), [m, x] = (0, P.useState)((async () => {}));
                            return {
                                showError: c,
                                mainText: h,
                                buttonText: g,
                                buttonCallback: m,
                                onScriptLoadingError: (0, P.useCallback)((() => {
                                    d(!0), u(r), p(s), x(a)
                                }), [r, s, a]),
                                onTradingViewInitError: (0, P.useCallback)((() => {
                                    d(!0), u(n), p(s), x(l)
                                }), [l, s, n]),
                                onChartReadyError: (0, P.useCallback)((() => {
                                    d(!0), u(o), p(s), x(a)
                                }), [o, s, a])
                            }
                        })({
                            storage: c,
                            storageName: r
                        });
                    return $ ? (0, _.jsx)(ye, {
                        mainText: Y,
                        btnText: Z,
                        resetErrorBoundary: K
                    }) : (0, _.jsx)(W.A, {
                        sx: {
                            height: "100%",
                            display: u !== C.Tabs.TradingView ? "none" : "block"
                        },
                        children: (0, _.jsx)(Wt, { ...e,
                            interval: O,
                            styles: B,
                            limitOrders: p ? D : [],
                            positionOrders: m ? e.positionOrders : [],
                            executionOrders: x ? e.executionOrders : [],
                            seriesStyle: j,
                            widget: l,
                            overwritingThemeOnLoaded: M,
                            initialConfig: { ...e.initialConfig,
                                tvConfig: { ...e.initialConfig.tvConfig,
                                    container_id: E,
                                    interval: O,
                                    locale: A
                                },
                                onSave: H,
                                onLoadConfig: R,
                                onLoading: N,
                                onChartReadyDone: F,
                                onChartReadyError: J,
                                onScriptLoadingError: q,
                                onTradingViewInitError: Q,
                                onFirstTimeSetThemeDone: X,
                                onSetThemeDone: z,
                                onInitStudies: G
                            }
                        })
                    })
                },
                ui = {
                    DefaultTVEnabledFeatures: _t,
                    DefaultTVDisabledFeatures: Pt,
                    DefaultTVStorageName: ci,
                    Containers: {
                        TradingView: ({
                            errorBoundaryProps: e,
                            ...t
                        }) => {
                            const {
                                namespace: i
                            } = t, {
                                getI18n: r
                            } = (0, ri.o)("", "trade-ui"), o = di(i), s = (0, P.useMemo)((() => r("trd-chart-crash-info", {
                                defaultValue: "Something is wrong with the chart."
                            }) || ""), [r]), n = (0, P.useMemo)((() => r("trd-chart-crash-refresh", {
                                defaultValue: "Refresh"
                            }) || ""), [r]), a = (0, P.useCallback)((() => {
                                o.removeItem("myTradingView"), e ? .onReset ? .()
                            }), [e, o]);
                            return (0, _.jsx)(si.A, { ...e,
                                name: "trading_view",
                                FallbackComponent: ({
                                    resetErrorBoundary: e
                                }) => (0, _.jsx)(ye, {
                                    mainText: s,
                                    btnText: n,
                                    resetErrorBoundary: e
                                }),
                                onReset: a,
                                children: (0, _.jsx)(hi, { ...t
                                })
                            })
                        }
                    },
                    getDepthChartStyles: (e, t) => ({
                        tag: t,
                        background: e ? .colors ? .background,
                        d1: {
                            lineColor: e ? .colors ? .sell,
                            fillColor: (0, X.N)(e ? .colors ? .sell, .1)
                        },
                        d2: {
                            lineColor: e ? .colors ? .buy,
                            fillColor: (0, X.N)(e ? .colors ? .buy, .1)
                        },
                        hoverBgColor: (0, X.N)(e ? .colors ? .newLine, .4),
                        textColor: e ? .colors ? .t ? .third
                    }),
                    getTradingViewNextStyles: It,
                    createDatafeed: () => {
                        const e = new Map;
                        let t = {},
                            i = [],
                            r = {
                                onReady: () => null,
                                resolveSymbol: () => null,
                                searchSymbols: () => null,
                                getBars: () => null,
                                subscribeBars: () => null,
                                unsubscribeBars: () => null
                            };
                        return ({
                            config: o,
                            onSymbolResolved: s,
                            onFetchSymbolsInfo: n,
                            onFetchBars: a,
                            onSubscribeBars: l,
                            onUnsubscribeBars: c,
                            onFetchServerTimeApi: d,
                            onTransformSymbolInfo: h = ({
                                template: e
                            }) => e
                        }) => (r = {
                            onReady: e => {
                                setTimeout((async () => {
                                    t = await n(), i = Object.keys(t).map((e => {
                                        const {
                                            ticker: i,
                                            name: r,
                                            fullName: o,
                                            description: s = "",
                                            exchange: n = "",
                                            type: a = ""
                                        } = t[e];
                                        return {
                                            symbol: r,
                                            ticker: i,
                                            full_name: o,
                                            description: s,
                                            exchange: n,
                                            type: a
                                        }
                                    })), e({
                                        exchanges: [],
                                        symbols_types: [],
                                        supported_resolutions: Vt,
                                        supports_marks: !1,
                                        supports_timescale_marks: !1,
                                        supports_time: !0,
                                        ...o
                                    })
                                }))
                            },
                            resolveSymbol: (e, i, r) => {
                                const o = t[e];
                                if (!o) return void r(`cannot resolve symbol - ${e}`);
                                const n = h({
                                    info: o,
                                    template: {
                                        description: o.description || "",
                                        fractional: !1,
                                        has_seconds: !0,
                                        seconds_multipliers: ["1"],
                                        has_intraday: !0,
                                        has_daily: !0,
                                        has_weekly_and_monthly: !0,
                                        minmov: 1,
                                        minmove2: 0,
                                        name: o.name,
                                        full_name: o.fullName,
                                        ticker: o.ticker,
                                        timezone: "Etc/UTC",
                                        pricescale: o.tickSize,
                                        session: "24x7",
                                        type: o.type || "",
                                        exchange: o.exchange || "",
                                        listed_exchange: o.exchange || "",
                                        format: "price",
                                        supported_resolutions: o.supportedResolutions || Vt
                                    }
                                });
                                setTimeout((() => {
                                    i(n), s ? .(n)
                                }))
                            },
                            searchSymbols: (e, t, r, o) => {
                                const s = new RegExp(e, "i"),
                                    n = new RegExp(t, "i"),
                                    a = new RegExp(r, "i");
                                o(i.filter((({
                                    symbol: e,
                                    ticker: t,
                                    full_name: i,
                                    description: r = "",
                                    exchange: o = "",
                                    type: l = ""
                                }) => [e, t, i, r].some((e => s.test(e))) && n.test(o) && a.test(l))))
                            },
                            getBars: async (e, t, i, r, o, s) => {
                                let n = [];
                                try {
                                    r >= 0 && (n = await a({
                                        symbolInfo: e,
                                        resolution: t,
                                        rangeStartDate: i,
                                        rangeEndDate: r
                                    })), o(n, {
                                        noData: 0 === n.length
                                    })
                                } catch (l) {
                                    s(l.toString())
                                }
                            },
                            subscribeBars: (t, i, r, o, s) => {
                                const n = l({
                                    symbolInfo: t,
                                    resolution: i,
                                    callback: r,
                                    onResetCacheNeededCallback: s
                                });
                                e.set(o, n)
                            },
                            unsubscribeBars: t => {
                                e ? .get(t) ? .(), e ? .delete(t), c ? .(t)
                            },
                            getServerTime: async e => {
                                try {
                                    e(await d())
                                } catch (t) {
                                    e(Date.now() / 1e3)
                                }
                            }
                        }, {
                            datafeed: r,
                            observers: e,
                            symbolsInfo: t
                        })
                    },
                    DefaultResolutions: Vt,
                    IntervalFilter: r,
                    OpeningCountdown: ae.OpeningCountdown,
                    OrderModificationModal: ({
                        visible: e,
                        priceField: t,
                        amountField: i,
                        submitText: r,
                        cancelText: o,
                        onSubmit: s,
                        onCancel: n
                    }) => ((0, I.A)((() => {
                        console.warn("[trade-widget] the component has been deprecated.")
                    })), (0, _.jsx)(mt.Ay.Modal, {
                        visible: e,
                        sx: {
                            minWidth: "288px",
                            height: "176px",
                            p: 0,
                            bg: "modalBg"
                        },
                        onMaskClick: n,
                        children: (0, _.jsxs)(V.A, {
                            sx: {
                                p: "16px",
                                flexDirection: "column",
                                "& > *:not(:last-child)": {
                                    marginBottom: "16px"
                                }
                            },
                            children: [(0, _.jsx)(W.A, {
                                children: (0, _.jsx)(xt.A, {
                                    variant: "filled",
                                    textAlign: "right",
                                    prefix: (0, _.jsx)(ft, {
                                        children: t.placeholder
                                    }),
                                    suffix: (0, _.jsx)(yt, {
                                        children: t.suffixText
                                    }),
                                    boxProps: {
                                        sx: {
                                            width: "100%",
                                            height: "40px",
                                            bg: "bg3"
                                        }
                                    },
                                    ...t
                                })
                            }), (0, _.jsx)(W.A, {
                                children: (0, _.jsx)(xt.A, {
                                    variant: "filled",
                                    textAlign: "right",
                                    prefix: (0, _.jsx)(ft, {
                                        children: i.placeholder
                                    }),
                                    suffix: (0, _.jsx)(yt, {
                                        children: i.suffixText
                                    }),
                                    boxProps: {
                                        sx: {
                                            width: "100%",
                                            height: "40px"
                                        }
                                    },
                                    ...i
                                })
                            }), (0, _.jsxs)(V.A, {
                                sx: {
                                    "& > *": {
                                        width: "100%",
                                        height: "32px"
                                    },
                                    "& > *:not(:last-child)": {
                                        marginRight: "8px"
                                    }
                                },
                                children: [(0, _.jsx)(G.A, {
                                    onClick: n,
                                    sx: {
                                        bg: "line",
                                        backgroundImage: "none",
                                        color: "t.primary",
                                        "&:hover:not(:disabled):not(:active):not(.inactive)": {
                                            backgroundImage: "none"
                                        }
                                    },
                                    children: o
                                }), (0, _.jsx)(G.A, {
                                    onClick: s,
                                    sx: {
                                        bg: "primary",
                                        backgroundImage: "none",
                                        color: "bg5",
                                        "&:hover:not(:disabled):not(:active):not(.inactive)": {
                                            backgroundImage: "none"
                                        }
                                    },
                                    children: r
                                })]
                            })]
                        })
                    })),
                    Chart: pe,
                    ChartHeader: o,
                    ChartFallback: ye,
                    ChartPlaceholder: () => ((0, I.A)((() => {
                        console.warn("[trade-widget] the component has been deprecated")
                    })), (0, _.jsx)(V.A, {
                        sx: {
                            width: "100%",
                            height: "100%",
                            alignItems: "center",
                            justifyContent: "center"
                        },
                        children: (0, _.jsx)(ve, {})
                    })),
                    MultiChartManager: ({
                        windows: e,
                        value: t,
                        onChange: i,
                        onCloseTab: r,
                        utilityTray: o,
                        sidebar: s,
                        draggable: n = !1
                    }) => {
                        (0, I.A)((() => {
                            console.warn("[trade-widget] the component has been deprecated")
                        }));
                        const a = e.filter((e => e.visible));
                        return (0, _.jsxs)(V.A, {
                            sx: {
                                height: "100%",
                                flexDirection: "column"
                            },
                            children: [(0, _.jsxs)(V.A, {
                                sx: {
                                    height: "34px"
                                },
                                children: [(0, _.jsx)(_e, {
                                    options: a,
                                    value: t,
                                    onChange: i,
                                    onClose: r
                                }), (0, _.jsx)(V.A, {
                                    className: n ? "draggableHandle" : "",
                                    sx: {
                                        minWidth: n ? "100px" : "0px",
                                        flex: "1"
                                    }
                                }), (0, _.jsx)(V.A, {
                                    sx: {
                                        alignItems: "center",
                                        justifyContent: "flex-end",
                                        paddingRight: "ls",
                                        "& > *:not(:last-child)": {
                                            paddingRight: "sm"
                                        }
                                    },
                                    children: o
                                })]
                            }), (0, _.jsxs)(V.A, {
                                sx: {
                                    height: "100%"
                                },
                                children: [s, (0, _.jsx)(W.A, {
                                    sx: {
                                        width: "100%",
                                        height: "100%",
                                        display: "grid",
                                        gridTemplateColumns: `repeat(${Math.ceil(e.length/2)}, 50%)`,
                                        gridTemplateRows: "repeat(2, 50%)"
                                    },
                                    children: e.map(((e, r) => (0, _.jsx)(W.A, {
                                        sx: {
                                            borderWidth: "1px",
                                            borderStyle: "solid",
                                            borderColor: "newLine",
                                            ...e.value === t ? {
                                                boxShadow: e => `0px -2px 0px 0px ${e.colors.t.yellow}`,
                                                borderColor: e => (0, X.N)(e.colors.t.yellow, .25)
                                            } : {}
                                        },
                                        onClick: () => i(e),
                                        children: e.children
                                    }, r)))
                                })]
                            })]
                        })
                    },
                    Dropdowns: n,
                    RadioGroups: a,
                    DepthChart: ({
                        symbol: e,
                        d1Group: t,
                        d2Group: i,
                        canvas: {
                            width: r,
                            height: o
                        },
                        scale: s,
                        setScale: n,
                        styles: a,
                        yAxisScale: l = .6,
                        xAxisVerticalOffset: c = 22,
                        yAxisHorizontalOffset: d = 50,
                        strokeWidth: h = 1,
                        graphStrokeWidth: u = 1,
                        xTicksFormatter: g = e => e.toString(),
                        yTicksFormatter: p = e => e.toString(),
                        d1XValueFormatter: m = e => e.toString(),
                        d2XValueFormatter: x = e => e.toString(),
                        d1YValueFormatter: f = e => e.toString(),
                        d2YValueFormatter: y = e => e.toString(),
                        d1DeltaXValueFormatter: b = e => e.toString(),
                        d2DeltaXValueFormatter: v = e => e.toString()
                    }) => {
                        (0, I.A)((() => {
                            console.warn("[trade-widget] the component has been deprecated. Please use Chart/containers/DepthChart instead.")
                        }));
                        const {
                            cursor: C,
                            onMouseMove: w,
                            onMouseLeave: A,
                            onMouseWheel: S
                        } = Lt({
                            scale: s,
                            setScale: n
                        }), {
                            width: T,
                            height: k,
                            halfWidth: L,
                            midValue: P,
                            d1: V,
                            d2: M,
                            xTicks: B,
                            yTicks: E,
                            valueToX: j,
                            valueToY: O
                        } = kt({
                            symbol: e,
                            d1Group: t,
                            d2Group: i,
                            width: r - d,
                            height: o - c,
                            cursor: C,
                            scale: s,
                            yAxisScale: l
                        });
                        return (0, _.jsx)(bt.Stage, {
                            width: r,
                            height: o,
                            onMouseMove: w,
                            onMouseOut: A,
                            onWheel: S,
                            children: (0, _.jsxs)(bt.Layer, {
                                hitGraphEnabled: !1,
                                children: [(0, _.jsxs)(bt.Group, {
                                    height: k,
                                    children: [(0, _.jsx)(bt.Line, {
                                        points: [L, 0, L, k],
                                        stroke: "rgba(100, 100, 100, 0.4)",
                                        strokeWidth: h
                                    }), (0, _.jsx)(bt.Shape, {
                                        sceneFunc: (e, t) => {
                                            e.beginPath();
                                            let r = L,
                                                o = k,
                                                s = !0;
                                            i.forEach((({
                                                xData: t,
                                                yData: i
                                            }) => {
                                                if (r = j(t), r < 0 || r > L) return;
                                                const n = O(i);
                                                s ? (e.moveTo(r, o), s = !1) : e.lineTo(r, o), o = n, e.lineTo(r, o)
                                            })), e.lineTo(-h, o), e.lineTo(-h, k), e.fillStrokeShape(t)
                                        },
                                        fill: a.d2.fillColor,
                                        stroke: a.d2.lineColor,
                                        strokeWidth: u
                                    }), (0, _.jsx)(bt.Shape, {
                                        sceneFunc: (e, i) => {
                                            e.beginPath();
                                            let r = L,
                                                o = k,
                                                s = !1;
                                            t.forEach((({
                                                xData: t,
                                                yData: i
                                            }) => {
                                                if (r = j(t), r > T || r < L) return;
                                                const n = O(i);
                                                s ? (e.moveTo(r, o), s = !1) : e.lineTo(r, o), o = n, e.lineTo(r, o)
                                            })), e.lineTo(T + h, o), e.lineTo(T + h, k), e.fillStrokeShape(i)
                                        },
                                        fill: a.d1.fillColor
                                    }), (0, _.jsx)(bt.Shape, {
                                        sceneFunc: (e, i) => {
                                            e.beginPath();
                                            let r = L,
                                                o = k,
                                                s = !1;
                                            t.forEach((({
                                                xData: t,
                                                yData: i
                                            }) => {
                                                if (r = j(t), r > T || r < L) return;
                                                const n = O(i);
                                                s ? (e.moveTo(r, o), s = !1) : e.lineTo(r, o), o = n, e.lineTo(r, o)
                                            })), e.lineTo(T + h, o), e.fillStrokeShape(i)
                                        },
                                        stroke: a.d1.lineColor,
                                        strokeWidth: u
                                    }), V.x ? (0, _.jsxs)(_.Fragment, {
                                        children: [(0, _.jsx)(bt.Line, {
                                            points: [V.x, 0, V.x, k],
                                            stroke: a.d1.lineColor,
                                            strokeWidth: h,
                                            dash: [2, 2]
                                        }), (0, _.jsx)(bt.Line, {
                                            points: [L, V.y, T, V.y],
                                            stroke: a.d1.lineColor,
                                            strokeWidth: h,
                                            dash: [2, 2]
                                        }), (0, _.jsx)(bt.Line, {
                                            points: [M.x, 0, M.x, k],
                                            stroke: a.d2.lineColor,
                                            strokeWidth: h,
                                            dash: [2, 2]
                                        }), (0, _.jsx)(bt.Line, {
                                            points: [a.tag.width, M.y, L, M.y],
                                            stroke: a.d2.lineColor,
                                            strokeWidth: h,
                                            dash: [2, 2]
                                        }), (0, _.jsx)(bt.Circle, {
                                            x: V.x,
                                            y: V.y,
                                            radius: 3,
                                            fill: a.d1.lineColor
                                        }), (0, _.jsxs)(bt.Label, {
                                            x: .5 * (V.x + L),
                                            y: V.y + .5 * a.tag.height,
                                            children: [(0, _.jsx)(bt.Tag, {
                                                pointerDirection: "down",
                                                fill: a.background
                                            }), (0, _.jsx)(bt.Text, {
                                                text: b(V.xData, P),
                                                fill: a.d1.lineColor,
                                                padding: 3
                                            })]
                                        }), (0, _.jsx)(bt.Circle, {
                                            x: M.x,
                                            y: M.y,
                                            radius: 3,
                                            fill: a.d2.lineColor
                                        }), (0, _.jsxs)(bt.Label, {
                                            x: .5 * (M.x + L),
                                            y: M.y + .5 * a.tag.height,
                                            children: [(0, _.jsx)(bt.Tag, {
                                                pointerDirection: "down",
                                                fill: a.background
                                            }), (0, _.jsx)(bt.Text, {
                                                text: v(M.xData, P),
                                                fill: a.d2.lineColor,
                                                padding: 3
                                            })]
                                        }), (0, _.jsxs)(bt.Label, {
                                            x: T,
                                            y: V.y,
                                            children: [(0, _.jsx)(bt.Tag, {
                                                pointerDirection: "left",
                                                pointerWidth: a.tag.width,
                                                pointerHeight: a.tag.height,
                                                fill: a.background
                                            }), (0, _.jsx)(bt.Text, {
                                                text: f(V.yData),
                                                fill: a.d1.lineColor,
                                                padding: 3
                                            })]
                                        }), (0, _.jsxs)(bt.Label, {
                                            x: 0,
                                            y: M.y,
                                            children: [(0, _.jsx)(bt.Tag, {
                                                pointerDirection: "left",
                                                pointerWidth: a.tag.width,
                                                pointerHeight: a.tag.height,
                                                fill: a.d2.fillColor
                                            }), (0, _.jsx)(bt.Text, {
                                                text: y(M.yData),
                                                fill: a.d2.lineColor,
                                                padding: 3
                                            })]
                                        }), (0, _.jsx)(bt.Rect, {
                                            x: V.x,
                                            y: 0,
                                            width: T - V.x,
                                            height: k,
                                            fill: a.hoverBgColor
                                        }), (0, _.jsx)(bt.Rect, {
                                            x: 0,
                                            y: 0,
                                            width: M.x,
                                            height: k,
                                            fill: a.hoverBgColor
                                        })]
                                    }) : null]
                                }), (0, _.jsxs)(bt.Group, {
                                    y: k,
                                    children: [B.map(((e, t) => (0, _.jsxs)(D().Fragment, {
                                        children: [(0, _.jsx)(bt.Line, {
                                            points: [j(e), 0, j(e), 4],
                                            stroke: a.textColor,
                                            strokeWidth: h
                                        }), (0, _.jsx)(bt.Text, {
                                            x: j(e) - 20,
                                            y: 3,
                                            text: g(e),
                                            fill: a.textColor,
                                            padding: 3
                                        })]
                                    }, t))), V.x ? (0, _.jsxs)(_.Fragment, {
                                        children: [(0, _.jsxs)(bt.Label, {
                                            x: V.x,
                                            y: 2,
                                            children: [(0, _.jsx)(bt.Tag, {
                                                pointerDirection: "up",
                                                pointerWidth: 4,
                                                pointerHeight: 1,
                                                fill: a.background
                                            }), (0, _.jsx)(bt.Text, {
                                                text: m(V.xData),
                                                fill: a.d1.lineColor,
                                                padding: 3
                                            })]
                                        }), (0, _.jsx)(bt.Line, {
                                            points: [V.x, 0, V.x, 4],
                                            stroke: a.d1.lineColor,
                                            strokeWidth: h
                                        }), (0, _.jsxs)(bt.Label, {
                                            x: M.x,
                                            y: 2,
                                            children: [(0, _.jsx)(bt.Tag, {
                                                pointerDirection: "up",
                                                pointerWidth: 4,
                                                pointerHeight: 1,
                                                fill: a.background
                                            }), (0, _.jsx)(bt.Text, {
                                                text: x(M.xData),
                                                fill: a.d2.lineColor,
                                                padding: 3
                                            })]
                                        }), (0, _.jsx)(bt.Line, {
                                            points: [M.x, 0, M.x, 4],
                                            stroke: a.d2.lineColor,
                                            strokeWidth: h
                                        })]
                                    }) : null]
                                }), (0, _.jsx)(bt.Group, {
                                    x: T,
                                    children: E.map(((e, t) => (0, _.jsxs)(D().Fragment, {
                                        children: [(0, _.jsx)(bt.Line, {
                                            points: [0, O(e), 4, O(e)],
                                            stroke: a.textColor,
                                            strokeWidth: h
                                        }), (0, _.jsx)(bt.Text, {
                                            x: 8,
                                            y: O(e) - 5,
                                            text: p(e),
                                            fill: a.textColor
                                        })]
                                    }, t)))
                                })]
                            })
                        })
                    },
                    VerticalDepthChart: ({
                        symbol: e,
                        d1Group: t,
                        d2Group: i,
                        canvas: r,
                        scale: o,
                        setScale: s,
                        styles: n,
                        yAxisScale: a = .9,
                        xAxisVerticalOffset: l = 0,
                        yAxisHorizontalOffset: c = 60,
                        strokeWidth: d = 1,
                        graphStrokeWidth: h = 2,
                        yTicksFormatter: u = e => e.toString(),
                        d1XValueFormatter: g = e => e.toString(),
                        d2XValueFormatter: p = e => e.toString(),
                        d1YValueFormatter: m = e => e.toString(),
                        d2YValueFormatter: x = e => e.toString()
                    }) => {
                        (0, I.A)((() => {
                            console.warn("[trade-widget] the component has been deprecated. Please use Chart/containers/DepthChart instead.")
                        }));
                        const f = t.map(St),
                            y = i.map(St),
                            {
                                cursor: b,
                                onMouseMove: v,
                                onMouseLeave: C,
                                onMouseWheel: w
                            } = Lt({
                                scale: o,
                                setScale: s
                            }),
                            {
                                height: A,
                                halfWidth: S,
                                d1: T,
                                d2: k,
                                xTicks: L,
                                valueToX: P,
                                valueToY: V
                            } = kt({
                                symbol: e,
                                d1Group: f,
                                d2Group: y,
                                width: r.height - l,
                                height: r.width - c,
                                cursor: {
                                    x: r.height - b.y,
                                    y: b.x
                                },
                                scale: o,
                                yAxisScale: a
                            });
                        return (0, _.jsx)(bt.Stage, {
                            width: r.width,
                            height: r.height,
                            onMouseMove: v,
                            onMouseOut: C,
                            onWheel: w,
                            children: (0, _.jsxs)(bt.Layer, {
                                hitGraphEnabled: !1,
                                children: [(0, _.jsxs)(bt.Group, {
                                    x: c,
                                    children: [(0, _.jsx)(bt.Line, {
                                        points: [0, S, A, S],
                                        stroke: "rgba(100, 100, 100, 0.4)",
                                        strokeWidth: d
                                    }), (0, _.jsx)(bt.Shape, {
                                        sceneFunc: (e, t) => {
                                            e.beginPath();
                                            let i = A,
                                                o = S,
                                                s = !0;
                                            y.forEach((({
                                                xData: t,
                                                yData: n
                                            }) => {
                                                if (o = r.height - P(t), o > r.height || o < S) return;
                                                const a = V(n);
                                                s ? (e.moveTo(i, o), s = !1) : e.lineTo(i, o), i = a, e.lineTo(i, o)
                                            })), e.lineTo(i, r.height + d), e.lineTo(A + d, r.height + d), e.fillStrokeShape(t)
                                        },
                                        fill: n.d2.fillColor,
                                        stroke: n.d2.lineColor,
                                        strokeWidth: h
                                    }), (0, _.jsx)(bt.Shape, {
                                        sceneFunc: (e, t) => {
                                            e.beginPath();
                                            let i = A,
                                                o = S,
                                                s = !1;
                                            f.forEach((({
                                                xData: t,
                                                yData: n
                                            }) => {
                                                if (o = r.height - P(t), o < 0 || o > S) return;
                                                const a = V(n);
                                                s ? (e.moveTo(i, o), s = !1) : e.lineTo(i, o), i = a, e.lineTo(i, o)
                                            })), e.lineTo(i, -d), e.lineTo(A, -d), e.fillStrokeShape(t)
                                        },
                                        fill: n.d1.fillColor,
                                        stroke: n.d1.lineColor,
                                        strokeWidth: h
                                    }), T.x ? (0, _.jsxs)(_.Fragment, {
                                        children: [(0, _.jsx)(bt.Line, {
                                            points: [0, r.height - T.x, A, r.height - T.x],
                                            stroke: n.d1.lineColor,
                                            strokeWidth: d,
                                            dash: [2, 2]
                                        }), (0, _.jsx)(bt.Line, {
                                            points: [T.y, 0, T.y, S],
                                            stroke: n.d1.lineColor,
                                            strokeWidth: d,
                                            dash: [2, 2]
                                        }), (0, _.jsx)(bt.Line, {
                                            points: [0, r.height - k.x, A, r.height - k.x],
                                            stroke: n.d2.lineColor,
                                            strokeWidth: d,
                                            dash: [2, 2]
                                        }), (0, _.jsx)(bt.Line, {
                                            points: [k.y, S, k.y, r.height],
                                            stroke: n.d2.lineColor,
                                            strokeWidth: d,
                                            dash: [2, 2]
                                        }), (0, _.jsx)(bt.Circle, {
                                            x: T.y,
                                            y: r.height - T.x,
                                            radius: 3,
                                            fill: n.d1.lineColor
                                        }), (0, _.jsx)(bt.Circle, {
                                            x: k.y,
                                            y: r.height - k.x,
                                            radius: 3,
                                            fill: n.d2.lineColor
                                        }), (0, _.jsxs)(bt.Label, {
                                            x: T.y,
                                            y: 0,
                                            children: [(0, _.jsx)(bt.Tag, {
                                                pointerDirection: "up",
                                                pointerWidth: 4,
                                                pointerHeight: 2,
                                                fill: n.d1.fillColor
                                            }), (0, _.jsx)(bt.Text, {
                                                text: m(T.yData),
                                                fill: n.d1.lineColor,
                                                padding: 3
                                            })]
                                        }), (0, _.jsxs)(bt.Label, {
                                            x: k.y,
                                            y: r.height,
                                            children: [(0, _.jsx)(bt.Tag, {
                                                pointerDirection: "down",
                                                pointerWidth: 4,
                                                pointerHeight: 2,
                                                fill: n.d2.fillColor
                                            }), (0, _.jsx)(bt.Text, {
                                                text: x(T.yData),
                                                fill: n.d2.lineColor,
                                                padding: 3
                                            })]
                                        }), (0, _.jsx)(bt.Rect, {
                                            x: 0,
                                            y: 0,
                                            width: A,
                                            height: r.height - T.x,
                                            fill: n.hoverBgColor
                                        }), (0, _.jsx)(bt.Rect, {
                                            x: 0,
                                            y: r.height - k.x,
                                            width: A,
                                            height: k.x,
                                            fill: n.hoverBgColor
                                        })]
                                    }) : null]
                                }), (0, _.jsxs)(bt.Group, {
                                    children: [(0, _.jsx)(bt.Line, {
                                        points: [c, 0, c, r.height],
                                        stroke: "rgba(100, 100, 100, 0.4)",
                                        strokeWidth: d
                                    }), L.map(((e, t) => {
                                        const i = r.height - P(e);
                                        return (0, _.jsxs)(D().Fragment, {
                                            children: [(0, _.jsx)(bt.Line, {
                                                points: [c - 4, i, c, i],
                                                stroke: n.textColor,
                                                strokeWidth: d
                                            }), (0, _.jsxs)(bt.Label, {
                                                x: c - 4,
                                                y: i,
                                                children: [(0, _.jsx)(bt.Tag, {
                                                    pointerDirection: "right",
                                                    pointerWidth: 0,
                                                    pointerHeight: 0,
                                                    strokeWidth: 0
                                                }), (0, _.jsx)(bt.Text, {
                                                    text: u(e),
                                                    fill: n.textColor,
                                                    padding: 3
                                                })]
                                            })]
                                        }, t)
                                    })), T.x ? (0, _.jsxs)(_.Fragment, {
                                        children: [(0, _.jsxs)(bt.Label, {
                                            x: c - 4,
                                            y: r.height - T.x,
                                            children: [(0, _.jsx)(bt.Tag, {
                                                pointerDirection: "right",
                                                pointerWidth: n.tag.width,
                                                pointerHeight: n.tag.height,
                                                fill: n.background
                                            }), (0, _.jsx)(bt.Text, {
                                                text: g(T ? .xData),
                                                fill: n.d1.lineColor,
                                                padding: 3
                                            })]
                                        }), (0, _.jsx)(bt.Line, {
                                            points: [c - 4, r.height - T.x, c, r.height - T.x],
                                            stroke: n.d1.lineColor,
                                            strokeWidth: d
                                        }), (0, _.jsxs)(bt.Label, {
                                            x: c - 4,
                                            y: r.height - k.x,
                                            children: [(0, _.jsx)(bt.Tag, {
                                                pointerDirection: "right",
                                                pointerWidth: n.tag.width,
                                                pointerHeight: n.tag.height,
                                                fill: n.background
                                            }), (0, _.jsx)(bt.Text, {
                                                text: p(k ? .xData),
                                                fill: n.d2.lineColor,
                                                padding: 3
                                            })]
                                        }), (0, _.jsx)(bt.Line, {
                                            points: [c - 4, r.height - k.x, c, r.height - k.x],
                                            stroke: n.d2.lineColor,
                                            strokeWidth: d
                                        })]
                                    }) : null]
                                })]
                            })
                        })
                    },
                    TradingViewNext: Wt,
                    BasicKline: Jt,
                    MiniSymbol: s,
                    Icons: l,
                    TooltipContents: c
                },
                gi = {
                    Containers: {
                        Chart: u.A,
                        BasicKline: g.A,
                        TradingViewTP: p.A,
                        TradingViewTP27: m.A,
                        DepthChart: f.A,
                        ChartModeDropdown: b.default,
                        Fullscreen: v.default
                    },
                    Store: C,
                    SessionStore: w,
                    CandlestickHistoryStore: A,
                    OrderHistoryStore: S,
                    DepthStore: T,
                    DepthChartMode: y.Kt,
                    DefaultResolutions: x.L7,
                    DefaultTVEnabledFeatures: h.oT,
                    DefaultTVDisabledFeatures: h.HJ,
                    DefaultTVStorageName: L.DefaultTVStorageName,
                    utils: k,
                    OrderModificationModal: d.y
                }
        },
        lRQZ: (e, t, i) => {
            i.r(t), i.d(t, {
                OpeningCountdown: () => y,
                default: () => b
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i.n(o),
                n = i("xAfo"),
                a = i("BbzZ"),
                l = i("GIr8"),
                c = i("2IQ4"),
                d = i("Vhyo"),
                h = i("Djui");
            const u = ({
                    children: e
                }) => (0, r.jsxs)(l.A, {
                    sx: {
                        justifyContent: "center",
                        position: "relative",
                        mr: "4px",
                        width: "40px",
                        height: "54px",
                        borderRadius: "4px",
                        overflow: "hidden"
                    },
                    children: [(0, r.jsx)(d.A, {
                        sx: {
                            color: "t.primary",
                            fontSize: "40px",
                            position: "relative",
                            zIndex: 100
                        },
                        children: e
                    }), (0, r.jsx)(c.A, {
                        sx: {
                            position: "absolute",
                            width: "100%",
                            height: "26px",
                            top: 0,
                            left: 0,
                            background: "#F0B90B",
                            opacity: .1
                        }
                    }), (0, r.jsx)(c.A, {
                        sx: {
                            position: "absolute",
                            width: "100%",
                            height: "26px",
                            bottom: 0,
                            left: 0,
                            background: "#F0B90B",
                            opacity: .1
                        }
                    })]
                }),
                g = ({
                    digits: e
                }) => (0, r.jsx)(r.Fragment, {
                    children: e.split("").map(((e, t) => (0, r.jsx)(u, {
                        children: e
                    }, t)))
                }),
                p = () => (0, r.jsx)(d.A, {
                    sx: {
                        fontSize: "24px",
                        color: "t.secondary",
                        mx: 2
                    },
                    children: ":"
                }),
                m = 6e4,
                x = 36e5,
                f = ({
                    hourglassImagePath: e,
                    backgroundImagePath: t,
                    backgroundShinyImagePath: i,
                    timeLeft: n,
                    symbol: u,
                    willOpenInText: f
                }) => {
                    const [y, {
                        width: b
                    }] = (0, a.A)(), v = (0, o.useMemo)((() => b + 120 <= 500), [b]), C = (w = n, [Math.floor(w / x), Math.floor(w % x / m), Math.floor(w % m / 1e3)].map((e => Math.min(e, 999).toString().padStart(2, "0"))));
                    var w;
                    return (0, r.jsx)(l.A, {
                        ref: y,
                        sx: {
                            width: "100%",
                            height: "100%",
                            justifyContent: "center",
                            px: "60px",
                            background: `url(${t}) no-repeat`,
                            backgroundSize: "auto 90%",
                            backgroundPosition: "right top"
                        },
                        children: (0, r.jsxs)(l.A, {
                            sx: {
                                maxWidth: "661px",
                                alignItems: "center",
                                justifyContent: "space-between",
                                flex: 1,
                                background: `url(${i}) no-repeat`,
                                backgroundSize: "45%",
                                backgroundPosition: "right center"
                            },
                            children: [(0, r.jsxs)(c.A, {
                                children: [(0, r.jsx)(d.A, {
                                    sx: {
                                        fontSize: 32,
                                        color: "t.primary"
                                    },
                                    children: u
                                }), (0, r.jsx)(d.A, {
                                    sx: {
                                        fontSize: 24,
                                        fontWeight: 200,
                                        color: "t.primary"
                                    },
                                    children: f
                                }), (0, r.jsx)(l.A, {
                                    sx: {
                                        mt: 5,
                                        alignItems: "center"
                                    },
                                    children: C.map(((e, t) => (0, r.jsxs)(s().Fragment, {
                                        children: [(0, r.jsx)(g, {
                                            digits: e
                                        }), t !== C.length - 1 && (0, r.jsx)(p, {})]
                                    }, t)))
                                })]
                            }), (0, r.jsx)(c.A, {
                                sx: {
                                    display: v ? "none" : "block"
                                },
                                children: (0, r.jsx)(h.A, {
                                    src: e,
                                    sx: {
                                        width: "100%",
                                        height: "100%",
                                        maxWidth: "192px",
                                        maxHegiht: "192px"
                                    }
                                })
                            })]
                        })
                    })
                },
                y = e => {
                    (0, n.A)((() => {
                        console.warn("[trade-widget] the component has been deprecated.")
                    }));
                    const t = (({
                        openTime: e,
                        onReady: t,
                        ...i
                    }) => {
                        const [r, s] = (0, o.useState)(e - Date.now());
                        return (0, o.useEffect)((() => {
                            const t = setInterval((() => {
                                s(e - Date.now())
                            }), 100);
                            return () => clearInterval(t)
                        }), [e]), (0, o.useEffect)((() => {
                            r <= 0 && t()
                        }), [r]), { ...i,
                            timeLeft: r
                        }
                    })(e);
                    return (0, r.jsx)(f, { ...t
                    })
                },
                b = y
        },
        PIXh: (e, t, i) => {
            i.r(t), i.d(t, {
                createStore: () => a,
                getCandlestickHistory: () => l
            });
            var r = i("t21c"),
                o = i.n(r),
                s = i("eAFj");
            const n = e => ({
                    candlestickHistory: [],
                    setCandlestickHistory: t => e({
                        candlestickHistory: t
                    })
                }),
                a = o()(((e = "unspecific-chart-namespace") => (console.warn("[trade-widget] candlestickHistoryStore has been deprecated."), (0, s.A)(((...e) => ({ ...n(...e)
                })))))),
                l = e => [e.candlestickHistory, e.setCandlestickHistory]
        },
        vY9W: (e, t, i) => {
            i.r(t), i.d(t, {
                createStore: () => a,
                getDepthScale: () => l
            });
            var r = i("t21c"),
                o = i.n(r),
                s = i("eAFj");
            const n = e => ({
                    depthScale: 0,
                    setDepthScale: t => e({
                        depthScale: t
                    })
                }),
                a = o()(((e = "unspecific-chart-namespace") => (0, s.A)(((...e) => ({ ...n(...e)
                }))))),
                l = e => [e.depthScale, e.setDepthScale]
        },
        "U/FS": (e, t, i) => {
            i.d(t, {
                h: () => a,
                y: () => n
            });
            var r = i("t21c"),
                o = i.n(r),
                s = i("eAFj");
            const n = o()(((e = "unspecific-chart-namespace") => (0, s.A)((e => ({
                    layoutWidth: 0,
                    setLayoutWidth: t => e({
                        layoutWidth: t
                    })
                }))))),
                a = e => [e.layoutWidth, e.setLayoutWidth]
        },
        "7asw": (e, t, i) => {
            i.d(t, {
                N: () => a,
                y: () => n
            });
            var r = i("t21c"),
                o = i.n(r),
                s = i("eAFj");
            const n = o()(((e = "unspecific-chart-namespace") => (0, s.A)((e => ({
                    loading: !1,
                    setLoading: t => e({
                        loading: t
                    })
                }))))),
                a = e => [e.loading, e.setLoading]
        },
        DH0w: (e, t, i) => {
            i.r(t), i.d(t, {
                createStore: () => c,
                getOrderHistory: () => d
            });
            var r = i("t21c"),
                o = i.n(r),
                s = i("m/Cy"),
                n = i.n(s),
                a = i("eAFj");
            const l = e => ({
                    orderHistory: [],
                    setOrderHistory: t => e({
                        orderHistory: t
                    }),
                    appendOrderHistory: t => e((e => ({
                        orderHistory: n()(t, e.orderHistory, "id")
                    }))),
                    clearOrderHistory: () => e({
                        orderHistory: []
                    })
                }),
                c = o()(((e = "unspecific-chart-namespace") => (0, a.A)(((...e) => ({ ...l(...e)
                }))))),
                d = e => [e.orderHistory, e.setOrderHistory, e.appendOrderHistory, e.clearOrderHistory]
        },
        rPbR: (e, t, i) => {
            i.r(t), i.d(t, {
                createStore: () => n,
                getCandlestickKey: () => g,
                getCandlestickReference: () => d,
                getEditingInterval: () => c,
                getIntervalConfigOpen: () => l,
                getIsChartFocused: () => a,
                getShowMoreSettingTooltip: () => p,
                getTradingViewReference: () => h,
                getTvKey: () => u
            });
            var r = i("t21c"),
                o = i.n(r),
                s = i("eAFj");
            const n = o()(((e = "unspecific-chart-namespace") => (0, s.A)((e => ({
                    isChartFocused: !1,
                    setIsChartFocused: t => e({
                        isChartFocused: t
                    }),
                    intervalConfigOpen: !1,
                    setIntervalConfigOpen: t => e({
                        intervalConfigOpen: t
                    }),
                    editingInterval: !1,
                    setEditingInterval: t => e({
                        editingInterval: t
                    }),
                    candlestickReference: void 0,
                    setCandlestickReference: t => e({
                        candlestickReference: t
                    }),
                    tradingViewReference: void 0,
                    setTradingViewReference: t => e({
                        tradingViewReference: t
                    }),
                    tvKey: 1,
                    reloadTv: () => e((e => ({
                        tvKey: -1 * e.tvKey
                    }))),
                    candlestickKey: 1,
                    reloadCandlestick: () => e((e => ({
                        candlestickKey: -1 * e.candlestickKey
                    }))),
                    showMoreSettingTooltip: !1,
                    setShowMoreSettingTooltip: t => e((() => ({
                        showMoreSettingTooltip: t
                    })))
                }))))),
                a = e => [e.isChartFocused, e.setIsChartFocused],
                l = e => [e.intervalConfigOpen, e.setIntervalConfigOpen],
                c = e => [e.editingInterval, e.setEditingInterval],
                d = e => [e.candlestickReference, e.setCandlestickReference],
                h = e => [e.tradingViewReference, e.setTradingViewReference],
                u = e => [e.tvKey, e.reloadTv],
                g = e => [e.candlestickKey, e.reloadCandlestick],
                p = e => [e.showMoreSettingTooltip, e.setShowMoreSettingTooltip]
        },
        qv9I: (e, t, i) => {
            i.r(t), i.d(t, {
                ChartMode: () => r,
                DataSource: () => y,
                DisplayIntervals: () => u,
                LabelLineType: () => p,
                LimitOrderType: () => g,
                OrderMarkOption: () => m,
                OriginalChartStyle: () => l.NB,
                PriceType: () => x,
                SeriesStyle: () => b,
                Tabs: () => f,
                createStore: () => v,
                getActiveTab: () => P,
                getAverageCostPeriod: () => R,
                getChartMode: () => T,
                getChartModeNumber: () => d,
                getDataSource: () => N,
                getInterval: () => k,
                getIsFirstTimeChangeChartMode: () => F,
                getLastSelectedMiniMultiChartWindow: () => C,
                getMiniMultiChartWindows: () => S,
                getOrderMarkOptions: () => U,
                getOriginalAnnotationToolPosition: () => z,
                getOriginalChartStyle: () => A,
                getPriceType: () => _,
                getSameSymbolMiniMultiChartBrowseMode: () => W,
                getSelectedIntervals: () => L,
                getShowAverageBuyPrice: () => M,
                getShowAverageSellPrice: () => B,
                getShowBotPreviewOrder: () => E,
                getShowBreakEvenPrice: () => j,
                getShowExecutionOrder: () => V,
                getShowLimitOrder: () => D,
                getShowLiquidationPrice: () => O,
                getShowMoreSettingTooltipCounter: () => X,
                getShowPositionOrder: () => I,
                getShowPriceAlert: () => H,
                getTrueInterval: () => G,
                getTvChartStyle: () => w,
                migrateChartMode: () => h
            });
            var r, o = i("t21c"),
                s = i.n(o),
                n = i("eAFj"),
                a = i("yDds"),
                l = i("9YZR"),
                c = i("593c");
            ! function(e) {
                e.Single = "1", e.HorizontalTwo = "h-2", e.VerticalTwo = "v-2", e.HorizontalThree = "h-3", e.VerticalThree = "v-3", e.Four = "4"
            }(r || (r = {}));
            const d = e => {
                    switch (e) {
                        case "1":
                            return 1;
                        case "h-2":
                        case "v-2":
                            return 2;
                        case "h-3":
                        case "v-3":
                            return 3;
                        default:
                            return 4
                    }
                },
                h = e => "string" === typeof e ? e : 4 === e ? "4" : "1";
            var u, g, p, m, x, f, y, b;
            ! function(e) {
                e.Time = "Time", e["1s"] = "1s", e["1m"] = "1m", e["3m"] = "3m", e["5m"] = "5m", e["15m"] = "15m", e["30m"] = "30m", e["1h"] = "1h", e["2h"] = "2h", e["4h"] = "4h", e["6h"] = "6h", e["8h"] = "8h", e["12h"] = "12h", e["1d"] = "1d", e["3d"] = "3d", e["1w"] = "1w", e["1M"] = "1M"
            }(u || (u = {})),
            function(e) {
                e[e.LimitOrder = 0] = "LimitOrder", e[e.BotPreview = 1] = "BotPreview"
            }(g || (g = {})),
            function(e) {
                e[e.AverageBuyPrice = 0] = "AverageBuyPrice", e[e.AverageSellPrice = 1] = "AverageSellPrice", e[e.BreakEvenPrice = 2] = "BreakEvenPrice", e[e.LiquidationPrice = 3] = "LiquidationPrice"
            }(p || (p = {})),
            function(e) {
                e.Unkonwn = "Unkonwn", e.Open = "Open", e.Position = "Position", e.Execution = "Execution", e.AverageBuyPrice = "AverageBuyPrice", e.AverageSellPrice = "AverageSellPrice", e.BotPreview = "BotPreview", e.BreakEvenPrice = "BreakEvenPrice", e.LiquidationPrice = "LiquidationPrice", e.PriceAlert = "PriceAlert"
            }(m || (m = {})),
            function(e) {
                e.Last = "last", e.Mark = "mark", e.Index = "index", e.MarkIV = "markIV"
            }(x || (x = {})),
            function(e) {
                e.Origin = "origin", e.TradingView = "tradingView", e.Depth = "depth"
            }(f || (f = {})),
            function(e) {
                e.New = "new", e.Old = "old"
            }(y || (y = {})),
            function(e) {
                e[e.Bars = 0] = "Bars", e[e.Candles = 1] = "Candles", e[e.Line = 2] = "Line", e[e.Area = 3] = "Area", e[e.Renko = 4] = "Renko", e[e.Kagi = 5] = "Kagi", e[e.PnF = 6] = "PnF", e[e.LineBreak = 7] = "LineBreak", e[e.HeikinAshi = 8] = "HeikinAshi", e[e.HollowCandles = 9] = "HollowCandles", e[e.Baseline = 10] = "Baseline", e[e.HiLo = 12] = "HiLo"
            }(b || (b = {}));
            const v = s()(((e = "unspecific-chart-storage-name") => {
                    const t = ((e = "unspecific-chart-storage-name") => (0, n.A)((0, a.eh)((0, a.Zr)(((e, t) => {
                            const i = (...t) => {
                                try {
                                    e(...t)
                                } catch (i) {
                                    console.error("Error while setting state: ", i)
                                }
                            };
                            return {
                                lastSelectedMiniMultiChartWindow: 0,
                                setLastSelectedMiniMultiChartWindow: e => i({
                                    lastSelectedMiniMultiChartWindow: e
                                }),
                                tvChartStyle: 1,
                                setTvChartStyle: e => i({
                                    tvChartStyle: e
                                }),
                                originalChartStyle: l.NB.CandleBar,
                                setOriginalChartStyle: e => i({
                                    originalChartStyle: e
                                }),
                                chartMode: "1",
                                setChartMode: e => i({
                                    chartMode: e
                                }),
                                miniMultiChartWindows: ["", "", "", ""],
                                setMiniMultiChartWindows: e => i({
                                    miniMultiChartWindows: e
                                }),
                                emptyMiniMultiChartWindowByIndex: e => i((t => ({
                                    miniMultiChartWindows: t.miniMultiChartWindows.map(((t, i) => e === i ? "" : t))
                                }))),
                                setMiniMultiChartWindowsWithState: i,
                                interval: "1d",
                                setInterval: e => i({
                                    interval: e
                                }),
                                selectedIntervals: ["Time", "1s", "15m", "1h", "4h", "1d", "1w"],
                                setSelectedIntervals: e => i({
                                    selectedIntervals: e
                                }),
                                priceType: "last",
                                setPriceType: e => i({
                                    priceType: e
                                }),
                                activeTab: "origin",
                                setActiveTab: e => i({
                                    activeTab: e
                                }),
                                showLimitOrder: !1,
                                setShowLimitOrder: e => i({
                                    showLimitOrder: e
                                }),
                                toggleShowLimitOrder: () => i((e => ({
                                    showLimitOrder: !e.showLimitOrder
                                }))),
                                showPositionOrder: !1,
                                setShowPositionOrder: e => i({
                                    showPositionOrder: e
                                }),
                                toggleShowPositionOrder: () => i((e => ({
                                    showPositionOrder: !e.showPositionOrder
                                }))),
                                showExecutionOrder: !1,
                                setShowExecutionOrder: e => i({
                                    showExecutionOrder: e
                                }),
                                toggleShowExecutionOrder: () => i((e => ({
                                    showExecutionOrder: !e.showExecutionOrder
                                }))),
                                showAverageBuyPrice: !1,
                                setShowAverageBuyPrice: e => i({
                                    showAverageBuyPrice: e
                                }),
                                toggleShowAverageBuyPrice: () => i((e => ({
                                    showAverageBuyPrice: !e.showAverageBuyPrice
                                }))),
                                showAverageSellPrice: !1,
                                setShowAverageSellPrice: e => i({
                                    showAverageSellPrice: e
                                }),
                                toggleShowAverageSellPrice: () => i((e => ({
                                    showAverageSellPrice: !e.showAverageSellPrice
                                }))),
                                showBotPreviewOrder: !0,
                                setShowBotPreviewOrder: e => i({
                                    showBotPreviewOrder: e
                                }),
                                toggleShowBotPreviewOrder: () => i((e => ({
                                    showBotPreviewOrder: !e.showBotPreviewOrder
                                }))),
                                showBreakEvenPrice: !1,
                                setShowBreakEvenPrice: e => i({
                                    showBreakEvenPrice: e
                                }),
                                toggleShowBreakEvenPrice: () => i((e => ({
                                    showBreakEvenPrice: !e.showBreakEvenPrice
                                }))),
                                showLiquidationPrice: !1,
                                setShowLiquidationPrice: e => i({
                                    showLiquidationPrice: e
                                }),
                                toggleShowLiquidationPrice: () => i((e => ({
                                    showLiquidationPrice: !e.showLiquidationPrice
                                }))),
                                averageCostPeriod: void 0,
                                setAverageCostPeriod: e => i({
                                    averageCostPeriod: e
                                }),
                                showPriceAlert: !1,
                                setShowPriceAlert: e => i({
                                    showPriceAlert: e
                                }),
                                toggleShowPriceAlert: () => i((e => ({
                                    showPriceAlert: !e.showPriceAlert
                                }))),
                                dataSource: "new",
                                setDataSource: e => i({
                                    dataSource: e(t())
                                }),
                                sameSymbolMiniMultiChartBrowseMode: !1,
                                setSameSymbolMiniMultiChartBrowseMode: e => i({
                                    sameSymbolMiniMultiChartBrowseMode: e
                                }),
                                isFirstTimeChangeChartMode: !0,
                                setIsFirstTimeChangeChartMode: e => i({
                                    isFirstTimeChangeChartMode: e
                                }),
                                originalAnnotationToolPosition: {
                                    x: 0,
                                    y: 0
                                },
                                setOriginalAnnotationToolPosition: e => i({
                                    originalAnnotationToolPosition: e
                                }),
                                showMoreSettingTooltipCounter: 0,
                                incShowMoreSettingTooltipCounter: () => i((e => ({
                                    showMoreSettingTooltipCounter: e.showMoreSettingTooltipCounter + 1
                                })))
                            }
                        }), {
                            name: e,
                            version: 20231206,
                            migrate: e => ({ ...e,
                                selectedIntervals: [...e.selectedIntervals, "1s"],
                                chartMode: h(e.chartMode)
                            })
                        }))))(e),
                        i = e => t(e, c.A);
                    return Object.assign(i, t), i
                })),
                C = e => [e.lastSelectedMiniMultiChartWindow, e.setLastSelectedMiniMultiChartWindow],
                w = e => [e.tvChartStyle, e.setTvChartStyle],
                A = e => [e.originalChartStyle, e.setOriginalChartStyle],
                S = e => [e.miniMultiChartWindows, e.setMiniMultiChartWindows, e.emptyMiniMultiChartWindowByIndex, e.setMiniMultiChartWindowsWithState],
                T = e => [e.chartMode, e.setChartMode],
                k = e => [e.interval, e.setInterval],
                L = e => [e.selectedIntervals, e.setSelectedIntervals],
                _ = e => [e.priceType, e.setPriceType],
                P = e => [e.activeTab, e.setActiveTab],
                D = e => [e.showLimitOrder, e.setShowLimitOrder, e.toggleShowLimitOrder],
                I = e => [e.showPositionOrder, e.setShowPositionOrder, e.toggleShowPositionOrder],
                V = e => [e.showExecutionOrder, e.setShowExecutionOrder, e.toggleShowExecutionOrder],
                M = e => [e.showAverageBuyPrice, e.setShowAverageBuyPrice, e.toggleShowAverageBuyPrice],
                B = e => [e.showAverageSellPrice, e.setShowAverageSellPrice, e.toggleShowAverageSellPrice],
                E = e => [e.showBotPreviewOrder, e.setShowBotPreviewOrder, e.toggleShowBotPreviewOrder],
                j = e => [e.showBreakEvenPrice, e.setShowBreakEvenPrice, e.toggleShowBreakEvenPrice],
                O = e => [e.showLiquidationPrice, e.setShowLiquidationPrice, e.toggleShowLiquidationPrice],
                H = e => [e.showPriceAlert, e.setShowPriceAlert, e.toggleShowPriceAlert],
                R = e => [e.averageCostPeriod, e.setAverageCostPeriod],
                N = e => [e.dataSource, e.setDataSource],
                W = e => [e.sameSymbolMiniMultiChartBrowseMode, e.setSameSymbolMiniMultiChartBrowseMode],
                F = e => [e.isFirstTimeChangeChartMode, e.setIsFirstTimeChangeChartMode],
                z = e => [e.originalAnnotationToolPosition, e.setOriginalAnnotationToolPosition],
                X = e => [e.showMoreSettingTooltipCounter, e.incShowMoreSettingTooltipCounter],
                U = e => [e.showLimitOrder ? "Open" : "Unkonwn", e.showPositionOrder ? "Position" : "Unkonwn", e.showExecutionOrder ? "Execution" : "Unkonwn", e.showAverageBuyPrice ? "AverageBuyPrice" : "Unkonwn", e.showAverageSellPrice ? "AverageSellPrice" : "Unkonwn", e.showBotPreviewOrder ? "BotPreview" : "Unkonwn", e.showBreakEvenPrice ? "BreakEvenPrice" : "Unkonwn", e.showLiquidationPrice ? "LiquidationPrice" : "Unkonwn", e.showPriceAlert ? "PriceAlert" : "Unkonwn"].filter((e => "Unkonwn" !== e)),
                G = e => "Time" === e.interval ? "1m" : e.interval
        },
        "J0/w": (e, t, i) => {
            i.r(t), i.d(t, {
                TVResolutionToTrueInterval: () => l,
                TradingView: () => n,
                TrueIntervalToTVResolution: () => a,
                findLCMInterval: () => d,
                findMaximumInterval: () => h,
                intervalToMillseconds: () => c
            });
            var r = i("qv9I"),
                o = i("VhcG"),
                s = i("0ReU");
            const n = {
                    createDatafeedTP: o.Rc,
                    createDatafeedTP27: s.Rc
                },
                a = {
                    [r.DisplayIntervals["1s"]]: "1S",
                    [r.DisplayIntervals["1m"]]: "1",
                    [r.DisplayIntervals["3m"]]: "3",
                    [r.DisplayIntervals["5m"]]: "5",
                    [r.DisplayIntervals["15m"]]: "15",
                    [r.DisplayIntervals["30m"]]: "30",
                    [r.DisplayIntervals["1h"]]: "60",
                    [r.DisplayIntervals["2h"]]: "120",
                    [r.DisplayIntervals["4h"]]: "240",
                    [r.DisplayIntervals["6h"]]: "360",
                    [r.DisplayIntervals["8h"]]: "480",
                    [r.DisplayIntervals["12h"]]: "720",
                    [r.DisplayIntervals["1d"]]: "1D",
                    [r.DisplayIntervals["3d"]]: "3D",
                    [r.DisplayIntervals["1w"]]: "1W",
                    [r.DisplayIntervals["1M"]]: "1M"
                },
                l = {
                    "1S": r.DisplayIntervals["1s"],
                    1: r.DisplayIntervals["1m"],
                    3: r.DisplayIntervals["3m"],
                    5: r.DisplayIntervals["5m"],
                    15: r.DisplayIntervals["15m"],
                    30: r.DisplayIntervals["30m"],
                    60: r.DisplayIntervals["1h"],
                    120: r.DisplayIntervals["2h"],
                    240: r.DisplayIntervals["4h"],
                    360: r.DisplayIntervals["6h"],
                    480: r.DisplayIntervals["8h"],
                    720: r.DisplayIntervals["12h"],
                    "1D": r.DisplayIntervals["1d"],
                    "3D": r.DisplayIntervals["3d"],
                    "1W": r.DisplayIntervals["1w"],
                    "1M": r.DisplayIntervals["1M"]
                },
                c = e => {
                    const [, t, i] = /^(\d+)(\w)$/.exec(e) || [], r = +t;
                    switch (i) {
                        case "M":
                            return 1e3 * r * 60 * 60 * 24 * 30;
                        case "w":
                            return 1e3 * r * 60 * 60 * 24 * 7;
                        case "d":
                            return 1e3 * r * 60 * 60 * 24;
                        case "h":
                            return 1e3 * r * 60 * 60;
                        case "m":
                            return 1e3 * r * 60;
                        default:
                            return 1e3 * r
                    }
                },
                d = (e, t) => {
                    const i = c(t),
                        r = e.map((e => [c(e), e])).slice().sort((([e], [t]) => e - t));
                    for (let o = 0; o < r.length; o++) {
                        const [e, t] = r[o];
                        if (e % i === 0) return t
                    }
                    return null
                },
                h = e => {
                    const [t] = e.reduce(((e, t) => {
                        const i = c(t),
                            [, r] = e;
                        return i > r ? [t, i] : e
                    }), ["", Number.MIN_SAFE_INTEGER]);
                    return t
                }
        },
        z9eP: (e, t, i) => {
            i.d(t, {
                A: () => d,
                X: () => c
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i.n(o),
                n = i("Vhyo");
            const a = {
                hasError: !1,
                error: null,
                info: null
            };
            let l = class extends s().PureComponent {
                static getDerivedStateFromError() {
                    return {
                        hasError: !0
                    }
                }
                componentDidCatch(e, t) {
                    const {
                        track: i
                    } = this.props;
                    "undefined" !== typeof Sentry && Sentry.configureScope((t => {
                        t.setTag("widget", this.props.name), t.setExtra("widget", this.props.name), Sentry.captureException(e)
                    })), this.props.onError ? .(e, t ? .componentStack), i && i("widget_error", {
                        widget: this.props.name
                    }), this.setState({
                        error: e,
                        info: t,
                        hasError: !0
                    })
                }
                componentDidMount() {
                    const {
                        onComponentMounting: e
                    } = this.props;
                    e && e()
                }
                render() {
                    const {
                        error: e,
                        info: t,
                        hasError: i
                    } = this.state, {
                        fallbackRender: o,
                        FallbackComponent: a,
                        fallback: l
                    } = this.props;
                    if (i) {
                        const i = {
                            componentStack: t ? .componentStack,
                            error: e,
                            resetErrorBoundary: this.resetErrorBoundary
                        };
                        return s().isValidElement(l) ? l : "function" === typeof o ? o(i) : "function" === typeof a ? (0, r.jsx)(a, { ...i
                        }) : (0, r.jsx)(n.A, {
                            fontSize: 3,
                            color: "t.primary",
                            p: 3,
                            children: `${this.props.name||"Something"} went wrong.`
                        })
                    }
                    return this.props.children
                }
                constructor(...e) {
                    super(...e), this.state = a, this.resetErrorBoundary = (...e) => {
                        this.props ? .onReset ? .apply(this, e), this.setState(a)
                    }
                }
            };

            function c(e, t) {
                function i(i) {
                    return (0, r.jsx)(l, { ...t,
                        children: (0, r.jsx)(e, { ...i
                        })
                    })
                }
                const o = e.displayName || e.name || "Unknown";
                return i.displayName = `withErrorBoundary(${o})`, i
            }
            const d = l
        },
        iEsh: (e, t, i) => {
            i.d(t, {
                A: () => n
            });
            var r = i("mXdx"),
                o = i("DTvD");
            const s = {
                    display: "inline-block"
                },
                n = (0, o.memo)((({
                    children: e
                }) => {
                    const t = (0, o.useMemo)((() => (e => {
                        if ("string" !== typeof e) return [];
                        const t = e.split(" "),
                            i = t.length;
                        return t.map(((e, t) => {
                            const r = [];
                            if (e.length > 10)
                                for (let i = 0; i < Math.ceil(e.length / 3); i++) {
                                    const t = e.substring(3 * i, 3 * (i + 1));
                                    r.push(t)
                                } else r.push(e);
                            return t < i - 1 && r.push(" "), r
                        })).flat()
                    })(e)), [e]);
                    return (0, r.jsx)(r.Fragment, {
                        children: t.map(((e, t) => " " === e ? (0, r.jsx)("span", {
                            style: s,
                            children: "\xa0"
                        }, t) : (0, r.jsx)("span", {
                            style: s,
                            children: e
                        }, t)))
                    })
                }));
            n.displayName = "SplitText"
        },
        eT23: (e, t, i) => {
            i.d(t, {
                N: () => r
            });
            const r = (e, t) => {
                const [i] = /(#\w+)/g.exec(e) || [];
                return i ? ((e, t) => {
                    const i = e.replace("#", "");
                    return `rgba(${parseInt(i.substring(0,2),16)},${parseInt(i.substring(2,4),16)},${parseInt(i.substring(4,6),16)},${t})`
                })(i, t) : e
            }
        },
        lhEX: (e, t, i) => {
            i.d(t, {
                D$: () => n,
                e8: () => a,
                rx: () => s,
                w1: () => o
            });
            const r = /(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/,
                o = e => {
                    const t = `${e}`.match(r);
                    return t ? Math.max(0, (t[1] ? t[1].length : 0) - (t[2] ? +t[2] : 0)) : 0
                },
                s = (e, t = 2) => {
                    if (Math.abs(e) < 1e-9 && Math.abs(e) > 0) return `${e.toExponential(2)}`;
                    if (Math.abs(e) < 1e3) return `${e.toFixed(0)}`;
                    const i = [{
                        value: 1,
                        symbol: ""
                    }, {
                        value: 1e3,
                        symbol: "K"
                    }, {
                        value: 1e6,
                        symbol: "M"
                    }, {
                        value: 1e9,
                        symbol: "B"
                    }, {
                        value: 1e12,
                        symbol: "T"
                    }, {
                        value: 1e15,
                        symbol: "P"
                    }, {
                        value: 1e18,
                        symbol: "E"
                    }];
                    let r = 0;
                    for (r = i.length - 1; r > 0 && !(Math.abs(e) >= i[r].value); r--);
                    return (e / i[r].value).toFixed(t).replace(/\.0+$|(\.[0-9]*[1-9])0+$/, "$1") + i[r].symbol
                },
                n = (e, t = -1) => {
                    const i = e && t >= 0 ? Number(e).toFixed(t) : `${e}`;
                    let r = i,
                        o = "";
                    const s = i.indexOf(".");
                    return s > -1 && (r = i.slice(0, s), o = i.slice(s)), r.replace(/\d{1,3}(?=(\d{3})+$)/g, (e => `${e},`)) + o
                },
                a = (e, t = 2) => isNaN(e) ? "0.00%" : `${(100*e).toFixed(t)}%`
        },
        H9X4: (e, t, i) => {
            i.d(t, {
                IF: () => l,
                rO: () => c
            });
            var r = i("TVsB"),
                o = {
                    accountDetails: null,
                    collateralRates: [],
                    exchangeRate: []
                },
                s = "0.00000000";

            function n(e, t) {
                if (e.exchangeRate && !Array.isArray(e.exchangeRate)) return e.exchangeRate[t];
                if (e.exchangeRate.length > 0) {
                    var i = e.exchangeRate.find((function(e) {
                        return e.symbol === t
                    }));
                    if (i && i.price) return i.price
                }
                return (null === e || void 0 === e ? void 0 : e.btcToUsdRate) || null
            }
            var a = {
                    initData: function(e, t, i) {
                        return e && (o.accountDetails = e), t && (o.exchangeRate = t), i && (o.collateralRates = i), !!(o.accountDetails && o.exchangeRate && o.collateralRates && o.collateralRates.length > 0)
                    },
                    initDataIsolated: function(e) {
                        return e && (o.exchangeRate = e), !!o.exchangeRate
                    },
                    getAccountDetails: function() {
                        return o.accountDetails
                    },
                    getCollateralRate: function(e) {
                        var t = o.collateralRates;
                        if (0 === t.length) return null;
                        for (var i = 0; i < t.length; i += 1) {
                            var r = t[i];
                            if (r && r.assetNames && r.assetNames.includes(e)) return r.collaterals
                        }
                        return null
                    },
                    convertAssetAmount: function(e, t, i) {
                        var s = new r.A(0);
                        if (!o.exchangeRate || Array.isArray(o.exchangeRate) && 0 === o.exchangeRate.length) return s;
                        if (e === i) return t;
                        var a = n(o, "".concat(i).concat(e));
                        if (a) s = t.dividedBy(a);
                        else {
                            var l = n(o, "".concat(e).concat(i));
                            l && (s = t.times(l))
                        }
                        return s
                    },
                    getTotalBorrowed: function() {
                        return o.accountDetails ? a.convertAssetAmount("BTC", new r.A(o.accountDetails.totalLiabilityOfBtc), "USDT") : null
                    },
                    getTotalAssetIsolated: function(e) {
                        var t = new r.A(0);
                        if (e.base.netAssetOfBtc !== s) {
                            var i = new r.A(e.base.netAssetOfBtc);
                            t = t.plus(i)
                        }
                        if (e.quote.netAssetOfBtc !== s) {
                            var o = new r.A(e.quote.netAssetOfBtc);
                            t = t.plus(o)
                        }
                        return a.convertAssetAmount("BTC", t, "USDT")
                    },
                    getTotalBorrowedIsolated: function(e) {
                        var t = new r.A(0);
                        if (e.base.liabilityOfBtc !== s) {
                            var i = new r.A(e.base.liabilityOfBtc);
                            t = t.plus(i)
                        }
                        if (e.quote.liabilityOfBtc !== s) {
                            var o = new r.A(e.quote.liabilityOfBtc);
                            t = t.plus(o)
                        }
                        return a.convertAssetAmount("BTC", t, "USDT")
                    },
                    getAssetsCollateral: function() {
                        var e = {};
                        if (!o.accountDetails) return e;
                        var t = o.accountDetails.userAssets;
                        return t && 0 !== t.length ? (t.forEach((function(t) {
                            if (new r.A(t.netAsset).isGreaterThan(0)) {
                                var i = "USDT" === t.asset ? new r.A(t.free).plus(new r.A(t.locked)) : a.convertAssetAmount(t.asset, new r.A(t.free).plus(new r.A(t.locked)), "USDT");
                                e[t.asset] = a.calcCollateral(t.asset, i)
                            }
                        })), e) : e
                    },
                    getOtherAssetsCollateral: function(e, t) {
                        var i = new r.A(0);
                        return Object.keys(t).forEach((function(r) {
                            e !== r && (i = i.plus(t[r]))
                        })), i
                    },
                    calcCollateral: function(e, t) {
                        var i = a.getCollateralRate(e),
                            o = new r.A(0),
                            s = o;
                        if (!i || t.lte(0)) return s;
                        for (var n = 0; n < i.length; n += 1) {
                            var l = new r.A(i[n].tier),
                                c = new r.A(i[n].discountRate),
                                d = void 0;
                            if (t.isLessThanOrEqualTo(l)) {
                                d = t.minus(o).times(c), s = s.plus(d);
                                break
                            }
                            d = l.minus(o).times(c), s = s.plus(d), o = l
                        }
                        return s
                    },
                    calcActualEquity: function(e, t) {
                        var i = a.getCollateralRate(e),
                            o = new r.A(0),
                            s = o;
                        if (!i || t.lte(0)) return s;
                        for (var n = 0; n < i.length; n += 1) {
                            var l = new r.A(i[n].tier),
                                c = new r.A(i[n].discountRate);
                            if (c.isEqualTo(0)) return l;
                            var d = void 0;
                            if (t.isLessThanOrEqualTo(l)) {
                                d = t.minus(o).dividedBy(c), s = s.plus(d);
                                break
                            }
                            d = l.minus(o).dividedBy(c), s = s.plus(d), o = l
                        }
                        return s
                    },
                    calcIsolatedMaxTransferOutAmount: function(e, t, i, o) {
                        var s = t.plus(i),
                            n = i.times(o);
                        if (n.isLessThanOrEqualTo(0)) return e.free;
                        var l = s.minus(n),
                            c = a.convertAssetAmount("USDT", l, e.assetName);
                        return r.A.max(r.A.minimum(c, e.free), 0).toFixed(8)
                    },
                    reset: function() {
                        o.accountDetails = null, o.collateralRates = [], o.exchangeRate = []
                    }
                },
                l = function(e, t, i, o) {
                    if (!a.initData(t, i, o)) return "-";
                    var n = a.getAccountDetails();
                    if (!n) return "-";
                    var l = n.transferOutBar,
                        c = n.userAssets,
                        d = n.totalLiabilityOfBtc,
                        h = c.find((function(t) {
                            return t.asset === e
                        }));
                    if (!h || !h.netAsset || h.netAsset === s) return s;
                    var u = new r.A(h.free),
                        g = a.convertAssetAmount(e, u, "USDT");
                    if (g.isLessThanOrEqualTo(0)) return s;
                    if (d === s) return h.free;
                    var p = a.getTotalBorrowed();
                    if (!p) return s;
                    var m = p.times(l),
                        x = a.getAssetsCollateral(),
                        f = a.getOtherAssetsCollateral(e, x),
                        y = m.minus(f),
                        b = a.calcActualEquity(e, y);
                    if (b.isLessThanOrEqualTo(0)) return h.free;
                    var v = g.minus(b);
                    return v.isLessThanOrEqualTo(0) ? s : a.convertAssetAmount("USDT", v, e).toFixed(8)
                },
                c = function(e, t, i, r) {
                    var o = (null === t || void 0 === t ? void 0 : t.baseName) === e ? null === t || void 0 === t ? void 0 : t.base : null === t || void 0 === t ? void 0 : t.quote;
                    if (!(null === o || void 0 === o ? void 0 : o.free) || o.free === s) return s;
                    if (!a.initDataIsolated(r)) return "-";
                    var n = a.getTotalAssetIsolated(t),
                        l = a.getTotalBorrowedIsolated(t),
                        c = t.coeff.transferOutBar;
                    return a.calcIsolatedMaxTransferOutAmount(o, n, l, c)
                }
        },
        "/BSb": (e, t, i) => {
            i.d(t, {
                W: () => u
            });
            var r = i("mguP"),
                o = i("DTvD"),
                s = i("MD8j"),
                n = i("bQ69"),
                a = i("Ov3/"),
                l = i("1CC6"),
                c = i("Rb/Q"),
                d = i("hAzz"),
                h = i("G7PN"),
                u = function() {
                    var e = (0, s.wA)(),
                        t = (0, r._)((0, a.A)(n.rp), 1)[0],
                        i = l.U.read(n.R$),
                        u = "true" === l.U.read(n.q7),
                        g = (0, r._)((0, a.A)(n.A3), 1)[0],
                        p = (0, c.o)().layout,
                        m = (p = (0, d.mb)([n.a0, n.ug, n.Pv], p, "")) || g || n.Pv;
                    (0, h.wD)(), (0, o.useEffect)((function() {
                        n.S$ || e.setting.updateState({
                            color: i || t || n.Nz,
                            layout: m,
                            isRedUpGreenDown: u,
                            initSetting: !0
                        })
                    }), [n.S$])
                }
        },
        SRNX: (e, t, i) => {
            i.d(t, {
                z: () => p
            });
            var r = i("S+0I"),
                o = i("jbFV"),
                s = i.n(o),
                n = i("DTvD"),
                a = i("BmHO"),
                l = i.n(a),
                c = i("WT+B"),
                d = i("HwII"),
                h = l().createInstance({
                    name: "spot-trade-ui"
                }),
                u = new d.b,
                g = {
                    APP_NAME: h
                };

            function p(e, t, i) {
                var o = (0, n.useRef)(!1),
                    a = (0, n.useState)(!1),
                    d = a[0],
                    h = a[1],
                    p = (0, n.useState)(t),
                    m = p[0],
                    x = p[1],
                    f = i || {},
                    y = f.onAfterInitial,
                    b = f.targetForage,
                    v = void 0 === b ? "spot-trade-ui" : b,
                    C = f.getDefaultState,
                    w = f.onError,
                    A = g[v] || l().createInstance({
                        name: v
                    });
                A && !g[v] && (g[v] = A);
                var S = (0, c.Z)((function(e) {
                    "function" === typeof w && w(e)
                }));
                (0, n.useEffect)((function() {
                    return u.on("LOCAL_FORAGE_UPDATE_".concat(e), (function(e) {
                        var t = e.value;
                        m !== t && x(t)
                    }))
                }), [e, m, A]), (0, n.useEffect)((function() {
                    function i() {
                        return (i = (0, r._)(s().mark((function i() {
                            var r, n;
                            return s().wrap((function(i) {
                                for (;;) switch (i.prev = i.next) {
                                    case 0:
                                        if (!d && !o.current) {
                                            i.next = 2;
                                            break
                                        }
                                        return i.abrupt("return");
                                    case 2:
                                        return o.current = !0, i.next = 5, A.getItem(e);
                                    case 5:
                                        if (r = i.sent, null !== (n = r)) {
                                            i.next = 15;
                                            break
                                        }
                                        if ("function" !== typeof C) {
                                            i.next = 14;
                                            break
                                        }
                                        return i.next = 11, C();
                                    case 11:
                                        n = i.sent, i.next = 15;
                                        break;
                                    case 14:
                                        n = t;
                                    case 15:
                                        x(n), h(!0), "function" === typeof y && y(n), o.current = !1;
                                    case 19:
                                    case "end":
                                        return i.stop()
                                }
                            }), i)
                        })))).apply(this, arguments)
                    }! function() {
                        i.apply(this, arguments)
                    }()
                }), [e, d, y, t, A, C, m]);
                var T = (0, c.Z)((function(t) {
                    A.setItem(e, t).then((function() {
                        u.emit("LOCAL_FORAGE_UPDATE_".concat(e), {
                            value: t
                        })
                    })).catch((function(e) {
                        S(e)
                    }))
                }));
                return (0, n.useEffect)((function() {
                    d && A.setItem(e, m)
                }), [e, m, d, A]), [m, T, d]
            }
        },
        e3WN: (e, t, i) => {
            i.d(t, {
                Oc: () => c,
                PO: () => l,
                dh: () => d
            });
            var r = i("mguP"),
                o = i("DTvD"),
                s = i("bQ69"),
                n = i("hAzz"),
                a = i("qoEh"),
                l = function() {
                    return (0, o.useMemo)((function() {
                        return !s.S$ && (null === window || void 0 === window ? void 0 : window.location.href.indexOf("multipleChart")) > -1
                    }), [])
                },
                c = function() {
                    return function(e) {
                        var t = e.isMultipleChartPage,
                            i = e.tradeType;
                        if (t) switch (i) {
                            case "CROSS":
                            case "ISOLATED":
                                return "margin_multi_charts";
                            default:
                                return "spot_multi_charts"
                        }
                        switch (i) {
                            case "CROSS":
                                return "cross_margin_trading";
                            case "ISOLATED":
                                return "isolated_margin_trading";
                            default:
                                return "spot_trading"
                        }
                    }({
                        tradeType: (0, r._)((0, a.Gr)(), 1)[0],
                        isMultipleChartPage: (0, o.useMemo)((function() {
                            return window.location.href.indexOf("multipleChart") > -1
                        }), [])
                    })
                },
                d = function() {
                    var e = (0, r._)((0, a.Gr)(), 1)[0];
                    return (0, n.V$)(e) ? "margin" : "spot"
                }
        },
        FWGn: (e, t, i) => {
            i.d(t, {
                C: () => s,
                R: () => o
            });
            var r = i("DTvD"),
                o = function() {
                    return (0, r.useCallback)((function(e) {
                        window.wm && "function" === typeof window.wm.reportElementTime ? window.wm.reportElementTime({
                            name: e,
                            time: performance.now()
                        }) : console.warn("window.wm.reportElementTime is not a function")
                    }), [])
                },
                s = function(e) {
                    var t = e.name,
                        i = e.shouldReport,
                        s = o();
                    (0, r.useEffect)((function() {
                        i && s(t)
                    }), [s, i, t])
                }
        },
        gr5F: (e, t, i) => {
            i.d(t, {
                A: () => o
            });
            var r = i("DTvD");
            const o = function(e) {
                var t = e.callback,
                    i = e.id,
                    o = e.fatherId,
                    s = void 0 === o ? "__APP" : o;
                (0, r.useEffect)((function() {
                    return function() {}
                }), [t, i, s])
            }
        },
        YCIx: (e, t, i) => {
            i.r(t), i.d(t, {
                default: () => c
            });
            var r = i("mguP"),
                o = i("mXdx"),
                s = (i("DTvD"), i("Qhol")),
                n = i("QFAv"),
                a = i("KzWS"),
                l = function(e) {
                    var t = e.innerText,
                        i = e.handleClose;
                    return (0, o.jsx)(n.A, {
                        icon: (0, o.jsx)(a.A, {}),
                        closable: !0,
                        message: t,
                        onClose: i,
                        variant: "primary",
                        sz: "small",
                        className: "mt-[4px]"
                    })
                };
            const c = function(e) {
                e.isPro;
                var t = (0, r._)((0, s.Z9o)("copy-trading-warning-close", !1), 2),
                    i = t[0],
                    n = t[1],
                    a = (0, s.ok2)().getI18n;
                return i ? (0, o.jsx)(o.Fragment, {}) : (0, o.jsx)(l, {
                    innerText: a("trd-copy-trading-warning-tip", {
                        defaultValue: "Here is the Spot trading area for Lead Traders Copy"
                    }),
                    handleClose: function() {
                        n(!0)
                    }
                })
            }
        },
        f8Ts: (e, t, i) => {
            i.d(t, {
                A: () => E
            });
            var r = i("S+0I"),
                o = i("mguP"),
                s = i("jbFV"),
                n = i.n(s),
                a = i("mXdx"),
                l = i("DTvD"),
                c = i("BiCW"),
                d = i("1YyT"),
                h = i.n(d),
                u = i("MD8j"),
                g = i("ZL13"),
                p = i("xAfo"),
                m = i("2IQ4"),
                x = i("TD0h"),
                f = i("bQ69"),
                y = i("FkjH"),
                b = i("Ov3/"),
                v = "open-order-notification-voice-open",
                C = "open-new-order-notification-voice-open";
            y.A.updateUserSettings, y.A.onUserSettingsChange, y.A.getUserSettings;
            const w = function(e) {
                var t = e.children,
                    i = e.voiceQueueSize,
                    r = i || 2,
                    s = (0, l.useState)(new Date),
                    n = s[0],
                    c = s[1],
                    d = (0, l.useRef)([]),
                    h = (0, l.useRef)(),
                    u = (0, l.useRef)(null),
                    g = (0, l.useRef)(null),
                    y = function() {
                        var e = (0, o._)((0, b.A)(v, "0"), 2);
                        return {
                            enabledVoice: e[0],
                            setEnabledVoice: e[1],
                            showDisabledVoice: !0
                        }
                    }(),
                    w = y.enabledVoice,
                    A = y.setEnabledVoice,
                    S = function() {
                        var e = (0, o._)((0, b.A)(C, "0"), 2);
                        return {
                            enabledVoice: e[0],
                            setEnabledVoice: e[1],
                            showDisabledVoice: !0
                        }
                    }(),
                    T = S.enabledVoice,
                    k = S.setEnabledVoice,
                    L = function(e) {
                        null === e || void 0 === e || e.load();
                        var t = null === e || void 0 === e ? void 0 : e.play();
                        t && t.then((function() {
                            null === e || void 0 === e || e.play()
                        })).catch((function() {}))
                    },
                    _ = function() {
                        ! function() {
                            var e = null === u || void 0 === u ? void 0 : u.current;
                            e.src = "".concat(f.K5, "/static/spot-trade-ui/trade-sound.mp3"), L(e)
                        }(), h.current = setTimeout((function() {
                            null === d || void 0 === d || d.current.shift(), c(new Date), clearTimeout(h.current), h.current = null
                        }), 2e3)
                    },
                    P = {
                        notice: function(e) {
                            (null === d || void 0 === d ? void 0 : d.current.length) < r && "1" === JSON.parse(localStorage[v]) && (null === d || void 0 === d || d.current.push(e), c(new Date))
                        },
                        toogleSwitch: function() {
                            A("1" === w ? "0" : "1"), d.current = [], c(new Date)
                        },
                        enabledVoice: w || "0",
                        noticeV2: function() {
                            "1" === JSON.parse(localStorage[C]) && function() {
                                var e = null === g || void 0 === g ? void 0 : g.current;
                                e.src = "".concat(f.K5, "/static/futures/spot-trade-ui/trade-sound2.mp3"), L(e)
                            }()
                        },
                        toogleSwitchV2: function() {
                            k("1" === T ? "0" : "1"), c(new Date)
                        },
                        enabledVoiceV2: T || "0"
                    };
                return (0, l.useEffect)((function() {
                    "1" != w && (d.current = []), d && (null === d || void 0 === d ? void 0 : d.current.length) > 0 && (h.current || _())
                }), [n]), (0, p.A)((function() {})), (0, a.jsxs)(x.t.Provider, {
                    value: P,
                    children: [t, !f.S$ && (0, a.jsxs)(m.A, {
                        children: [(0, a.jsx)("audio", {
                            ref: u,
                            children: (0, a.jsx)("source", {
                                src: ""
                            })
                        }), (0, a.jsx)("audio", {
                            ref: g,
                            children: (0, a.jsx)("source", {
                                src: ""
                            })
                        })]
                    })]
                })
            };
            var A = i("dbe9"),
                S = i("UWKL"),
                T = i("92Cd"),
                k = i("qoEh"),
                L = i("Xeyi"),
                _ = i("PQuT"),
                P = (0, c.A)((0, r._)(n().mark((function e() {
                    return n().wrap((function(e) {
                        for (;;) switch (e.prev = e.next) {
                            case 0:
                                return e.abrupt("return", Promise.all([i.e(4560), i.e(2578), i.e(9919)]).then(i.bind(i, "OijF")));
                            case 1:
                            case "end":
                                return e.stop()
                        }
                    }), e)
                }))), {
                    webpack: function() {
                        return ["OijF"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                D = (0, c.A)((0, r._)(n().mark((function e() {
                    return n().wrap((function(e) {
                        for (;;) switch (e.prev = e.next) {
                            case 0:
                                return e.abrupt("return", i.e(9243).then(i.bind(i, "LhxN")));
                            case 1:
                            case "end":
                                return e.stop()
                        }
                    }), e)
                }))), {
                    webpack: function() {
                        return ["LhxN"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                I = (0, c.A)((0, r._)(n().mark((function e() {
                    return n().wrap((function(e) {
                        for (;;) switch (e.prev = e.next) {
                            case 0:
                                return e.abrupt("return", i.e(1e3).then(i.bind(i, "SFmo")));
                            case 1:
                            case "end":
                                return e.stop()
                        }
                    }), e)
                }))), {
                    webpack: function() {
                        return ["SFmo"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                V = (0, c.A)((0, r._)(n().mark((function e() {
                    return n().wrap((function(e) {
                        for (;;) switch (e.prev = e.next) {
                            case 0:
                                return e.abrupt("return", i.e(3715).then(i.bind(i, "3zF4")));
                            case 1:
                            case "end":
                                return e.stop()
                        }
                    }), e)
                }))), {
                    webpack: function() {
                        return ["3zF4"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                M = function(e) {
                    var t = e.children,
                        i = (0, o._)((0, k.Gr)(), 1)[0];
                    (0, A.N)(), (0, T.CM)(), (0, T.Vp)();
                    var r = (0, u.wA)();
                    return (0, l.useEffect)((function() {
                        r.userCenter.checkLogin()
                    }), [r.userCenter]), (0, a.jsxs)(a.Fragment, {
                        children: [t, (0, a.jsxs)(_.W, {
                            children: [(0, a.jsx)(P, {}), (0, L.V$)(i) && (0, a.jsx)(D, {}), (0, a.jsx)(I, {}), (0, a.jsx)(V, {})]
                        })]
                    })
                },
                B = function(e) {
                    var t = e.render,
                        i = (0, S.Q)().isMobile,
                        r = (0, u.d4)((function(e) {
                            return e.setting.layout
                        })),
                        o = r === f.Pv || r === f.a0 || i,
                        s = t ? t() : null,
                        n = (0, l.useMemo)((function() {
                            return {
                                vertical: o ? "top" : "bottom",
                                horizontal: "right"
                            }
                        }), [o]);
                    return (0, a.jsx)(_.z, {
                        children: (0, a.jsx)(g.A, {
                            queueSize: 2,
                            closable: !0,
                            autoHideDuration: 4500,
                            anchorOrigin: n,
                            disableAnimate: !0,
                            children: (0, a.jsx)(w, {
                                children: (0, a.jsx)(M, {
                                    children: s
                                })
                            })
                        })
                    })
                };
            B.propTypes = {
                render: h().func.isRequired
            };
            const E = (0, l.memo)(B)
        },
        wKUA: (e, t, i) => {
            i.d(t, {
                A: () => a,
                E: () => n
            });
            var r = i("DTvD"),
                o = {
                    visible: !1,
                    show: function() {
                        return null
                    },
                    hide: function() {
                        return null
                    },
                    alertId: ""
                },
                s = (0, r.createContext)(o),
                n = function() {
                    var e = (0, r.useState)(""),
                        t = e[0],
                        i = e[1],
                        s = (0, r.useState)(o.visible),
                        n = s[0],
                        a = s[1],
                        l = (0, r.useCallback)((function() {
                            return a(!1)
                        }), []);
                    return {
                        visible: n,
                        show: (0, r.useCallback)((function(e) {
                            i(e), a(!0)
                        }), []),
                        hide: l,
                        alertId: t
                    }
                };
            const a = s
        },
        hFZM: (e, t, i) => {
            i.r(t), i.d(t, {
                createMainToobar: () => Y,
                default: () => se
            });
            var r = i("S+0I"),
                o = i("mguP"),
                s = i("jbFV"),
                n = i.n(s),
                a = i("mXdx"),
                l = i("DTvD"),
                c = i("UXyB"),
                d = i("cvvB"),
                h = i("Xz3K"),
                u = i("BiCW"),
                g = i("bQ69"),
                p = i("p6uk"),
                m = i("NJD8"),
                x = i("wtFP"),
                f = i("cDUC"),
                y = i("C7Nc"),
                b = i("Qhol"),
                v = i("Apcd"),
                C = i("FkjH"),
                w = i("b9LU"),
                A = i("idG9"),
                S = i("d+Ar"),
                T = i("MD8j"),
                k = i("Vhyo"),
                L = i("tSdT"),
                _ = i("6ScU"),
                P = i("T0Sc"),
                D = i("c6eW"),
                I = i("wKUA"),
                V = function() {
                    var e = (0, P.o)("trd", "trade-ui").getI18n,
                        t = (0, T.wA)(),
                        i = (0, l.useContext)(I.A),
                        o = i.visible,
                        s = i.hide,
                        c = i.alertId,
                        d = (0, l.useMemo)((function() {
                            return e("alert-deletion-confirmation-text", {
                                defaultValue: "Are you sure you want to delete the alert?"
                            }) || ""
                        }), [e]),
                        h = (0, l.useMemo)((function() {
                            return e("alert-deleted", {
                                defaultValue: "Price alert deleted"
                            })
                        }), [e]),
                        u = (0, l.useMemo)((function() {
                            return e("dialog-cancel", {
                                defaultValue: "Cancel"
                            }) || ""
                        }), [e]),
                        g = (0, l.useMemo)((function() {
                            return e("dialog-confirm", {
                                defaultValue: "Confirm"
                            }) || ""
                        }), [e]),
                        p = (0, L.A)().enqueueNotification,
                        m = (0, l.useCallback)((0, r._)(n().mark((function e() {
                            return n().wrap((function(e) {
                                for (;;) switch (e.prev = e.next) {
                                    case 0:
                                        return e.prev = 0, e.next = 3, t.orderAlert.deleteAlert(c);
                                    case 3:
                                        return e.next = 5, t.orderAlert.queryAlerts();
                                    case 5:
                                        p({
                                            message: h,
                                            variant: "success",
                                            anchorOrigin: {
                                                vertical: "bottom",
                                                horizontal: "right"
                                            }
                                        });
                                    case 6:
                                        return e.prev = 6, s(), e.finish(6);
                                    case 9:
                                    case "end":
                                        return e.stop()
                                }
                            }), e, null, [
                                [0, , 6, 9]
                            ])
                        }))), [t.orderAlert, c, p, h, s]);
                    return (0, a.jsx)(_.Ay.Modal, {
                        visible: o,
                        children: (0, a.jsx)(_.Ay.SimpleLayout, {
                            icon: (0, a.jsx)(D.A, {
                                size: 96
                            }),
                            description: (0, a.jsx)(k.A, {
                                color: "t.secondary",
                                children: d
                            }),
                            footerProps: {
                                onOk: m,
                                onCancel: s,
                                OkContent: g,
                                CancelContent: u
                            }
                        })
                    })
                },
                M = i("Hf/4"),
                B = i("qv9I"),
                E = i("56yC"),
                j = i("Nimi"),
                O = (0, u.A)((0, r._)(n().mark((function e() {
                    var t;
                    return n().wrap((function(e) {
                        for (;;) switch (e.prev = e.next) {
                            case 0:
                                return e.next = 2, Promise.all([i.e(1694), i.e(9402), i.e(2021), i.e(8281), i.e(596)]).then(i.bind(i, "yjqD"));
                            case 2:
                                return t = e.sent, e.abrupt("return", t.OrderFormDialog);
                            case 4:
                            case "end":
                                return e.stop()
                        }
                    }), e)
                }))), {
                    webpack: function() {
                        return ["yjqD"]
                    }
                }),
                H = function(e) {
                    var t = e.symbol,
                        i = (0, l.useContext)(S.A),
                        r = i.show,
                        o = i.hideDialog,
                        s = i.price;
                    return r ? (0, a.jsx)(O, {
                        symbol: t,
                        price: s,
                        visible: r,
                        onCloseDialog: o,
                        onSuccess: o
                    }) : (0, a.jsx)(a.Fragment, {})
                },
                R = i("vjpm"),
                N = i("lW1t"),
                W = i("e3WN"),
                F = i("3aNG"),
                z = i("NyG8"),
                X = [d.t1.Store.DisplayIntervals.Time, d.t1.Store.DisplayIntervals["1s"], d.t1.Store.DisplayIntervals["1m"], d.t1.Store.DisplayIntervals["3m"], d.t1.Store.DisplayIntervals["5m"], d.t1.Store.DisplayIntervals["15m"], d.t1.Store.DisplayIntervals["30m"], d.t1.Store.DisplayIntervals["1h"], d.t1.Store.DisplayIntervals["2h"], d.t1.Store.DisplayIntervals["4h"], d.t1.Store.DisplayIntervals["6h"], d.t1.Store.DisplayIntervals["8h"], d.t1.Store.DisplayIntervals["12h"], d.t1.Store.DisplayIntervals["1d"], d.t1.Store.DisplayIntervals["3d"], d.t1.Store.DisplayIntervals["1w"], d.t1.Store.DisplayIntervals["1M"]],
                U = d.t1.Store.ChartMode,
                G = d.t1.Store.Tabs.Origin,
                $ = d.t1.Store.Tabs.TradingView,
                Y = function(e) {
                    var t = e.symbol,
                        i = e.headerSlot,
                        r = e.isPro,
                        s = e.showFullscreenIcon,
                        n = e.showChartModeDropdown,
                        a = e.tabKeys;
                    return function(e) {
                        var c = e.onSymbolChange;
                        return function(e) {
                            var h = e.namespace,
                                u = e.components,
                                g = u.intervalFilter,
                                p = u.indicator,
                                m = u.chartStyleDropdown,
                                x = u.cameraButton,
                                f = u.compareButton,
                                y = u.tabs,
                                b = u.fullscreen,
                                v = u.chartModeDropdown,
                                C = u.symbolTabs,
                                w = u.moreSettings,
                                A = u.dataSourceDropdown,
                                S = u.sameSymbolMiniMultiChartBrowseModeToggle,
                                k = u.goDate,
                                L = u.originalCandlestickSetting,
                                _ = ((0, W.PO)(), (0, E.y$)(h)),
                                P = d.t1.Store.createStore(h),
                                D = _((0, l.useMemo)((function() {
                                    return (0, E.j8)({
                                        symbol: t
                                    })
                                }), [t]).getShowDataSource),
                                I = (0, o._)(P(d.t1.Store.getChartMode), 1)[0],
                                V = (0, o._)(P(d.t1.Store.getActiveTab), 1)[0],
                                M = (0, T.wA)(),
                                B = (0, R.Q)().isMobile,
                                j = (0, T.d4)(N.makeFullscreen),
                                O = (0, z.o)({
                                    namespace: h,
                                    chartMode: I
                                }),
                                H = (0, F.IO)({
                                    namespace: h
                                }),
                                Y = (0, l.useMemo)((function() {
                                    return g({
                                        intervalOptions: X
                                    })
                                }), [g]),
                                Z = (0, l.useMemo)((function() {
                                    return p({})
                                }), [p]),
                                K = (0, l.useMemo)((function() {
                                    return m({
                                        type: V === G ? "Origin" : "TradingView"
                                    })
                                }), [V, m]),
                                q = (0, l.useMemo)((function() {
                                    return x()
                                }), [x]),
                                Q = (0, l.useMemo)((function() {
                                    return f()
                                }), [f]),
                                J = (0, l.useMemo)((function() {
                                    return B ? null : C({
                                        onSymbolChange: c
                                    })
                                }), [B, C]),
                                ee = (0, l.useMemo)((function() {
                                    return y({
                                        tabKeys: a
                                    })
                                }), [y]),
                                te = (0, l.useMemo)((function() {
                                    return s ? b({
                                        expanded: !j,
                                        onClick: M.pageStore.toggleFullScreen
                                    }) : null
                                }), [b, j, M.pageStore.toggleFullScreen]),
                                ie = (0, l.useMemo)((function() {
                                    return n ? v({
                                        onClick: H,
                                        options: {
                                            tradingView: [
                                                [U.Single],
                                                [U.VerticalTwo, U.HorizontalTwo],
                                                [U.VerticalThree, U.HorizontalThree],
                                                [U.Four]
                                            ]
                                        }
                                    }) : null
                                }), [n, v, H]),
                                re = (0, l.useMemo)((function() {
                                    return D ? A({}) : null
                                }), [D, A]),
                                oe = S({
                                    isFullscreen: j
                                }),
                                se = (0, l.useMemo)((function() {
                                    return k({})
                                }), [k]),
                                ne = (0, l.useMemo)((function() {
                                    return L({})
                                }), [L]),
                                ae = (0, l.useMemo)((function() {
                                    return w({
                                        moreSettings: O
                                    })
                                }), [w, O]);
                            return V === G ? I === U.Single ? {
                                medium: {
                                    head: [i, Y, se, Z, K, ne, ae, re],
                                    mid: [],
                                    tail: [ee, te, ie],
                                    useDraggableHandle: r && !j
                                },
                                small: {
                                    head: [Y]
                                }
                            } : {
                                medium: {
                                    head: [i, J],
                                    mid: [],
                                    tail: [oe, ie],
                                    useDraggableHandle: r && !j
                                },
                                small: {
                                    head: []
                                }
                            } : V === $ ? I === U.Single ? {
                                medium: {
                                    head: [i, Y, Z, K, q, Q, ae, re],
                                    mid: [],
                                    tail: [ee, te, ie],
                                    useDraggableHandle: r && !j
                                },
                                small: {
                                    head: [Y]
                                }
                            } : {
                                medium: {
                                    head: [i, Y, Z, K, q, Q],
                                    mid: [],
                                    tail: [ie],
                                    useDraggableHandle: r && !j
                                },
                                small: {
                                    head: [Y]
                                }
                            } : {
                                medium: {
                                    head: [],
                                    mid: [],
                                    tail: [ee],
                                    useDraggableHandle: r && !j
                                },
                                small: {
                                    head: []
                                }
                            }
                        }
                    }
                },
                Z = function(e) {
                    var t = e.onRemove,
                        i = e.onResume;
                    return function(e) {
                        var r = e.components,
                            o = r.intervalFilter,
                            s = r.indicator,
                            n = r.miniSymbolStatus,
                            a = r.resumeWindow,
                            l = r.closeButton,
                            c = o({
                                intervalOptions: X
                            });
                        return {
                            medium: {
                                head: [c, s({})],
                                mid: [n({
                                    showChange: !0
                                })],
                                tail: [a({
                                    onResume: i
                                }), l({
                                    onRemove: t
                                })],
                                useDraggableHandle: !1
                            },
                            small: {
                                head: [c]
                            }
                        }
                    }
                },
                K = i("5s+a"),
                q = (0, u.A)((function() {
                    return Promise.all([i.e(8073), i.e(4717)]).then(i.bind(i, "wSeb"))
                }), {
                    webpack: function() {
                        return ["wSeb"]
                    }
                }),
                Q = (0, u.A)((function() {
                    return Promise.all([i.e(4945), i.e(8073), i.e(3547)]).then(i.bind(i, "l38Q"))
                }), {
                    webpack: function() {
                        return ["l38Q"]
                    }
                }),
                J = (0, u.A)((function() {
                    return i.e(5277).then(i.bind(i, "XZ58"))
                }), {
                    webpack: function() {
                        return ["XZ58"]
                    }
                }),
                ee = d.t1.Store.ChartMode,
                te = d.t1.Store.Tabs,
                ie = (0, g.D$)(),
                re = [
                    [h.mC.KLINE_ZOOMIN, h.mC.KLINE_ZOOMOUT],
                    [h.mC.KLINE_MOVEL, h.mC.KLINE_MOVER],
                    [h.mC.KLINE_SWITCH]
                ],
                oe = (0, u.A)((0, r._)(n().mark((function e() {
                    var t;
                    return n().wrap((function(e) {
                        for (;;) switch (e.prev = e.next) {
                            case 0:
                                return e.next = 2, i.e(2436).then(i.bind(i, "AlSY"));
                            case 2:
                                return t = e.sent, e.abrupt("return", t.OrderModificationModal);
                            case 4:
                            case "end":
                                return e.stop()
                        }
                    }), e)
                }))), {
                    webpack: function() {
                        return ["AlSY"]
                    },
                    ssr: !1
                });
            const se = function(e) {
                var t = e.symbol,
                    i = e.namespace,
                    s = e.useMiniTicker,
                    h = e.shortcutEnabled,
                    u = e.generateToolbar,
                    T = d.t1.Store.createStore(i),
                    k = (0, o._)(T(d.t1.Store.getChartMode), 1)[0],
                    L = (0, o._)(T(d.t1.Store.getInterval), 1)[0],
                    _ = (0, o._)(T(d.t1.Store.getActiveTab), 1)[0],
                    P = (0, b.nHk)(),
                    D = (0, F.xQ)({
                        namespace: i
                    }),
                    O = (0, b.cHp)(),
                    R = (0, y.ot)(),
                    N = (0, b.hFK)(),
                    W = N[t],
                    z = (0, l.useRef)({}),
                    U = (0, A.E)(),
                    G = (0, S.E)(),
                    $ = (0, I.E)(),
                    Y = (0, b.i24)(),
                    se = (0, b.DPo)().isLight,
                    ne = (0, K.Zf)(t),
                    ae = (0, b.ok2)().getI18n,
                    le = (0, b.lw3)(),
                    ce = ae("trd-premrket-will-open", {
                        defaultValue: "will be open for Pre-Market trading in"
                    }),
                    de = ne && !le,
                    he = (0, l.useMemo)((function() {
                        return se ? "white" : "black"
                    }), [se]);
                ! function(e) {
                    var t = e.namespace,
                        i = e.symbol,
                        r = (0, E.y$)(t),
                        s = B.createStore(t),
                        n = (0, M.A)(i),
                        a = r((0, l.useMemo)((function() {
                            return (0, E.j8)({
                                symbol: i
                            })
                        }), [i]).getShowDataSource),
                        c = (0, o._)(s(B.getDataSource), 2)[1];
                    (0, l.useEffect)((function() {
                        a && n !== i && c((function(e) {
                            var t = e.dataSource;
                            return t === B.DataSource.Old ? B.DataSource.New : t
                        }))
                    }), [n, c, a, i])
                }({
                    namespace: i,
                    symbol: t
                }), (0, l.useEffect)((function() {
                    k === ee.Four && (0, x.u4)("ModuleView", {
                        eventName: "multi_charts",
                        clientTyp: "web",
                        title: _ === te.Origin ? "original_multi_charts" : "tradingview_multi_charts",
                        df_source: Y ? "spot" : "margin",
                        $element_id: "display_4_charts"
                    })
                }), [Y, k, _]), (0, l.useEffect)((function() {
                    P && D()
                }), [P]), (0, c.A)((function() {
                    (0, j.u)({
                        eventLabel: "chart::time_".concat(L),
                        elementId: "chart-time-".concat(L)
                    })
                }), [L]), (0, c.A)((function() {
                    (0, j.u)({
                        eventLabel: "chart::display_".concat(_),
                        elementId: "chart-display-".concat(_)
                    })
                }), [_]), (0, l.useEffect)((function() {
                    return ie.getStreamTickers().subscribe((function(e) {
                        z.current = e
                    }))
                }), []);
                var ue, ge = (0, l.useCallback)((function(e) {
                        var t = (N[e] || {}).symbolDisplay;
                        return void 0 === t ? e : t
                    }), [N]),
                    pe = (0, l.useCallback)((function(e) {
                        return "" === e ? "" : N[e] ? e : "BTCUSDT"
                    }), [O, N]),
                    me = (0, l.useCallback)(function() {
                        var e = (0, r._)(n().mark((function e(t) {
                            var i, r, s, a, l, c, d;
                            return n().wrap((function(e) {
                                for (;;) switch (e.prev = e.next) {
                                    case 0:
                                        return e.t0 = o._, e.next = 3, (0, v.tZ)({
                                            symbol: t
                                        });
                                    case 3:
                                        return e.t1 = e.sent, i = (0, e.t0)(e.t1, 2), r = i[1], s = (null === r || void 0 === r ? void 0 : r.data) || {}, a = s.planToOpenMarketTime, l = void 0 === a ? 0 : a, c = (N[t] || {}).tradingStatus, d = "TRADE" === c || !!z.current[t] || Date.now() > l, e.abrupt("return", {
                                            isReadyToTrade: d,
                                            openTime: l
                                        });
                                    case 10:
                                    case "end":
                                        return e.stop()
                                }
                            }), e)
                        })));
                        return function(t) {
                            return e.apply(this, arguments)
                        }
                    }(), [N]),
                    xe = (0, l.useCallback)((function(e) {
                        var t, i = e.symbol,
                            r = N[i];
                        if (r) {
                            var o = null === (t = r.symbolDisplay) || void 0 === t ? void 0 : t.replace("/", "_");
                            R({
                                stateSymbol: o,
                                resPathList: [o]
                            })
                        }
                    }), [R, N]),
                    fe = (0, l.useCallback)((function(e) {
                        return (0, a.jsx)(l.Suspense, {
                            fallback: null,
                            children: (0, a.jsx)(Q, {
                                symbol: e.symbol,
                                namespace: e.namespace,
                                useMiniTicker: k !== d.t1.Store.ChartMode.Single || s,
                                chartMode: k
                            })
                        })
                    }), [k, s]),
                    ye = (0, l.useCallback)((function(e) {
                        return (0, a.jsx)(l.Suspense, {
                            fallback: null,
                            children: (0, a.jsx)(q, {
                                symbol: e.symbol,
                                namespace: e.namespace,
                                useMiniTicker: k !== d.t1.Store.ChartMode.Single || s
                            })
                        })
                    }), [k, s]),
                    be = (0, l.useCallback)((function(e) {
                        return (0, a.jsx)(l.Suspense, {
                            fallback: null,
                            children: (0, a.jsx)(J, {
                                namespace: e.namespace,
                                symbol: e.symbol,
                                forceHorizontalMode: !0
                            })
                        })
                    }), []),
                    ve = (0, l.useCallback)((function() {
                        return (0, f.Nj)({
                            source: "chart"
                        })
                    }), []);
                return (0, a.jsx)(A.A.Provider, {
                    value: U,
                    children: (0, a.jsx)(S.A.Provider, {
                        value: G,
                        children: (0, a.jsx)(I.A.Provider, {
                            value: $,
                            children: (0, a.jsxs)(w.A, {
                                currentSymbol: t,
                                currentBaseAsset: (null === W || void 0 === W ? void 0 : W.baseAsset) || "",
                                currentQuoteAsset: (null === W || void 0 === W ? void 0 : W.quoteAsset) || "",
                                isETFCoin: Y && (null === W || void 0 === W ? void 0 : W.etf),
                                children: [(0, a.jsx)(m.default, {
                                    placement: "top",
                                    tipWidth: 140,
                                    shortcutKeys: re,
                                    i18nKey: ["widget-shortcuts-chart-zoom", "widget-shortcuts-chart-move", "widget-shortcuts-chart-switch"]
                                }), (0, a.jsx)(d.t1.Containers.Chart, {
                                    namespace: i,
                                    symbol: t,
                                    hostAddress: g.K5,
                                    themeName: he,
                                    getSymbolDisplayName: ge,
                                    checkTradeStatus: me,
                                    checkMiniSymbolAvaliablility: pe,
                                    beforeMiniChartSymbolChange: xe,
                                    hasDoneFetchingSymbols: (ue = N, Object.keys(ue).length > 1),
                                    generateMiniToolbar: Z,
                                    generateToolbar: u,
                                    basicKline: fe,
                                    tradingView: ye,
                                    depth: be,
                                    shortcutEnabled: h,
                                    intervalOptions: X,
                                    electron: C.A,
                                    willOpenInText: de ? ce : void 0
                                }), U.showOrderModification && (0, a.jsx)(oe, {
                                    visible: U.showOrderModification,
                                    order: U.order,
                                    setOpen: U.setShowOrderModification,
                                    onPlaceOrderSuccess: ve
                                }), (0, a.jsx)(p.A, {
                                    ref: U.modalRef,
                                    canMaskClick: !0
                                }), (0, a.jsx)(H, {
                                    symbol: t
                                }), (0, a.jsx)(V, {})]
                            })
                        })
                    })
                })
            }
        },
        "/OXm": (e, t, i) => {
            i.d(t, {
                I2: () => u,
                Qk: () => h,
                h7: () => d,
                y$: () => c
            });
            var r = i("d12p"),
                o = i("t21c"),
                s = i.n(o),
                n = i("eAFj"),
                a = i("yDds"),
                l = {
                    ts: 0,
                    avgBuyPrices: [],
                    avgSellPrices: []
                },
                c = s()((function(e) {
                    return t = "spot-".concat(e), (0, n.A)((0, a.Zr)((function(e) {
                        var t = function() {
                            for (var t = arguments.length, i = new Array(t), o = 0; o < t; o++) i[o] = arguments[o];
                            try {
                                e.apply(void 0, (0, r._)(i))
                            } catch (s) {
                                console.warn("something went wrong while setting the storage")
                            }
                        };
                        return {
                            averageCostData: l,
                            setAverageCostData: function(e) {
                                return t({
                                    averageCostData: e
                                })
                            },
                            resetAverageCostData: function() {
                                return t({
                                    averageCostData: l
                                })
                            },
                            averageBuyPricePeriod: "183",
                            setAverageBuyPricePeriod: function(e) {
                                return t({
                                    averageBuyPricePeriod: e
                                })
                            },
                            averageSellPricePeriod: "183",
                            setAverageSellPricePeriod: function(e) {
                                return t({
                                    averageSellPricePeriod: e
                                })
                            }
                        }
                    }), {
                        name: t
                    }));
                    var t
                })),
                d = function(e) {
                    return [e.averageCostData, e.setAverageCostData, e.resetAverageCostData]
                },
                h = function(e) {
                    return [e.averageBuyPricePeriod, e.setAverageBuyPricePeriod]
                },
                u = function(e) {
                    return [e.averageSellPricePeriod, e.setAverageSellPricePeriod]
                }
        },
        "56yC": (e, t, i) => {
            i.d(t, {
                ol: () => x,
                j8: () => A,
                y$: () => S,
                m0: () => b,
                MG: () => w
            });
            var r = i("S+0I"),
                o = i("iKvg"),
                s = i("hrAD"),
                n = i("qoEP"),
                a = i("jbFV"),
                l = i.n(a),
                c = i("eAFj"),
                d = i("5L7L"),
                h = i("VA12"),
                u = i("XqCI");
            const g = async e => {
                    try {
                        return (0, h.get)(`/api/v3/klines?${(0,u.E2)(e)}`)
                    } catch (t) {
                        return []
                    }
                },
                p = async e => {
                    try {
                        return (0, h.get)(`/api/v3/uiKlines?${(0,u.E2)(e)}`)
                    } catch (t) {
                        return []
                    }
                },
                m = async e => {
                    try {
                        return (0, h.get)(`/bapi/asset/v2/public/asset-service/product/get-product-by-symbol?${(0,u.E2)(e)}`)
                    } catch (t) {
                        return {
                            success: !1,
                            data: null,
                            code: "000000"
                        }
                    }
                };
            var x, f, y = i("qv9I");
            ! function(e) {
                e[e.Unavailable = 0] = "Unavailable", e[e.Latest = 1] = "Latest", e[e.Full = 2] = "Full", e[e.FullWithSwapped = 3] = "FullWithSwapped"
            }(x || (x = {})),
            function(e) {
                e[e.Ready = 0] = "Ready", e[e.Loading = 1] = "Loading"
            }(f || (f = {}));
            var b = function(e) {
                    return e.fetchProductInfo
                },
                v = function(e) {
                    return e.fetchState
                },
                C = function(e) {
                    return e.cache
                },
                w = function(e) {
                    switch (e) {
                        case x.Unavailable:
                            return null;
                        case x.Full:
                            return g;
                        default:
                            return p
                    }
                },
                A = function(e) {
                    var t = e.symbol,
                        i = function(e) {
                            return C(e)[t]
                        },
                        r = function(e) {
                            return !!i(e)
                        },
                        o = function(e) {
                            return i(e).isKlineEmpty
                        },
                        s = function(e) {
                            return v(e) === f.Ready && r(e)
                        },
                        n = function(e) {
                            var t;
                            return !!(null === (t = i(e)) || void 0 === t ? void 0 : t.ks)
                        },
                        a = function(e) {
                            var t;
                            return null === (t = i(e)) || void 0 === t ? void 0 : t.tokenSwap
                        },
                        l = function(e) {
                            var t;
                            return null === (t = i(e)) || void 0 === t ? void 0 : t.b
                        },
                        c = function(e) {
                            var t;
                            return null === (t = i(e)) || void 0 === t ? void 0 : t.q
                        },
                        d = function(e) {
                            if (!s(e)) return !1;
                            var t = n(e),
                                i = l(e),
                                r = a(e),
                                c = o(e);
                            return !(!t || !r) && (i === r || !c)
                        };
                    return {
                        getProductInfo: i,
                        getHasProductInfo: r,
                        getIsKlineEmpty: o,
                        getIsDataReady: s,
                        getHasOtherDataSource: n,
                        getSymbol: function(e) {
                            var t;
                            return null === (t = i(e)) || void 0 === t ? void 0 : t.s
                        },
                        getTokenSwap: a,
                        getBaseAsset: l,
                        getQuoteAsset: c,
                        getPredecessorSymbol: function(e) {
                            var t = n(e),
                                i = a(e);
                            if (!t || !i) return "";
                            var r = c(e);
                            return "".concat(i).concat(r)
                        },
                        getShowDataSource: d,
                        createGetDataSourceType: function(e) {
                            var t = e.chartMode,
                                i = e.dataSource;
                            return function(e) {
                                if (!s(e)) return x.Unavailable;
                                var r = d(e),
                                    n = a(e);
                                if (!r || !n || i === y.DataSource.New || t !== y.ChartMode.Single) return x.Latest;
                                var c = l(e),
                                    h = o(e);
                                return c === n ? x.Full : h ? x.Latest : x.FullWithSwapped
                            }
                        },
                        createGetKlineApi: function(e) {
                            return function(t) {
                                var i = e(t);
                                return w(i)
                            }
                        }
                    }
                },
                S = (0, d.memoize)((function() {
                    return (0, c.A)((function(e, t) {
                        return {
                            fetchState: f.Ready,
                            cache: {},
                            fetchProductInfo: function() {
                                var i = (0, r._)(l().mark((function i(r) {
                                    var a, c, d, h, u, g, x, y, b, w, S, T;
                                    return l().wrap((function(i) {
                                        for (;;) switch (i.prev = i.next) {
                                            case 0:
                                                if (a = r.symbol, c = t(), d = A({
                                                        symbol: a
                                                    }).getProductInfo, !d(c)) {
                                                    i.next = 6;
                                                    break
                                                }
                                                return i.abrupt("return");
                                            case 6:
                                                if (v(c) !== f.Loading) {
                                                    i.next = 9;
                                                    break
                                                }
                                                return i.abrupt("return");
                                            case 9:
                                                return e({
                                                    fetchState: f.Loading
                                                }), i.next = 12, m({
                                                    symbol: a
                                                });
                                            case 12:
                                                if (h = i.sent, u = h.data) {
                                                    i.next = 16;
                                                    break
                                                }
                                                return i.abrupt("return");
                                            case 16:
                                                if (g = u.ks, x = u.tokenSwap, y = u.b, b = u.q, w = C(c), !g || !x || y === x) {
                                                    i.next = 26;
                                                    break
                                                }
                                                return S = "".concat(x).concat(b), i.next = 22, p({
                                                    symbol: S,
                                                    interval: "1d"
                                                });
                                            case 22:
                                                T = i.sent, e({
                                                    fetchState: f.Ready,
                                                    cache: (0, n._)((0, s._)({}, w), (0, o._)({}, a, (0, n._)((0, s._)({}, u), {
                                                        isKlineEmpty: 0 === T.length
                                                    })))
                                                }), i.next = 27;
                                                break;
                                            case 26:
                                                e({
                                                    fetchState: f.Ready,
                                                    cache: (0, n._)((0, s._)({}, w), (0, o._)({}, a, (0, n._)((0, s._)({}, u), {
                                                        isKlineEmpty: !0
                                                    })))
                                                });
                                            case 27:
                                            case "end":
                                                return i.stop()
                                        }
                                    }), i)
                                })));
                                return function(e) {
                                    return i.apply(this, arguments)
                                }
                            }()
                        }
                    }))
                }))
        },
        "3aNG": (e, t, i) => {
            i.d(t, {
                IO: () => p,
                Jw: () => m,
                YT: () => h,
                bg: () => d,
                kQ: () => x,
                xQ: () => g,
                yR: () => u
            });
            var r = i("mguP"),
                o = i("DTvD"),
                s = i("593c"),
                n = i("cvvB"),
                a = i("Qhol"),
                l = i("wtFP"),
                c = function(e) {
                    return e === n.t1.Store.Tabs.Origin ? "original" : "tradingview"
                },
                d = function(e) {
                    return e ? "spot_trading" : "margin_trading"
                },
                h = function(e) {
                    return e ? "spot" : "margin"
                },
                u = function(e) {
                    var t = e.namespace,
                        i = n.t1.Store.createStore(t),
                        u = (0, r._)(i(n.t1.Store.getActiveTab, s.A), 1)[0],
                        g = (0, a.i24)();
                    return (0, o.useCallback)((function(e) {
                        e !== n.t1.Store.OrderMarkOption.AverageSellPrice ? (0, l.u4)("$WebClick", {
                            eventName: "kline_display_settings",
                            title: c(u),
                            $element_id: e === n.t1.Store.OrderMarkOption.Open ? "open_orders" : "order_history",
                            pageName: d(g),
                            df_source: h(g)
                        }) : (0, l.u4)("$WebClick", {
                            $element_id: "Sell_cost_price",
                            pageName: d(g),
                            df_source: h(g)
                        })
                    }), [u, g])
                },
                g = function(e) {
                    var t = e.namespace,
                        i = n.t1.Store.createStore(t),
                        u = (0, r._)(i(n.t1.Store.getActiveTab, s.A), 1)[0],
                        g = (0, r._)(i(n.t1.Store.getShowLimitOrder, s.A), 1)[0],
                        p = (0, r._)(i(n.t1.Store.getShowExecutionOrder, s.A), 1)[0],
                        m = (0, a.i24)();
                    return (0, o.useCallback)((function() {
                        return (0, l.u4)("ModuleView", {
                            eventName: "kline_display_settings",
                            title: c(u),
                            pageName: d(m),
                            df_source: h(m),
                            df_tpSettings: JSON.stringify({
                                open_order: g,
                                order_history: p
                            })
                        })
                    }), [u, m, p, g])
                },
                p = function(e) {
                    var t = e.namespace,
                        i = n.t1.Store.createStore(t),
                        c = (0, r._)(i(n.t1.Store.getActiveTab, s.A), 2),
                        d = c[0],
                        h = c[1],
                        u = (0, a.i24)();
                    return (0, o.useCallback)((function(e) {
                        d === n.t1.Store.Tabs.Depth && h(n.t1.Store.Tabs.Origin), (0, l.u4)("$WebClick", {
                            eventName: "multi_charts",
                            title: d === n.t1.Store.Tabs.Origin ? "original_multi_charts" : "tradingview_multi_charts",
                            $element_id: 1 === e ? "1_chart_entrance" : "4_charts_entrance",
                            df_source: u ? "spot" : "margin"
                        })
                    }), [u, d, h])
                },
                m = function() {
                    var e = (0, a.gh4)("Display_currency_information", "Display_all_currency_information"),
                        t = (0, a.i24)();
                    return (0, o.useCallback)((function() {
                        return (0, l.u4)("$WebClick", {
                            $element_id: "spotlight",
                            df_source: t ? "spot" : "margin",
                            pageName: t ? "spot_kline" : "margin_kline",
                            mode: e ? "display_all_currency_information" : "display_current_currency_information"
                        })
                    }), [e, t])
                },
                x = function(e) {
                    var t = e.period;
                    (0, l.u4)("$WebClick", {
                        $element_id: "Sell_cost_price_time_".concat("183" === t ? "180" : t),
                        pageName: d(!0)
                    })
                }
        },
        NyG8: (e, t, i) => {
            i.d(t, {
                o: () => f
            });
            var r = i("mguP"),
                o = i("vjpm"),
                s = i("qv9I"),
                n = i("DTvD"),
                a = i("593c"),
                l = i("/OXm"),
                c = i("me6M"),
                d = i("3aNG"),
                h = i("Qhol"),
                u = i("CLKF"),
                g = i("nlZ+"),
                p = i("e3WN"),
                m = i("c2J1"),
                x = function(e) {
                    return function(t) {
                        var i = t.toggled,
                            r = t.source;
                        e("self" === r ? !i : i)
                    }
                },
                f = function(e) {
                    var t = e.namespace,
                        i = e.chartMode,
                        f = (0, l.y$)(t),
                        y = s.createStore(t),
                        b = (0, r._)(y(s.getActiveTab, a.A), 1)[0],
                        v = (0, r._)(y(s.getShowPriceAlert, a.A), 2),
                        C = v[0],
                        w = v[1],
                        A = (0, r._)(y(s.getShowLimitOrder, a.A), 2),
                        S = A[0],
                        T = A[1],
                        k = (0, r._)(y(s.getShowExecutionOrder, a.A), 2),
                        L = k[0],
                        _ = k[1],
                        P = (0, r._)(y(s.getShowAverageBuyPrice, a.A), 2),
                        D = P[0],
                        I = P[1],
                        V = (0, r._)(y(s.getShowAverageSellPrice, a.A), 2),
                        M = V[0],
                        B = V[1],
                        E = (0, r._)(f(l.h7), 1)[0],
                        j = (0, r._)(f(l.Qk), 2),
                        O = j[0],
                        H = j[1],
                        R = (0, r._)(f(l.I2), 2),
                        N = R[0],
                        W = R[1],
                        F = (0, c.Y)({
                            namespace: t
                        }),
                        z = F.averageBuyPriceOptions,
                        X = F.averageSellPriceOptions,
                        U = (0, h.CUO)().getI18n,
                        G = (0, m.nH)() || !1,
                        $ = (0, o.Q)().isMobile,
                        Y = (0, u.O)(),
                        Z = (0, d.yR)({
                            namespace: t
                        }),
                        K = (0, d.Jw)(),
                        q = (0, h.Bm2)("Sell_Average_Price"),
                        Q = (0, g.un)(),
                        J = Q.flashOrder,
                        ee = Q.setFlashOrder,
                        te = (0, n.useMemo)((function() {
                            return (null === E || void 0 === E ? void 0 : E.ts) ? new Date(E.ts).toLocaleString() : ""
                        }), [E]),
                        ie = (0, p.PO)(),
                        re = (0, n.useMemo)((function() {
                            return i === s.ChartMode.Single
                        }), [i]),
                        oe = (0, n.useMemo)((function() {
                            return b === s.Tabs.Origin
                        }), [b]),
                        se = (0, n.useMemo)((function() {
                            return U("spot-chart-order-history-tooltip", {
                                defaultValue: "Display executed Spot/Margin orders within 6 months."
                            }) || ""
                        }), [U]);
                    return {
                        quickOrder: {
                            floatingWindow: {
                                visible: re && G && !$ && !ie,
                                toggled: J,
                                onToggled: x(ee)
                            },
                            plusButton: {
                                visible: oe && re && !$ && !ie
                            }
                        },
                        openOrders: {
                            visible: re && G,
                            toggled: S,
                            onToggled: function(e) {
                                var t = e.toggled;
                                T(!t), Z(s.OrderMarkOption.Open)
                            }
                        },
                        orderHistory: {
                            visible: re && G,
                            toggled: L,
                            onToggled: function(e) {
                                var t = e.toggled;
                                _(!t), Z(s.OrderMarkOption.Execution)
                            },
                            tooltip: se
                        },
                        averagePrice: {
                            updatedOn: te,
                            buy: {
                                visible: re && G && !Y,
                                toggled: D,
                                onToggled: function(e) {
                                    x(I)(e), Z(s.OrderMarkOption.AverageBuyPrice)
                                },
                                items: z,
                                selected: O,
                                onPeriodChanged: H
                            },
                            sell: {
                                visible: re && G && !Y && q,
                                toggled: M,
                                onToggled: function(e) {
                                    x(B)(e), Z(s.OrderMarkOption.AverageSellPrice)
                                },
                                items: X,
                                selected: N,
                                onPeriodChanged: function(e) {
                                    W(e), (0, d.kQ)({
                                        period: e
                                    })
                                }
                            }
                        },
                        priceAlert: {
                            visible: G && oe && !Y,
                            toggled: C,
                            onToggled: function(e) {
                                var t = e.toggled;
                                w(!t), Z(s.OrderMarkOption.PriceAlert)
                            }
                        },
                        spotlight: {
                            visible: oe && re && !$,
                            onToggled: K
                        },
                        scale: {
                            percentageScale: {
                                visible: oe
                            },
                            logarithmicScale: {
                                visible: oe
                            },
                            invertedScale: {
                                visible: oe
                            }
                        },
                        priceLine: {
                            marketPriceLine: {
                                visible: oe
                            },
                            countdown: {
                                visible: oe
                            },
                            askBid: {
                                visible: oe
                            }
                        },
                        breakevenPrice: {
                            visible: !1
                        },
                        liquidationPrice: {
                            visible: !1
                        },
                        positions: {
                            visible: !1
                        },
                        botPreview: {
                            visible: !1
                        }
                    }
                }
        },
        idG9: (e, t, i) => {
            i.d(t, {
                A: () => a,
                E: () => n
            });
            var r = i("DTvD"),
                o = {
                    orderHistoryUpdatedTime: "",
                    order: {
                        orderId: "",
                        side: "",
                        baseAsset: "",
                        quoteAsset: "",
                        time: "",
                        type: "",
                        price: "",
                        origQty: "",
                        executedQty: "",
                        symbol: "",
                        stopPrice: "",
                        trailingDelta: "",
                        entryType: "price"
                    },
                    showOrderModification: !1,
                    setOrder: function() {
                        return null
                    },
                    setShowOrderModification: function() {
                        return null
                    },
                    updateOrderHistoryUpdatedTime: function() {
                        return null
                    },
                    modalRef: (0, r.createRef)()
                },
                s = (0, r.createContext)(o),
                n = function() {
                    var e = (0, r.useState)(o.orderHistoryUpdatedTime),
                        t = e[0],
                        i = e[1],
                        s = (0, r.useState)(o.order),
                        n = s[0],
                        a = s[1],
                        l = (0, r.useState)(o.showOrderModification);
                    return {
                        orderHistoryUpdatedTime: t,
                        order: n,
                        showOrderModification: l[0],
                        setOrder: a,
                        setShowOrderModification: l[1],
                        updateOrderHistoryUpdatedTime: i,
                        modalRef: (0, r.useRef)({})
                    }
                };
            const a = s
        },
        "d+Ar": (e, t, i) => {
            i.d(t, {
                A: () => a,
                E: () => n
            });
            var r = i("DTvD"),
                o = {
                    show: !1,
                    showDialog: function() {
                        return null
                    },
                    hideDialog: function() {
                        return null
                    },
                    price: "",
                    setPrice: function() {
                        return null
                    }
                },
                s = (0, r.createContext)(o),
                n = function() {
                    var e = (0, r.useState)(o.price),
                        t = e[0],
                        i = e[1],
                        s = (0, r.useState)(o.show),
                        n = s[0],
                        a = s[1];
                    return {
                        show: n,
                        showDialog: (0, r.useCallback)((function() {
                            return a(!0)
                        }), []),
                        hideDialog: (0, r.useCallback)((function() {
                            return a(!1)
                        }), []),
                        price: t,
                        setPrice: i
                    }
                };
            const a = s
        },
        Nimi: (e, t, i) => {
            i.d(t, {
                u: () => r
            });
            var r = function(e) {
                e.eventAction, e.eventLabel, e.elementId
            }
        },
        me6M: (e, t, i) => {
            i.d(t, {
                e: () => A,
                Y: () => S
            });
            var r = i("S+0I"),
                o = i("mguP"),
                s = i("jbFV"),
                n = i.n(s),
                a = i("cvvB"),
                l = i("K9aZ"),
                c = i.n(l),
                d = i("g77m"),
                h = i.n(d),
                u = i("DTvD"),
                g = i("/OXm"),
                p = i("idG9"),
                m = i("hrAD"),
                x = i("qoEP"),
                f = i("KrVi"),
                y = i("6OBl"),
                b = function() {
                    var e = (0, r._)(n().mark((function e(t) {
                        var i, r;
                        return n().wrap((function(e) {
                            for (;;) switch (e.prev = e.next) {
                                case 0:
                                    return i = 1e3 * Date.now(), e.prev = 1, e.next = 4, (0, y.f)((0, x._)((0, m._)({}, t), {
                                        startTime: i - 31536e6,
                                        endTime: i
                                    }));
                                case 4:
                                    return r = e.sent.data, e.abrupt("return", (0, x._)((0, m._)({}, r), {
                                        avgBuyPrices: r.avgPrices.map((function(e) {
                                            var t = e.avgBuyPrice,
                                                i = (0, f._)(e, ["avgBuyPrice"]);
                                            return (0, x._)((0, m._)({}, i), {
                                                avgPrice: t
                                            })
                                        })),
                                        avgSellPrices: r.avgSellPrices.map((function(e) {
                                            var t = e.avgSellPrice,
                                                i = (0, f._)(e, ["avgSellPrice"]);
                                            return (0, x._)((0, m._)({}, i), {
                                                avgPrice: t
                                            })
                                        }))
                                    }));
                                case 8:
                                    return e.prev = 8, e.t0 = e.catch(1), e.abrupt("return", null);
                                case 11:
                                case "end":
                                    return e.stop()
                            }
                        }), e, null, [
                            [1, 8]
                        ])
                    })));
                    return function(t) {
                        return e.apply(this, arguments)
                    }
                }(),
                v = function() {
                    var e = (0, r._)(n().mark((function e(t) {
                        var i;
                        return n().wrap((function(e) {
                            for (;;) switch (e.prev = e.next) {
                                case 0:
                                    return e.prev = 0, e.next = 3, (0, y.n)(t);
                                case 3:
                                    return i = e.sent.data, e.abrupt("return", i);
                                case 7:
                                    return e.prev = 7, e.t0 = e.catch(0), e.abrupt("return", null);
                                case 10:
                                case "end":
                                    return e.stop()
                            }
                        }), e, null, [
                            [0, 7]
                        ])
                    })));
                    return function(t) {
                        return e.apply(this, arguments)
                    }
                }(),
                C = i("Qhol"),
                w = i("CLKF"),
                A = function(e) {
                    var t = e.namespace,
                        i = e.symbol,
                        s = (0, w.O)(),
                        l = a.t1.Store.createStore(t),
                        d = (0, o._)(l(a.t1.Store.getShowAverageBuyPrice), 1)[0],
                        m = (0, o._)(l(a.t1.Store.getShowAverageSellPrice), 1)[0],
                        x = (0, u.useMemo)((function() {
                            return !s && d
                        }), [s, d]),
                        f = (0, u.useMemo)((function() {
                            return !s && m
                        }), [s, m]),
                        y = (0, g.y$)(t),
                        A = (0, o._)(y(g.h7), 3),
                        S = A[0],
                        T = A[1],
                        k = A[2],
                        L = (0, o._)(y(g.Qk), 1)[0],
                        _ = (0, o._)(y(g.I2), 1)[0],
                        P = (0, C.i24)(),
                        D = (0, u.useContext)(p.A).updateOrderHistoryUpdatedTime,
                        I = (0, C.nHk)(),
                        V = (0, C.Pyz)().userId,
                        M = (0, C.hFK)()[i] || {},
                        B = M.baseAsset,
                        E = M.quoteAsset,
                        j = (0, C.ok2)("", "kline-ui").getI18n,
                        O = (0, u.useMemo)((function() {
                            return j("buy-cost", {
                                defaultValue: "Buy Average Cost"
                            }) || ""
                        }), [j]),
                        H = (0, u.useMemo)((function() {
                            return j("sell-cost", {
                                defaultValue: "Sell Average Cost"
                            }) || ""
                        }), [j]),
                        R = (0, u.useMemo)((function() {
                            return (null === S || void 0 === S ? void 0 : S.avgBuyPrices) || []
                        }), [null === S || void 0 === S ? void 0 : S.avgBuyPrices]),
                        N = (0, u.useMemo)((function() {
                            return (null === S || void 0 === S ? void 0 : S.avgSellPrices) || []
                        }), [null === S || void 0 === S ? void 0 : S.avgSellPrices]),
                        W = (0, u.useMemo)((function() {
                            return c()(R, "days")
                        }), [R]),
                        F = (0, u.useMemo)((function() {
                            return c()(N, "days")
                        }), [N]),
                        z = (0, u.useMemo)((function() {
                            if (0 === Object.keys(W).length) return "";
                            var e = W[L] || {};
                            return "".concat(e.avgPrice || 0)
                        }), [L, W]),
                        X = (0, u.useMemo)((function() {
                            if (0 === Object.keys(F).length) return "";
                            var e = F[_] || {};
                            return "".concat(e.avgPrice || 0)
                        }), [_, F]),
                        U = (0, u.useMemo)((function() {
                            return "".concat(O, " ").concat(z)
                        }), [z, O]),
                        G = (0, u.useMemo)((function() {
                            return "".concat(H, " ").concat(X)
                        }), [X, H]),
                        $ = (0, u.useMemo)((function() {
                            return P ? b : v
                        }), [P]),
                        Y = (0, u.useCallback)((0, r._)(n().mark((function e() {
                            var t, i;
                            return n().wrap((function(e) {
                                for (;;) switch (e.prev = e.next) {
                                    case 0:
                                        return e.next = 2, $({
                                            baseAsset: B,
                                            quoteAsset: E,
                                            userId: V
                                        });
                                    case 2:
                                        if (t = e.sent) {
                                            e.next = 5;
                                            break
                                        }
                                        return e.abrupt("return");
                                    case 5:
                                        T(t), i = new Date(t.ts).toLocaleDateString(), D(i);
                                    case 8:
                                    case "end":
                                        return e.stop()
                                }
                            }), e)
                        }))), [$, B, E, T, D, V]),
                        Z = (0, u.useMemo)((function() {
                            return h()(Y, 1e4)
                        }), [Y]);
                    return (0, u.useEffect)((function() {
                        I ? (f || x) && Z() : k()
                    }), [Z, I, k, x, f]), (0, u.useEffect)((function() {
                        if (S) try {
                            var e = new Date(S.ts).toLocaleDateString();
                            D(e)
                        } catch (i) {
                            var t = new Date(S.ts).toString();
                            D(t)
                        }
                    }), [S, D]), {
                        buyCostText: O,
                        avgBuyPrice: z,
                        avgBuyPriceText: U,
                        sellCostText: H,
                        avgSellPrice: X,
                        avgSellPriceText: G
                    }
                },
                S = function(e) {
                    var t = e.namespace,
                        i = (0, g.y$)(t),
                        r = (0, o._)(i(g.h7), 1)[0],
                        s = (0, C.CUO)().getI18n,
                        n = (0, u.useMemo)((function() {
                            return s("chart-day", {
                                defaultValue: "D"
                            }) || ""
                        }), [s]),
                        a = (0, u.useCallback)((function(e) {
                            var t = e.days;
                            return {
                                text: "".concat(t).concat(n),
                                value: t
                            }
                        }), [n]);
                    return {
                        averageBuyPriceOptions: (0, u.useMemo)((function() {
                            return ((null === r || void 0 === r ? void 0 : r.avgBuyPrices) || []).map(a)
                        }), [null === r || void 0 === r ? void 0 : r.avgBuyPrices, a]),
                        averageSellPriceOptions: (0, u.useMemo)((function() {
                            return ((null === r || void 0 === r ? void 0 : r.avgSellPrices) || []).map(a)
                        }), [null === r || void 0 === r ? void 0 : r.avgSellPrices, a])
                    }
                }
        },
        iwDq: (e, t, i) => {
            i.d(t, {
                A: () => c
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i.n(o),
                n = i("QFAv"),
                a = i("KzWS"),
                l = function(e) {
                    var t = e.innerText,
                        i = e.handleClose,
                        o = e.closable,
                        s = void 0 === o || o;
                    return (0, r.jsx)(n.A, {
                        icon: (0, r.jsx)(a.A, {}),
                        closable: s,
                        message: t,
                        onClose: i,
                        variant: "primary",
                        sz: "small",
                        className: "mt-[4px]"
                    })
                };
            const c = s().memo(l)
        },
        "+m0g": (e, t, i) => {
            i.d(t, {
                Tn: () => p,
                qU: () => u
            });
            var r = i("hrAD"),
                o = i("qoEP"),
                s = i("KrVi"),
                n = i("mXdx"),
                a = (i("DTvD"), i("GIr8")),
                l = i("2IQ4"),
                c = i("/Cny"),
                d = i("N9yd"),
                h = (i("bLkt"), i("YRJq"), i("b2AH"), i("Qhol"), {
                    position: "absolute",
                    right: "0",
                    top: "0",
                    zIndex: 1,
                    cursor: "pointer",
                    flexShrink: 0,
                    color: "icons.close",
                    "&:hover": {
                        color: "t.third"
                    }
                }),
                u = function(e) {
                    var t = e.onRemove,
                        i = e.renderExtra,
                        a = (0, s._)(e, ["onRemove", "renderExtra"]);
                    return (0, n.jsx)(g, (0, o._)((0, r._)({}, a), {
                        onRemove: t,
                        renderExtra: function() {
                            return (0, n.jsxs)(n.Fragment, {
                                children: [i && i(), t && (0, n.jsx)(c.A, {
                                    onClick: function() {
                                        return t()
                                    },
                                    className: "pro-layout-close-button",
                                    size: 16,
                                    sx: (0, r._)({
                                        ml: 3
                                    }, h)
                                })]
                            })
                        }
                    }))
                },
                g = function(e) {
                    var t = e.children,
                        i = e.title,
                        c = e.area,
                        h = e.renderExtra,
                        u = e.onRemove,
                        g = e.titleShrink,
                        p = void 0 === g ? 0 : g,
                        m = (0, s._)(e, ["children", "title", "area", "renderExtra", "onRemove", "titleShrink"]);
                    return (0, n.jsxs)(d.A, (0, o._)((0, r._)({
                        __css: {
                            position: "relative",
                            gridArea: c,
                            zIndex: "auto",
                            width: "100%",
                            height: "100%",
                            borderRadius: "8px"
                        }
                    }, m), {
                        children: [i && (0, n.jsxs)(a.A, {
                            sx: {
                                position: "relative",
                                zIndex: 1,
                                pt: 10,
                                pb: 1,
                                height: 40,
                                px: "sm",
                                fontSize: 1,
                                color: "t.primary",
                                justifyContent: "space-between",
                                alignItems: "center",
                                fontWeight: 600,
                                bg: "moduleBg",
                                flexShrink: 0,
                                flexGrow: 0,
                                userSelect: u ? "auto" : "none"
                            },
                            className: u ? "draggableHandle" : void 0,
                            children: [(0, n.jsx)(a.A, {
                                sx: {
                                    fontSize: "14px",
                                    flexShrink: p
                                },
                                children: i
                            }), h && h()]
                        }), (0, n.jsx)(l.A, {
                            sx: {
                                position: "absolute",
                                zIndex: 0,
                                top: 0,
                                left: 0,
                                right: 0,
                                bottom: 0,
                                paddingTop: i ? 40 : 0
                            },
                            children: t
                        })]
                    }))
                },
                p = function(e) {
                    var t = e.area,
                        i = e.onRemove,
                        a = e.children,
                        u = e.css,
                        g = e.useDraghandle,
                        p = (0, s._)(e, ["area", "onRemove", "children", "css", "useDraghandle"]);
                    return (0, n.jsxs)(d.A, (0, o._)((0, r._)({
                        __css: (0, r._)({
                            width: "100%",
                            height: "100%",
                            gridArea: t,
                            px: "sm",
                            bg: "var(--color-BasicBg)",
                            zIndex: "auto",
                            position: "relative",
                            borderRadius: "8px"
                        }, u)
                    }, p), {
                        children: [i && (0, n.jsx)(c.A, {
                            size: 16,
                            className: "pro-layout-close-button",
                            onClick: function() {
                                return i()
                            },
                            sx: h
                        }), (0, n.jsx)(l.A, {
                            sx: {
                                position: "absolute",
                                zIndex: 0,
                                top: 0,
                                left: 0,
                                right: "1px",
                                bottom: 0
                            },
                            children: a
                        }), g && (0, n.jsx)(l.A, {
                            className: "draggableHandle",
                            sx: {
                                position: "absolute",
                                width: "51",
                                zIndex: 0,
                                top: 0,
                                right: "0px",
                                bottom: 0
                            }
                        })]
                    }))
                }
        },
        VaDm: (e, t, i) => {
            i.d(t, {
                x: () => b
            });
            var r = i("hrAD"),
                o = i("qoEP"),
                s = i("KrVi"),
                n = i("mguP"),
                a = i("mXdx"),
                l = i("DTvD"),
                c = i.n(l),
                d = i("/Cny"),
                h = i("N9yd"),
                u = i("YRJq"),
                g = i("b2AH"),
                p = i("Qhol"),
                m = i("r2Gn"),
                x = i("Olbk"),
                f = m.A.TabPane,
                y = {
                    position: "absolute",
                    right: "0",
                    top: "0",
                    zIndex: 1,
                    cursor: "pointer",
                    flexShrink: 0,
                    color: "icons.close",
                    "&:hover": {
                        color: "t.third"
                    }
                },
                b = function(e) {
                    var t = e.panes,
                        i = e.area,
                        b = e.onRemove,
                        v = (e.useCalcWidth, e.defaultTabNumber),
                        C = e.css,
                        w = e.tabListProps,
                        A = (0, s._)(e, ["panes", "area", "onRemove", "useCalcWidth", "defaultTabNumber", "css", "tabListProps"]),
                        S = (0, l.useState)(v || 0),
                        T = S[0],
                        k = S[1],
                        L = (0, l.useRef)(null),
                        _ = (0, u.h1)().putCoachMarkStep,
                        P = (0, p.FCl)(),
                        D = (0, g.CU)().getI18n;
                    (0, n._)((0, p.Grl)(), 1)[0];
                    return (0, l.useEffect)((function() {
                        "userinfo" === i && _("tradeGuide", 1, {
                            target: L,
                            title: D("order-table-guide-title", {
                                defaultValue: "View orders and funds"
                            }),
                            content: D("order-table-guide-content", {
                                defaultValue: "You can view open orders, order history, trade history and funds here."
                            }),
                            position: "top-start",
                            showSkip: !0,
                            faqSlot: [{
                                text: "trd-common-activity-faq",
                                link: "/support/faq/how-to-view-my-spot-trading-activity-048b819aed8a4c35b202cba9f977537a"
                            }]
                        })
                    }), [D]), (0, a.jsxs)(h.A, (0, o._)((0, r._)({
                        __css: (0, r._)({
                            width: "100%",
                            height: "100%",
                            gridArea: i,
                            pb: "16px",
                            bg: "var(--color-BasicBg)",
                            zIndex: "auto",
                            position: "relative",
                            overflow: "hidden",
                            borderRadius: "8px"
                        }, C)
                    }, A), {
                        children: [b && (0, a.jsx)(d.A, {
                            size: 16,
                            className: "pro-layout-close-button",
                            onClick: function() {
                                return b()
                            },
                            sx: y
                        }), (0, a.jsxs)(x.Ay, {
                            className: "trd-table-v2",
                            children: [(0, a.jsx)("div", {
                                ref: L,
                                style: {
                                    width: "0px",
                                    height: "0px"
                                }
                            }), (0, a.jsx)(m.A, {
                                lazy: !0,
                                variant: "default-breakline",
                                className: P ? "draggableHandle flex-1 h-full [&>.bn-tab-list]:h-[42px] [&>.bn-tab-list]:min-h-[42px] [&>.bn-tab-list_.bn-tab]:h-full" : "flex-1 h-full [&_.bn-tab-list]:h-[42px] [&_.bn-tab-list]:min-h-[42px] [&_.bn-tab-list_.bn-tab]:h-full",
                                onChange: function(e) {
                                    return function(e) {
                                        k(e)
                                    }(e)
                                },
                                initialIndex: v ? Number(v) : 0,
                                selectedIndex: T,
                                tabListProps: w,
                                showSlideArrow: !0,
                                showSlideMasks: !0,
                                children: t.map((function(e, t) {
                                    var i = (0, n._)(e, 2),
                                        r = i[0],
                                        o = i[1];
                                    return (0, a.jsx)(f, {
                                        className: "h-full flex-1",
                                        tabNode: r(T === t),
                                        children: (0, a.jsx)(x.Ay, {
                                            className: "draggableCancel h-full flex-1",
                                            style: {
                                                width: "100%",
                                                height: "100%",
                                                cursor: "initial"
                                            },
                                            children: c().cloneElement(o, {
                                                active: T === t
                                            })
                                        })
                                    }, t)
                                }))
                            })]
                        })]
                    }))
                }
        },
        N9yd: (e, t, i) => {
            i.d(t, {
                A: () => h
            });
            var r = i("hrAD"),
                o = i("qoEP"),
                s = i("mXdx"),
                n = i("DTvD"),
                a = i.n(n),
                l = i("2IQ4"),
                c = i("NbzZ"),
                d = (0, n.forwardRef)((function(e, t) {
                    return (0, s.jsx)(c.t, {
                        name: e.name,
                        children: (0, s.jsx)(l.A, (0, o._)((0, r._)({}, e), {
                            ref: t,
                            children: e.children
                        }))
                    })
                }));
            const h = a().memo(d)
        },
        yvZC: (e, t, i) => {
            i.d(t, {
                Zp: () => h,
                iw: () => d,
                qU: () => u
            });
            var r = i("hrAD"),
                o = i("qoEP"),
                s = i("KrVi"),
                n = i("mXdx"),
                a = (i("DTvD"), i("/Cny")),
                l = i("SQql"),
                c = "42px",
                d = {
                    position: "absolute",
                    right: "0",
                    top: "0",
                    zIndex: 1,
                    cursor: "pointer",
                    flexShrink: 0,
                    color: "icons.close",
                    "&:hover": {
                        color: "t.third"
                    }
                },
                h = function(e) {
                    var t = e.children,
                        i = e.title,
                        a = e.area,
                        d = e.renderExtra,
                        h = e.onRemove,
                        u = e.contentStyle,
                        g = (0, s._)(e, ["children", "title", "area", "renderExtra", "onRemove", "contentStyle"]);
                    return (0, n.jsxs)(l.A, (0, o._)((0, r._)({
                        style: {
                            position: "relative",
                            gridArea: a,
                            zIndex: "auto",
                            width: "100%",
                            height: "100%",
                            borderRadius: "8px",
                            backgroundColor: "var(--color-BasicBg)"
                        }
                    }, g), {
                        children: [i && (0, n.jsxs)("div", {
                            style: {
                                display: "flex",
                                position: "relative",
                                zIndex: 1,
                                height: c,
                                padding: "4px 16px 0",
                                color: "var(--color-PrimaryText)",
                                borderBottom: "1px solid var(--color-Line)",
                                justifyContent: "space-between",
                                alignItems: "center",
                                fontWeight: 500,
                                flexShrink: 0,
                                flexGrow: 0,
                                userSelect: h ? "auto" : "none"
                            },
                            className: h ? "draggableHandle" : void 0,
                            children: [(0, n.jsx)("div", {
                                style: {
                                    display: "flex",
                                    fontSize: "14px"
                                },
                                children: i
                            }), d && d()]
                        }), (0, n.jsx)("div", {
                            style: (0, r._)({
                                zIndex: h ? 0 : "unset",
                                top: 0,
                                left: 0,
                                right: 0,
                                bottom: 0,
                                position: "absolute",
                                paddingTop: c
                            }, u),
                            children: t
                        })]
                    }))
                },
                u = function(e) {
                    var t = e.onRemove,
                        i = e.renderExtra,
                        l = (0, s._)(e, ["onRemove", "renderExtra"]);
                    return (0, n.jsx)(h, (0, o._)((0, r._)({}, l), {
                        onRemove: t,
                        renderExtra: function() {
                            return (0, n.jsxs)(n.Fragment, {
                                children: [i && i(), t && (0, n.jsx)(a.A, {
                                    onClick: t,
                                    className: "pro-layout-close-button",
                                    size: 16,
                                    sx: (0, r._)({
                                        ml: 3
                                    }, d)
                                })]
                            })
                        }
                    }))
                }
        },
        SQql: (e, t, i) => {
            i.d(t, {
                A: () => h
            });
            var r = i("hrAD"),
                o = i("qoEP"),
                s = i("mXdx"),
                n = i("DTvD"),
                a = i.n(n),
                l = i("NbzZ"),
                c = i("wtFP"),
                d = (0, n.forwardRef)((function(e, t) {
                    return (0, s.jsx)(l.t, {
                        name: e.name,
                        onError: function() {
                            (0, c.u4)("widget_error", {
                                widget: e.name
                            })
                        },
                        children: (0, s.jsx)("div", (0, o._)((0, r._)({}, e), {
                            ref: t,
                            children: e.children
                        }))
                    })
                }));
            const h = a().memo(d)
        },
        J4i7: (e, t, i) => {
            i.d(t, {
                B: () => r
            });
            var r = {
                display: "grid",
                width: "100vw",
                height: "100vh",
                minHeight: "680px"
            }
        },
        F2GC: (e, t, i) => {
            i.d(t, {
                e: () => h,
                y: () => g
            });
            var r = i("hrAD"),
                o = i("mXdx"),
                s = i("DTvD"),
                n = i.n(s),
                a = i("kPx0"),
                l = i("JJde"),
                c = (i("FkjH"), i("bQ69")),
                d = function(e) {
                    var t = e.children,
                        i = {
                            callback: (0, a.btoau)(window.location.href)
                        },
                        r = (0, l.J1)(c.TP.LOGIN_URL, i);
                    return t ? (0, o.jsx)(o.Fragment, {
                        children: n().cloneElement(t, {
                            href: r
                        })
                    }) : (0, o.jsx)(o.Fragment, {})
                },
                h = function(e) {
                    return (0, o.jsx)(d, (0, r._)({}, e))
                },
                u = function(e) {
                    var t = e.children,
                        i = {
                            callback: (0, a.btoau)(window.location.href)
                        },
                        r = (0, l.J1)(c.TP.REGISTER_URL, i);
                    return t ? (0, o.jsx)(o.Fragment, {
                        children: n().cloneElement(t, {
                            href: r
                        })
                    }) : (0, o.jsx)(o.Fragment, {})
                },
                g = function(e) {
                    return (0, o.jsx)(u, (0, r._)({}, e))
                }
        },
        PQuT: (e, t, i) => {
            i.d(t, {
                W: () => h,
                z: () => d
            });
            var r = i("S+0I"),
                o = i("jbFV"),
                s = i.n(o),
                n = i("mXdx"),
                a = i("DTvD"),
                l = i("2nAp"),
                c = (0, a.createContext)({
                    mount: !1
                }),
                d = function(e) {
                    var t = e.children,
                        i = (0, a.useState)(!1),
                        o = i[0],
                        d = i[1];
                    (0, a.useEffect)((function() {
                        var e = function() {
                            var e = (0, r._)(s().mark((function e() {
                                return s().wrap((function(e) {
                                    for (;;) switch (e.prev = e.next) {
                                        case 0:
                                            return e.next = 2, l.F.yield();
                                        case 2:
                                            d(!0);
                                        case 3:
                                        case "end":
                                            return e.stop()
                                    }
                                }), e)
                            })));
                            return function() {
                                return e.apply(this, arguments)
                            }
                        }();
                        e()
                    }), []);
                    var h = (0, a.useMemo)((function() {
                        return {
                            mount: o
                        }
                    }), [o]);
                    return (0, n.jsx)(c.Provider, {
                        value: h,
                        children: t
                    })
                },
                h = function(e) {
                    var t = e.children,
                        i = (e.ssr, (0, a.useContext)(c).mount ? (0, n.jsx)(n.Fragment, {
                            children: t
                        }) : null);
                    return i
                }
        },
        p6uk: (e, t, i) => {
            i.d(t, {
                A: () => y
            });
            var r = i("mXdx"),
                o = i("Rhdc"),
                s = i("Xz3K"),
                n = i("DTvD"),
                a = i.n(n),
                l = i("FkjH"),
                c = i("jwne"),
                d = i("Olbk"),
                h = i("tgKj"),
                u = i("Gz4J"),
                g = i("1tqE"),
                p = i("c6eW"),
                m = l.A.registerActionHandle,
                x = l.A.constants,
                f = (0, n.forwardRef)((function(e, t) {
                    var i = (0, n.useState)(!1),
                        a = i[0],
                        l = i[1],
                        f = (0, n.useState)({}),
                        y = f[0],
                        b = f[1],
                        v = (0, n.useState)(!1),
                        C = v[0],
                        w = v[1],
                        A = y.title,
                        S = y.onOk,
                        T = y.okText,
                        k = y.onCancel,
                        L = y.cancelText,
                        _ = y.subFooter,
                        P = y.content,
                        D = y.showClose,
                        I = y.showFooter,
                        V = void 0 === I || I,
                        M = y.showIcon,
                        B = void 0 !== M && M,
                        E = y.maskClose,
                        j = void 0 !== E && E,
                        O = (0, n.useCallback)((function(e) {
                            k && k(e), l(!1)
                        }), [l, k]),
                        H = (0, n.useCallback)((function() {
                            S ? !1 !== S() && l(!1) : l(!1)
                        }), [l, S]);
                    (0, n.useImperativeHandle)(t, (function() {
                        return {
                            create: function(e) {
                                b(e), l(!0)
                            },
                            close: function() {
                                l(!1)
                            }
                        }
                    })), (0, n.useEffect)((function() {
                        !1 !== a ? setTimeout((function() {
                            w(!0)
                        }), 600) : w(!1)
                    }), [a]);
                    var R = (0, n.useCallback)((function() {
                        return m((function(e) {
                            var t = e.name;
                            if (C) switch (t) {
                                case x.COMMON_OK:
                                    H();
                                    break;
                                case x.COMMON_CANCEL:
                                    O()
                            }
                        }))
                    }), [O, H, C]);
                    return (0, n.useEffect)((function() {
                        return R()
                    }), [R]), (0, n.useEffect)((function() {
                        return (0, o.r)((function(e) {
                            if (C) switch (e) {
                                case s.mC.ORDERCONFIRM_CONTINUE:
                                    H();
                                    break;
                                case s.mC.ORDERCONFIRM_CANCEL:
                                    O()
                            }
                        }))
                    }), [O, H, C]), (0, r.jsxs)(c.Ay, {
                        responsive: !0,
                        visible: a,
                        enablePortal: !0,
                        className: "[&_.bn-modal-wrap]:!w-[420px] [&_.bn-modal-wrap]:overflow-y-auto [&_.bn-modal-wrap]:max-h-[calc(100vh-48px)]",
                        onClose: (null === e || void 0 === e ? void 0 : e.canMaskClick) || j ? function() {
                            return O(!0)
                        } : void 0,
                        children: [D && (0, r.jsx)(g.A, {
                            onClick: function() {
                                return O(!0)
                            },
                            className: "text-PrimaryText w-[24px] h-[24px]",
                            style: {
                                position: "absolute",
                                right: "24px",
                                top: "18px",
                                cursor: "pointer"
                            }
                        }), (0, r.jsxs)("div", {
                            className: "modal-body w-calc-100vw-32px md:w-[420px] px-[24px] pt-[18px]",
                            style: {
                                lineHeight: "20px"
                            },
                            children: [A && (0, r.jsx)(d.Ay, {
                                className: "modal-title",
                                style: {
                                    fontSize: "20px",
                                    textAlign: "left",
                                    fontWeight: "600",
                                    lineHeight: "28px"
                                },
                                children: A
                            }), B && (0, r.jsx)("div", {
                                style: {
                                    textAlign: "center"
                                },
                                children: (0, r.jsx)(p.A, {
                                    size: 96,
                                    style: {
                                        fontSize: "96px",
                                        marginBottom: "16px"
                                    }
                                })
                            }), (0, r.jsx)(d.Ay, {
                                className: "modal-content",
                                children: P
                            })]
                        }), V && (0, r.jsxs)("div", {
                            className: "modal-footer px-[24px] pb-[24px]",
                            children: [(0, r.jsxs)(h.A, {
                                className: "justify-normal",
                                children: [L && (0, r.jsx)(u.A, {
                                    className: "flex-1 mr-[12px] !h-[48px]",
                                    variant: "secondary",
                                    onClick: function() {
                                        return O()
                                    },
                                    children: L
                                }), (0, r.jsx)(u.A, {
                                    className: "flex-1 !h-[48px]",
                                    variant: "primary",
                                    onClick: H,
                                    children: T
                                })]
                            }), _ && _]
                        })]
                    })
                }));
            const y = a().memo(f)
        },
        NJD8: (e, t, i) => {
            i.r(t), i.d(t, {
                default: () => f
            });
            var r = i("hrAD"),
                o = i("qoEP"),
                s = i("KrVi"),
                n = i("mguP"),
                a = i("mXdx"),
                l = i("DTvD"),
                c = i.n(l),
                d = i("kVBH"),
                h = i("Qt1q"),
                u = i("Rhdc"),
                g = i("Xz3K"),
                p = i("otf7"),
                m = i("Qhol"),
                x = function(e) {
                    var t = e.tipWidth,
                        i = e.shortcutKeys,
                        c = e.i18nKey,
                        x = e.positionTop,
                        f = e.boxOffset,
                        y = e.placement,
                        b = void 0 === y ? "top" : y,
                        v = e.froceShow,
                        C = (0, s._)(e, ["tipWidth", "shortcutKeys", "i18nKey", "positionTop", "boxOffset", "placement", "froceShow"]),
                        w = (0, m.ok2)().getI18n,
                        A = (0, n._)((0, h.l)({
                            type: "SPOT"
                        }), 1)[0],
                        S = (0, n._)((0, h.l)({
                            type: "KLINE"
                        }), 1)[0],
                        T = (0, r._)({}, A, S),
                        k = (0, l.useState)(!1),
                        L = k[0],
                        _ = k[1];
                    return (0, l.useEffect)((function() {
                        return (0, u.r)((function(e) {
                            switch (e) {
                                case g.mC.PREVIEW_SHORTCUTS:
                                    _(!0);
                                    break;
                                case g.mC.PREVIEW_SHORTCUTS_CANCEL:
                                    _(!1)
                            }
                        }))
                    }), []), (0, l.useEffect)((function() {
                        v && _(!0)
                    }), [v]), (0, a.jsx)(d.A, (0, o._)((0, r._)({
                        enablePortal: !0,
                        placement: b,
                        boxOffset: f,
                        arrow: !0,
                        arrowPadding: t / 2 + 9,
                        tipBoxSx: {
                            mt: x,
                            maxWidth: t
                        },
                        tip: (0, a.jsx)("div", {
                            children: i.map((function(e, t) {
                                var i = (0, n._)(e, 2),
                                    r = i[0],
                                    o = void 0 === r ? "" : r,
                                    s = i[1],
                                    l = void 0 === s ? "" : s;
                                return (0, a.jsxs)("div", {
                                    children: [w(Array.isArray(c) ? c[t] : c), ":", " ", (0, p.W)(T[o], T[l])]
                                }, t)
                            }))
                        }),
                        open: L
                    }, C), {
                        children: (0, a.jsx)("span", {})
                    }))
                };
            const f = c().memo(x)
        },
        "Ic+K": (e, t, i) => {
            i.d(t, {
                A: () => l,
                U: () => n
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i("Qhol"),
                n = (0, o.memo)((function(e) {
                    var t = e.show,
                        i = e.children,
                        o = e.type;
                    return t ? (0, r.jsx)("div", {
                        className: "".concat(o),
                        style: {
                            width: "100%",
                            height: "100%"
                        },
                        children: i
                    }) : (0, r.jsx)("div", {
                        className: "".concat(o)
                    })
                })),
                a = function(e) {
                    var t = e.children,
                        i = e.type,
                        o = (0, s.QsY)(),
                        a = o.isMobile,
                        l = o.isIPad,
                        c = o.isDesktop,
                        d = "mobile" === i && a || "tablet" === i && l || "desktop" === i && c;
                    return (0, r.jsx)(n, {
                        show: d,
                        type: i,
                        children: t
                    })
                };
            const l = (0, o.memo)(a)
        },
        "3Myb": (e, t, i) => {
            i.d(t, {
                A: () => c
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i.n(o),
                n = i("Jh4G"),
                a = i("bQ69"),
                l = function(e) {
                    var t = e.title,
                        i = e.description,
                        o = e.keywords;
                    return (0, r.jsxs)(n.A, {
                        children: [(0, r.jsx)("meta", {
                            charSet: "utf-8"
                        }), (0, r.jsx)("title", {
                            children: t
                        }), (0, r.jsx)("meta", {
                            name: "keywords",
                            content: o
                        }), (0, r.jsx)("meta", {
                            name: "description",
                            content: i
                        }), (0, r.jsx)("meta", {
                            property: "og:type",
                            content: "website"
                        }), (0, r.jsx)("meta", {
                            property: "og:title",
                            content: t
                        }), (0, r.jsx)("meta", {
                            property: "og:site_name",
                            content: a.qt
                        }), (0, r.jsx)("meta", {
                            property: "og:image",
                            content: a.Hh
                        }), (0, r.jsx)("meta", {
                            property: "twitter:title",
                            content: t
                        }), (0, r.jsx)("meta", {
                            property: "twitter:site",
                            content: a.qt
                        }), (0, r.jsx)("meta", {
                            property: "twitter:image",
                            content: a.Hh
                        }), (0, r.jsx)("meta", {
                            property: "twitter:image:src",
                            content: a.Hh
                        }), (0, r.jsx)("meta", {
                            property: "twitter:card",
                            content: "summary_large_image"
                        }), (0, r.jsx)("meta", {
                            name: "apple-mobile-web-app-status-bar-style",
                            content: "black"
                        }), (0, r.jsx)("meta", {
                            name: "apple-mobile-web-app-capable",
                            content: "yes"
                        }), (0, r.jsx)("meta", {
                            name: "format-detection",
                            content: "telephone=no"
                        }), (0, r.jsx)("meta", {
                            name: "format-detection",
                            content: "email=no"
                        }), (0, r.jsx)("meta", {
                            name: "viewport",
                            content: "width=device-width,minimum-scale=1,maximum-scale=1.0,initial-scale=1,user-scalable=no,viewport-fit=true"
                        })]
                    })
                };
            const c = s().memo(l)
        },
        rvBo: (e, t, i) => {
            i.d(t, {
                Kt: () => s,
                gU: () => o,
                oy: () => n
            });
            var r = i("wtFP"),
                o = function(e) {
                    var t = e.layout,
                        i = e.tradeType;
                    (0, r.u4)("ModuleView", {
                        eventName: "settings_center",
                        title: r.P_[t],
                        pageName: r.$1[i],
                        df_source: r.Yx[i]
                    })
                },
                s = function(e) {
                    var t = e.layout,
                        i = e.status,
                        o = e.tradeType,
                        s = "1" === i ? "sound_reminder_close" : "sound_reminder_open";
                    (0, r.u4)("$WebClick", {
                        eventName: "settings_center",
                        title: r.P_[t],
                        $element_id: s,
                        pageName: r.$1[o],
                        df_source: r.Yx[o]
                    })
                },
                n = function(e) {
                    var t = e.status,
                        i = e.tradeType,
                        o = e.layout,
                        s = !!t;
                    (0, r.u4)("pageView", {
                        df_tpSettings: JSON.stringify({
                            sound_reminder: s
                        }),
                        pageName: r.$1[i],
                        df_source: r.Yx[i],
                        layout: r.P_[o]
                    })
                }
        },
        i6QV: (e, t, i) => {
            i.d(t, {
                X: () => u,
                o: () => h
            });
            var r = i("S+0I"),
                o = i("jbFV"),
                s = i.n(o),
                n = i("DTvD"),
                a = i("eAFj"),
                l = i("vWh5"),
                c = i("MD8j"),
                d = i("/jvT"),
                h = (0, a.A)((function(e) {
                    return {
                        crossCostPriceType: "entryPrice",
                        setCrossCostPriceType: function(t) {
                            return e((function() {
                                return {
                                    crossCostPriceType: t
                                }
                            }))
                        },
                        breakevenPrices: [],
                        setBreakevenPrices: function(t) {
                            return e((function() {
                                return {
                                    breakevenPrices: t
                                }
                            }))
                        }
                    }
                })),
                u = function() {
                    var e = (0, c.d4)(d.avgOpenPrice),
                        t = h(),
                        i = t.crossCostPriceType,
                        o = t.setBreakevenPrices;
                    (0, n.useEffect)((function() {
                        function t() {
                            return (t = (0, r._)(s().mark((function t() {
                                var i, r;
                                return s().wrap((function(t) {
                                    for (;;) switch (t.prev = t.next) {
                                        case 0:
                                            return i = e.map((function(e) {
                                                return null === e || void 0 === e ? void 0 : e.token
                                            })), t.next = 3, (0, l.Ds)(i);
                                        case 3:
                                            (r = t.sent) && (null === r || void 0 === r ? void 0 : r.tokensValues) && o(r.tokensValues);
                                        case 5:
                                        case "end":
                                            return t.stop()
                                    }
                                }), t)
                            })))).apply(this, arguments)
                        }
                        "breakevenPrice" === i && Array.isArray(e) && function() {
                            t.apply(this, arguments)
                        }()
                    }), [i, e])
                }
        },
        R0xM: (e, t, i) => {
            i.d(t, {
                A: () => g
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i.n(o),
                n = i("Qhol"),
                a = i("wtFP"),
                l = i("BMWw"),
                c = function(e) {
                    var t = e.hasIcon,
                        i = void 0 !== t && t,
                        s = e.hasText,
                        c = void 0 === s || s,
                        d = (0, n.ok2)().getI18n,
                        h = (0, n.x$o)(),
                        u = (0, n.ME5)(),
                        g = (0, o.useCallback)((function(e) {
                            e.preventDefault(), (0, a.u4)("$WebClick", {
                                $element_id: "auto_invest",
                                module: "orderform",
                                df_source: "spot",
                                layout: h
                            }), window.open("/savings/auto-invest", "_blank")
                        }), [h]);
                    return u ? (0, r.jsx)(r.Fragment, {}) : (0, r.jsxs)("a", {
                        className: "trade-common-link",
                        href: "/savings/auto-invest",
                        onClick: g,
                        target: "_blank",
                        style: {
                            display: "flex",
                            alignItems: "center",
                            lineHeight: "16px"
                        },
                        children: [i && (0, r.jsxs)(r.Fragment, {
                            children: [(0, r.jsx)(l.A, {
                                className: "trade-common-icon"
                            }), " \xa0"]
                        }), c && d("trd-orderForm-Autoinvest")]
                    })
                };
            const d = s().memo(c);
            var h = i("axVh"),
                u = function(e) {
                    var t = e.hasIcon,
                        i = void 0 === t || t,
                        o = e.hasText,
                        s = void 0 === o || o,
                        l = (0, n.ok2)().getI18n,
                        c = (0, n.Bm2)("Algo_Order"),
                        u = (0, n.qB_)();
                    return c && u ? (0, r.jsxs)("a", {
                        className: "trade-common-link",
                        href: "/OTC-Trading/AlgoTrading",
                        target: "_blank",
                        onClick: function(e) {
                            e && e.stopPropagation(), (0, a.u4)("$WebClick", {
                                pageName: "spot_trading",
                                df_source: "spot",
                                $element_id: "algo_order"
                            })
                        },
                        style: {
                            lineHeight: "16px"
                        },
                        children: [i && (0, r.jsxs)(r.Fragment, {
                            children: [(0, r.jsx)(h.A, {
                                className: "trade-common-icon"
                            }), "\xa0"]
                        }), s && l("trd-algoorder")]
                    }) : (0, r.jsx)(d, {
                        hasIcon: i,
                        hasText: s
                    })
                };
            const g = s().memo(u)
        },
        In8j: (e, t, i) => {
            i.d(t, {
                T: () => x
            });
            var r = i("mguP"),
                o = i("mXdx"),
                s = i("ekAd"),
                n = i("BiCW"),
                a = i("YCIx"),
                l = i("CLKF"),
                c = i("Qhol"),
                d = i("hAzz"),
                h = i("DtKF"),
                u = (0, n.A)((function() {
                    return i.e(9260).then(i.bind(i, "Hpy5"))
                }), {
                    webpack: function() {
                        return ["Hpy5"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                g = (0, n.A)((function() {
                    return i.e(8781).then(i.bind(i, "biAF"))
                }), {
                    webpack: function() {
                        return ["biAF"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                p = (0, n.A)((function() {
                    return i.e(1994).then(i.bind(i, "02rh"))
                }), {
                    webpack: function() {
                        return ["02rh"]
                    }
                }),
                m = (0, n.A)((function() {
                    return i.e(1642).then(i.bind(i, "q94W"))
                }), {
                    webpack: function() {
                        return ["q94W"]
                    }
                }),
                x = function() {
                    var e = (0, l.O)(),
                        t = (0, r._)((0, c.Grl)(), 1)[0];
                    return (0, o.jsxs)("div", {
                        className: "flex flex-col bg-TradeBg",
                        children: [e && (0, o.jsx)(a.default, {}), (0, o.jsx)(u, {
                            currentSymbol: "",
                            baseAsset: "",
                            quoteAsset: "",
                            isPro: !1,
                            tradeType: void 0
                        }), (0, o.jsx)(s.A, {
                            isPro: !0
                        }), (0, o.jsx)(g, {
                            currentSymbol: "",
                            baseAsset: "",
                            quoteAsset: "",
                            isPro: !1
                        }), (0, o.jsx)(h.A, {
                            isPro: !0
                        }), (0, d.V$)(t) && (0, o.jsxs)(o.Fragment, {
                            children: [(0, o.jsx)(p, {}), (0, o.jsx)(m, {})]
                        })]
                    })
                }
        },
        ekAd: (e, t, i) => {
            i.d(t, {
                A: () => v
            });
            var r = i("mguP"),
                o = i("mXdx"),
                s = i("DTvD"),
                n = i.n(s),
                a = i("MD8j"),
                l = i("lW1t"),
                c = i("b2AH"),
                d = i("J+v0"),
                h = i.n(d),
                u = i("bQ69"),
                g = i("Qhol"),
                p = i("C7Nc"),
                m = i("N9yd"),
                x = i("iwDq"),
                f = i("Impr");

            function y(e) {
                var t, i, n, a, l, d = e.isPro,
                    y = void 0 !== d && d,
                    b = (0, g.QsY)().isMobile,
                    v = (0, r._)((0, g.Grl)(), 1)[0],
                    C = v === u.Gr.ISOLATED,
                    w = v === u.Gr.CROSS,
                    A = (0, r._)((0, g.sL)(), 2),
                    S = (0, r._)(A[1], 2),
                    T = S[0],
                    k = S[1],
                    L = (0, p.cA)().symbolsMap,
                    _ = (0, c.ok)(),
                    P = _.getI18n,
                    D = _.t,
                    I = (0, s.useState)(!0),
                    V = I[0],
                    M = I[1],
                    B = "".concat(T).concat(k),
                    E = (0, p.tD)({
                        symbol: B,
                        base: T,
                        quote: k,
                        tradeType: v
                    }),
                    j = E.showPreDelist,
                    O = E.isCrossBasePreDelist,
                    H = null !== (t = L[B]) && void 0 !== t ? t : {},
                    R = null !== (i = null === H || void 0 === H ? void 0 : H.delistTime) && void 0 !== i ? i : 0,
                    N = null !== (n = null === H || void 0 === H ? void 0 : H.isolatedStatus) && void 0 !== n ? n : "NORMAL",
                    W = null !== (a = null === H || void 0 === H ? void 0 : H.crossStatus) && void 0 !== a ? a : "NORMAL",
                    F = null !== (l = null === H || void 0 === H ? void 0 : H.crossDelistTime) && void 0 !== l ? l : 0,
                    z = C ? R : F,
                    X = C ? "trade-delist-isolated-pair-new" : "trd-dialog-delist-cross-asset-new",
                    U = (0, g.nHk)(),
                    G = C || !U ? "".concat(T, "/").concat(k) : O ? T : k,
                    $ = (0, f.GY)({
                        symbol: B,
                        base: T,
                        quote: k,
                        tradeType: v
                    }),
                    Y = $.showPrepareSwap,
                    Z = $.baseSwap,
                    K = $.isLoading,
                    q = (0, o.jsxs)("span", {
                        children: [P(X, {
                            defaultValue: "{{pair}} will be delisted from Cross margin at {{delistTime}}, please pay attention to the risks when trading.",
                            interpolation: {
                                escapeValue: !1
                            },
                            pair: G,
                            delistTime: h()(+z).format("YYYY-MM-DD HH:mm (UTCZ)")
                        }), (0, o.jsx)("a", {
                            href: "/support/faq/delistings-on-binance-margin-15c88f46e0e244b78a673f07eafb4415",
                            target: "_blank",
                            rel: "noreferrer",
                            className: "no-underline ml-[4px] text-TextLink",
                            children: D("trd-learn-more")
                        })]
                    }),
                    Q = (0, o.jsx)(x.A, {
                        innerText: q,
                        isPro: y,
                        handleClose: function() {
                            return M(!1)
                        }
                    });
                return !V || C && "PREPARE_DELIST" !== N || w && "PREPARE_DELIST" !== W || j || Y && Z || K ? null : b ? (0, o.jsx)(m.A, {
                    name: "delist",
                    children: Q
                }) : Q
            }
            var b = function(e) {
                var t = e.isPro,
                    i = (0, a.d4)(l.makeFullscreen),
                    s = (0, r._)((0, g.Grl)(), 1)[0],
                    n = s === u.Gr.ISOLATED,
                    c = s === u.Gr.CROSS;
                return (n || c) && !i ? (0, o.jsx)(y, {
                    isPro: t
                }) : null
            };
            const v = n().memo(b)
        },
        "px+e": (e, t, i) => {
            i.d(t, {
                K: () => h
            });
            var r = i("mXdx"),
                o = (i("DTvD"), i("bQ69")),
                s = i("Qhol"),
                n = i("tskG"),
                a = i("CLKF"),
                l = i("kcvK"),
                c = i("wtFP"),
                d = "".concat(o.K5, "/static/images/spot/halloween2.svg"),
                h = function(e) {
                    var t = e.disabled,
                        i = void 0 !== t && t,
                        o = e.style,
                        h = (0, s.Bm2)("Halloween_Spot_Margin"),
                        u = (0, n._)((function(e) {
                            return e.showIcon
                        })),
                        g = (0, a.O)(),
                        p = (0, s.ok2)().t;
                    return (0, s.QsY)().isMobile || g || i ? (0, r.jsx)(r.Fragment, {}) : h && u ? (0, r.jsx)("div", {
                        className: "absolute cursor-pointer w-[24px] h-[24px]",
                        style: o,
                        children: (0, r.jsx)(l.A, {
                            useReactPopper: !0,
                            enablePortal: !0,
                            arrow: !0,
                            tooltips: p("trd-halloween-tips", {
                                defaultValue: "Join The Halloween Pumpkin Chase"
                            }),
                            children: (0, r.jsx)("img", {
                                onClick: function() {
                                    window.open("/activity/mission/pumpkinchase", "_blank"), (0, c.u4)("$WebClick", {
                                        $element_id: "Halloween_2024"
                                    })
                                },
                                className: "w-[24px] h-[24px] cursor-pointer",
                                src: d,
                                alt: "Halloween"
                            })
                        })
                    }) : (0, r.jsx)(r.Fragment, {})
                }
        },
        T3JK: (e, t, i) => {
            i.r(t), i.d(t, {
                default: () => w,
                useHelpIcons: () => v
            });
            var r = i("mguP"),
                o = i("mXdx"),
                s = i("DTvD"),
                n = i.n(s),
                a = i("BiCW"),
                l = i("GIr8"),
                c = i("YDWC"),
                d = i("OGoN"),
                h = i("sXI5"),
                u = i("Qhol"),
                g = i("XPku"),
                p = i("Vc2Y"),
                m = i("hAzz"),
                x = i("/LKW"),
                f = i("CLKF"),
                y = (0, a.A)((function() {
                    return i.e(721).then(i.bind(i, "jQmP"))
                }), {
                    webpack: function() {
                        return ["jQmP"]
                    }
                }),
                b = new h.lG,
                v = function() {
                    var e = (0, r._)((0, u.Grl)(), 1)[0],
                        t = (0, u.DPo)().isLight,
                        i = (0, u.CUO)().getI18n,
                        n = (0, g.P)(),
                        a = (0, u.pl4)(),
                        l = (0, u.rJh)(),
                        c = (0, u.q$z)(),
                        d = (0, m.V$)(e),
                        h = (0, f.O)(),
                        p = b.close;
                    return {
                        onClick: (0, s.useCallback)((function() {
                            b.show({
                                isLight: t,
                                contentSx: {
                                    maxWidth: "640px"
                                },
                                showTitleBottomLine: !1,
                                children: (0, o.jsx)(y, {
                                    isMargin: d,
                                    showDialog: n,
                                    isOnlySpot: c || h,
                                    disableSpotTur: a,
                                    disableMarginTur: l,
                                    close: p
                                }),
                                title: i("spot-help-center", {
                                    defaultValue: "Spot Help Center"
                                })
                            })
                        }), [i, t, h, d, n, a, l, c]),
                        isLight: t
                    }
                },
                C = function(e) {
                    var t = e.onClick,
                        i = e.isLight,
                        r = (0, s.useRef)(null);
                    return (0, s.useEffect)((function() {
                        p.R.on(p.q.OPEN_HELP_CENTER, (function() {
                            t()
                        }))
                    }), []), (0, o.jsx)(d.A, {
                        theme: i ? x._k : x.a5,
                        children: (0, o.jsx)(l.A, {
                            ref: r,
                            sx: {
                                alignItems: "center",
                                cursor: "pointer",
                                minWidth: "24px",
                                ml: "6px",
                                "&:hover": {
                                    svg: {
                                        color: "var(--color-PrimaryYellow)",
                                        cursor: "pointer"
                                    }
                                }
                            },
                            onClick: t,
                            children: (0, o.jsx)(c.A, {
                                size: 24,
                                sx: {
                                    color: "t.primary"
                                }
                            })
                        })
                    })
                };
            const w = n().memo(C)
        },
        qJy6: (e, t, i) => {
            i.r(t), i.d(t, {
                default: () => M,
                useSettingToggleProps: () => I
            });
            var r = i("mguP"),
                o = i("mXdx"),
                s = i("DTvD"),
                n = i.n(s),
                a = i("luEp"),
                l = i("GIr8"),
                c = i("2IQ4"),
                d = i("Vhyo"),
                h = i("zX7I"),
                u = i("MD8j"),
                g = i("YRJq"),
                p = i("Qhol"),
                m = i("rvBo"),
                x = i("PUby"),
                f = i("hrAD"),
                y = i("qoEP"),
                b = i("KrVi"),
                v = i("GJ+9"),
                C = i("8aEf"),
                w = {
                    display: "flex",
                    alignItems: "center",
                    cursor: "help",
                    color: "t.third",
                    borderBottom: ["1px dotted", "1px dotted", "none"],
                    borderBottomColor: "t.third",
                    "&:hover": {
                        color: "t.primary",
                        borderBottomColor: "t.primary"
                    }
                },
                A = {
                    maxWidth: "296px",
                    margin: "-4px 0",
                    lineHeight: "16px",
                    color: "t.white",
                    whiteSpace: "pre-line"
                },
                S = {
                    fontSize: "12px",
                    color: "primary"
                },
                T = function(e) {
                    var t = e.link,
                        i = e.onClick,
                        r = (0, p.CUO)().getI18n;
                    return (0, o.jsx)(v.A, {
                        variant: "standardLink",
                        href: t,
                        target: "_blank",
                        onClick: i,
                        sx: S,
                        children: r("trd-learn-more", {
                            defaultValue: "Learn More"
                        })
                    })
                },
                k = function(e) {
                    var t = e.children,
                        i = e.tip,
                        r = e.learnMoreLink,
                        s = e.onLearnMoreLinkClick,
                        n = e.placement,
                        a = e.hideUnderLine,
                        l = e.sx,
                        h = e.tipSx,
                        u = e.labelSx,
                        g = e.onTipClick,
                        m = e.onClickText,
                        x = (0, b._)(e, ["children", "tip", "learnMoreLink", "onLearnMoreLinkClick", "placement", "hideUnderLine", "sx", "tipSx", "labelSx", "onTipClick", "onClickText"]),
                        v = (0, p.QsY)().isIPad,
                        S = (0, o.jsxs)(c.A, (0, y._)((0, f._)({
                            sx: (0, f._)({}, A, h)
                        }, g && {
                            onClick: g
                        }), {
                            children: [i, r && (0, o.jsxs)(o.Fragment, {
                                children: [" ", (0, o.jsx)(T, {
                                    link: r,
                                    onClick: s
                                })]
                            })]
                        }));
                    return (0, o.jsx)(C.Ay, (0, y._)((0, f._)({
                        tip: S,
                        delay: 500,
                        sx: l,
                        bg: "bg4",
                        placement: n,
                        arrow: !0,
                        enablePortal: !v
                    }, x), {
                        children: (0, o.jsx)(d.A, {
                            className: "text-inner",
                            onClick: m,
                            sx: (0, f._)({}, w, u, a ? {
                                borderBottom: "none"
                            } : {}),
                            children: t
                        })
                    }))
                },
                L = i("SRNX"),
                _ = i("OGoN"),
                P = i("/LKW"),
                D = i("ZGYs"),
                I = function(e) {
                    var t = (0, u.d4)((function(e) {
                            return e.setting.layout
                        })),
                        i = (0, u.d4)((function(e) {
                            return e.setting.initSetting
                        })),
                        o = (0, p.ok2)().getI18n,
                        n = (0, r._)((0, p.Grl)(), 1)[0],
                        a = (0, x.A)().enabledVoice,
                        l = (0, g.h1)().putCoachMarkStep,
                        c = (0, p.DPo)().isLight,
                        d = (0, s.useRef)(null),
                        h = function() {
                            var e = (0, s.useState)(!1),
                                t = e[0],
                                i = e[1],
                                o = (0, p.nHk)(),
                                n = (0, r._)((0, L.z)("SETTINGS_UPGRADE_TIP_SHOWED", !1), 3),
                                a = n[0],
                                l = n[1],
                                c = n[2];
                            (0, s.useEffect)((function() {
                                c && !a && o && i(!0)
                            }), [a, c]);
                            var d = (0, s.useCallback)((function() {
                                i(!1), l(!0)
                            }), []);
                            return (0, s.useMemo)((function() {
                                return {
                                    tipVisible: t,
                                    closeTip: d
                                }
                            }), [t, d, o])
                        }(),
                        f = h.tipVisible,
                        y = h.closeTip;
                    return (0, s.useEffect)((function() {
                        l("tradeGuide", 3, {
                            target: d,
                            title: o("trd-setting-guide-title", {
                                defaultValue: "Customize your trading interface!"
                            }),
                            content: o("trd-setting-guide-content", {
                                defaultValue: "Select your favorite theme, color and your preferred layout."
                            }),
                            position: "bottom-start",
                            showSkip: !1
                        })
                    }), [o, d]), (0, s.useEffect)((function() {
                        i && (0, m.oy)({
                            status: a,
                            tradeType: n,
                            layout: t
                        })
                    }), [i]), {
                        toggleRef: d,
                        tipVisible: f,
                        handleOnMouseEnter: function() {
                            e(D.Z.HEADER), (0, m.gU)({
                                layout: t,
                                tradeType: n
                            })
                        },
                        getI18n: o,
                        closeTip: y,
                        isLight: c
                    }
                },
                V = function(e) {
                    var t = e.toggleRef,
                        i = e.tipVisible,
                        r = e.handleOnMouseEnter,
                        s = e.getI18n,
                        n = e.closeTip,
                        u = e.isLight;
                    return (0, o.jsx)(_.A, {
                        theme: u ? P._k : P.a5,
                        children: (0, o.jsx)(l.A, {
                            ref: t,
                            sx: {
                                height: "64px",
                                pl: "10px",
                                position: "relative",
                                color: "var(--color-PrimaryText)",
                                "&:hover": {
                                    color: "var(--color-PrimaryYellow)"
                                },
                                cursor: "pointer",
                                alignItems: "center",
                                ".text-inner": {
                                    cursor: "pointer",
                                    height: "64px",
                                    "&:hover": {
                                        svg: {
                                            color: "var(--color-PrimaryYellow)",
                                            cursor: "pointer"
                                        }
                                    }
                                }
                            },
                            "data-testid": "UIOptionSelect",
                            children: (0, o.jsx)(k, {
                                open: i,
                                onClickText: r,
                                hideUnderLine: !0,
                                bg: "primary",
                                placement: "bottom-end",
                                tip: (0, o.jsxs)(c.A, {
                                    width: "188px",
                                    padding: "16px",
                                    children: [(0, o.jsx)(d.A, {
                                        variant: "body2",
                                        fontSize: "14px",
                                        color: "bg5",
                                        children: s("trd-settingsUpgradeTip", {
                                            defaultValue: "Preference can now be accessed here. Click on Settings to view or customize your preferred features and style"
                                        })
                                    }), (0, o.jsx)(h.A, {
                                        sx: {
                                            bg: "t.white",
                                            float: "right",
                                            minWidth: "64px",
                                            mt: "8px"
                                        },
                                        onClick: n,
                                        children: s("OK")
                                    })]
                                }),
                                children: (0, o.jsx)(a.A, {
                                    color: "t.primary",
                                    size: 24,
                                    sx: {
                                        cursor: "pointer",
                                        color: "t.primary",
                                        mr: "5px",
                                        minWidth: "35px"
                                    }
                                })
                            })
                        })
                    })
                };
            const M = n().memo(V)
        },
        mdc9: (e, t, i) => {
            i.d(t, {
                A: () => b
            });
            var r = i("hrAD"),
                o = i("d12p"),
                s = i("mXdx"),
                n = i("DTvD"),
                a = i.n(n),
                l = i("NoXm"),
                c = i("BiCW"),
                d = i("Qhol"),
                h = i("bQ69"),
                u = i("FWGn"),
                g = i("qJy6"),
                p = i("T3JK"),
                m = (0, c.A)((function() {
                    return Promise.all([i.e(995), i.e(9431), i.e(2899), i.e(2963), i.e(2314), i.e(4945), i.e(4076), i.e(5322), i.e(5890), i.e(4282)]).then(i.bind(i, "5KF5"))
                }), {
                    webpack: function() {
                        return ["5KF5"]
                    }
                }),
                x = (0, c.A)((function() {
                    return Promise.resolve().then(i.bind(i, "T3JK"))
                }), {
                    webpack: function() {
                        return ["T3JK"]
                    }
                }),
                f = (0, c.A)((function() {
                    return Promise.resolve().then(i.bind(i, "qJy6"))
                }), {
                    webpack: function() {
                        return ["qJy6"]
                    }
                }),
                y = function(e) {
                    var t = e.settingPanelType,
                        i = e.setSettingPanelType,
                        a = e.disableModule,
                        c = e.layout,
                        y = (0, p.useHelpIcons)(),
                        b = (0, g.useSettingToggleProps)(i),
                        v = (0, n.useState)(0),
                        C = v[0],
                        w = v[1],
                        A = (0, n.useState)(!1),
                        S = A[0],
                        T = A[1],
                        k = (0, u.R)(),
                        L = (0, d.QsY)().isMobile,
                        _ = (0, n.useCallback)((function(e) {
                            e && e.preventDefault(), e && e.stopPropagation(), i("")
                        }), [i]);
                    return (0, n.useEffect)((function() {
                        (0, l.registerHeaderRightHandler)((function(e) {
                            if (Array.isArray(e)) {
                                S && k("header"), T(!0);
                                var t = e.findIndex((function(e) {
                                    return "header-theme" === e.key
                                }));
                                return L ? (0, o._)(e).concat([(0, s.jsx)(f, (0, r._)({}, b), "setting-toggle")]) : (0, o._)(e.slice(0, t)).concat([(0, s.jsx)(x, (0, r._)({}, y), "help-icon"), (0, s.jsx)(f, (0, r._)({}, b), "setting-toggle")], (0, o._)(e.slice(t)))
                            }
                            return (0, s.jsx)(s.Fragment, {
                                children: e
                            })
                        }))
                    }), [L, y, b, S]), (0, n.useEffect)((function() {
                        c && c !== h.a0 && (0, l.registerHeaderLeftHandler)((function(e) {
                            return e
                        }))
                    }), [c]), (0, n.useEffect)((function() {
                        t && w(1)
                    }), [t]), (0, s.jsx)(s.Fragment, {
                        children: 0 !== C && (0, s.jsx)(m, {
                            hide: _,
                            disableModule: a,
                            settingPanelType: t,
                            setSettingPanelType: i
                        })
                    })
                };
            const b = a().memo(y)
        },
        UPkX: (e, t, i) => {
            i.d(t, {
                A: () => T
            });
            var r = i("mguP"),
                o = i("mXdx"),
                s = i("DTvD"),
                n = i("u3jq"),
                a = i("BiCW"),
                l = i("MD8j"),
                c = i("bQ69"),
                d = i("C7Nc"),
                h = i("Evfg"),
                u = i("SQql"),
                g = i("Qhol"),
                p = i("e3WN"),
                m = i("wtFP"),
                x = i("Vc2Y"),
                f = i("ZGYs"),
                y = i("mdc9"),
                b = i("8Ud2"),
                v = i("0yrM"),
                C = i("In8j"),
                w = i("PQuT"),
                A = (0, a.A)((function() {
                    return i.e(2176).then(i.bind(i, "Rs9d"))
                }), {
                    webpack: function() {
                        return ["Rs9d"]
                    }
                }),
                S = function() {
                    var e = (0, l.d4)((function(e) {
                            return e.setting.layout
                        })),
                        t = (0, p.PO)();
                    (0, d.pf)(e);
                    var i = (0, g.QsY)(),
                        a = i.isMobile,
                        S = i.isDesktop,
                        T = (0, g.okI)().settingPopup,
                        k = (0, r._)((0, g.Grl)(), 1)[0],
                        L = (0, s.useState)("true" === T ? f.Z.HEADER : ""),
                        _ = L[0],
                        P = L[1],
                        D = (0, s.useCallback)((function(e) {
                            P(e), e && function(e) {
                                var t = e.tradeType;
                                (0, m.u4)("$WebClick", {
                                    pageName: m.$1[t],
                                    df_source: m.Yx[t],
                                    module: "header",
                                    $element_id: "setting"
                                })
                            }({
                                tradeType: k
                            })
                        }), [k, P]);
                    return (0, s.useEffect)((function() {
                        return x.R.on(x.q.OPEN_SETTING_MODAL, (function(e) {
                            D(e)
                        }))
                    }), [D]), (0, o.jsx)(u.A, {
                        name: "header",
                        style: {
                            width: "100%",
                            height: "100%",
                            gridArea: "header",
                            backgroundColor: "var(--color-BasicBg)"
                        },
                        children: (0, o.jsxs)(w.W, {
                            children: [(0, o.jsx)(v.To, {}), (0, o.jsx)(h.A, {}), !a && (0, o.jsx)(C.T, {}), t ? null : (0, o.jsx)("div", {
                                className: "spot-basic-layout-display",
                                children: !a && (0, o.jsx)(b.A, {})
                            }), (0, o.jsx)(n.A, {}), !c.S$ && (0, o.jsx)(y.A, {
                                layout: e,
                                settingPanelType: _,
                                setSettingPanelType: D
                            }), !c.S$ && S && e === c.a0 && (0, o.jsx)(A, {})]
                        })
                    })
                };
            const T = (0, s.memo)(S)
        },
        "0yrM": (e, t, i) => {
            i.d(t, {
                d9: () => V,
                o9: () => f,
                L3: () => K,
                o1: () => ge,
                jm: () => Pt,
                WH: () => B,
                QW: () => F,
                st: () => q.A,
                Ds: () => Ft,
                LP: () => pt,
                _D: () => ce,
                q$: () => H,
                To: () => X,
                V0: () => x,
                IY: () => Z,
                qr: () => ue,
                Jr: () => he,
                kn: () => de,
                jn: () => Ht,
                if: () => ye,
                lj: () => A,
                Uo: () => lt
            });
            var r = i("mguP"),
                o = i("mXdx"),
                s = i("DTvD"),
                n = i.n(s),
                a = i("z6Os"),
                l = i("BiCW"),
                c = i("yvZC"),
                d = i("Qhol"),
                h = i("bLkt"),
                u = i("IhpE"),
                g = i("wtFP"),
                p = i("px+e"),
                m = (0, l.A)((function() {
                    return i.e(5077).then(i.bind(i, "SqP6"))
                }), {
                    webpack: function() {
                        return ["SqP6"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                x = (0, s.memo)((function(e) {
                    var t = e.limit,
                        i = void 0 === t ? 10 : t;
                    return (0, o.jsx)("div", {
                        style: {
                            width: "100%",
                            height: "100%",
                            overflowY: "auto"
                        },
                        children: (0, o.jsx)(m, {
                            expand: !0,
                            limit: i,
                            height: "100%",
                            hiddenOverflow: !0
                        })
                    })
                })),
                f = (0, s.memo)((function(e) {
                    var t = e.limit,
                        i = void 0 === t ? 10 : t,
                        n = (0, h.ok)().getI18n,
                        l = (0, r._)((0, d.Grl)(), 1)[0],
                        x = (0, r._)((0, d.eY6)(!1), 2),
                        f = x[0],
                        y = x[1],
                        b = function() {
                            ! function(e) {
                                var t = e.tradeType;
                                (0, g.u4)("$WebClick", {
                                    module: "market_activity",
                                    $element_id: "toggle",
                                    pageName: g.$1[t],
                                    df_source: g.Yx[t]
                                })
                            }({
                                tradeType: l
                            }), y()
                        };
                    if ((0, d.z1p)()) return (0, o.jsx)(o.Fragment, {});
                    var v = (0, o.jsxs)(o.Fragment, {
                            children: [n("tabMarketActivity", {
                                defaultValue: "Market Activities"
                            }), (0, o.jsx)(u.a, {})]
                        }),
                        C = (0, s.useCallback)((function() {
                            return (0, o.jsxs)("div", {
                                onClick: b,
                                children: [(0, o.jsx)(p.K, {
                                    style: {
                                        right: "42px"
                                    }
                                }), (0, o.jsx)(a.A, {
                                    style: {
                                        transition: "all 0.3s",
                                        cursor: "pointer",
                                        transform: "rotate(".concat(f ? 0 : 180, "deg)")
                                    },
                                    className: "trade-common-icon"
                                })]
                            })
                        }), [f, b]);
                    return (0, o.jsx)(c.Zp, {
                        area: "marketActivity",
                        name: "marketActivity",
                        title: v,
                        renderExtra: C,
                        contentStyle: {
                            position: "initial",
                            paddingTop: "0"
                        },
                        children: (0, o.jsx)("div", {
                            style: {
                                width: "100%"
                            },
                            children: (0, o.jsx)(m, {
                                expand: f,
                                limit: i
                            })
                        })
                    })
                })),
                y = i("N9yd"),
                b = (0, l.A)((function() {
                    return Promise.all([i.e(4315), i.e(241)]).then(i.bind(i, "3una"))
                }), {
                    webpack: function() {
                        return ["3una"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                v = {
                    display: "flex",
                    minWidth: "1200px",
                    width: "100%",
                    ".pieChart": {
                        flex: 1,
                        minWidth: "800px",
                        ".pieChartContent": {
                            display: "flex",
                            ".pieChartWrap": {
                                minWidth: "400px"
                            },
                            ".pieTableWrap": {
                                minWidth: "400px",
                                ".colorLabel": {
                                    mt: "26px",
                                    ml: "16px",
                                    pl: 0,
                                    justifyContent: "left"
                                }
                            }
                        }
                    },
                    ".noDataWrap": {
                        flex: 1,
                        minWidth: "400px"
                    },
                    ".columnChart": {
                        minWidth: "400px",
                        flex: 1
                    },
                    ".inflowAreaChart": {
                        minWidth: "400px",
                        flex: 1,
                        mt: 0
                    }
                },
                C = {
                    display: "flex",
                    minWidth: "1200px",
                    width: "100%",
                    height: "calc(100% - 20px)",
                    ".marginDebtAreaChart": {
                        minWidth: "400px",
                        flex: 1
                    },
                    ".marginPositionChart": {
                        minWidth: "400px",
                        flex: 1
                    },
                    ".marginBorrowChart": {
                        minWidth: "400px",
                        flex: 1
                    }
                },
                w = function(e) {
                    var t = e.onRemove,
                        i = (0, r._)((0, d.sL)(), 2),
                        s = i[0],
                        n = (0, r._)(i[1], 2),
                        a = n[0],
                        l = n[1],
                        c = (0, d.Fky)(s);
                    return (0, o.jsx)(y.A, {
                        sx: {
                            width: "100%",
                            height: "100%",
                            bg: "var(--color-BasicBg)",
                            gridArea: "transactionData",
                            overflow: "hidden"
                        },
                        name: "transactionData",
                        children: (0, o.jsx)(b, {
                            onRemove: t,
                            symbol: s,
                            baseAsset: a,
                            quoteAsset: l,
                            isETFCoin: c,
                            spotSx: v,
                            marginSx: C,
                            disableTitleBg: !0,
                            contentHeight: !0
                        })
                    })
                };
            const A = (0, s.memo)(w);
            var S = i("hAzz"),
                T = i("IDN6"),
                k = i("R0xM"),
                L = (0, l.A)((function() {
                    return i.e(81).then(i.bind(i, "YRZ/"))
                }), {
                    webpack: function() {
                        return ["YRZ/"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                _ = (0, l.A)((function() {
                    return i.e(1718).then(i.bind(i, "Z8wl"))
                }), {
                    webpack: function() {
                        return ["Z8wl"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                P = function(e) {
                    var t = e.simpleAsset,
                        i = (0, r._)((0, d.Grl)(), 1)[0],
                        s = (0, r._)((0, d.sL)(), 2),
                        n = s[0],
                        a = (0, r._)(s[1], 2),
                        l = a[0],
                        c = a[1],
                        h = (0, d.nHk)();
                    return (0, o.jsxs)("div", {
                        className: "trade-asset-widget",
                        children: [(0, S.V$)(i) ? (0, o.jsx)(L, {
                            tradeType: i,
                            symbol: n,
                            base: l,
                            quote: c
                        }) : (0, o.jsx)(_, {
                            base: l,
                            quote: c,
                            hideTransfer: t
                        }), h && !t && (0, o.jsxs)("div", {
                            className: "asset-links",
                            children: [(0, o.jsx)(k.A, {}), (0, o.jsx)(T.A, {})]
                        })]
                    })
                };
            const D = n().memo(P);
            var I = function(e) {
                var t = e.simpleAsset;
                return (0, o.jsx)(D, {
                    simpleAsset: t
                })
            };
            const V = n().memo(I);
            var M = n().lazy((function() {
                return i.e(5277).then(i.bind(i, "XZ58"))
            }));
            const B = function(e) {
                var t = e.namespace,
                    i = (0, r._)((0, d.sL)(), 1)[0];
                return (0, o.jsx)(y.A, {
                    sx: {
                        width: "100%",
                        height: "100%",
                        bg: "var(--color-BasicBg)",
                        position: "relative",
                        borderRadius: "8px"
                    },
                    name: "depthchart",
                    children: (0, o.jsx)(s.Suspense, {
                        fallback: null,
                        children: (0, o.jsx)(M, {
                            namespace: t,
                            symbol: i
                        })
                    })
                })
            };
            var E = (0, l.A)((function() {
                    return Promise.all([i.e(6140), i.e(650), i.e(4963)]).then(i.bind(i, "ktGr"))
                }), {
                    webpack: function() {
                        return ["ktGr"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                j = (0, l.A)((function() {
                    return i.e(1299).then(i.bind(i, "tK5l"))
                }), {
                    webpack: function() {
                        return ["tK5l"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                O = (0, s.memo)((function(e) {
                    var t = e.layout,
                        i = e.onRemove,
                        n = (0, r._)((0, d.sL)(), 2),
                        a = n[0],
                        l = (0, r._)(n[1], 2),
                        h = l[0],
                        u = l[1],
                        g = (0, d.ok2)().getI18n,
                        p = (0, s.useCallback)((function() {
                            return (0, o.jsx)(j, {
                                layout: t
                            })
                        }), [t]);
                    return (0, o.jsx)(c.qU, {
                        name: "orderbook",
                        area: "orderbook",
                        title: g("trd-layout-orderBookTle"),
                        onRemove: i,
                        renderExtra: p,
                        children: (0, o.jsx)(E, {
                            layout: t,
                            symbol: a,
                            baseAsset: h,
                            quoteAsset: u
                        })
                    })
                }));
            const H = (0, s.memo)(O);
            var R = i("+m0g"),
                N = i("C7Nc"),
                W = n().lazy((function() {
                    return i.e(2659).then(i.bind(i, "RRs3"))
                }));
            const F = n().memo((function(e) {
                var t = e.area,
                    i = e.onRemove,
                    r = (0, N.ot)(),
                    n = (0, s.useCallback)((function(e) {
                        return function(t) {
                            t && t.preventDefault(), r({
                                resPathList: [e.split("/").join("_")],
                                electronUpdateTabs: !1
                            })
                        }
                    }), [r]);
                return (0, o.jsx)(s.Suspense, {
                    fallback: null,
                    children: (0, o.jsx)(R.Tn, {
                        area: t,
                        onRemove: i,
                        useCalcWidth: !1,
                        panes: [],
                        name: "favoriteBar",
                        useDraghandle: !0,
                        children: (0, o.jsx)(W, {
                            sx: {
                                ".noScrollBar": {
                                    display: "flex",
                                    alignItems: "center"
                                }
                            },
                            onChooseSymbol: n
                        })
                    })
                })
            }));
            var z = (0, l.A)((function() {
                return i.e(8341).then(i.bind(i, "/9NC"))
            }), {
                webpack: function() {
                    return ["/9NC"]
                },
                ssr: !1,
                loading: function() {
                    return null
                }
            });
            const X = function() {
                var e = (0, N.IE)();
                return (0, o.jsx)(o.Fragment, {
                    children: e && (0, o.jsx)(z, {})
                })
            };
            var U = i("bQ69"),
                G = i("SQql"),
                $ = (0, l.A)((function() {
                    return Promise.all([i.e(995), i.e(9431), i.e(1694), i.e(9402), i.e(2021), i.e(6152), i.e(6344), i.e(8085), i.e(4076), i.e(8281), i.e(1172), i.e(3638)]).then(i.bind(i, "a6dZ"))
                }), {
                    webpack: function() {
                        return ["a6dZ"]
                    }
                }),
                Y = (0, l.A)((function() {
                    return Promise.all([i.e(1694), i.e(9402), i.e(2021), i.e(8281), i.e(4617)]).then(i.bind(i, "MZ61"))
                }), {
                    webpack: function() {
                        return ["MZ61"]
                    }
                }),
                Z = n().memo((function(e) {
                    var t = e.platform,
                        i = e.width,
                        s = e.maxWidth,
                        n = e.onRemove,
                        a = e.slotDialog,
                        l = (0, r._)((0, d.sL)(), 2),
                        c = l[0],
                        h = (0, r._)(l[1], 2),
                        u = h[0],
                        g = h[1];
                    (0, r._)((0, d.Grl)(), 1)[0];
                    return (0, o.jsxs)(y.A, {
                        sx: {
                            width: "100%",
                            overflowY: ["initial", "auto"],
                            overflowX: ["visible", "hidden"],
                            position: ["fixed", "relative"],
                            zIndex: 1,
                            bottom: ["33px", "0px"],
                            height: ["52px", "100%"],
                            gridArea: "orderform",
                            display: "flex",
                            flexDirection: "column"
                        },
                        name: "orderform",
                        children: [a, (0, o.jsx)("div", {
                            className: "bg-BasicBg rounded-[8px] flex-1",
                            children: (0, o.jsx)($, {
                                layout: U.ug,
                                platform: t,
                                w: i,
                                maxW: s,
                                onRemove: n,
                                currentSymbol: c,
                                currentBaseAsset: u,
                                currentQuoteAsset: g
                            })
                        })]
                    })
                })),
                K = n().memo((function(e) {
                    var t = e.layout,
                        i = (e.slotDialog, (0, r._)((0, d.sL)(), 2)),
                        s = i[0],
                        n = (0, r._)(i[1], 2),
                        a = n[0],
                        l = n[1];
                    (0, r._)((0, d.Grl)(), 1)[0];
                    return (0, o.jsx)(G.A, {
                        style: {
                            gridArea: "orderform",
                            display: "flex",
                            flexDirection: "column"
                        },
                        name: "orderform",
                        children: (0, o.jsx)("div", {
                            className: "bg-BasicBg rounded-[8px] flex-1",
                            children: (0, o.jsx)(Y, {
                                layout: t,
                                platform: U.PC,
                                currentSymbol: s,
                                currentBaseAsset: a,
                                currentQuoteAsset: l
                            })
                        })
                    })
                })),
                q = i("UPkX"),
                Q = i("2IQ4"),
                J = i("yDd4"),
                ee = i("qpBH"),
                te = i("DtKF"),
                ie = (0, l.A)((function() {
                    return Promise.resolve().then(i.bind(i, "dkdI"))
                }), {
                    webpack: function() {
                        return ["dkdI"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                re = (0, l.A)((function() {
                    return i.e(1677).then(i.bind(i, "Sl0s"))
                }), {
                    webpack: function() {
                        return ["Sl0s"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                oe = (0, l.A)((function() {
                    return i.e(5465).then(i.bind(i, "fVha"))
                }), {
                    webpack: function() {
                        return ["fVha"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                se = (0, l.A)((function() {
                    return i.e(9260).then(i.bind(i, "Hpy5"))
                }), {
                    webpack: function() {
                        return ["Hpy5"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                ne = (0, l.A)((function() {
                    return i.e(8781).then(i.bind(i, "biAF"))
                }), {
                    webpack: function() {
                        return ["biAF"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                ae = (0, l.A)((function() {
                    return i.e(1994).then(i.bind(i, "02rh"))
                }), {
                    webpack: function() {
                        return ["02rh"]
                    }
                }),
                le = (0, l.A)((function() {
                    return i.e(1642).then(i.bind(i, "q94W"))
                }), {
                    webpack: function() {
                        return ["q94W"]
                    }
                }),
                ce = function() {
                    var e = (0, r._)((0, d.sL)(), 2),
                        t = (e[0], (0, r._)(e[1], 2)),
                        i = (t[0], t[1], (0, r._)((0, d.Grl)(), 1)[0]);
                    return (0, o.jsxs)(y.A, {
                        sx: {
                            width: "100%",
                            height: "auto",
                            bg: "var(--color-BasicBg)",
                            gridArea: "switch",
                            mt: "-4px"
                        },
                        name: "switch",
                        children: [(0, o.jsx)(se, {
                            currentSymbol: "",
                            baseAsset: "",
                            quoteAsset: "",
                            isPro: !1,
                            tradeType: void 0
                        }), (0, o.jsx)(te.A, {
                            isPro: !1
                        }), (0, o.jsx)(ne, {
                            currentSymbol: "",
                            baseAsset: "",
                            quoteAsset: "",
                            isPro: !1
                        }), (0, S.V$)(i) && (0, o.jsxs)(o.Fragment, {
                            children: [(0, o.jsx)(ae, {}), (0, o.jsx)(le, {})]
                        }), (0, o.jsx)(re, {
                            children: (0, o.jsx)(ie, {})
                        })]
                    })
                },
                de = function() {
                    var e = (0, r._)((0, d.sL)(), 2),
                        t = e[0],
                        i = (0, r._)(e[1], 2),
                        s = i[0],
                        n = i[1],
                        a = (0, r._)((0, d.Grl)(), 1)[0];
                    return (0, o.jsx)(y.A, {
                        sx: {
                            width: "100%",
                            height: "100%",
                            bg: "var(--color-BasicBg)",
                            gridArea: "switch",
                            pl: "16px",
                            pt: "12px",
                            pb: "12px",
                            alignItems: "center",
                            borderRadius: "8px"
                        },
                        name: "switch",
                        children: (0, o.jsx)(Q.A, {
                            sx: {
                                flex: 1,
                                display: "flex",
                                flexDirection: "row",
                                alignItems: "center"
                            },
                            children: (0, o.jsx)(oe, {
                                mode: "",
                                isFullScreen: !1,
                                listChildren: (0, o.jsx)(ee.C, {
                                    symbol: t,
                                    baseAsset: s,
                                    quoteAsset: n,
                                    tradeType: a
                                }),
                                children: (0, o.jsx)(ie, {})
                            })
                        })
                    })
                },
                he = function() {
                    var e = (0, r._)((0, d.sL)(), 2),
                        t = e[0],
                        i = (0, r._)(e[1], 2),
                        s = i[0],
                        n = i[1],
                        a = (0, d.hFK)()[t],
                        l = [s, n],
                        c = t,
                        h = (0, r._)((0, d.Grl)(), 1)[0];
                    return (0, o.jsx)(Q.A, {
                        className: "draggableHandle trd-pro-sub-header",
                        sx: {
                            width: "100%",
                            bg: "var(--color-BasicBg)",
                            display: "flex",
                            paddingLeft: "16px",
                            height: "52px",
                            alignItems: "center",
                            paddingTop: "8px",
                            paddingBottom: "8px",
                            borderRadius: "8px"
                        },
                        children: (0, o.jsx)(Q.A, {
                            sx: {
                                flex: 1,
                                display: "flex",
                                flexDirection: "row",
                                alignItems: "center"
                            },
                            children: (0, o.jsx)(oe, {
                                mode: "pro",
                                isFullScreen: !1,
                                multipleSymbol: c,
                                multipleSymbols: l,
                                multipleCurrentProduct: a,
                                showAllTickerInfo: !0,
                                listChildren: (0, o.jsx)(ee.C, {
                                    symbol: c,
                                    baseAsset: s,
                                    quoteAsset: n,
                                    tradeType: h
                                }),
                                children: (0, o.jsx)(ie, {})
                            })
                        })
                    })
                },
                ue = function() {
                    var e = (0, r._)((0, d.sL)(), 2),
                        t = e[0],
                        i = (0, r._)(e[1], 2),
                        s = i[0],
                        n = i[1],
                        a = (0, r._)((0, d.Grl)(), 1)[0];
                    return (0, o.jsx)(Q.A, {
                        className: "draggableHandle trd-pro-sub-header",
                        sx: {
                            width: "100%",
                            bg: "var(--color-BasicBg)",
                            display: "flex",
                            paddingLeft: "16px",
                            height: "52px",
                            alignItems: "center",
                            paddingTop: "8px",
                            paddingBottom: "8px",
                            borderRadius: "8px"
                        },
                        children: (0, o.jsx)(Q.A, {
                            sx: {
                                flex: 1,
                                display: "flex",
                                flexDirection: "row",
                                alignItems: "center"
                            },
                            children: (0, o.jsx)(oe, {
                                mode: "pro",
                                isFullScreen: !1,
                                listChildren: (0, o.jsx)(ee.C, {
                                    symbol: t,
                                    baseAsset: s,
                                    quoteAsset: n,
                                    tradeType: a
                                }),
                                children: (0, o.jsx)(ie, {})
                            })
                        })
                    })
                },
                ge = function() {
                    var e = (0, s.useMemo)((function() {
                            return (0, o.jsx)(J.A, {})
                        }), []),
                        t = (0, r._)((0, d.Grl)(), 1)[0],
                        i = (0, r._)((0, d.sL)(), 2),
                        n = i[0],
                        a = (0, r._)(i[1], 2),
                        l = a[0],
                        c = a[1];
                    return (0, o.jsx)("div", {
                        style: {
                            height: "100%",
                            width: "100%",
                            backgroundColor: "var(--color-BasicBg)",
                            fontSize: 1,
                            color: "var(--color-PrimaryText)",
                            paddingTop: "4px",
                            paddingBottom: "4px",
                            gridArea: "subHeader",
                            borderRadius: "8px"
                        },
                        children: (0, o.jsx)("div", {
                            style: {
                                display: "flex",
                                position: "relative",
                                padding: "0 16px",
                                height: "100%",
                                width: "100%",
                                alignItems: "center",
                                justifyContent: "flex-start",
                                flexWrap: "nowrap"
                            },
                            className: "[&_.hourly-interest]:items-start [&_.header-guide]:flex [&_.header-guide]:flex-nowrap [&_.header-guide]:flex-1 [&_.header-guide]:justify-end [&_.header-guide]:items-center [&_.header-guide>div]:flex-nowrap [&_.header-guide>div]:whitespace-nowrap [&_.header-guide>div]:items-end",
                            children: (0, o.jsx)(oe, {
                                mode: "",
                                isFullScreen: !1,
                                sx: {
                                    flex: "initial"
                                },
                                listChildren: (0, o.jsx)(ee.C, {
                                    symbol: n,
                                    baseAsset: l,
                                    quoteAsset: c,
                                    tradeType: t
                                }),
                                children: e
                            })
                        })
                    })
                },
                pe = i("MD8j"),
                me = i("I3nN"),
                xe = (0, l.A)((function() {
                    return Promise.all([i.e(6140), i.e(2883)]).then(i.bind(i, "obVV"))
                }), {
                    webpack: function() {
                        return ["obVV"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                fe = (0, l.A)((function() {
                    return i.e(4766).then(i.bind(i, "XISr"))
                }), {
                    webpack: function() {
                        return ["XISr"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                });
            const ye = n().memo((function() {
                var e = (0, pe.wA)(),
                    t = (0, r._)((0, d.sL)(), 2),
                    i = t[0],
                    n = (0, r._)(t[1], 2),
                    a = n[0],
                    l = n[1],
                    h = (0, d.ok2)().getI18n,
                    u = (0, pe.d4)(me.makeTradeList),
                    g = (0, pe.d4)(me.makeInitLoading),
                    p = (0, s.useCallback)((function(t) {
                        var i = t.side,
                            r = void 0 === i ? "" : i,
                            o = t.price;
                        e.orderForm.updateState({
                            priceQty: {
                                side: r.toUpperCase(),
                                price: o
                            }
                        })
                    }), [e.orderForm]),
                    m = (0, s.useCallback)((function() {
                        return (0, o.jsx)(fe, {})
                    }), []);
                return (0, o.jsx)(c.Zp, {
                    area: "trades",
                    name: "trades",
                    title: h("trd-layout-tabMarketTrades"),
                    renderExtra: m,
                    children: (0, o.jsx)(xe, {
                        onRowClick: p,
                        trades: u,
                        loading: g,
                        base: a,
                        quote: l,
                        symbol: i
                    })
                })
            }));
            var be = i("aYB+"),
                ve = i("VaDm"),
                Ce = {
                    padding: ["6px 1px 6px 1px", "14px 1px 14px 1px"],
                    fontSize: "14px",
                    mr: "24px"
                },
                we = n().memo((function(e) {
                    var t = e.i18nKey,
                        i = e.defaultValue,
                        r = e.active,
                        s = e.suffix,
                        n = e.testId,
                        a = (0, d.ok2)().getI18n,
                        l = (0, d.FzM)();
                    return (0, o.jsxs)(Q.A, {
                        tx: "tabs",
                        className: "draggableCancel text-[14px] ".concat(r ? "active" : ""),
                        "data-testid": n,
                        sx: l ? Ce : {},
                        children: [a(t, {
                            defaultValue: i
                        }), s]
                    })
                })),
                Ae = n().memo((function(e) {
                    var t = e.active,
                        i = e.i18nKey,
                        r = void 0 === i ? "trd-layout-tabOpenOrder" : i,
                        s = (0, d.Oc_)().preOrders;
                    return (0, o.jsx)(we, {
                        i18nKey: r,
                        defaultValue: "Open Orders",
                        active: t,
                        suffix: "(".concat(s.length, ")"),
                        testId: "OpenOrder"
                    })
                })),
                Se = function(e) {
                    return (0, o.jsx)(Ae, {
                        active: e
                    })
                },
                Te = n().memo((function(e) {
                    var t = e.active,
                        i = e.i18nKey,
                        r = void 0 === i ? "trd-layout-tabOrderHistory" : i;
                    return (0, o.jsx)(we, {
                        i18nKey: r,
                        defaultValue: "Order History",
                        active: t,
                        testId: "OrderHistory"
                    })
                })),
                ke = function(e) {
                    return (0, o.jsx)(Te, {
                        active: e
                    })
                },
                Le = n().memo((function(e) {
                    var t = e.active,
                        i = e.i18nKey,
                        r = void 0 === i ? "trd-layout-tabTradeHistory" : i;
                    return (0, o.jsx)(we, {
                        i18nKey: r,
                        defaultValue: "Trade History",
                        active: t,
                        testId: "TradeHistory"
                    })
                })),
                _e = function(e) {
                    return (0, o.jsx)(Le, {
                        active: e
                    })
                },
                Pe = function(e) {
                    return (0, o.jsx)(we, {
                        i18nKey: "trd-layout-tabGridOrders",
                        defaultValue: "Grid Orders",
                        active: e,
                        testId: "GridOrders"
                    })
                },
                De = i("GIr8"),
                Ie = i("GJ+9"),
                Ve = i("7ZgD"),
                Me = i("F2GC"),
                Be = i("gLBh"),
                Ee = function(e) {
                    var t = e.children,
                        i = e.active,
                        r = e.height,
                        s = (0, d.ok2)().t,
                        a = (0, d.vzt)(),
                        l = a.isLoggedIn,
                        c = {
                            justifyContent: "center",
                            height: r || "100%",
                            alignItems: "center",
                            color: "t.primary",
                            padding: "20px 0"
                        };
                    if (a.isLoading || !Ve.o) return (0, o.jsx)(De.A, {
                        sx: c
                    });
                    if (l) return n().cloneElement(t, {
                        active: i
                    });
                    var h = function(e) {
                            var t = e.children;
                            return (0, o.jsx)(Me.e, {
                                children: (0, o.jsx)(Ie.A, {
                                    sx: {
                                        textDecoration: "none"
                                    },
                                    children: t
                                })
                            })
                        },
                        u = function(e) {
                            var t = e.children;
                            return (0, o.jsx)(Me.y, {
                                children: (0, o.jsx)(Ie.A, {
                                    sx: {
                                        textDecoration: "none"
                                    },
                                    children: t
                                })
                            })
                        };
                    return (0, o.jsx)(De.A, {
                        sx: c,
                        children: (0, o.jsx)(Q.A, {
                            sx: {
                                fontSize: 1
                            },
                            children: (0, o.jsx)(Be.x, {
                                t: s,
                                i18nKey: "trd-login-or-register",
                                defaults: "<LoginIn>Log In</LoginIn> or <Register>Register Now</Register> to trade",
                                components: {
                                    LoginIn: (0, o.jsx)(h, {}),
                                    Register: (0, o.jsx)(u, {})
                                }
                            })
                        })
                    })
                },
                je = i("Hd9R"),
                Oe = n().memo((function(e) {
                    var t = e.active,
                        i = e.i18nKey,
                        r = void 0 === i ? "trd-layout-tabFunds" : i;
                    return (0, o.jsx)(we, {
                        i18nKey: r,
                        defaultValue: "Funds",
                        active: t,
                        testId: "Funds"
                    })
                })),
                He = function(e) {
                    return (0, o.jsx)(Oe, {
                        active: e
                    })
                },
                Re = n().memo((function(e) {
                    var t = e.active,
                        i = e.i18nKey,
                        s = void 0 === i ? "trd-layout-tabPositions" : i,
                        n = (0, r._)((0, d.Grl)(), 1)[0] === U.Gr.CROSS,
                        a = (0, je.c)(n, "USDT", "");
                    return (0, o.jsx)(we, {
                        i18nKey: s,
                        defaultValue: "Positions",
                        active: t,
                        testId: "Positions",
                        suffix: "(".concat(a.length, ")")
                    })
                })),
                Ne = function(e) {
                    return (0, o.jsx)(Re, {
                        active: e
                    })
                },
                We = n().memo((function(e) {
                    var t = e.active,
                        i = e.i18nKey,
                        r = void 0 === i ? "trd-layout-tab-PMAssets" : i;
                    return (0, o.jsx)(we, {
                        i18nKey: r,
                        defaultValue: "PM Assets",
                        active: t,
                        testId: "Funds"
                    })
                })),
                Fe = function(e) {
                    return (0, o.jsx)(We, {
                        active: e
                    })
                },
                ze = n().memo((function(e) {
                    var t = e.active,
                        i = e.i18nKey,
                        r = void 0 === i ? "trd-trading-analysis" : i;
                    return (0, o.jsx)(we, {
                        i18nKey: r,
                        defaultValue: "Trading Analysis",
                        active: t,
                        testId: "TradingAnalysis"
                    })
                })),
                Xe = function(e) {
                    return (0, o.jsx)(ze, {
                        active: e
                    })
                },
                Ue = i("b9LU"),
                Ge = i("xqbL"),
                $e = i.n(Ge),
                Ye = i("OlNZ"),
                Ze = i.n(Ye),
                Ke = i("Olbk"),
                qe = function(e) {
                    var t = e.initialVisible,
                        i = void 0 !== t && t,
                        r = e.className,
                        n = e.visibleOffset,
                        a = void 0 === n ? 0 : n,
                        l = e.root,
                        c = void 0 === l ? null : l,
                        d = e.children,
                        h = e.stayRendered,
                        u = void 0 === h || h,
                        g = (0, s.useState)(i),
                        p = g[0],
                        m = g[1],
                        x = (0, s.useRef)(null),
                        f = (0, s.useRef)(Ze()(m, 100)),
                        y = (0, s.useRef)(!1);
                    return (0, s.useEffect)((function() {
                        p && (y.current = !0)
                    }), [p]), (0, s.useEffect)((function() {
                        var e = x.current;
                        if (e && "undefined" !== typeof IntersectionObserver) {
                            var t = new IntersectionObserver((function(e) {
                                f.current(e[0].isIntersecting)
                            }), {
                                root: c,
                                rootMargin: "".concat(a, "px 0px ").concat(a, "px 0px")
                            });
                            return t.observe(e),
                                function() {
                                    e && t.unobserve(e)
                                }
                        }
                        return m(!0),
                            function() {}
                    }), [c, a]), p || u && y.current ? d : (0, o.jsx)(Ke.Ay, {
                        ref: x,
                        className: $e()("h-[500px]", r)
                    })
                },
                Qe = (0, l.A)((function() {
                    return Promise.all([i.e(6140), i.e(7924), i.e(7296), i.e(7623)]).then(i.bind(i, "l2+Y"))
                }), {
                    webpack: function() {
                        return ["l2+Y"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                Je = (0, l.A)((function() {
                    return Promise.all([i.e(995), i.e(6140), i.e(8534), i.e(7924), i.e(7556)]).then(i.bind(i, "qCNO"))
                }), {
                    webpack: function() {
                        return ["qCNO"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                et = (0, l.A)((function() {
                    return i.e(2470).then(i.bind(i, "c5a5"))
                }), {
                    webpack: function() {
                        return ["c5a5"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                tt = (0, l.A)((function() {
                    return Promise.all([i.e(6140), i.e(734), i.e(7924), i.e(261), i.e(6051)]).then(i.bind(i, "KiQ7"))
                }), {
                    webpack: function() {
                        return ["KiQ7"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                it = (0, l.A)((function() {
                    return Promise.all([i.e(995), i.e(6140), i.e(734), i.e(1694), i.e(9402), i.e(2021), i.e(3824), i.e(8281), i.e(7296), i.e(261), i.e(3006)]).then(i.bind(i, "osUx"))
                }), {
                    webpack: function() {
                        return ["osUx"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                rt = (0, l.A)((function() {
                    return Promise.all([i.e(4310), i.e(6140), i.e(9431), i.e(7586), i.e(8440), i.e(4917), i.e(2131)]).then(i.bind(i, "Pf8z"))
                }), {
                    webpack: function() {
                        return ["Pf8z"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                ot = (0, l.A)((function() {
                    return Promise.all([i.e(6140), i.e(734), i.e(7924), i.e(7107)]).then(i.bind(i, "7u42"))
                }), {
                    webpack: function() {
                        return ["7u42"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                st = (0, l.A)((function() {
                    return Promise.all([i.e(995), i.e(6140), i.e(8534), i.e(8011), i.e(9731)]).then(i.bind(i, "gzRF"))
                }), {
                    webpack: function() {
                        return ["gzRF"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                nt = function(e) {
                    var t = e.onRemove,
                        i = e.showGird,
                        a = void 0 === i || i,
                        l = (0, r._)((0, d.Grl)(), 1)[0],
                        c = (0, S.H3)(l),
                        h = (0, d.DFo)().isPmAccount,
                        u = l === U.Gr.CROSS,
                        g = (0, d.i24)(),
                        p = (0, d.QsY)().isMobile,
                        m = (0, s.useMemo)((function() {
                            var e = p ? n().Fragment : Ee,
                                t = [
                                    [Se, (0, o.jsx)(e, {
                                        children: (0, o.jsx)(Qe, {}, l)
                                    })]
                                ];
                            return p || (t.push([ke, (0, o.jsx)(Ee, {
                                children: (0, o.jsx)(Je, {}, l)
                            })]), t.push([_e, (0, o.jsx)(Ee, {
                                children: (0, o.jsx)(et, {}, l)
                            })])), h && u ? t.push([Fe, (0, o.jsx)(Ee, {
                                children: (0, o.jsx)(ot, {}, l)
                            })]) : t.push([He, (0, o.jsx)(e, {
                                children: (0, o.jsx)(tt, {}, l)
                            })]), (0, S.V$)(l) && !p && (t.push([Ne, (0, o.jsx)(Ee, {
                                children: (0, o.jsx)(it, {}, l)
                            })]), t.push([Xe, (0, o.jsx)(Ee, {
                                children: (0, o.jsx)(st, {})
                            })])), g && !p && a && t.push([Pe, (0, o.jsx)(Ee, {
                                children: (0, o.jsx)(rt, {}, l)
                            })]), t
                        }), [l, g, a, h, p]),
                        x = (0, s.useMemo)((function() {
                            if (p) return {
                                suffix: (0, o.jsx)(be.A, {
                                    onClick: function() {
                                        return window.location.href = "/my/orders/exchange"
                                    },
                                    className: "!w-[20px] !h-[20px] text-IconNormal"
                                })
                            }
                        }), [p]),
                        f = (0, s.useMemo)((function() {
                            return p ? {
                                borderRadius: 0
                            } : void 0
                        }), [p]);
                    return (0, o.jsx)(ve.x, {
                        onRemove: t,
                        area: "userinfo",
                        name: "userinfo",
                        panes: m,
                        tabListProps: x,
                        defaultTabNumber: c ? 4 : 0,
                        useCalcWidth: !0,
                        css: f
                    }, l)
                },
                at = function(e) {
                    var t = e.onRemove,
                        i = e.showGird,
                        s = (0, r._)((0, d.sL)(), 2),
                        n = s[0],
                        a = (0, r._)(s[1], 2),
                        l = a[0],
                        c = a[1],
                        h = (0, d.Mjn)();
                    return (0, o.jsx)(qe, {
                        initialVisible: !h,
                        children: (0, o.jsx)(Ue.x.Provider, {
                            value: {
                                currentSymbol: n,
                                currentBaseAsset: l,
                                currentQuoteAsset: c,
                                hideCurrentSymbol: !1
                            },
                            children: (0, o.jsx)(nt, {
                                onRemove: t,
                                showGird: i
                            })
                        })
                    })
                };
            const lt = (0, s.memo)(at);
            var ct = i("hrAD"),
                dt = i("qoEP"),
                ht = i("FkjH"),
                ut = (0, l.A)((function() {
                    return Promise.all([i.e(995), i.e(6140), i.e(734), i.e(4241), i.e(1704), i.e(1666)]).then(i.bind(i, "zamu"))
                }), {
                    webpack: function() {
                        return ["zamu"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                gt = n().memo((function(e) {
                    var t = ht.A.registerActionHandle,
                        i = ht.A.constants,
                        r = (0, s.useState)(!1),
                        n = r[0],
                        a = r[1];
                    (0, s.useEffect)((function() {
                        var r = t((function(t) {
                            var r = t.name;
                            if ("basic" === e.type && r === i.ACTION_TRADE_SEARCH_SYMBOL) a(!0)
                        }));
                        return function() {
                            r()
                        }
                    }), [e.type]);
                    return (0, o.jsx)(G.A, {
                        style: (0, dt._)((0, ct._)({}, e.sx), {
                            width: "100%",
                            height: "100%",
                            background: (null === e || void 0 === e ? void 0 : e.bg) || "var(--color-BasicBg)",
                            gridArea: "market",
                            borderRadius: "8px"
                        }),
                        onBlur: function() {
                            a(!1)
                        },
                        name: "market",
                        children: (0, o.jsx)(ut, (0, dt._)((0, ct._)({}, e), {
                            openShotCut: n,
                            withVolume: !0,
                            bgColor: (null === e || void 0 === e ? void 0 : e.bg) || "var(--color-BasicBg)"
                        }))
                    })
                }));
            const pt = gt;
            var mt = i("S+0I"),
                xt = i("jbFV"),
                ft = i.n(xt),
                yt = i("WT+B"),
                bt = i("cvvB"),
                vt = i("lSwr"),
                Ct = i("lW1t"),
                wt = i("hFZM"),
                At = (0, l.A)((function() {
                    return Promise.resolve().then(i.bind(i, "hFZM"))
                }), {
                    webpack: function() {
                        return ["hFZM"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                St = (0, l.A)((function() {
                    return Promise.resolve().then(i.bind(i, "dkdI"))
                }), {
                    webpack: function() {
                        return ["dkdI"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                Tt = (0, l.A)((function() {
                    return i.e(2579).then(i.bind(i, "okLv"))
                }), {
                    webpack: function() {
                        return ["okLv"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                kt = (0, l.A)((function() {
                    return i.e(7090).then(i.bind(i, "WEyq"))
                }), {
                    webpack: function() {
                        return ["WEyq"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                Lt = (0, l.A)((0, mt._)(ft().mark((function e() {
                    var t;
                    return ft().wrap((function(e) {
                        for (;;) switch (e.prev = e.next) {
                            case 0:
                                return e.next = 2, Promise.all([i.e(6934), i.e(9461), i.e(5900), i.e(9548)]).then(i.bind(i, "/KSv"));
                            case 2:
                                return t = e.sent, e.abrupt("return", t.default);
                            case 4:
                            case "end":
                                return e.stop()
                        }
                    }), e)
                }))), {
                    webpack: function() {
                        return ["/KSv"]
                    },
                    ssr: !1
                }),
                _t = function(e) {
                    var t = e.children,
                        i = e.isFullscreen,
                        r = (0, s.useState)(0),
                        n = r[0],
                        a = r[1];
                    (0, s.useEffect)((function() {
                        var e = document.getElementById("global-banner-compliance-check");
                        a((null === e || void 0 === e ? void 0 : e.offsetHeight) || 0)
                    }), [i]);
                    var l = (0, s.useMemo)((function() {
                        return i ? {
                            position: "fixed",
                            left: "0px",
                            top: "".concat(n, "px"),
                            width: "100%",
                            height: "calc(100% - ".concat(n, "px)"),
                            zIndex: "999"
                        } : {
                            position: "relative",
                            width: "100%",
                            height: "100%"
                        }
                    }), [i, n]);
                    return (0, o.jsx)(G.A, {
                        style: (0, dt._)((0, ct._)({}, l), {
                            gridArea: "chart",
                            backgroundColor: "var(--color-BasicBg)",
                            minWidth: "0px",
                            borderRadius: "8px",
                            overflow: "hidden"
                        }),
                        name: "chart",
                        children: t
                    })
                };
            const Pt = n().memo((function(e) {
                var t = e.isTablet,
                    i = void 0 !== t && t,
                    n = e.onRemove,
                    a = e.removable,
                    l = void 0 !== a && a,
                    c = e.setWidgetLayout,
                    h = e.widgetLayout,
                    u = e.isPro,
                    g = e.isElectronPro,
                    p = e.showCoinInfoTab,
                    m = void 0 !== p && p,
                    x = e.showFullscreenIcon,
                    f = e.showChartModeDropdown,
                    y = (0, r._)((0, d.Grl)(), 1)[0],
                    b = (0, pe.d4)(Ct.makeFullscreen),
                    v = (0, S.lX)(y),
                    C = (0, s.useMemo)((function() {
                        return window.location.href.indexOf("multipleChart") > -1
                    }), []),
                    w = !v && !b,
                    A = (0, r._)((0, d.sL)(), 1)[0],
                    T = (0, yt.Z)((function() {
                        return n ? n() : l && c && h ? c(h.filter((function(e) {
                            return "chart" !== e.i
                        }))) : void 0
                    })),
                    k = (0, s.useMemo)((function() {
                        return b ? null : (0, o.jsx)(kt, {
                            onRemove: T
                        })
                    }), [T, b]),
                    L = (0, s.useMemo)((function() {
                        return (0, wt.createMainToobar)({
                            symbol: A,
                            headerSlot: b ? (0, o.jsx)(St, {
                                isChartView: !0
                            }) : null,
                            isPro: u || g,
                            showFullscreenIcon: x,
                            showChartModeDropdown: f,
                            tabKeys: [bt.t1.Store.Tabs.Origin, bt.t1.Store.Tabs.TradingView, bt.t1.Store.Tabs.Depth]
                        })
                    }), [g, b, u, x, f, A]);
                return (0, o.jsxs)(_t, {
                    isFullscreen: b,
                    children: [(0, o.jsxs)("div", {
                        className: $e()({
                            "h-full": i && v || !i && !w,
                            "h-[calc(100%-36px)]": i && !v || !i && w
                        }),
                        children: [m && (0, o.jsx)(Lt, {
                            namespace: vt.X8,
                            symbol: A,
                            children: (0, o.jsx)(At, {
                                symbol: A,
                                useMiniTicker: !1,
                                namespace: vt.X8,
                                shortcutEnabled: !C,
                                generateToolbar: L
                            })
                        }), !m && (0, o.jsx)(At, {
                            symbol: A,
                            useMiniTicker: !1,
                            namespace: vt.X8,
                            shortcutEnabled: !C,
                            generateToolbar: L
                        })]
                    }), w && (0, o.jsx)("div", {
                        className: "relative",
                        children: (0, o.jsx)(Tt, {})
                    }), k]
                })
            }));
            var Dt = i("KrVi"),
                It = i("r2Gn"),
                Vt = i("/Cny"),
                Mt = function(e) {
                    var t = e.panes,
                        i = e.area,
                        a = e.onRemove,
                        l = e.handleChange,
                        d = e.defaultTabNumber,
                        h = e.renderExtra,
                        u = (0, Dt._)(e, ["panes", "area", "onRemove", "handleChange", "defaultTabNumber", "renderExtra"]),
                        g = (0, s.useState)(d || 0),
                        p = g[0],
                        m = g[1];
                    return (0, o.jsxs)(G.A, (0, dt._)((0, ct._)({
                        style: {
                            width: "100%",
                            height: "100%",
                            gridArea: i,
                            paddingBottom: "12px",
                            backgroundColor: "var(--color-BasicBg)",
                            zIndex: "auto",
                            position: "relative",
                            overflow: "hidden",
                            borderRadius: "8px"
                        }
                    }, u), {
                        children: [a && (0, o.jsx)(Vt.A, {
                            size: 16,
                            className: "pro-layout-close-button",
                            onClick: function() {
                                return a()
                            },
                            sx: c.iw
                        }), (0, o.jsx)(It.A, {
                            className: "trade-tabbed-card trade-tabbed-card-fix-height",
                            variant: "default-breakline",
                            onChange: function(e) {
                                return m(t = e), void(l && l(t));
                                var t
                            },
                            selectedIndex: p,
                            showSlideMasks: !0,
                            showSlideArrow: !0,
                            tabListProps: {
                                className: "".concat(a ? "draggableHandle" : "")
                            },
                            children: t.map((function(e, t) {
                                var i = (0, r._)(e, 2),
                                    s = i[0],
                                    a = i[1];
                                return (0, o.jsx)(It.A.TabPane, {
                                    tabNode: (0, o.jsx)("div", {
                                        className: "item draggableCancel",
                                        children: s
                                    }),
                                    children: (0, o.jsx)("div", {
                                        className: "draggableCancel",
                                        style: {
                                            width: "100%",
                                            height: "100%"
                                        },
                                        children: n().cloneElement(a, {
                                            active: p === t
                                        })
                                    })
                                }, s)
                            }))
                        }), h && (0, o.jsx)("div", {
                            className: "tabbed-card-extra",
                            children: h()
                        })]
                    }))
                };
            const Bt = n().memo(Mt);
            var Et = (0, l.A)((function() {
                    return Promise.all([i.e(6140), i.e(6525)]).then(i.bind(i, "JMSX"))
                }), {
                    webpack: function() {
                        return ["JMSX"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                jt = (0, l.A)((function() {
                    return Promise.all([i.e(6140), i.e(2883)]).then(i.bind(i, "obVV"))
                }), {
                    webpack: function() {
                        return ["obVV"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                Ot = (0, l.A)((function() {
                    return i.e(4766).then(i.bind(i, "XISr"))
                }), {
                    webpack: function() {
                        return ["XISr"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                });
            const Ht = function(e) {
                var t = (0, h.ok)().getI18n,
                    i = (0, s.useState)(0),
                    n = i[0],
                    a = i[1],
                    l = (0, pe.wA)(),
                    c = (0, pe.d4)(me.makeTradeList),
                    u = (0, pe.d4)(me.makeInitLoading),
                    p = (0, r._)((0, d.sL)(), 2),
                    m = p[0],
                    x = (0, r._)(p[1], 2),
                    f = x[0],
                    y = x[1],
                    b = (0, r._)((0, d.Grl)(), 1)[0],
                    v = (0, s.useCallback)((function(e) {
                        var t = e.side,
                            i = void 0 === t ? "" : t,
                            r = e.price;
                        l.orderForm.updateState({
                            priceQty: {
                                side: i.toUpperCase(),
                                price: r
                            }
                        })
                    }), [l.orderForm]),
                    C = (0, s.useCallback)((function(e) {
                        a(e),
                            function(e) {
                                var t = e.tradeType,
                                    i = e.element_id;
                                (0, g.u4)("$WebClick", {
                                    module: "trade",
                                    $element_id: i,
                                    pageName: g.$1[t],
                                    df_source: g.Yx[t]
                                })
                            }({
                                tradeType: b,
                                element_id: 0 === e ? "market_trade" : "my_trade"
                            })
                    }), [b]),
                    w = (0, s.useMemo)((function() {
                        return [
                            [t("tabMarketTrades", {
                                defaultValue: "Market Trades"
                            }), (0, o.jsx)(jt, {
                                onRowClick: v,
                                symbol: m,
                                trades: c,
                                loading: u,
                                base: f,
                                quote: y
                            })],
                            [t("tabMyTrades", {
                                defaultValue: "My Trades"
                            }), 1 === n ? (0, o.jsx)(Ee, {
                                children: (0, o.jsx)(Et, {
                                    onRowClick: v
                                })
                            }) : (0, o.jsx)("div", {})]
                        ]
                    }), [m, c, u, f, y, v, n]),
                    A = (0, s.useCallback)((function() {
                        return (0, o.jsx)(Ot, {})
                    }), []);
                return (0, o.jsx)(Bt, (0, ct._)({
                    area: "trades",
                    name: "trades",
                    panes: w,
                    handleChange: C,
                    renderExtra: A
                }, e))
            };
            var Rt = i("nxXE"),
                Nt = (0, l.A)((function() {
                    return Promise.all([i.e(4315), i.e(4882)]).then(i.bind(i, "/Y5B"))
                }), {
                    webpack: function() {
                        return ["/Y5B"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                Wt = ["USDT", "TUSD", "BNB", "BTC", "ETH"];
            const Ft = function(e) {
                var t = e.onRemove,
                    i = void 0 === t ? function() {} : t,
                    r = (0, Rt.o)(),
                    s = (0, d.hFK)();
                return (0, o.jsx)(y.A, {
                    sx: {
                        width: "100%",
                        height: "100%",
                        zIndex: 1,
                        bg: "var(--color-BasicBg)",
                        gridArea: "heatMap",
                        overflow: "hidden",
                        borderRadius: "8px"
                    },
                    name: "heatMap",
                    children: (0, o.jsx)(Nt, {
                        onRemove: i,
                        changeSymbol: function(e) {
                            var t = Wt.find((function(t) {
                                return s["".concat(e).concat(t)]
                            }));
                            if ("USDT" === e) r({
                                resPathList: ["FDUSD_USDT"]
                            });
                            else {
                                if (!t) {
                                    var i = Wt.find((function(t) {
                                        return s["".concat(t).concat(e)]
                                    }));
                                    return void r({
                                        resPathList: ["".concat(i, "_").concat(e)]
                                    })
                                }
                                r({
                                    resPathList: ["".concat(e, "_").concat(t)]
                                })
                            }
                        }
                    })
                })
            }
        },
        MOWb: (e, t, i) => {
            i.d(t, {
                LO: () => et,
                _1: () => tt,
                MQ: () => ot,
                h5: () => rt,
                T_: () => nt,
                a: () => st,
                q_: () => dt,
                jR: () => ut,
                Gm: () => pt,
                mU: () => vt,
                kR: () => ct,
                vr: () => xt,
                Tt: () => yt,
                oS: () => ht,
                Fy: () => gt,
                lH: () => bt,
                nL: () => lt,
                AT: () => mt,
                FN: () => ft,
                fm: () => at
            });
            var r = i("d12p"),
                o = i("DTvD"),
                s = i("T9sr"),
                n = i.n(s),
                a = Math.ceil(41 / 9),
                l = Math.ceil(9),
                c = Math.ceil(3.2),
                d = Math.ceil(6.784),
                h = Math.ceil(6),
                u = {
                    i: "favorite",
                    x: 0,
                    y: 0,
                    w: 16,
                    h: a,
                    minW: c,
                    minH: a,
                    maxH: a,
                    setIndex: 0,
                    isResizable: !0,
                    hidden: !0
                },
                g = {
                    i: "subHeader",
                    x: 0,
                    y: 0,
                    w: 16,
                    h: 7,
                    minW: 8,
                    minH: 7,
                    maxH: 7,
                    setIndex: 1,
                    isResizable: !0
                },
                p = {
                    i: "chart",
                    x: 0,
                    y: 7,
                    w: 16,
                    h: 65,
                    minW: d,
                    minH: l,
                    setIndex: 3,
                    getTitle: function(e) {
                        return e("trd-layout-chartTle")
                    }
                },
                m = {
                    i: "orderbook",
                    x: 16,
                    y: 0,
                    w: 4,
                    h: 72,
                    minW: c,
                    minH: a,
                    setIndex: 5,
                    getTitle: function(e) {
                        return e("trd-layout-orderBookTle")
                    }
                },
                x = {
                    i: "orderform",
                    x: 20,
                    y: 0,
                    w: 4,
                    h: 72,
                    minW: 4,
                    minH: 30,
                    maxW: 8,
                    setIndex: 8,
                    getTitle: function(e) {
                        return "".concat(e("trd-orderForm-placeorder"))
                    }
                },
                f = {
                    i: "trades",
                    x: 16,
                    y: 72,
                    w: 4,
                    h: 61,
                    minW: c,
                    minH: a,
                    setIndex: 6,
                    getTitle: function(e) {
                        return e("trd-layout-tradesTle")
                    }
                },
                y = {
                    i: "userinfo",
                    x: 0,
                    y: 72,
                    w: 16,
                    h: 61,
                    minW: Math.ceil(6.4),
                    minH: a,
                    setIndex: 7,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-tabOpenOrder", {
                            defaultValue: "Open Orders"
                        }), " ")
                    }
                },
                b = {
                    i: "asset",
                    x: 20,
                    y: 72,
                    w: 4,
                    h: 61,
                    minW: c,
                    minH: a,
                    setIndex: 9,
                    getTitle: function(e) {
                        return "".concat(e("trd-orderForm-assets"))
                    }
                },
                v = {
                    i: "depth",
                    x: 0,
                    y: 59,
                    w: 16,
                    h: 18,
                    minW: c,
                    minH: a,
                    setIndex: 4,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-depth"))
                    },
                    hidden: !0
                },
                C = {
                    i: "marketActivity",
                    x: 0,
                    y: 0,
                    w: 4,
                    h: 40,
                    minW: c,
                    minH: a,
                    setIndex: 10,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-market-activity", {
                            defaultValue: "Market Activity"
                        }))
                    },
                    hidden: !0
                },
                w = {
                    i: "transactionData",
                    x: 0,
                    y: 0,
                    w: 16,
                    h: 40,
                    minW: h,
                    minH: a,
                    maxH: 40,
                    setIndex: 11,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-transaction-data", {
                            defaultValue: "Transaction Data"
                        }))
                    },
                    hidden: !0
                },
                A = {
                    i: "heatMap",
                    x: 0,
                    y: 98,
                    w: 8.5,
                    h: 61,
                    minW: c,
                    minH: a,
                    setIndex: 12,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-heatMap", {
                            defaultValue: "Heat Map"
                        }))
                    },
                    hidden: !0
                },
                S = [u, g, p, y, m, f, x, b, v, C, w, A],
                T = [u, g, {
                    i: "market",
                    x: 0,
                    y: 7,
                    w: 5,
                    h: 65,
                    minW: c,
                    minH: a,
                    setIndex: 2,
                    getTitle: function(e) {
                        return e("trd-layout-MarketTle")
                    }
                }, p, y, m, f, x, b, v, C, w, A],
                k = Math.ceil(41 / 9),
                L = Math.ceil(9),
                _ = Math.ceil(200 / (2e3 / 24)),
                P = Math.ceil(5.088),
                D = Math.ceil(4.5),
                I = {
                    i: "favorite",
                    x: 0,
                    y: 0,
                    w: 17,
                    h: k,
                    minW: _,
                    minH: k,
                    maxH: k,
                    setIndex: 0,
                    isResizable: !0,
                    hidden: !0
                },
                V = {
                    i: "subHeader",
                    x: 0,
                    y: 0,
                    w: 17,
                    h: 7,
                    minW: 8,
                    minH: 7,
                    maxH: 7,
                    setIndex: 1,
                    isResizable: !1
                },
                M = {
                    i: "chart",
                    x: 0,
                    y: 7,
                    w: 17,
                    h: 65,
                    minW: P,
                    minH: L,
                    setIndex: 3,
                    getTitle: function(e) {
                        return e("trd-layout-chartTle")
                    }
                },
                B = {
                    i: "orderbook",
                    x: 17,
                    y: 0,
                    w: 4,
                    h: 72,
                    minW: _,
                    minH: k,
                    setIndex: 5,
                    getTitle: function(e) {
                        return e("trd-layout-orderBookTle")
                    }
                },
                E = {
                    i: "trades",
                    x: 17,
                    y: 72,
                    w: 4,
                    h: 61,
                    minW: _,
                    minH: k,
                    setIndex: 6,
                    getTitle: function(e) {
                        return e("trd-layout-tradesTle")
                    }
                },
                j = {
                    i: "userinfo",
                    x: 0,
                    y: 72,
                    w: 17,
                    h: 61,
                    minW: Math.ceil(400 / (2e3 / 24)),
                    minH: k,
                    setIndex: 7,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-tabOpenOrder", {
                            defaultValue: "Open Orders"
                        }), " ")
                    }
                },
                O = {
                    i: "orderform",
                    x: 21,
                    y: 0,
                    w: 3,
                    h: 72,
                    minW: 3,
                    minH: 30,
                    maxW: 6,
                    setIndex: 8,
                    getTitle: function(e) {
                        return "".concat(e("trd-orderForm-placeorder"))
                    }
                },
                H = {
                    i: "asset",
                    x: 21,
                    y: 72,
                    w: 3,
                    h: 61,
                    minW: _,
                    minH: k,
                    setIndex: 9,
                    getTitle: function(e) {
                        return "".concat(e("trd-orderForm-assets"))
                    }
                },
                R = {
                    i: "depth",
                    x: 0,
                    y: 59,
                    w: 17,
                    h: 18,
                    minW: _,
                    minH: k,
                    setIndex: 4,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-depth"))
                    },
                    hidden: !0
                },
                N = {
                    i: "marketActivity",
                    x: 0,
                    y: 0,
                    w: 4,
                    h: 60,
                    minW: _,
                    minH: k,
                    setIndex: 10,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-market-activity", {
                            defaultValue: "Market Activity"
                        }))
                    },
                    hidden: !0
                },
                W = {
                    i: "transactionData",
                    x: 0,
                    y: 0,
                    w: 17,
                    h: 60,
                    minW: D,
                    minH: k,
                    maxH: 60,
                    setIndex: 11,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-transaction-data", {
                            defaultValue: "Transaction Data"
                        }))
                    },
                    hidden: !0
                },
                F = {
                    i: "heatMap",
                    x: 0,
                    y: 118,
                    w: 8.5,
                    h: 61,
                    minW: _,
                    minH: k,
                    setIndex: 12,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-heatMap", {
                            defaultValue: "Heat Map"
                        }))
                    },
                    hidden: !0
                },
                z = [I, V, M, j, B, E, O, H, R, N, W, F],
                X = [I, V, {
                    i: "market",
                    x: 0,
                    y: 7,
                    w: 5,
                    h: 65,
                    minW: k,
                    minH: _,
                    setIndex: 2,
                    getTitle: function(e) {
                        return e("trd-layout-MarketTle")
                    }
                }, M, j, B, E, O, H, R, N, W, F],
                U = Math.ceil(41 / 9),
                G = Math.ceil(9),
                $ = Math.ceil(200 / 60),
                Y = Math.ceil(424 / 60),
                Z = Math.ceil(6.25),
                K = {
                    i: "favorite",
                    x: 0,
                    y: 0,
                    w: 14,
                    h: U,
                    minW: $,
                    minH: U,
                    maxH: U,
                    setIndex: 0,
                    isResizable: !0,
                    hidden: !0
                },
                q = {
                    i: "subHeader",
                    x: 0,
                    y: 0,
                    w: 14,
                    h: 7,
                    minW: 8,
                    minH: 7,
                    maxH: 7,
                    setIndex: 1,
                    isResizable: !0
                },
                Q = {
                    i: "chart",
                    x: 0,
                    y: 7,
                    w: 14,
                    h: 65,
                    minW: Y,
                    minH: G,
                    setIndex: 3,
                    getTitle: function(e) {
                        return e("trd-layout-chartTle")
                    }
                },
                J = {
                    i: "orderbook",
                    x: 14,
                    y: 0,
                    w: 5,
                    h: 72,
                    minW: $,
                    minH: U,
                    setIndex: 5,
                    getTitle: function(e) {
                        return e("trd-layout-orderBookTle")
                    }
                },
                ee = {
                    i: "trades",
                    x: 14,
                    y: 72,
                    w: 5,
                    h: 61,
                    minW: $,
                    minH: U,
                    setIndex: 6,
                    getTitle: function(e) {
                        return e("trd-layout-tradesTle")
                    }
                },
                te = {
                    i: "userinfo",
                    x: 0,
                    y: 72,
                    w: 14,
                    h: 61,
                    minW: Math.ceil(400 / 60),
                    minH: U,
                    setIndex: 7,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-tabOpenOrder", {
                            defaultValue: "Open Orders"
                        }), " ")
                    }
                },
                ie = {
                    i: "orderform",
                    x: 19,
                    y: 0,
                    w: 5,
                    h: 72,
                    minW: 5,
                    minH: 30,
                    maxW: 10,
                    setIndex: 8,
                    getTitle: function(e) {
                        return "".concat(e("trd-orderForm-placeorder"))
                    }
                },
                re = {
                    i: "asset",
                    x: 19,
                    y: 72,
                    w: 5,
                    h: 61,
                    minW: $,
                    minH: U,
                    setIndex: 9,
                    getTitle: function(e) {
                        return "".concat(e("trd-orderForm-assets"))
                    }
                },
                oe = {
                    i: "depth",
                    x: 0,
                    y: 59,
                    w: 14,
                    h: 18,
                    minW: $,
                    minH: U,
                    setIndex: 4,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-depth"))
                    },
                    hidden: !0
                },
                se = {
                    i: "marketActivity",
                    x: 0,
                    y: 0,
                    w: 5,
                    h: 40,
                    minW: $,
                    minH: U,
                    setIndex: 10,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-market-activity", {
                            defaultValue: "Market Activity"
                        }))
                    },
                    hidden: !0
                },
                ne = {
                    i: "transactionData",
                    x: 0,
                    y: 0,
                    w: 14,
                    h: 40,
                    minW: Z,
                    minH: U,
                    maxH: 40,
                    setIndex: 11,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-transaction-data", {
                            defaultValue: "Transaction Data"
                        }))
                    },
                    hidden: !0
                },
                ae = {
                    i: "heatMap",
                    x: 0,
                    y: 98,
                    w: 8.5,
                    h: 61,
                    minW: $,
                    minH: U,
                    setIndex: 12,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-heatMap", {
                            defaultValue: "Heat Map"
                        }))
                    },
                    hidden: !0
                },
                le = [K, q, Q, te, J, ee, ie, re, oe, se, ne, ae],
                ce = [K, q, {
                    i: "market",
                    x: 0,
                    y: 7,
                    w: 5,
                    h: 65,
                    minW: $,
                    minH: U,
                    setIndex: 2,
                    getTitle: function(e) {
                        return e("trd-layout-MarketTle")
                    }
                }, Q, te, J, ee, ie, re, oe, se, ne, ae],
                de = Math.ceil(41 / 9),
                he = Math.ceil(9),
                ue = Math.ceil(4),
                ge = Math.ceil(8.48),
                pe = Math.ceil(7.5),
                me = {
                    i: "favorite",
                    x: 0,
                    y: 0,
                    w: 13,
                    h: de,
                    minW: ue,
                    minH: de,
                    maxH: de,
                    setIndex: 0,
                    isResizable: !0,
                    hidden: !0
                },
                xe = {
                    i: "subHeader",
                    x: 0,
                    y: 0,
                    w: 13,
                    h: 7,
                    minW: 6,
                    minH: 7,
                    maxH: 7,
                    setIndex: 1,
                    isResizable: !1
                },
                fe = {
                    i: "chart",
                    x: 0,
                    y: 7,
                    w: 13,
                    h: 65,
                    minW: ge,
                    minH: he,
                    setIndex: 3,
                    getTitle: function(e) {
                        return e("trd-layout-chartTle")
                    }
                },
                ye = {
                    i: "orderbook",
                    x: 13,
                    y: 0,
                    w: 6,
                    h: 72,
                    minW: ue,
                    minH: de,
                    setIndex: 5,
                    getTitle: function(e) {
                        return e("trd-layout-orderBookTle")
                    }
                },
                be = {
                    i: "trades",
                    x: 13,
                    y: 72,
                    w: 6,
                    h: 61,
                    minW: ue,
                    minH: de,
                    setIndex: 6,
                    getTitle: function(e) {
                        return e("trd-layout-tradesTle")
                    }
                },
                ve = {
                    i: "userinfo",
                    x: 0,
                    y: 72,
                    w: 13,
                    h: 61,
                    minW: Math.ceil(8),
                    minH: de,
                    setIndex: 7,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-tabOpenOrder", {
                            defaultValue: "Open Orders"
                        }), " ")
                    }
                },
                Ce = {
                    i: "orderform",
                    x: 19,
                    y: 0,
                    w: 5,
                    h: 72,
                    minW: 5,
                    minH: 30,
                    maxW: 10,
                    setIndex: 8,
                    getTitle: function(e) {
                        return "".concat(e("trd-orderForm-placeorder"))
                    }
                },
                we = {
                    i: "asset",
                    x: 19,
                    y: 72,
                    w: 5,
                    h: 61,
                    minW: ue,
                    minH: de,
                    setIndex: 9,
                    getTitle: function(e) {
                        return "".concat(e("trd-orderForm-assets"))
                    }
                },
                Ae = {
                    i: "depth",
                    x: 0,
                    y: 59,
                    w: 13,
                    h: 18,
                    minW: ue,
                    minH: de,
                    setIndex: 4,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-depth"))
                    },
                    hidden: !0
                },
                Se = {
                    i: "marketActivity",
                    x: 0,
                    y: 0,
                    w: 6,
                    h: 40,
                    minW: ue,
                    minH: de,
                    setIndex: 10,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-market-activity", {
                            defaultValue: "Market Activity"
                        }))
                    },
                    hidden: !0
                },
                Te = {
                    i: "transactionData",
                    x: 0,
                    y: 0,
                    w: 13,
                    h: 40,
                    minW: pe,
                    minH: de,
                    maxH: 40,
                    setIndex: 11,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-transaction-data", {
                            defaultValue: "Transaction Data"
                        }))
                    },
                    hidden: !0
                },
                ke = {
                    i: "heatMap",
                    x: 0,
                    y: 98,
                    w: 8.5,
                    h: 61,
                    minW: ue,
                    minH: de,
                    setIndex: 12,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-heatMap", {
                            defaultValue: "Heat Map"
                        }))
                    },
                    hidden: !0
                },
                Le = [me, xe, fe, ve, ye, be, Ce, we, Ae, Se, Te, ke],
                _e = [me, xe, {
                    i: "market",
                    x: 0,
                    y: 7,
                    w: 6,
                    h: 65,
                    minW: ue,
                    minH: de,
                    setIndex: 2,
                    getTitle: function(e) {
                        return e("trd-layout-MarketTle")
                    }
                }, fe, ve, ye, be, Ce, we, Ae, Se, Te, ke],
                Pe = Math.ceil(41 / 9),
                De = Math.ceil(9),
                Ie = Math.ceil(4.6875),
                Ve = Math.ceil(9.9375),
                Me = Math.ceil(8.7890625),
                Be = {
                    i: "favorite",
                    x: 0,
                    y: 0,
                    w: 12,
                    h: Pe,
                    minW: Ie,
                    minH: Pe,
                    maxH: Pe,
                    setIndex: 0,
                    isResizable: !0,
                    hidden: !0
                },
                Ee = {
                    i: "subHeader",
                    x: 0,
                    y: 0,
                    w: 24,
                    h: 7,
                    minW: 12,
                    minH: 7,
                    maxH: 7,
                    setIndex: 1,
                    isResizable: !1
                },
                je = {
                    i: "chart",
                    x: 0,
                    y: 7,
                    w: 12,
                    h: 65,
                    minW: Ve,
                    minH: De,
                    setIndex: 3,
                    getTitle: function(e) {
                        return e("trd-layout-chartTle")
                    }
                },
                Oe = {
                    i: "orderbook",
                    x: 12,
                    y: 7,
                    w: 6,
                    h: 72,
                    minW: Ie,
                    minH: Pe,
                    setIndex: 5,
                    getTitle: function(e) {
                        return e("trd-layout-orderBookTle")
                    }
                },
                He = {
                    i: "trades",
                    x: 12,
                    y: 72,
                    w: 6,
                    h: 61,
                    minW: Ie,
                    minH: Pe,
                    setIndex: 6,
                    getTitle: function(e) {
                        return e("trd-layout-tradesTle")
                    }
                },
                Re = {
                    i: "userinfo",
                    x: 0,
                    y: 72,
                    w: 12,
                    h: 61,
                    minW: Math.ceil(9.375),
                    minH: Pe,
                    setIndex: 7,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-tabOpenOrder", {
                            defaultValue: "Open Orders"
                        }), " ")
                    }
                },
                Ne = {
                    i: "orderform",
                    x: 18,
                    y: 7,
                    w: 6,
                    h: 72,
                    minW: 6,
                    minH: 30,
                    maxW: 12,
                    setIndex: 8,
                    getTitle: function(e) {
                        return "".concat(e("trd-orderForm-placeorder"))
                    }
                },
                We = {
                    i: "asset",
                    x: 18,
                    y: 72,
                    w: 6,
                    h: 61,
                    minW: Ie,
                    minH: Pe,
                    setIndex: 9,
                    getTitle: function(e) {
                        return "".concat(e("trd-orderForm-assets"))
                    }
                },
                Fe = {
                    i: "depth",
                    x: 0,
                    y: 59,
                    w: 12,
                    h: 10,
                    minW: Ie,
                    minH: Pe,
                    setIndex: 4,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-depth"))
                    },
                    hidden: !0
                },
                ze = {
                    i: "marketActivity",
                    x: 0,
                    y: 0,
                    w: 6,
                    h: 40,
                    minW: Ie,
                    minH: Pe,
                    setIndex: 10,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-market-activity", {
                            defaultValue: "Market Activity"
                        }))
                    },
                    hidden: !0
                },
                Xe = {
                    i: "transactionData",
                    x: 0,
                    y: 0,
                    w: 12,
                    h: 40,
                    minW: Me,
                    minH: Pe,
                    maxH: 40,
                    setIndex: 11,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-transaction-data", {
                            defaultValue: "Transaction Data"
                        }))
                    },
                    hidden: !0
                },
                Ue = {
                    i: "heatMap",
                    x: 0,
                    y: 98,
                    w: 6,
                    h: 40,
                    minW: Ie,
                    minH: Pe,
                    setIndex: 12,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-heatMap", {
                            defaultValue: "Heat Map"
                        }))
                    },
                    hidden: !0
                },
                Ge = [Be, Ee, je, Re, Oe, He, Ne, We, Fe, ze, Xe, Ue],
                $e = {
                    i: "chart",
                    setIndex: 3,
                    getTitle: function(e) {
                        return e("trd-layout-chartTle")
                    }
                },
                Ye = {
                    i: "orderbook",
                    setIndex: 5,
                    getTitle: function(e) {
                        return e("trd-layout-orderBookTle")
                    }
                },
                Ze = {
                    i: "trades",
                    setIndex: 6,
                    getTitle: function(e) {
                        return e("trd-layout-tradesTle")
                    }
                },
                Ke = {
                    i: "userinfo",
                    setIndex: 7,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-tabOpenOrder", {
                            defaultValue: "Open Orders"
                        }), " ")
                    }
                },
                qe = {
                    i: "orderform",
                    setIndex: 8,
                    getTitle: function(e) {
                        return "".concat(e("trd-orderForm-placeorder"))
                    }
                },
                Qe = {
                    i: "asset",
                    setIndex: 8,
                    getTitle: function(e) {
                        return "".concat(e("trd-orderForm-assets"))
                    }
                },
                Je = {
                    i: "subHeader",
                    setIndex: 1,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-header"))
                    }
                },
                et = {
                    xl: 2e3,
                    l: 1500,
                    m: 1439,
                    s: 1200,
                    xs: 1023
                },
                tt = {
                    xl: 24,
                    l: 24,
                    m: 24,
                    s: 24,
                    xs: 24
                },
                it = {
                    xl: X,
                    l: T,
                    m: ce,
                    s: _e,
                    xs: [Be, Ee, {
                        i: "market",
                        x: 0,
                        y: 7,
                        w: 6,
                        h: 65,
                        minW: Ie,
                        minH: Pe,
                        setIndex: 2,
                        getTitle: function(e) {
                            return e("trd-layout-MarketTle")
                        }
                    }, je, Re, Oe, He, Ne, We, Fe, ze, Xe, Ue]
                },
                rt = {
                    xl: z.filter((function(e) {
                        return !e.hidden
                    })),
                    l: S.filter((function(e) {
                        return !e.hidden
                    })),
                    m: le.filter((function(e) {
                        return !e.hidden
                    })),
                    s: Le.filter((function(e) {
                        return !e.hidden
                    })),
                    xs: Ge.filter((function(e) {
                        return !e.hidden
                    }))
                },
                ot = (0, o.createContext)({
                    widgetLayout: it.m,
                    widgetLayouts: it,
                    breakpoint: "m",
                    setBreakpoint: function() {},
                    setWidgetLayout: function(e) {},
                    setWidgetLayouts: function() {}
                }),
                st = 26,
                nt = [Je, {
                    i: "favorite",
                    setIndex: 0,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-favorite"))
                    }
                }, {
                    i: "market",
                    setIndex: 2,
                    getTitle: function(e) {
                        return e("trd-layout-MarketTle")
                    }
                }, $e, {
                    i: "depth",
                    setIndex: 4,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-depth"))
                    }
                }, Ke, Ye, Ze, qe, Qe, {
                    i: "marketActivity",
                    setIndex: 10,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-market-activity"))
                    }
                }, {
                    i: "transactionData",
                    setIndex: 11,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-transaction-data"))
                    }
                }, {
                    i: "heatMap",
                    setIndex: 12,
                    getTitle: function(e) {
                        return "".concat(e("trd-layout-heatMap"))
                    }
                }],
                at = {
                    SUBHEADER: "subheader",
                    FAVORITE: "favorite",
                    MARKET: "market",
                    CHART: "chart",
                    DEPTH: "depth",
                    USERINFO: "userinfo",
                    ORDERBOOK: "orderbook",
                    TRADES: "trades",
                    ORDERFORM: "orderform",
                    ASSET: "asset",
                    MARKETACTIVITY: "marketActivity",
                    TRANSACTIONDATA: "transactionData",
                    HEATMAP: "heatMap"
                },
                lt = function(e, t) {
                    var i = it[t].find((function(e) {
                            return e.i === at.MARKET
                        })),
                        r = it[t].find((function(e) {
                            return e.i === at.CHART
                        })),
                        o = e.find((function(e) {
                            return e.i === at.CHART
                        }));
                    return o && r && i && o.x === r.x + i.w && (7 === o.y || 11.7 === o.y || 12 === o.y || 16.7 === o.y) && o.w === r.w - i.w && (o.x = r.x, o.w = r.w), e.filter((function(e) {
                        return e.i !== at.MARKET
                    }))
                },
                ct = function(e, t) {
                    var i = it[t].find((function(e) {
                            return e.i === at.MARKET
                        })),
                        o = it[t].find((function(e) {
                            return e.i === at.CHART
                        })),
                        s = e.find((function(e) {
                            return e.i === at.CHART
                        })),
                        n = e.find((function(e) {
                            return e.i === at.FAVORITE
                        })),
                        a = it[t].find((function(e) {
                            return e.i === at.FAVORITE
                        }));
                    return s && o && i && s.w === o.w && (7 === s.y || 11.7 === s.y) && (s.x += i.w, s.w -= i.w), n && a && s && o && i && s.w === o.w && (12 === s.y || 16.7 === s.y) && (s.x += i.w, s.w -= i.w), (0, r._)(e).concat([i])
                },
                dt = function(e, t) {
                    var i = e.find((function(e) {
                            return e.i === at.MARKET
                        })),
                        o = rt[t].find((function(e) {
                            return e.i === at.CHART
                        })),
                        s = o;
                    return i && o && i.x === o.x && o.w - i.w > o.minW && ((s = n()(o)).w = o.w - i.w, s.x = i.x + i.w), (0, r._)(e).concat([s])
                },
                ht = function(e) {
                    return e.filter((function(e) {
                        return e.i !== at.DEPTH
                    }))
                },
                ut = function(e, t) {
                    var i = e.find((function(e) {
                            return e.i === at.USERINFO
                        })),
                        o = it[t].find((function(e) {
                            return e.i === at.DEPTH
                        })),
                        s = it[t].find((function(e) {
                            return e.i === at.USERINFO
                        }));
                    return i && s && o && i.y === s.y && (i.y += o.h), [o].concat((0, r._)(e))
                },
                gt = function(e) {
                    return e.filter((function(e) {
                        return e.i !== at.FAVORITE
                    }))
                },
                pt = function(e, t) {
                    var i = it[t].find((function(e) {
                            return e.i === at.SUBHEADER
                        })),
                        o = it[t].find((function(e) {
                            return e.i === at.FAVORITE
                        }));
                    return i && o && (i.y = (null === i || void 0 === i ? void 0 : i.y) + (null === o || void 0 === o ? void 0 : o.h)), [o].concat((0, r._)(e))
                },
                mt = function(e) {
                    return e.filter((function(e) {
                        return e.i !== at.MARKETACTIVITY
                    }))
                },
                xt = function(e, t) {
                    var i = it[t].find((function(e) {
                            return e.i === at.MARKETACTIVITY
                        })),
                        o = it[t].find((function(e) {
                            return e.i === at.TRADES
                        }));
                    return o && i && (i.y = o.y + i.h, i.x = o.x), [i].concat((0, r._)(e))
                },
                ft = function(e) {
                    return e.filter((function(e) {
                        return e.i !== at.TRANSACTIONDATA
                    }))
                },
                yt = function(e, t) {
                    var i = it[t].find((function(e) {
                            return e.i === at.TRANSACTIONDATA
                        })),
                        o = it[t].find((function(e) {
                            return e.i === at.DEPTH
                        })),
                        s = it[t].find((function(e) {
                            return e.i === at.CHART
                        }));
                    return o && i && (i.y = o.y + i.h), s && i && (i.y = s.y + i.h), [i].concat((0, r._)(e))
                },
                bt = function(e, t) {
                    return e.filter((function(e) {
                        return "heatMap" !== e.i
                    }))
                },
                vt = function(e, t) {
                    var i = it[t].find((function(e) {
                        return "heatMap" === e.i
                    }));
                    return (0, r._)(e).concat([i])
                }
        },
        Hd9R: (e, t, i) => {
            i.d(t, {
                c: () => C
            });
            var r = i("Qhol"),
                o = i("C7Nc"),
                s = i("/jvT"),
                n = i("tM9B"),
                a = i("k3xa"),
                l = i("MD8j"),
                c = i("DTvD"),
                d = i("hAzz"),
                h = i("0cM6"),
                u = i("ttBN"),
                g = i("DB4s"),
                p = i("p4tc"),
                m = i("hrAD"),
                x = i("qoEP"),
                f = i("H9X4"),
                y = i("i6QV"),
                b = function(e) {
                    var t = e.mode,
                        i = e.data,
                        r = e.type,
                        o = e.btcToUsdt,
                        s = e.priceIndexMap,
                        a = null === i || void 0 === i ? void 0 : i._netAsset[r];
                    return "USDT" === t && (null === i || void 0 === i ? void 0 : i.asset[r]) === t ? a : "USDT" === t && s[(null === i || void 0 === i ? void 0 : i.asset[r]) + "USDT"] ? (0, n.lw)(Number(a), s[(null === i || void 0 === i ? void 0 : i.asset[r]) + "USDT"]).toFixed(4) : (0, n.lw)(Number(null === i || void 0 === i ? void 0 : i._netAssetOfBTC[r]), o).toFixed(4)
                },
                v = function(e) {
                    return (0, n.QF)(e, {
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 8
                    })
                },
                C = function(e, t, i) {
                    var C = (0, u.T)(),
                        w = (0, p.z)().forceLiquidationBar,
                        A = (0, r.xMv)().assetleverageBracketList,
                        S = (0, o.TK)(),
                        T = S.rawAssets,
                        k = S.userAssets,
                        L = (0, o.VS)().userIsolatedAssets,
                        _ = (0, l.d4)(s.makeIsolatedCoeff),
                        P = (0, l.d4)(s.avgOpenPrice),
                        D = (0, l.d4)(s.isolatedPnlPrice),
                        I = (0, g.m)().isExistCrossAccount,
                        V = (0, l.d4)(s.makeCollateRate),
                        M = (0, l.d4)(s.makeMarginAccount),
                        B = (0, l.d4)(s.makeIsolatedOriginAccount),
                        E = (0, l.d4)(s.makeIsolatedOriginAccountObj),
                        j = (0, y.o)(),
                        O = j.crossCostPriceType,
                        H = j.breakevenPrices,
                        R = (0, r.h_5)().isCM2_0,
                        N = (0, c.useMemo)((function() {
                            return R && T && C && A ? (0, h.N)(T, C, A) : {}
                        }), [R]);
                    if (e && I) {
                        var W = T.filter((function(e) {
                                var t = e.free,
                                    i = void 0 === t ? 0 : t,
                                    r = e.locked,
                                    o = void 0 === r ? 0 : r,
                                    s = e.totalDebt,
                                    n = void 0 === s ? 0 : s,
                                    a = e.interest,
                                    l = void 0 === a ? 0 : a;
                                return 0 !== Number(i) || 0 !== Number(o) || 0 !== Number(n) || 0 !== Number(l)
                            })),
                            F = function(e) {
                                var t = e.positionList,
                                    i = e.priceIndexMap,
                                    r = e.crossAccount,
                                    o = e.collateRate,
                                    s = e.crossMarginAssets;
                                return t.map((function(e) {
                                    var t = i[e.asset + "USDT"],
                                        a = i[e.asset + "BTC"],
                                        l = (0, n.tY)(null === e || void 0 === e ? void 0 : e.free, null === e || void 0 === e ? void 0 : e.locked);
                                    return (0, x._)((0, m._)({}, e), {
                                        _balance: l.toFixed(8),
                                        _balanceOfUSDT: (0, n.lw)(l, t).toFixed(4),
                                        _balanceOfBTC: (0, n.lw)(l, a).toFixed(8),
                                        _debt: Number(null === e || void 0 === e ? void 0 : e.totalDebt).toFixed(8),
                                        _debtOfUSDT: (0, n.lw)(null === e || void 0 === e ? void 0 : e.totalDebt, t).toFixed(4),
                                        _debtOfBTC: (0, n.lw)(null === e || void 0 === e ? void 0 : e.totalDebt, a).toFixed(8),
                                        _available: null === e || void 0 === e ? void 0 : e.free,
                                        _maxTransferAmount: (0, f.IF)(null === e || void 0 === e ? void 0 : e.asset, (0, x._)((0, m._)({}, r), {
                                            userAssets: Object.values(s)
                                        }), i, o)
                                    })
                                }))
                            }({
                                positionList: (0, a.ix)({
                                    mode: t,
                                    bigLiquidationText: i,
                                    priceIndexMap: C,
                                    forceLiquidationBar: w,
                                    userAssets: W,
                                    avgOpenPriceList: P,
                                    liquidationPriceDict: N,
                                    breakevenPrices: H,
                                    crossCostPriceType: O
                                }),
                                priceIndexMap: C,
                                collateRate: V,
                                crossAccount: M,
                                crossMarginAssets: k
                            });
                        return F.sort((function(e, i) {
                            return Number(i["_netAssetOf".concat(t)] - e["_netAssetOf".concat(t)])
                        }))
                    }
                    if (!e) {
                        var z = function(e) {
                                var t = e.userIsolatedAssets,
                                    i = e.bigLiquidationText,
                                    r = e.priceIndexMap,
                                    o = e.isolatedCoeff,
                                    s = e.mode,
                                    l = e.isolatedPnlPriceObj,
                                    c = r.BTCUSDT || 0;
                                return Object.keys(t).reduce((function(e, h) {
                                    var u, g, p = (o[h] || {}).forceLiquidationBar,
                                        m = "",
                                        x = "";
                                    if (Object.keys(t[h]).forEach((function(e) {
                                            0 === "".concat(h).indexOf("".concat(e)) ? m = e : x = e
                                        })), (null === t || void 0 === t || null === (u = t[h]) || void 0 === u ? void 0 : u[m]) || (null === t || void 0 === t || null === (g = t[h]) || void 0 === g ? void 0 : g[x])) {
                                        var f, y, C, w, A, S, T, k, L = (0, a.rm)({
                                            bigLiquidationText: i,
                                            baseAsset: (null === t || void 0 === t || null === (f = t[h]) || void 0 === f ? void 0 : f[m]) || {},
                                            quoteAsset: (null === t || void 0 === t || null === (y = t[h]) || void 0 === y ? void 0 : y[x]) || {},
                                            priceIndexMap: r,
                                            forceLiquidationBar: p
                                        });
                                        L[0].totalBaseDebt = null === (C = t[h][m]) || void 0 === C ? void 0 : C.totalDebt, L[0].totalQuoteDebt = null === (w = t[h][x]) || void 0 === w ? void 0 : w.totalDebt, L[0].mode = s, L[0].liquidationPercentUSDT = L[0].liquidationPercentBTC, L[0].liquidationPriceUSDT = L[0].liquidationPriceBTC, L[0].priceIndexUSDT = L[0].priceIndexBTC;
                                        var _, P, D, I, V = b({
                                                mode: s,
                                                data: L[0],
                                                type: "base",
                                                btcToUsdt: c,
                                                priceIndexMap: r
                                            }),
                                            M = b({
                                                mode: s,
                                                data: L[0],
                                                type: "quote",
                                                btcToUsdt: c,
                                                priceIndexMap: r
                                            });
                                        L[0]._netAssetOfUSDT = {
                                            base: V,
                                            quote: M,
                                            total: (0, d.ks)((0, n.tY)(V, M))
                                        }, (null === (A = L[0]) || void 0 === A ? void 0 : A._netAssetOfBTC) && (0, d.Gv)(null === (S = L[0]) || void 0 === S ? void 0 : S._netAssetOfBTC) && (L[0]._netAssetOfBTC.total = (0, d.ks)((0, n.tY)(null === (_ = L[0]) || void 0 === _ || null === (P = _._netAssetOfBTC) || void 0 === P ? void 0 : P.base, null === (D = L[0]) || void 0 === D || null === (I = D._netAssetOfBTC) || void 0 === I ? void 0 : I.quote)));
                                        var B = l["".concat(m).concat(x)],
                                            E = B && +(null === B || void 0 === B ? void 0 : B.cost) && (null === B || void 0 === B ? void 0 : B.realizedPnl);
                                        L[0].marginPnlUSDT = E ? v(Number(L[0]._netAssetOfUSDT.total) + +B.realizedPnl - +B.cost) : "/", L[0].realizedPnl = E ? v(+B.realizedPnl) : "/", L[0].cost = E ? v(+B.cost) : "/";
                                        var j = Number(null === (T = t[h][m]) || void 0 === T ? void 0 : T.netAsset) || 0,
                                            O = Number(null === (k = t[h][x]) || void 0 === k ? void 0 : k.netAsset) || 0;
                                        (j > 0 || O > 0) && e.push(L[0])
                                    }
                                    return e
                                }), []).sort((function(e, t) {
                                    return Number(t["_netAssetOf".concat(s)].base) + Number(t["_netAssetOf".concat(s)].quote) - (Number(e["_netAssetOf".concat(s)].base) + Number(e["_netAssetOf".concat(s)].quote))
                                }))
                            }({
                                userIsolatedAssets: L,
                                bigLiquidationText: i,
                                priceIndexMap: C,
                                isolatedCoeff: _,
                                mode: t,
                                isolatedPnlPriceObj: D
                            }),
                            X = function(e) {
                                var t = e.positionList,
                                    i = e.priceIndexMap,
                                    r = e.assetList,
                                    o = e.isolatedOriginAccount,
                                    s = e.isolatedOriginAccountObj;
                                return t.map((function(e) {
                                    var t, a, l, c, d, h, u, g, p = "".concat(null === e || void 0 === e || null === (t = e.asset) || void 0 === t ? void 0 : t.base).concat(null === e || void 0 === e || null === (a = e.asset) || void 0 === a ? void 0 : a.quote),
                                        y = null === r || void 0 === r || null === (c = r[p]) || void 0 === c ? void 0 : c[null === e || void 0 === e || null === (l = e.asset) || void 0 === l ? void 0 : l.base],
                                        b = null === r || void 0 === r || null === (h = r[p]) || void 0 === h ? void 0 : h[null === e || void 0 === e || null === (d = e.asset) || void 0 === d ? void 0 : d.quote],
                                        v = (0, n.tY)(null === y || void 0 === y ? void 0 : y.free, null === y || void 0 === y ? void 0 : y.locked),
                                        C = (0, n.tY)(null === b || void 0 === b ? void 0 : b.free, null === b || void 0 === b ? void 0 : b.locked);
                                    return (0, x._)((0, m._)({}, e), {
                                        _balance: {
                                            base: v.toFixed(8),
                                            quote: C.toFixed(8)
                                        },
                                        _debt: {
                                            base: null === y || void 0 === y ? void 0 : y.totalDebt,
                                            quote: null === b || void 0 === b ? void 0 : b.totalDebt
                                        },
                                        _available: {
                                            base: null === y || void 0 === y ? void 0 : y.free,
                                            quote: null === b || void 0 === b ? void 0 : b.free
                                        },
                                        _maxTransferAmount: {
                                            base: (0, f.rO)(null === e || void 0 === e || null === (u = e.asset) || void 0 === u ? void 0 : u.base, null === s || void 0 === s ? void 0 : s[p], o, i),
                                            quote: (0, f.rO)(null === e || void 0 === e || null === (g = e.asset) || void 0 === g ? void 0 : g.quote, null === s || void 0 === s ? void 0 : s[p], o, i)
                                        }
                                    })
                                }))
                            }({
                                positionList: z,
                                assetList: L,
                                priceIndexMap: C,
                                isolatedOriginAccount: B,
                                isolatedOriginAccountObj: E
                            });
                        return X
                    }
                    return []
                }
        },
        nUN5: (e, t, i) => {
            i.d(t, {
                HQ: () => E,
                Qu: () => v,
                WG: () => P,
                kz: () => O,
                _g: () => V,
                mR: () => d
            });
            var r = i("VGJx"),
                o = i("Qhol"),
                s = i("bQ69"),
                n = i("hrAD"),
                a = i("qoEP"),
                l = i("DTvD"),
                c = function(e) {
                    var t, i, r = e.lowPrice,
                        o = e.lastPrice,
                        s = e.highPrice,
                        n = e.openPrice,
                        a = +o - +n;
                    return {
                        lowPrice: r,
                        lastPrice: o,
                        highPrice: s,
                        openPrice: n,
                        difference: [a >= 0 ? "+" : "", (Number(n) ? a / +n * 100 : 0).toFixed(2)].join(""),
                        bigThan: (t = o, i = n, +t >= +i)
                    }
                };
            var d = function() {
                    var e = (0, o.hFK)(),
                        t = (0, o.O9C)(),
                        i = (0, o.puJ)(),
                        d = (0, o.rSl)(),
                        h = function(e, t, i) {
                            return {
                                baseTicker: (0, l.useMemo)((function() {
                                    var r = Object.keys(e);
                                    return i ? {
                                        baseTicker: {}
                                    } : {
                                        baseTicker: r.reduce((function(i, r) {
                                            var o = e[r] || {},
                                                n = t && t[r] ? t[r] : null,
                                                a = o.low,
                                                l = o.close,
                                                d = o.high,
                                                h = o.open,
                                                u = o.parentMarket,
                                                g = o.etf ? "ETF" : "USD\u24c8" === u ? s.dQ : u,
                                                p = c({
                                                    lowPrice: a,
                                                    lastPrice: l,
                                                    highPrice: d,
                                                    openPrice: n || h
                                                }),
                                                m = {};
                                            return m.lowPrice = p.lowPrice, m.lastPrice = p.lastPrice, m.highPrice = p.highPrice, m.openPrice = p.openPrice, m.difference = p.difference, m.bigThan = p.bigThan, m.parentMarket = g, m.symbol = o.symbol, m.symbolDisplay = o.symbolDisplay, m.baseAsset = o.baseAsset, m.quoteAsset = o.quoteAsset, m.quoteVolume = o.quoteVolume, m.tickSize = o.tickSize, m.tags = o.tags, m.circulatingSupply = o.circulatingSupply, m.baseAssetName = o.baseAssetName, m.gridTrade = o.gridTrade, i[r] = m, i
                                        }), {})
                                    }
                                }), [t, i]).baseTicker
                            }
                        }(e, t, i).baseTicker,
                        u = function(e, t, i) {
                            return Object.keys(t).reduce((function(e, r) {
                                var o = e[r],
                                    s = i[r];
                                if (o) {
                                    var l = t[r],
                                        d = l.lowPrice,
                                        h = l.lastPrice,
                                        u = l.highPrice,
                                        g = l.openPrice,
                                        p = Number(h) - Number(o.lastPrice),
                                        m = o.lastPrice ? 0 === p ? o.lastFlag : p : void 0;
                                    try {
                                        e[r] = (0, a._)((0, n._)({}, o, (null === t || void 0 === t ? void 0 : t[r]) || {}, c({
                                            lowPrice: d,
                                            lastPrice: h,
                                            highPrice: u,
                                            openPrice: s && "" !== s ? s : g
                                        }) || {}), {
                                            lastFlag: m
                                        })
                                    } catch (x) {}
                                }
                                return e
                            }), e)
                        }(h, function() {
                            var e = (0, r.t)((0, s.D5)());
                            return {
                                update: e.update,
                                tickers: e.tickers
                            }
                        }().tickers, t);
                    return {
                        isError: d,
                        loading: i,
                        nextTickers: i ? [] : Object.keys(u).reduce((function(e, t) {
                            var i = u[t];
                            return e.push(i), e
                        }), [])
                    }
                },
                h = i("mguP"),
                u = i("C7Nc"),
                g = i("hAzz"),
                p = i("d/69"),
                m = i("MD8j"),
                x = i("d12p"),
                f = i("zHUU"),
                y = ["BRL", "EUR", "TRY"],
                b = ["fan_token", "Launchpad", "Launchpool"],
                v = function(e) {
                    var t = (0, u.RS)().favorites,
                        i = (0, h._)(function() {
                            var e = (0, m.d4)((function(e) {
                                    return e.pageStore.page
                                })),
                                t = "trd-market-tab-".concat(e, "-spot"),
                                i = s.pI,
                                r = (0, l.useRef)(!1),
                                o = (0, l.useRef)((function(e) {
                                    try {
                                        var t = JSON.stringify,
                                            o = JSON.parse,
                                            s = localStorage.getItem(e);
                                        return null !== s ? o(s) : (r.current = !0, i && localStorage.setItem(e, t(i)), i)
                                    } catch (n) {
                                        return i
                                    }
                                })),
                                n = (0, l.useState)((function() {
                                    return o.current(t)
                                })),
                                a = n[0],
                                c = n[1];
                            return [a, (0, l.useCallback)((function(e) {
                                try {
                                    var r;
                                    r = JSON.stringify(e), localStorage.setItem(t, r), c(e)
                                } catch (o) {
                                    localStorage.setItem(t, i), c(i)
                                }
                            }), [t, c]), r]
                        }(), 3),
                        r = i[0],
                        n = i[1],
                        a = i[2],
                        c = function() {
                            var e = (0, o.okI)().s,
                                t = (0, h._)((0, o.sL)(), 1)[0];
                            return "eth" === e && "ETHUSDT" === t ? "eth" : ""
                        }(),
                        d = (0, l.useState)(c),
                        v = d[0],
                        C = d[1],
                        w = (0, u.cA)().symbolsMap,
                        A = (0, o.NF7)(),
                        S = function(e, t) {
                            var i = (0, o.q$z)(),
                                r = (0, o.p8K)(),
                                n = (0, o.zZc)(),
                                a = (0, p.ok)().getI18n,
                                c = (0, f.Bl)(),
                                d = (0, l.useState)(""),
                                h = d[0],
                                u = d[1],
                                g = (0, l.useMemo)((function() {
                                    if (e === p.jS && !i) return [{
                                        sectionKey: p.Ch,
                                        display: a(p.Ch),
                                        sortValue: 0
                                    }, {
                                        sectionKey: s.Gr.CROSS,
                                        display: a(s.Gr.CROSS),
                                        sortValue: 0
                                    }, {
                                        sectionKey: s.Gr.ISOLATED,
                                        display: a(s.Gr.ISOLATED),
                                        sortValue: 0
                                    }];
                                    if (t && t[e] && Object.keys(t[e]).length > 2) {
                                        var o = (0, x._)(Object.keys(t[e])).map((function(e) {
                                            return {
                                                sectionKey: e,
                                                display: n[e] || a(e, {
                                                    defaultValue: e
                                                }),
                                                sortValue: 0
                                            }
                                        }));
                                        return e === s.dQ && o.sort((function(e, t) {
                                            var i, r = y.indexOf(t.sectionKey) - y.indexOf(e.sectionKey);
                                            return 0 === r ? null === (i = e.sectionKey) || void 0 === i ? void 0 : i.localeCompare(t.sectionKey) : r
                                        })), r ? o.filter((function(e) {
                                            return b.indexOf(e.sectionKey) < 0
                                        })) : o
                                    }
                                    return []
                                }), [e, t, n, i, r, c]);
                            return (0, l.useEffect)((function() {
                                var e;
                                g.length > 0 ? u(null === (e = g[0]) || void 0 === e ? void 0 : e.sectionKey) : u("")
                            }), [g]), {
                                subTabList: g,
                                switchSubTab: u,
                                activeSubTab: h
                            }
                        }(r, e),
                        T = S.subTabList,
                        k = S.activeSubTab,
                        L = S.switchSubTab,
                        _ = (0, l.useMemo)((function() {
                            return (0, g.y)(r, p.YY) ? function(e) {
                                var i = t.indexOf(e.symbol);
                                return i > -1 && (e.favoritesIndex = t.length - i), ~i
                            } : p.es
                        }), [r, t]),
                        P = (0, l.useCallback)((function(e) {
                            var t = e || {},
                                i = t.parentMarket,
                                o = void 0 === i ? "" : i,
                                s = t.quoteAsset,
                                n = void 0 === s ? "" : s,
                                a = t.symbol,
                                l = void 0 === a ? "" : a,
                                c = t.tags,
                                d = void 0 === c ? "" : c,
                                h = t.baseAsset,
                                u = void 0 === h ? "" : h,
                                m = t.baseAssetName,
                                x = void 0 === m ? "" : m;
                            e.priority && delete e.priority;
                            var f = (w[l] || {}).type,
                                y = v.toUpperCase();
                            if (v) {
                                var b;
                                if (v.length > 30) return !1;
                                if (!(0, g.ED)((0, g.Nt)(v))) return !1;
                                var C = new RegExp((0, g.Nt)(v), "i").test(u),
                                    S = new RegExp((0, g.Nt)(v), "i").test(n),
                                    L = v.length >= 3 && 0 === (null === (b = null === x || void 0 === x ? void 0 : x.toUpperCase()) || void 0 === b ? void 0 : b.indexOf(y)),
                                    P = new RegExp((0, g.Nt)(v), "i").test(l) || new RegExp((0, g.Nt)(v), "i").test("".concat(u, "/").concat(n)) || new RegExp((0, g.Nt)(v), "i").test("".concat(u, "_").concat(n)) || new RegExp((0, g.Nt)(v), "i").test("".concat(u, " ").concat(n)) || 0 === "".concat(n).concat(u).indexOf(y) || new RegExp((0, g.Nt)(v), "i").test("".concat(n, "/").concat(u));
                                return C || L ? e.priority = (0 === (null === u || void 0 === u ? void 0 : u.indexOf(y)) ? p.jT : L ? p.pf : p.rc) + (r === n || k === n ? 500 : 0) + (u === y ? 10 : 0) + (p.PG.includes(u) ? 1 : 0) : S ? e.priority = 1 : P && (e.priority = 0), C || L || S || P
                            }
                            if (Array.isArray(A) && A.includes(k)) return Array.isArray(d) && d.includes(k);
                            switch (r) {
                                case p.y2:
                                    return e;
                                case p.YY:
                                    return _(e);
                                case p.jS:
                                    return (0, g.y)(k, p.Ch) ? f : (0, g.y)(f, p.Ch) || (0, g.y)(f, k);
                                case p.Z:
                                    return null === e || void 0 === e ? void 0 : e.gridTrade;
                                case p.hr:
                                    return d.includes(p.hr);
                                case p.kM:
                                    return d.includes(p.kM);
                                default:
                                    return T.length > 0 ? [n, o].indexOf(k) > -1 : [n, o].indexOf(r) > -1
                            }
                        }), [_, r, k, v, w, A, T]);
                    return {
                        tabState: {
                            activeTab: r,
                            switchTab: n,
                            isFirstInitialLocal: a
                        },
                        subTabState: {
                            activeSubTab: k,
                            switchSubTab: L,
                            subTabList: T
                        },
                        searchState: {
                            keyword: v,
                            search: C
                        },
                        filterFunc: P
                    }
                },
                C = i("b2AH"),
                w = i("D8Im"),
                A = i.n(w),
                S = i("oesP"),
                T = {
                    default: "0",
                    descend: Number.MIN_SAFE_INTEGER,
                    ascend: Number.MAX_SAFE_INTEGER
                },
                k = "default",
                L = "descend",
                _ = "ascend",
                P = function(e) {
                    var t = e.activeTab,
                        i = e.activeSubTab,
                        r = e.withVolume,
                        s = (e.noFiat, e.disableSortHeaderRender),
                        a = e.isBasicLayout,
                        c = void 0 === a || a,
                        d = (0, m.d4)((function(e) {
                            return e.market.sortInfo
                        })),
                        h = t === p.YY,
                        u = (0, C.CU)().getI18n,
                        g = (0, S.v)(),
                        x = (0, o.DYq)(),
                        f = p.Qu,
                        y = u("Vol", {
                            defaultValue: "Vol"
                        }),
                        b = (0, n._)({
                            label: u("market-pair", {
                                defaultValue: "Pair"
                            }),
                            key: "symbol"
                        }, f.first),
                        v = (0, n._)({
                            label: x ? u("market-change", {
                                defaultValue: "Change"
                            }) : u("ticker-change", {
                                defaultValue: "24h Change"
                            }),
                            key: "difference"
                        }, f.fourth),
                        w = (0, n._)({
                            label: u("market-price", {
                                defaultValue: "Price"
                            }),
                            key: "lastPrice"
                        }, f.third),
                        P = (0, n._)({
                            label: "".concat(y),
                            key: "quoteVolume"
                        }, f.third),
                        D = (0, l.useMemo)((function() {
                            return [(0, n._)({
                                label: u("market-pair", {
                                    defaultValue: "Pair"
                                }),
                                key: "symbol-volume",
                                children: [b, P]
                            }, f.first), w, v]
                        }), [i, u, r, x]),
                        I = (0, l.useMemo)((function() {
                            return [c ? b : (0, n._)({
                                label: u("market-pair", {
                                    defaultValue: "Pair"
                                }),
                                key: "symbol-volume",
                                children: [b, P]
                            }, f.first), (0, n._)({
                                label: u("market-change", {
                                    defaultValue: "Change"
                                }),
                                key: "lastPrice-difference",
                                children: c ? [w, "change" === g ? v : P] : [w, v]
                            }, f.second)]
                        }), [i, u, r, x, c, g]);
                    return {
                        headers: s ? D : I,
                        sortFunc: (0, l.useMemo)((function() {
                            var e = Object.keys(d).length ? Object.keys(d)[0] : "symbol",
                                i = Object.values(d).length ? Object.values(d)[0] : void 0,
                                r = i ? T[i] : T.default;
                            return function(o, s) {
                                if (A()(o.priority) || A()(s.priority)) {
                                    var n, a = Number(o.priority || 0),
                                        l = Number(s.priority || 0);
                                    return l === a ? o.baseAsset === s.baseAsset ? p.CW.indexOf(s.quoteAsset) - p.CW.indexOf(o.quoteAsset) : null === (n = o.baseAsset) || void 0 === n ? void 0 : n.localeCompare(s.baseAsset) : l - a
                                }
                                var c, d = r,
                                    h = r;
                                return i === _ && (d = o[e], h = s[e]), i === L && (d = s[e], h = o[e]), i === k && t === p.YY ? Number(s.favoritesIndex || 0) - Number(o.favoritesIndex || 0) : "symbol" === e && i !== k ? null === (c = d) || void 0 === c ? void 0 : c.localeCompare(h) : +d - +h
                            }
                        }), [d, h])
                    }
                },
                D = i("iKvg"),
                I = i("Ov3/"),
                V = function() {
                    var e = function() {
                            var e = (0, h._)((0, I.A)("trd-market-search-history", {}), 2),
                                t = e[0],
                                i = e[1],
                                r = Object.keys(t || {}).sort((function(e, i) {
                                    return t[i] - t[e]
                                }));
                            return {
                                history: t,
                                historyArray: r,
                                setHistory: function(e) {
                                    var o = r.length,
                                        s = (0, a._)((0, n._)({}, t), (0, D._)({}, e, (new Date).valueOf())),
                                        l = r[r.length - 1];
                                    o >= 10 && r.indexOf(e) < 0 && delete s[l], i(s)
                                },
                                clearHistory: function() {
                                    i({})
                                }
                            }
                        }(),
                        t = e.historyArray,
                        i = e.clearHistory,
                        r = e.setHistory,
                        s = (0, u.cA)().symbolsMap,
                        l = (0, o.Bjx)(),
                        c = (0, o.q$z)();
                    return {
                        historyData: t.map((function(e) {
                            var t = (s[e] || {}).defaultRatio,
                                i = l[e] || {};
                            return {
                                symbol: e,
                                defaultRatio: c ? "" : t,
                                baseAsset: i.baseAsset,
                                quoteAsset: i.quoteAsset
                            }
                        })),
                        clearHistory: i,
                        setHistory: r
                    }
                },
                M = i("/kUC"),
                B = i("L0jo"),
                E = function() {
                    var e = (0, l.useState)([]),
                        t = e[0],
                        i = e[1],
                        r = (0, M.I)(),
                        s = d().nextTickers,
                        n = (0, g.G)(s, "symbol"),
                        a = (0, u.cA)().symbolsMap,
                        c = (0, o.Bjx)(),
                        h = (0, o.q$z)(),
                        p = t.filter((function(e) {
                            return null === n || void 0 === n ? void 0 : n[null === e || void 0 === e ? void 0 : e.symbol]
                        })).slice(0, 10).map((function(e) {
                            var t = e.symbol,
                                i = (a[t] || {}).defaultRatio,
                                r = c[t] || {},
                                o = n[t] || {},
                                s = o.difference,
                                l = void 0 === s ? 0 : s,
                                d = o.lastPrice,
                                u = void 0 === d ? 0 : d,
                                g = o.bigThan;
                            return {
                                symbol: t,
                                defaultRatio: h ? "" : i,
                                baseAsset: r.baseAsset,
                                quoteAsset: r.quoteAsset,
                                change: l,
                                lastPrice: u,
                                bigThan: g
                            }
                        }));
                    return (0, l.useEffect)((function() {
                        return (0, B.no)({
                            currency: r,
                            apiVersion: "2"
                        }).then((function(e) {
                            e && e.length > 0 && i(e)
                        })), i([])
                    }), []), p
                },
                j = i("obHX"),
                O = function() {
                    var e = (0, m.d4)((function(e) {
                        return e.exchangeInfo.marketTabs
                    }));
                    return (0, j._7)() && e && e[p.z6] && delete e[p.z6][p.yt], e
                }
        },
        oesP: (e, t, i) => {
            i.d(t, {
                v: () => o
            });
            var r = i("MD8j"),
                o = function() {
                    return (0, r.d4)((function(e) {
                        return e.market.radioWord
                    }))
                }
        },
        IhpE: (e, t, i) => {
            i.d(t, {
                a: () => s
            });
            var r = i("mXdx"),
                o = (i("DTvD"), i("Qhol")),
                s = function() {
                    var e = (0, o.ok2)().getI18n;
                    return (0, r.jsx)("a", {
                        href: "/".concat("support/faq/18c97e8ab67a4e1b824edd590cae9f16"),
                        target: "_blank",
                        style: {
                            fontSize: "12px",
                            textDecoration: "underline",
                            flex: "1",
                            margin: "2px 0 0 8px",
                            color: "var(--color-TertiaryText)",
                            fontWeight: 400
                        },
                        children: e("trd-common-activity-faq")
                    })
                }
        },
        DxGY: (e, t, i) => {
            i.d(t, {
                A: () => u
            });
            var r = i("hrAD"),
                o = i("qoEP"),
                s = i("KrVi"),
                n = i("mXdx"),
                a = i("DTvD"),
                l = i.n(a),
                c = i("Vhyo"),
                d = {
                    m: {
                        textAlign: "center",
                        height: "14px",
                        fontSize: "12px",
                        lineHeight: "14px",
                        borderRadius: "2px"
                    },
                    l: {
                        px: "3px",
                        height: "16px",
                        fontSize: "12px",
                        lineHeight: "16px",
                        borderRadius: "2px"
                    },
                    xl: {
                        px: "8px",
                        height: "24px",
                        fontSize: "14px",
                        lineHeight: "24px",
                        borderRadius: "4px"
                    }
                },
                h = function(e) {
                    var t = e.children,
                        i = e.disable,
                        a = void 0 === i || i,
                        l = e.size,
                        h = void 0 === l ? "m" : l,
                        u = e.error,
                        g = (0, s._)(e, ["children", "disable", "size", "error"]),
                        p = a ? {
                            cursor: "inherit"
                        } : {
                            cursor: "pointer"
                        };
                    return (0, n.jsx)(c.A, (0, o._)((0, r._)({
                        as: "span",
                        display: "inline-block",
                        style: p,
                        __css: (0, o._)((0, r._)({}, d[h]), {
                            fontWeight: "normal",
                            color: u ? "error" : "t.yellow",
                            bg: u ? "errorBg" : "tagBg"
                        })
                    }, g), {
                        children: t
                    }))
                };
            const u = l().memo(h)
        },
        Evfg: (e, t, i) => {
            i.d(t, {
                A: () => u
            });
            var r = i("mguP"),
                o = i("mXdx"),
                s = i("DTvD"),
                n = i.n(s),
                a = i("9RIf"),
                l = i("WT+B"),
                c = i("Qhol"),
                d = i("V+rp"),
                h = function() {
                    var e = (0, c.DPo)().isLight,
                        t = (0, c.CUO)().getI18n,
                        i = (0, r._)((0, c.sL)(), 1)[0],
                        n = (0, c.Grl)(),
                        h = (0, d.eI)((function(e) {
                            return e.announmentList
                        })),
                        u = (0, r._)((0, d.nd)(), 2),
                        g = u[0],
                        p = u[1],
                        m = (0, s.useMemo)((function() {
                            return e ? "#fef6d8" : "#3C2601"
                        }), [e]),
                        x = (0, s.useMemo)((function() {
                            return e ? "#1e2329" : "#EAECEF"
                        }), [e]),
                        f = (0, s.useMemo)((function() {
                            return (0, d.o7)(h, g || {}, i, n).map((function(e) {
                                return {
                                    id: e.id,
                                    text: e.title,
                                    link: (null === e || void 0 === e ? void 0 : e.path) || e.url,
                                    linkText: t("view-more") || ""
                                }
                            }))
                        }), [h, t, g, i]),
                        y = (0, l.Z)((function(e) {
                            var t;
                            (0, d.ts)(null === (t = f[e]) || void 0 === t ? void 0 : t.id, g || {}, p)
                        }));
                    return (0, o.jsx)(o.Fragment, {
                        children: (null === f || void 0 === f ? void 0 : f.length) ? (0, o.jsx)(a.A, {
                            autoplay: !0,
                            content: f,
                            bg: m,
                            textColor: x,
                            onClose: y
                        }) : null
                    })
                };
            const u = n().memo(h)
        },
        IDN6: (e, t, i) => {
            i.d(t, {
                A: () => f
            });
            var r = i("mguP"),
                o = i("mXdx"),
                s = i("DTvD"),
                n = i.n(s),
                a = i("kcvK"),
                l = i("1CC6"),
                c = i("MD8j"),
                d = i("zHUU"),
                h = i("W4RF"),
                u = i("Qhol"),
                g = i("b9LU"),
                p = i("/kUC"),
                m = i("WOJV"),
                x = function(e) {
                    var t = e.hasIcon,
                        i = void 0 === t || t,
                        n = e.hasText,
                        x = void 0 === n || n,
                        f = (0, s.useContext)(g.x),
                        y = f.currentBaseAsset,
                        b = (f.currentQuoteAsset, f.isETFCoin),
                        v = (0, c.d4)((function(e) {
                            return e.setting.layout
                        })),
                        C = (0, u.HQg)(),
                        w = (0, p.I)(),
                        A = l.U.read("fiat-prefer-currency") || "EUR",
                        S = C[A] ? A : "EUR",
                        T = (0, d.Bl)(),
                        k = (0, r._)((0, u.Grl)(), 1)[0],
                        L = (0, u.ok2)().getI18n,
                        _ = T,
                        P = (0, s.useMemo)((function() {
                            return S
                        }), [w, S]),
                        D = (0, s.useMemo)((function() {
                            return "/crypto/buy/".concat(P, "?Type=spot&crypto=").concat(y, "&returnTo=").concat(encodeURIComponent(window.location.href))
                        }), [y, P]),
                        I = (0, s.useCallback)((function() {
                            (0, m.n_)({
                                tradeType: k
                            }), window.open(D)
                        }), [v, D, P]),
                        V = (0, s.useMemo)((function() {
                            return "zh-CN" === _ ? "".concat(L("trd-orderform-buy-fiat", {
                                fiat: '<span class="fiat">'.concat(P, '</span><span class="buy-with">'),
                                interpolation: {
                                    escapeValue: !1
                                }
                            }), "</span>") : '<span class="buy-with">'.concat(L("trd-orderform-buy-fiat", {
                                fiat: '</span><span class="fiat">'.concat(P, "</span>"),
                                interpolation: {
                                    escapeValue: !1
                                }
                            }))
                        }), [L, P]);
                    return b ? null : (0, o.jsx)(a.A, {
                        variant: "gray",
                        tooltips: L("trd-orderform-buy-fiat-tooltip"),
                        offset: -4,
                        arrow: !0,
                        useReactPopper: !0,
                        children: (0, o.jsxs)("a", {
                            className: "trade-common-link",
                            target: "_blank",
                            onClick: I,
                            style: {
                                display: "flex",
                                alignItems: "center"
                            },
                            children: [i && (0, o.jsxs)(o.Fragment, {
                                children: [(0, o.jsx)(h.A, {
                                    className: "trade-common-icon"
                                }), "\xa0"]
                            }), x && (0, o.jsx)("span", {
                                dangerouslySetInnerHTML: {
                                    __html: V
                                }
                            })]
                        })
                    })
                };
            const f = n().memo(x)
        },
        DtKF: (e, t, i) => {
            i.d(t, {
                A: () => b
            });
            var r = i("S+0I"),
                o = i("mguP"),
                s = i("d12p"),
                n = i("jbFV"),
                a = i.n(n),
                l = i("mXdx"),
                c = i("DTvD"),
                d = i("Qhol"),
                h = i("GJ+9"),
                u = i("vOeE"),
                g = i("iwDq"),
                p = i("bQ69"),
                m = i("JJde"),
                x = i("8zyX"),
                f = {
                    display: "inline-flex",
                    alignItems: "center",
                    textDecoration: "none",
                    ml: "8px",
                    fontSize: "12px"
                },
                y = function(e) {
                    var t = e.href,
                        i = e.text,
                        r = e.target,
                        o = (0, d.CUO)().getI18n,
                        s = i || o("learn-more", {
                            defaultValue: "Learn More"
                        });
                    return (0, l.jsxs)(h.A, {
                        variant: "standardLink",
                        sx: f,
                        href: t,
                        target: r,
                        children: [s, (0, l.jsx)(u.A, {
                            size: 12,
                            ml: "2px",
                            color: "t.yellow"
                        })]
                    })
                };
            const b = function(e) {
                var t = e.isPro,
                    i = (0, c.useState)(!1),
                    n = i[0],
                    h = i[1],
                    u = (0, c.useState)(!1),
                    f = u[0],
                    b = u[1],
                    v = (0, o._)((0, d.sL)(), 2),
                    C = v[0],
                    w = (0, o._)(v[1], 2),
                    A = w[0],
                    S = w[1],
                    T = (0, d.Oc_)(),
                    k = "".concat(A, "/").concat(S),
                    L = (0, d.CUO)().getI18n,
                    _ = (0, m.J1)(p.TP.SPOT_GRID_URL, {
                        symbol: C,
                        activeTab: "workingGrid"
                    }),
                    P = (0, c.useMemo)((function() {
                        return (0, l.jsxs)("span", {
                            className: "description",
                            children: [L("grid-warning", {
                                defaultValue: "{{symbol}} is in Grid Trading. Manual trading, canceling orders or closing positions, of the symbol terminates Grid Strategy.",
                                symbol: k,
                                interpolation: {
                                    escapeValue: !1
                                }
                            }), (0, l.jsx)(y, {
                                href: _
                            })]
                        })
                    }), [L, C]),
                    D = function() {
                        var e = (0, r._)(a().mark((function e() {
                            var t, i;
                            return a().wrap((function(e) {
                                for (;;) switch (e.prev = e.next) {
                                    case 0:
                                        return e.next = 2, (0, x.OO)({});
                                    case 2:
                                        t = e.sent.data, i = (0, s._)((null === t || void 0 === t ? void 0 : t.openGrids) || []), h(!1), i.forEach((function(e) {
                                            var t = e.symbol,
                                                i = e.strategyStatus;
                                            C === t && "WORKING" === i && h(!0)
                                        }));
                                    case 6:
                                    case "end":
                                        return e.stop()
                                }
                            }), e)
                        })));
                        return function() {
                            return e.apply(this, arguments)
                        }
                    }();
                return (0, c.useEffect)((function() {
                    for (var e = T.preOrders, t = 0, i = 0; i < e.length; i++) {
                        var r, o;
                        if ((null === (r = e[i]) || void 0 === r || null === (o = r.clientOrderId) || void 0 === o ? void 0 : o.indexOf("grid_sub")) >= 0 && (t += 1) >= 2) {
                            D();
                            break
                        }
                    }
                }), [T, C]), f ? (0, l.jsx)(l.Fragment, {}) : n ? (0, l.jsx)(g.A, {
                    innerText: P,
                    isPro: t,
                    handleClose: function() {
                        b(!0)
                    }
                }) : null
            }
        },
        yDd4: (e, t, i) => {
            i.d(t, {
                A: () => x,
                y: () => p
            });
            var r = i("mguP"),
                o = i("mXdx"),
                s = i("DTvD"),
                n = i.n(s),
                a = i("GJ+9"),
                l = i("Qhol"),
                c = i("dkdI"),
                d = i("7iVj"),
                h = i("tgKj"),
                u = i("zHUU"),
                g = i("SzHX"),
                p = function() {
                    var e = (0, l.qkd)(),
                        t = e.name,
                        i = e.status,
                        n = (e.link, (0, l.xXR)()),
                        c = (0, r._)((0, l.sL)(), 2),
                        d = (0, r._)(c[1], 1)[0],
                        p = (0, l.ok2)().getI18n,
                        m = (0, u.Bl)(),
                        x = (0, s.useMemo)((function() {
                            return n && n.priceUrl ? "/".concat(m, "/price/").concat(n.priceUrl) : "/".concat(m, "/price")
                        }), [d, t, n]),
                        f = (null === t || void 0 === t ? void 0 : t.length) >= 8,
                        y = (0, l.QsY)().isMobile;
                    return t && (0, o.jsx)(h.A, {
                        style: {
                            maxWidth: f && y ? "60px" : "none"
                        },
                        className: "leading-[16px] overflow-hidden text-ellipsis line-clamp-2 md:line-clamp-none text-[10px] md:text-[12px]",
                        children: (0, o.jsxs)(a.A, {
                            href: x,
                            disabled: i,
                            target: "_blank",
                            rel: "noopener noreferrer",
                            sx: {
                                color: y ? "var(--color-SecondaryText)" : "var(--color-TertiaryText)",
                                textDecoration: "none"
                            },
                            onClick: function(e) {
                                e && e.stopPropagation()
                            },
                            children: ["".concat(p("trd-ticker-coin-price", {
                                coin: t,
                                interpolation: {
                                    escapeValue: !1
                                }
                            })), (0, o.jsx)(g.A, {
                                style: {
                                    fontSize: "8px",
                                    verticalAlign: "0px",
                                    marginLeft: "2px"
                                }
                            })]
                        })
                    })
                },
                m = function() {
                    var e = (0, r._)((0, l.sL)(), 1)[0];
                    return (0, o.jsxs)(o.Fragment, {
                        children: [(0, o.jsx)(d.N, {
                            symbol: e
                        }), (0, o.jsx)(c.SymbolLayout, {
                            layout: "basic",
                            children: (0, o.jsx)(c.SymbolContent, {
                                hasCare: !1
                            })
                        })]
                    })
                };
            const x = n().memo(m)
        },
        "7iVj": (e, t, i) => {
            i.d(t, {
                N: () => l
            });
            var r = i("mXdx"),
                o = i("Z6qc"),
                s = i("tgKj"),
                n = i("DTvD"),
                a = i("C7Nc"),
                l = function(e) {
                    var t = function(e) {
                            var t = e.symbol,
                                i = (0, a.RS)(),
                                r = i.favorites,
                                o = i.setFavorite,
                                s = r.indexOf(t),
                                l = (0, n.useMemo)((function() {
                                    return s > -1 ? "primary" : ""
                                }), [s]),
                                c = s > -1;
                            return {
                                favoriteStyle: l,
                                favoriteFunc: (0, n.useCallback)((function(e) {
                                    e.preventDefault(), e.stopPropagation(), o(t, s, r)
                                }), [s, o, t, r]),
                                isFavorite: c
                            }
                        }({
                            symbol: e.symbol
                        }),
                        i = t.isFavorite,
                        l = t.favoriteFunc;
                    return (0, r.jsx)(s.A, {
                        className: "w-[24px] h-[24px] text-[16px] mr-[8px] rounded-[6px] border-[0.5px] border-solid border-Line justify-center items-center cursor-pointer",
                        children: (0, r.jsx)(o.A, {
                            onClick: l,
                            className: "w-[16px] h-[16px] text-[16px] ".concat(i ? "text-PrimaryYellow" : "text-DisabledText")
                        })
                    })
                }
        },
        dkdI: (e, t, i) => {
            i.r(t), i.d(t, {
                CaretIcon: () => N,
                SymbolContent: () => W,
                SymbolLayout: () => F,
                default: () => X
            });
            var r = i("hrAD"),
                o = i("qoEP"),
                s = i("mguP"),
                n = i("mXdx"),
                a = i("7iVj"),
                l = i("WJPx"),
                c = i("bQ69"),
                d = i("Qhol"),
                h = i("gr5F"),
                u = i("YRJq"),
                g = i("KrVi"),
                p = i("DTvD"),
                m = i.n(p),
                x = i("QCYV"),
                f = i("GIr8"),
                y = i("NSeK"),
                b = function(e) {
                    var t = e.children,
                        i = e.visible,
                        s = e.onHide,
                        a = e.getI18n,
                        l = (0, g._)(e, ["children", "visible", "onHide", "getI18n"]);
                    return (0, n.jsx)(n.Fragment, {
                        children: (0, n.jsx)(x.A, {
                            maskBg: "dialog.mask",
                            direction: "bottom",
                            visible: i,
                            bg: "dialog.mask",
                            outerClick: s,
                            sx: {
                                zIndex: "11"
                            },
                            childProps: {
                                zIndex: "11"
                            },
                            children: (0, n.jsxs)(f.A, (0, o._)((0, r._)({
                                tx: "modal",
                                variant: "drawer"
                            }, l), {
                                width: "100%",
                                children: [(0, n.jsxs)("div", {
                                    style: {
                                        display: "flex",
                                        alignItems: "center",
                                        justifyContent: "space-between",
                                        margin: "12px 16px"
                                    },
                                    children: [(0, n.jsx)("div", {
                                        style: {
                                            fontSize: "16px"
                                        },
                                        children: a("trd-layout-MarketTle")
                                    }), (0, n.jsx)(y.A, {
                                        onClick: s,
                                        size: 20,
                                        sx: {
                                            flexShrink: 0,
                                            color: "icons.close",
                                            cursor: "pointer",
                                            "&:hover": {
                                                color: "t.third"
                                            },
                                            ml: 3
                                        }
                                    })]
                                }), (0, n.jsx)("div", {
                                    style: {
                                        height: "calc(100vh - 254px)"
                                    },
                                    children: t
                                })]
                            }))
                        })
                    })
                };
            const v = (0, p.memo)(b);
            var C = i("MOWb"),
                w = i("DxGY"),
                A = i("yDd4"),
                S = i("C7Nc"),
                T = i("FkjH"),
                k = i("Rhdc"),
                L = i("Xz3K"),
                _ = i("Vhyo"),
                P = i("5XRN"),
                D = i("2UAE"),
                I = i("BiCW"),
                V = i("La5x"),
                M = i("pPGf"),
                B = i("Olbk"),
                E = i("MD8j"),
                j = i("5s+a"),
                O = (0, I.A)((function() {
                    return Promise.all([i.e(995), i.e(6140), i.e(734), i.e(4241), i.e(1704), i.e(1666)]).then(i.bind(i, "zamu"))
                }), {
                    webpack: function() {
                        return ["zamu"]
                    },
                    ssr: !1,
                    loading: function() {
                        return null
                    }
                }),
                H = T.A.registerActionHandle,
                R = T.A.constants,
                N = function(e) {
                    var t = e.hasCare,
                        i = e.shouldOpenMarket,
                        r = e.isMarketShowing;
                    return !t || i ? (0, n.jsx)(n.Fragment, {}) : r ? (0, n.jsx)(V.A, {}) : (0, n.jsx)(M.A, {})
                },
                W = (0, p.memo)((function(e) {
                    var t, i = e.hasCare,
                        r = void 0 === i || i,
                        o = e.shouldOpenMarket,
                        a = e.isMarketShowing,
                        h = (e.showSymbolIcon, e.onMouseMove),
                        g = (0, p.useRef)(),
                        m = (0, s._)((0, d.sL)(), 2),
                        x = m[0],
                        y = m[1],
                        b = (0, S.cA)().symbolsMap,
                        v = (0, s._)((0, d.Grl)(), 1)[0],
                        C = (0, S.nj)({
                            symbol: x
                        }),
                        T = b[x] || {},
                        k = T.crossRatio,
                        L = T.marginRatio,
                        P = v === c.Gr.CROSS ? k : C || L,
                        D = (0, d.QsY)().isMobile,
                        I = (0, E.d4)((function(e) {
                            return e.setting.layout
                        })),
                        V = (0, d.i24)(),
                        M = (0, l.o)().getI18n,
                        O = (0, u.h1)().putCoachMarkStep,
                        H = (null === (t = y[0]) || void 0 === t ? void 0 : t.length) >= 8,
                        R = (0, j.Zf)(x),
                        W = (0, d.lw3)(),
                        F = (0, d.ok2)().getI18n;
                    return (0, p.useEffect)((function() {
                        I !== c.Pv && O("tradeGuide", 0, {
                            title: M("guide-title"),
                            content: M("guide-content"),
                            target: g,
                            position: "bottom-start"
                        })
                    }), [I, M, O]), (0, n.jsx)(n.Fragment, {
                        children: (0, n.jsxs)(f.A, {
                            className: "h-full justify-start items-center md:!items-start flex-row md:!flex-col justify-between",
                            children: [(0, n.jsxs)(f.A, {
                                className: "items-center",
                                sx: {
                                    height: ["28px", "24px"],
                                    flexWrap: ["nowrap", "wrap"],
                                    minWidth: ["80px", "0px"]
                                },
                                onMouseMove: h,
                                children: [(0, n.jsx)(_.A, {
                                    ref: g,
                                    sx: {
                                        color: "t.primary",
                                        mr: "4px"
                                    },
                                    children: (0, n.jsx)("h1", {
                                        style: {
                                            fontSize: H && D ? "16px" : "20px",
                                            fontWeight: 500,
                                            lineHeight: "24px",
                                            margin: "0px"
                                        },
                                        children: y.join("/")
                                    })
                                }), V && R && !W && (0, n.jsx)(B.Ay, {
                                    className: "tag text-TextLink bg-PrimaryYellow-10 rounded-[2px] leading-[16px] cursor-pointer text-[12px] px-[4px]",
                                    children: F("trd-tag-pre-market", {
                                        defaultValue: "Pre-Market"
                                    })
                                }), !V && P && (0, n.jsx)(w.A, {
                                    sx: {
                                        paddingX: "5px",
                                        backgroundColor: "var(--color-Input)",
                                        color: "var(--color-PrimaryText)"
                                    },
                                    size: "l",
                                    children: P
                                }), (0, n.jsx)(N, {
                                    hasCare: r,
                                    shouldOpenMarket: o,
                                    isMarketShowing: a
                                })]
                            }), (0, n.jsx)(A.y, {})]
                        })
                    })
                })),
                F = (0, p.memo)((function(e) {
                    var t = e.contentSx,
                        i = e.children;
                    return (0, n.jsx)(f.A, {
                        sx: (0, r._)({
                            flexDirection: "column",
                            pr: ["0", "16px"],
                            height: "auto",
                            justifyContent: "space-around"
                        }, t),
                        children: i
                    })
                })),
                z = function(e) {
                    var t = e.contentSx,
                        i = e.isChartView,
                        l = e.showSymbolIcon,
                        u = void 0 === l || l,
                        g = e.getMultiSymbolsPairs,
                        m = e.simpleMarket,
                        x = (0, s._)((0, d.sL)(), 1)[0],
                        f = (0, p.useState)(!1),
                        y = f[0],
                        b = f[1],
                        w = (0, p.useState)(!1),
                        A = w[0],
                        S = w[1],
                        T = (0, p.useState)(!1),
                        _ = T[0],
                        I = T[1],
                        V = (0, p.useState)(!1),
                        M = V[0],
                        B = V[1],
                        j = (0, p.useState)(!1),
                        N = j[0],
                        z = j[1],
                        X = (0, p.useState)(!1),
                        U = X[0],
                        G = X[1],
                        $ = (0, E.d4)((function(e) {
                            return e.setting.layout
                        })),
                        Y = (0, d.QsY)(),
                        Z = Y.isMobile,
                        K = Y.isIPad,
                        q = (0, p.useContext)(C.MQ).widgetLayout,
                        Q = !!(void 0 === q ? [] : q).find((function(e) {
                            return "market" === e.i
                        })),
                        J = !((!Q || $ !== c.ug || Z || K) && !Z),
                        ee = !(!Q || $ !== c.ug || Z || K),
                        te = (0, d.ok2)().getI18n;
                    (0, p.useEffect)((function() {
                        var e = H((function(e) {
                            if (e.name === R.ACTION_TRADE_SEARCH_SYMBOL) b(!0), B(!0)
                        }));
                        return e
                    }), [y, M]), (0, p.useEffect)((function() {
                        return (0, k.r)((function(e) {
                            if (!J) switch (e) {
                                case L.mC.PREVIEW_SHORTCUTS:
                                    I(!0), B(!0);
                                    break;
                                case L.mC.PREVIEW_SHORTCUTS_CANCEL:
                                    I(!1), B(!1)
                            }
                        }))
                    }), [S, J]);
                    var ie = function() {
                            return G(!1)
                        },
                        re = (0, p.useCallback)((function() {
                            b(!1), ie()
                        }), []);
                    (0, h.A)({
                        callback: re,
                        id: "marketSymbol"
                    });
                    var oe = (0, p.useMemo)((function() {
                            return {}
                        }), [J, y, re]),
                        se = (0, p.useCallback)((function(e) {
                            z(!!e), !J && I(e)
                        }), [J]),
                        ne = (0, p.useCallback)((function(e) {
                            !J && I(!0), e.stopPropagation()
                        }), [J]),
                        ae = (0, p.useCallback)((function(e) {
                            !J && I(!1), e.stopPropagation()
                        }), [J]);
                    return (0, n.jsxs)(n.Fragment, {
                        children: [!Z && (0, n.jsx)(a.N, {
                            symbol: x
                        }), (0, n.jsx)(F, {
                            contentSx: t,
                            isChartView: i,
                            layout: $,
                            children: (0, n.jsx)(P.Ay, (0, o._)((0, r._)({
                                sx: {
                                    "&:hover": {
                                        cursor: "pointer"
                                    }
                                },
                                trigger: "hover",
                                onClick: function() {
                                    return G(!0)
                                },
                                disabled: J,
                                onVisibleChange: se,
                                onMouseLeave: ae,
                                open: _,
                                enablePortal: !0,
                                overlay: (0, n.jsx)(D.A, {
                                    id: "marketSymbol",
                                    sx: {
                                        backgroundColor: "var(--color-CardBg)",
                                        marginLeft: "-47px",
                                        marginTop: "4px",
                                        pl: 0,
                                        pt: "xs",
                                        pr: 0,
                                        pb: "xs",
                                        width: 440,
                                        maxWidth: "calc(100vw - 32px)",
                                        height: [450, "calc(100vh - 120px)"],
                                        maxHeight: "100vh",
                                        boxShadow: "var(--shadow-shadow2)",
                                        borderRadius: "8px",
                                        zIndex: "2000",
                                        ".bn-tab-list-shadow-left": {
                                            background: "linear-gradient( 90deg, var(--color-CardBg) 0%, var(--color-CardBg) calc(24px / 2), transparent 100% )"
                                        },
                                        ".bn-tab-list-shadow-right": {
                                            background: "linear-gradient( 270deg, var(--color-CardBg) 0%, var(--color-CardBg) calc(24px / 2), transparent 100% )"
                                        }
                                    },
                                    children: (0, n.jsx)(O, {
                                        showCoinInfo: !1,
                                        noFiat: !0,
                                        openShotCut: M,
                                        selectedCallback: re,
                                        bgColor: "popupBg",
                                        changeSymbolCb: g,
                                        searchFocus: A,
                                        setSearchFocus: S,
                                        simpleMarket: m
                                    })
                                })
                            }, oe), {
                                children: (0, n.jsx)(W, {
                                    shouldOpenMarket: ee,
                                    isMarketShowing: N,
                                    showSymbolIcon: u,
                                    onMouseMove: ne
                                })
                            }))
                        }), Z && (0, n.jsx)(v, {
                            visible: U,
                            getI18n: te,
                            onHide: ie,
                            sx: {
                                padding: "0px",
                                color: "t.primary",
                                bg: "popupBg"
                            },
                            children: (0, n.jsx)(O, {
                                showCoinInfo: !1,
                                noFiat: !0,
                                openShotCut: M,
                                selectedCallback: re,
                                simpleMarket: m,
                                bgColor: "popupBg"
                            })
                        })]
                    })
                };
            const X = m().memo(z)
        },
        qpBH: (e, t, i) => {
            i.d(t, {
                C: () => H
            });
            var r = i("mXdx"),
                o = i("DTvD"),
                s = i("Qhol"),
                n = i("mguP"),
                a = i("MD8j"),
                l = i("g6+1"),
                c = i.n(l),
                d = i("lW1t"),
                h = i("L0jo"),
                u = i("MiNH"),
                g = i("nUN5"),
                p = i("Ov3/"),
                m = i("Olbk"),
                x = i("tgKj"),
                f = i("d/69"),
                y = function(e) {
                    var t, i = e.symbol,
                        l = (0, s.ok2)().getI18n,
                        y = (0, s.wp2)() || [],
                        b = (0, s.S1y)(),
                        v = (0, s.zZc)(),
                        C = (0, s.KUg)(i || "") || [],
                        w = function(e) {
                            var t = e.symbol,
                                i = (0, s.ok2)().getI18n,
                                r = (0, g.mR)().nextTickers,
                                l = ((0, s.Bjx)()[t] || {}).baseAsset,
                                m = void 0 === l ? "" : l,
                                x = (0, o.useState)([]),
                                f = x[0],
                                y = x[1],
                                b = (0, o.useState)([]),
                                v = b[0],
                                C = b[1],
                                w = (0, o.useState)([]),
                                A = w[0],
                                S = w[1],
                                T = (0, o.useState)(!1),
                                k = T[0],
                                L = T[1],
                                _ = (0, s.I7v)(),
                                P = (0, a.d4)(d.makeInfo),
                                D = (null === P || void 0 === P ? void 0 : P["".concat(m).toLowerCase()]) || {
                                    tags: [],
                                    isLegalMoney: !1
                                },
                                I = (0, n._)((0, p.A)("spot-market-RankingTag", []), 2),
                                V = I[0],
                                M = I[1];
                            return (0, o.useEffect)((function() {
                                P && P.usdt && Promise.all([(0, h.no)({
                                    currency: _,
                                    apiVersion: "1"
                                }), (0, u.NK)("")]).then((function(e) {
                                    var t = (0, n._)(e, 2),
                                        i = t[0],
                                        r = void 0 === i ? [] : i,
                                        o = t[1],
                                        s = void 0 === o ? [] : o;
                                    C(r.slice(0, 10).map((function(e) {
                                        return null === e || void 0 === e ? void 0 : e.symbol
                                    }))), S(s.filter((function(e) {
                                        var t, i = P["".concat(null === e || void 0 === e ? void 0 : e.symbol).toLowerCase()] || {};
                                        return !((null === i || void 0 === i ? void 0 : i.isLegalMoney) || (null === i || void 0 === i ? void 0 : i.etf) || (null === i || void 0 === i || null === (t = i.tags) || void 0 === t ? void 0 : t.includes("stablecoin")))
                                    })).slice(0, 10).map((function(e) {
                                        return null === e || void 0 === e ? void 0 : e.symbol
                                    })))
                                }))
                            }), [P]), (0, o.useEffect)((function() {
                                var e = [],
                                    t = {};
                                P && P.bnb && (c()(r, (function(e) {
                                    return -Number(null === e || void 0 === e ? void 0 : e.difference)
                                })).map((function(i) {
                                    if (i.baseAsset && !(null === t || void 0 === t ? void 0 : t[i.baseAsset])) {
                                        var r, o = P["".concat(i.baseAsset).toLowerCase()] || {};
                                        (null === o || void 0 === o ? void 0 : o.isLegalMoney) || (null === o || void 0 === o ? void 0 : o.etf) || (null === o || void 0 === o || null === (r = o.tags) || void 0 === r ? void 0 : r.includes("stablecoin")) || (e.push(i.baseAsset), t[i.baseAsset] = 1)
                                    }
                                })), e.length > 9 && y(e.slice(0, 10)))
                            }), [t, P]), (0, o.useEffect)((function() {
                                var e;
                                P && P.bnb && ((null === D || void 0 === D || null === (e = D.tags) || void 0 === e ? void 0 : e.includes("newListing")) ? L(!0) : L(!1))
                            }), [t, P]), (0, o.useEffect)((function() {
                                var e = [];
                                f && 0 !== f.length && A && 0 !== A.length && v && 0 !== v.length && (f.includes(m) && e.push({
                                    type: "gainer",
                                    rank: f.indexOf(m),
                                    text: "".concat(i("trd-Gainer")),
                                    url: "/markets/trading_data",
                                    index: 1
                                }), A.includes(m) && e.push({
                                    type: "vol",
                                    rank: A.indexOf(m),
                                    text: "".concat(i("trd-Vol")),
                                    url: "/markets/trading_data",
                                    index: 2
                                }), v.includes(t) && e.push({
                                    type: "hot",
                                    rank: v.indexOf(t),
                                    text: "".concat(i("trd-Hot")),
                                    url: "/markets/trading_data",
                                    index: 3
                                }), k && e.push({
                                    type: "new_listing",
                                    text: "".concat(i("trd-New")),
                                    url: "/markets/newListing",
                                    index: 4
                                }), e.sort((function(e, t) {
                                    return (null === e || void 0 === e ? void 0 : e.index) - (null === t || void 0 === t ? void 0 : t.index)
                                })), JSON.stringify(V) !== JSON.stringify(e) && M(e))
                            }), [f, v, A, k, i, t]), V
                        }({
                            symbol: i || ""
                        }) || [],
                        A = function(e) {
                            var t = e.symbol,
                                i = (0, o.useState)([]),
                                r = i[0],
                                a = i[1],
                                l = (0, n._)((0, s.Grl)(), 1)[0];
                            return (0, o.useEffect)((function() {
                                t && "" !== t && (0, h.ab)({
                                    tradeType: l
                                }).then((function() {
                                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
                                    if (e && (null === e || void 0 === e ? void 0 : e.length)) {
                                        var i = e.reduce((function(e, i) {
                                            var r, o;
                                            return i.symbols && i.symbols.includes(t) && e.push({
                                                url: null === (o = null === i || void 0 === i || null === (r = i.deviceUrls) || void 0 === r ? void 0 : r.find((function(e) {
                                                    return "Web" === (null === e || void 0 === e ? void 0 : e.device)
                                                }))) || void 0 === o ? void 0 : o.url,
                                                tagName: null === i || void 0 === i ? void 0 : i.tagName
                                            }), e
                                        }), []);
                                        a(i)
                                    }
                                }))
                            }), [l, t]), r
                        }({
                            symbol: i || ""
                        }) || [],
                        S = function(e) {
                            var t = e.symbol,
                                i = (0, o.useState)(null),
                                r = i[0],
                                a = i[1],
                                l = (0, o.useState)(null),
                                c = l[0],
                                d = l[1],
                                u = (0, o.useState)([]),
                                g = u[0],
                                p = u[1],
                                m = (0, n._)((0, s.Grl)(), 1)[0],
                                x = (0, s.ok2)().getI18n,
                                f = x("trd-tag-zero-maker-fee"),
                                y = x("trd-tag-zero-fee");
                            return (0, o.useEffect)((function() {
                                t && "" !== t && f && "trd-tag-zero-maker-fee" !== f && (0, h.Pw)({
                                    currentPage: "1",
                                    pageSize: "500"
                                }).then((function() {
                                    var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
                                    e && e.symbolCommissionActivityList && e.symbolCommissionActivityList.length && p(e.symbolCommissionActivityList)
                                }))
                            }), [m, t, f]), (0, o.useEffect)((function() {
                                var e = g.find((function(e) {
                                    return e.symbol === t
                                }));
                                return (null === e || void 0 === e ? void 0 : e.makerZero) && (null === e || void 0 === e ? void 0 : e.takerZero) ? (a(y), void d("fee")) : (null === e || void 0 === e ? void 0 : e.makerZero) ? (a(f), void d("maker")) : (a(null), void d(null))
                            }), [g, t]), {
                                zeroFeeTag: r,
                                type: c
                            }
                        }({
                            symbol: i || ""
                        }) || [],
                        T = S.zeroFeeTag,
                        k = S.type,
                        L = l("trd-tag-pre-market", {
                            defaultValue: "Pre-Market"
                        }),
                        _ = A.filter((function(e) {
                            return (null === e || void 0 === e ? void 0 : e.tagName) !== L
                        })),
                        P = function(e) {
                            e !== f.hr ? function(e) {
                                window.open("/markets/coinInfo-".concat(e), "_blank")
                            }(e) : window.open("/support/faq/d4c5afbf4b804c63908a63d760be97f9", "_blank")
                        },
                        D = 0 === (null === C || void 0 === C ? void 0 : C.length) && (0 === (null === w || void 0 === w ? void 0 : w.length) || b) && 0 === (null === A || void 0 === A ? void 0 : A.length) && !T,
                        I = (0, s.lw3)();
                    return D ? (0, r.jsx)(r.Fragment, {}) : (0, r.jsxs)(m.Ay, {
                        className: "ml-[0px] mb-[0px]",
                        children: [(0, r.jsx)(x.A, {
                            className: "text-[12px] text-TertiaryText leading-[22px] mb-[2px] hidden md:!flex",
                            children: l("trd-token-tag")
                        }), (0, r.jsxs)(x.A, {
                            className: "symbol-tags tag-text text-[12px] gap-[16px]",
                            children: [C.map((function(e, t) {
                                return (0, r.jsx)(m.Ay, {
                                    onClick: function() {
                                        return P(e)
                                    },
                                    style: {
                                        display: e === f.hr && I ? "none" : "block"
                                    },
                                    className: (null === y || void 0 === y ? void 0 : y.indexOf(e)) >= 0 ? "tag text-Error rounded-[2px] leading-[16px] cursor-pointer" : "tag text-TextLink hover:text-BtnBg rounded-[2px] leading-[16px] cursor-pointer",
                                    children: e !== f.hr || I ? v[e] : l("trd-tag-pre-market", {
                                        defaultValue: "Pre-Market"
                                    })
                                }, "tag-".concat(t))
                            })), !b && w.map((function(e, t) {
                                return (0, r.jsx)(m.Ay, {
                                    onClick: function(t) {
                                        return function(e, t) {
                                            e && e.preventDefault(), e && e.stopPropagation(), window.open(t, "_blank")
                                        }(t, null === e || void 0 === e ? void 0 : e.url, null === e || void 0 === e || e.text)
                                    },
                                    className: "tag text-TextLink hover:text-BtnBg rounded-[2px] leading-[16px] cursor-pointer",
                                    children: null === e || void 0 === e ? void 0 : e.text
                                }, "rank-".concat(t))
                            })), null === (t = _ || []) || void 0 === t ? void 0 : t.map((function(e, t) {
                                return (0, r.jsx)(m.Ay, {
                                    className: "tag text-TextLink hover:text-BtnBg rounded-[2px] leading-[16px] cursor-pointer",
                                    onClick: function(t) {
                                        var i;
                                        (i = null === e || void 0 === e ? void 0 : e.url) && ("".concat(i).startsWith("/") ? window.open("".concat(i), "_blank") : window.open("/".concat(i), "_blank"))
                                    },
                                    children: null === e || void 0 === e ? void 0 : e.tagName
                                }, "activity-".concat(t))
                            })), T && (0, r.jsx)(m.Ay, {
                                className: "tag text-TextLink hover:text-BtnBg rounded-[2px] leading-[16px] cursor-pointer",
                                onClick: function() {
                                    "maker" === k ? window.open("/markets/spot_margin-0makerfee", "_blank") : window.open("/markets/spot_margin-0fee", "_blank")
                                },
                                children: T
                            }, "zero")]
                        })]
                    })
                },
                b = i("J+v0"),
                v = i.n(b),
                C = i("GJ+9"),
                w = i("kVBH"),
                A = i("OMC8"),
                S = i("3GNB"),
                T = i("SPlc"),
                k = i("yGel"),
                L = i("bQ69"),
                _ = i("Ufvw"),
                P = i.n(_),
                D = i("kcvK"),
                I = i("Rbm3"),
                V = i("C7Nc"),
                M = function(e) {
                    return e ? P()(null !== e && void 0 !== e ? e : "0").div(24).mul(100).toFixed(8) + "%" : "--"
                },
                B = function(e) {
                    return e ? P()(null !== e && void 0 !== e ? e : "0").times(365).mul(100).toFixed(8) + "%" : "--"
                },
                E = function(e) {
                    var t = e.coinType,
                        i = e.setCoinType,
                        o = e.unittype,
                        n = e.setUnitType,
                        a = e.baseAsset,
                        l = e.quoteAsset,
                        c = (0, s.ok2)().t,
                        d = "h-full flex items-center justify-center text-center flex-1 min-h-[28px]";
                    return (0, r.jsxs)(m.Ay, {
                        className: "bg-CardBg text-[12px] text-TertiaryText px-[4px] py-[4px] min-w-[256px]",
                        children: [(0, r.jsxs)(m.Ay, {
                            children: [(0, r.jsx)(m.Ay, {
                                children: c("trd-interest-coin-show")
                            }), (0, r.jsxs)(m.Ay, {
                                className: "group-button min-h-[32px] p-[2px] rounded-[8px] flex text-[12px] justify-between items-center mb-[12px] mt-[4px]",
                                style: {
                                    border: "1px solid",
                                    borderColor: "var(--color-InputLine)"
                                },
                                children: [(0, r.jsx)(m.Ay, {
                                    onClick: function() {
                                        return i("quote")
                                    },
                                    style: {
                                        display: "flex",
                                        alignItems: "center",
                                        justifyContent: "center",
                                        textAlign: "center",
                                        flex: "1",
                                        minHeight: "28px",
                                        alignSelf: "stretch"
                                    },
                                    className: "quote" === t ? "bg-Input rounded-[5px] text-PrimaryText" : "text-TertiaryText cursor-pointer",
                                    children: c("trd-interest-type-quote", {
                                        quoteAsset: l
                                    })
                                }), (0, r.jsx)(m.Ay, {
                                    onClick: function() {
                                        return i("base")
                                    },
                                    style: {
                                        display: "flex",
                                        alignItems: "center",
                                        justifyContent: "center",
                                        textAlign: "center",
                                        flex: "1",
                                        minHeight: "28px",
                                        alignSelf: "stretch"
                                    },
                                    className: "base" === t ? "bg-Input rounded-[5px] text-PrimaryText" : "text-TertiaryText cursor-pointer",
                                    children: c("trd-interest-type-base", {
                                        baseAsset: a
                                    })
                                })]
                            })]
                        }), (0, r.jsxs)(m.Ay, {
                            children: [(0, r.jsx)(m.Ay, {
                                children: c("trd-interest-rate-show")
                            }), (0, r.jsxs)(m.Ay, {
                                className: "group-button min-h-[32px] p-[2px] rounded-[8px] flex text-[12px] justify-between items-center mb-[12px] mt-[4px]",
                                style: {
                                    border: "1px solid",
                                    borderColor: "var(--color-InputLine)"
                                },
                                children: [(0, r.jsx)(m.Ay, {
                                    onClick: function() {
                                        return n("h")
                                    },
                                    className: "".concat(d, "h" === o ? " bg-Input rounded-[5px] text-PrimaryText" : " text-TertiaryText cursor-pointer"),
                                    children: c("trd-interest-type-hour")
                                }), (0, r.jsx)(m.Ay, {
                                    onClick: function() {
                                        return n("y")
                                    },
                                    className: "".concat(d, "y" === o ? " bg-Input rounded-[5px] text-PrimaryText" : " text-TertiaryText cursor-pointer"),
                                    children: c("trd-interest-type-year")
                                })]
                            })]
                        }), (0, r.jsx)(m.Ay, {
                            style: {
                                fontSize: "12px",
                                color: "var(--color-TertiaryText)",
                                lineHeight: "18px"
                            },
                            children: c("trd-hourly-interest-tips", {
                                defaultValue: "Current displayed interest is hourly and will be dynamically adjusted according to lending market conditions. Current displayed Next Interest is the estimated interest rate."
                            })
                        }), (0, r.jsx)(C.A, {
                            href: "/support/faq/daily-interest-rate-for-binance-margin-trading-360030157812",
                            target: "_blank",
                            rel: "noopener noreferrer",
                            sx: {
                                cursor: "pointer",
                                textDecoration: "auto"
                            },
                            children: c("trd-learn-more", {
                                defaultValue: "Learn More"
                            })
                        })]
                    })
                },
                j = function(e) {
                    var t = e.baseAsset,
                        i = e.quoteAsset,
                        o = e.currentBase,
                        n = e.currentQuote,
                        l = e.nextBase,
                        c = e.nextQuote,
                        d = (0, s.ok2)().t,
                        h = (0, a.d4)((function(e) {
                            return e.market.logos
                        })),
                        u = h[t],
                        g = h[i];
                    return (0, r.jsxs)(m.Ay, {
                        className: "text-[14px] bg-CardBg min-w-[256px] px-[4px] py-[8px] [&_.title]:text-PrimaryText [&_.title]:font-medium [&_.title]:leading-[22px]",
                        children: [(0, r.jsxs)(m.Ay, {
                            className: "flex items-center justify-between",
                            children: [(0, r.jsx)(m.Ay, {
                                className: "title text-[16px] font-medium",
                                children: d("trd-base-interest-rate", {
                                    baseAsset: ""
                                })
                            }), (0, r.jsx)(m.Ay, {
                                as: "a",
                                target: "_blank",
                                href: "/margin/interest-history",
                                rel: "noopener noreferrer",
                                className: "text-[12px] text-TextLink no-underline",
                                children: d("trd-orderBook-More")
                            })]
                        }), (0, r.jsxs)(m.Ay, {
                            className: "mt-[12px]",
                            children: [(0, r.jsxs)(m.Ay, {
                                className: "item flex text-PrimaryText flex-row justify-between py-[4px] gap-[8px] leading-[22px]",
                                children: [(0, r.jsxs)(m.Ay, {
                                    className: "text-PrimaryText font-medium flex items-center justify-start",
                                    children: [(0, r.jsx)(I.A, {
                                        className: "logo h-[16px] w-[16px] min-w-[16px] mr-[4px]",
                                        src: u
                                    }), (0, r.jsx)(m.Ay, {
                                        children: t
                                    })]
                                }), (0, r.jsx)(m.Ay, {
                                    className: "num",
                                    children: "".concat(d("trd-rate-hourly"), " / ").concat(d("trd-rate-annualized"))
                                })]
                            }), (0, r.jsxs)(m.Ay, {
                                className: "item flex text-TertiaryText flex-row justify-between py-[4px] gap-[8px] leading-[22px]",
                                children: [(0, r.jsx)(m.Ay, {
                                    children: d("trd-rate-current", {
                                        defaultValue: "Current"
                                    })
                                }), (0, r.jsx)(m.Ay, {
                                    className: "num text-PrimaryText",
                                    children: "".concat(M(o), " / ").concat(B(o))
                                })]
                            }), (0, r.jsxs)(m.Ay, {
                                className: "item flex text-TertiaryText flex-row justify-between py-[4px] gap-[8px] leading-[22px]",
                                children: [(0, r.jsx)(m.Ay, {
                                    children: d("trd-next-interest-new")
                                }), (0, r.jsx)(m.Ay, {
                                    className: "num text-PrimaryText",
                                    children: "".concat(M(l), " / ").concat(B(l))
                                })]
                            })]
                        }), (0, r.jsx)(m.Ay, {
                            className: "mt-[12px] border-t-[1px] border-Line border-solid-t"
                        }), (0, r.jsxs)(m.Ay, {
                            className: "mt-[12px]",
                            children: [(0, r.jsxs)(m.Ay, {
                                className: "item flex text-PrimaryText flex-row justify-between py-[4px] gap-[8px] leading-[22px]",
                                children: [(0, r.jsxs)(m.Ay, {
                                    className: "text-PrimaryText font-medium flex items-center justify-start",
                                    children: [(0, r.jsx)(I.A, {
                                        className: "logo h-[16px] w-[16px] min-w-[16px] mr-[4px]",
                                        src: g
                                    }), (0, r.jsx)(m.Ay, {
                                        children: i
                                    })]
                                }), (0, r.jsx)(m.Ay, {
                                    className: "num",
                                    children: "".concat(d("trd-rate-hourly"), " / ").concat(d("trd-rate-annualized"))
                                })]
                            }), (0, r.jsxs)(m.Ay, {
                                className: "item flex text-TertiaryText flex-row justify-between py-[4px] gap-[8px] leading-[22px]",
                                children: [(0, r.jsx)(m.Ay, {
                                    children: d("trd-rate-current", {
                                        defaultValue: "Current"
                                    })
                                }), (0, r.jsx)(m.Ay, {
                                    className: "num text-PrimaryText",
                                    children: "".concat(M(n), " / ").concat(B(n))
                                })]
                            }), (0, r.jsxs)(m.Ay, {
                                className: "item flex text-TertiaryText flex-row justify-between py-[4px] gap-[8px] leading-[22px]",
                                children: [(0, r.jsx)(m.Ay, {
                                    children: d("trd-next-interest-new")
                                }), (0, r.jsx)(m.Ay, {
                                    className: "num text-PrimaryText",
                                    children: "".concat(M(c), " / ").concat(B(c))
                                })]
                            })]
                        })]
                    })
                };
            const O = function(e) {
                var t = e.baseAsset,
                    i = e.quoteAsset,
                    a = e.symbol,
                    l = e.tradeType,
                    c = (0, n._)((0, p.A)("trd-show-hourly-interest-coin-type", "quote") || "quote", 2),
                    d = c[0],
                    h = c[1],
                    u = (0, n._)((0, p.A)("trd-show-hourly-interest-type", "h") || "h", 2),
                    g = u[0],
                    f = u[1],
                    y = "quote" === d ? i : t,
                    b = (0, o.useState)(),
                    C = b[0],
                    _ = b[1],
                    P = (0, o.useState)(),
                    I = P[0],
                    O = P[1],
                    H = (0, o.useState)(),
                    R = H[0],
                    N = H[1],
                    W = "quote" === d ? R : I,
                    F = (0, o.useState)(0),
                    z = F[0],
                    X = F[1],
                    U = (0, s.ok2)().t,
                    G = null === C || void 0 === C ? void 0 : C[y],
                    $ = null === C || void 0 === C ? void 0 : C[t],
                    Y = null === C || void 0 === C ? void 0 : C[i],
                    Z = M(G),
                    K = M(W),
                    q = B(G),
                    Q = B(W);
                (0, V.eY)();
                var J = function() {
                    (0, S.bL)({
                        asset: i,
                        isIsolated: "".concat(l === L.Gr.ISOLATED)
                    }).then((function(e) {
                        e && (null === e || void 0 === e ? void 0 : e.nextHourInterestRate) && N(null === e || void 0 === e ? void 0 : e.nextHourInterestRate)
                    })), (0, S.bL)({
                        asset: t,
                        isIsolated: "".concat(l === L.Gr.ISOLATED)
                    }).then((function(e) {
                        e && (null === e || void 0 === e ? void 0 : e.nextHourInterestRate) && O(null === e || void 0 === e ? void 0 : e.nextHourInterestRate)
                    }))
                };
                return (0, o.useEffect)((function() {
                    if (y) {
                        var e = setInterval((function() {
                            J()
                        }), 3e4);
                        return J(),
                            function() {
                                clearInterval(e)
                            }
                    }
                }), [a, l]), (0, o.useEffect)((function() {
                    var e = v()().endOf("hour").valueOf() - v()().valueOf() + 6e4;
                    if (y) {
                        var t = setTimeout((function() {
                            var e = v()().valueOf();
                            X(e)
                        }), e);
                        return l === L.Gr.ISOLATED ? (0, T.qv)().then((function() {
                                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
                                    t = (e = null !== e && void 0 !== e ? e : []).reduce((function(e, t) {
                                        var i = t.asset,
                                            r = t.interestRate;
                                        return e[i] = r, e
                                    }), {});
                                _(t)
                            })) : (0, k.H)().then((function() {
                                var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [],
                                    t = (e = null !== e && void 0 !== e ? e : []).reduce((function(e, t) {
                                        var i = t.asset,
                                            r = t.interestRate;
                                        return e[i] = r, e
                                    }), {});
                                _(t)
                            })),
                            function() {
                                clearTimeout(t)
                            }
                    }
                }), [z, l]), (0, r.jsxs)(x.A, {
                    className: "hourly-interest flex-col text-[12px]",
                    children: [(0, r.jsx)(w.A, {
                        clickOutsideClose: !0,
                        enablePortal: !0,
                        trigger: "click",
                        tipBoxSx: {
                            maxWidth: "280px",
                            boxShadow: "var(--shadow-shadow2)!important",
                            filter: "none!important"
                        },
                        bg: "var(--color-CardBg)",
                        tip: (0, r.jsx)(E, {
                            coinType: d,
                            setCoinType: h,
                            unittype: g,
                            setUnitType: f,
                            baseAsset: t,
                            quoteAsset: i
                        }),
                        children: (0, r.jsxs)(m.Ay, {
                            className: "leading-[16px] interest-title text-TertiaryText flex flex-row items-center mb-[2px] flex-nowrap cursor-pointer hover:text-PrimaryText",
                            children: [(0, r.jsx)(m.Ay, {
                                children: "h" == g ? U("trd-current-interest-hour", {
                                    defaultValue: "Hourly Interest"
                                }) : U("trd-current-interest-year", {
                                    defaultValue: "Annualized Interest"
                                })
                            }), (0, r.jsx)(m.Ay, {
                                className: "interest-value-line mx-[2px]",
                                children: "/"
                            }), (0, r.jsx)(m.Ay, {
                                children: U("trd-next-interest-new", {
                                    defaultValue: "Next"
                                })
                            }), (0, r.jsxs)(m.Ay, {
                                className: "interest-value-line mx-[2px]",
                                children: ["(", y || "--", ")"]
                            }), (0, r.jsx)(m.Ay, {
                                style: {
                                    cursor: "pointer",
                                    display: "flex"
                                },
                                children: (0, r.jsx)(A.A, {
                                    className: "icon ml-[3px]",
                                    size: 12
                                })
                            })]
                        })
                    }), (0, r.jsx)(D.A, {
                        trigger: "hover",
                        enablePortal: !0,
                        useReactPopper: !0,
                        bubbleClassName: "text-left rounded-[12px] shadow-shadow2 [&_.bn-bubble-content]:!bg-CardBg [&_.bn-bubble-content]:!max-h-[unset]",
                        tooltips: (0, r.jsx)(j, {
                            currentBase: $,
                            currentQuote: Y,
                            nextBase: I,
                            nextQuote: R,
                            baseAsset: t,
                            quoteAsset: i
                        }),
                        children: (0, r.jsxs)(m.Ay, {
                            className: "leading-[16px] interest-value text-TertiaryText hover:text-PrimaryText",
                            style: {
                                display: "flex",
                                flexDirection: "row",
                                alignItems: "center",
                                cursor: "pointer",
                                marginTop: "2px"
                            },
                            children: [(0, r.jsx)(m.Ay, {
                                className: "current text-EmphasizeText",
                                children: Z ? "".concat("h" == g ? Z : q) : "--"
                            }), (0, r.jsx)(m.Ay, {
                                className: "interest-value-line mx-[2px] text-TertiaryText",
                                children: "/"
                            }), (0, r.jsx)(m.Ay, {
                                className: "next text-PrimaryText",
                                children: K ? "".concat("h" == g ? K : Q) : "--"
                            })]
                        })
                    })]
                })
            };
            var H = function(e) {
                var t = e.symbol,
                    i = e.baseAsset,
                    o = e.quoteAsset,
                    n = e.tradeType,
                    a = e.isH5,
                    l = (0, s.FzM)(),
                    c = (0, s.i24)();
                return l ? (0, r.jsx)(r.Fragment, {}) : a || c ? (0, r.jsx)(y, {
                    symbol: t
                }) : (0, r.jsxs)(r.Fragment, {
                    children: [(0, r.jsx)(O, {
                        symbol: t,
                        baseAsset: i,
                        quoteAsset: o,
                        tradeType: n
                    }), (0, r.jsx)(y, {
                        symbol: t
                    })]
                })
            }
        },
        WJPx: (e, t, i) => {
            i.d(t, {
                o: () => o
            });
            var r = i("Qhol"),
                o = function(e) {
                    return (0, r.ok2)("trd-ticker", e)
                }
        },
        "8Ud2": (e, t, i) => {
            i.d(t, {
                A: () => f
            });
            var r = i("hrAD"),
                o = i("mguP"),
                s = i("mXdx"),
                n = i("DTvD"),
                a = i.n(n),
                l = i("MD8j"),
                c = i("6B/c"),
                d = i("vQj+"),
                h = i("Qhol"),
                u = i("pIAZ"),
                g = i("5JIq"),
                p = function(e) {
                    var t = e.url,
                        i = e.title,
                        r = e.time;
                    return (0, s.jsxs)("a", {
                        href: t,
                        target: "_blank",
                        rel: "noopener noreferrer",
                        className: "trade-news-item text-SecondaryText hover:text-PrimaryYellow",
                        style: {
                            display: "flex",
                            flexBasis: "33.333%",
                            minWidth: "0px",
                            padding: "0 44px 0px 0px",
                            fontSize: "12px",
                            lineHeight: "24px",
                            textAlign: "left",
                            textDecoration: "none"
                        },
                        children: [(0, s.jsx)("div", {
                            className: "trd-text-ellipsis",
                            style: {
                                marginRight: "4px"
                            },
                            children: "".concat(i) || ""
                        }), (0, s.jsxs)("div", {
                            style: {
                                flexShrink: 0
                            },
                            children: ["(", (0, g.i)(new Date(r), "MM-dd"), ")"]
                        })]
                    })
                };
            const m = a().memo(p);
            var x = function() {
                var e = (0, o._)((0, h.eY6)(!1), 2),
                    t = e[0],
                    i = e[1],
                    n = (0, l.d4)((function(e) {
                        return e.tradeNews.news
                    })),
                    a = (0, o._)((0, u.f)(), 2),
                    g = a[0],
                    p = a[1];
                if (!g) return (0, s.jsx)(s.Fragment, {});
                var x = n.length > 3,
                    f = t ? 9 : 3;
                return (0, s.jsx)("div", {
                    style: {
                        display: "flex",
                        justifyContent: "center"
                    },
                    children: (0, s.jsxs)("div", {
                        style: {
                            width: "100%",
                            display: "flex",
                            padding: "0 16px"
                        },
                        children: [(0, s.jsx)("div", {
                            style: {
                                display: "flex",
                                marginRight: "8px",
                                padding: "8px 0",
                                flexWrap: "wrap",
                                flexGrow: 1,
                                userSelect: "none"
                            },
                            children: n.slice(0, f).map((function(e) {
                                return (0, s.jsx)(m, (0, r._)({}, e), e.id)
                            }))
                        }), x && (0, s.jsx)("div", {
                            style: {
                                color: "var(--color-IconNormal)",
                                display: "flex",
                                flexShrink: 0,
                                alignSelf: "flex-start",
                                position: "relative",
                                top: 16,
                                transition: "all 0.3s",
                                cursor: "pointer",
                                transform: "rotate(".concat(t ? 180 : 0, "deg)")
                            },
                            onClick: i,
                            children: (0, s.jsx)(c.A, {
                                style: {
                                    width: "16px",
                                    height: "16px"
                                }
                            })
                        }), (0, s.jsx)("div", {
                            id: "announcement_bar_close",
                            style: {
                                display: "flex",
                                color: "var(--color-IconNormal)",
                                alignItems: "center",
                                flexDirection: "column",
                                justifyContent: "flex-start",
                                marginLeft: "24px",
                                marginTop: "16px"
                            },
                            onClick: function() {
                                return p(!1)
                            },
                            children: (0, s.jsx)(d.A, {
                                style: {
                                    width: "16px",
                                    height: "16px"
                                }
                            })
                        })]
                    })
                })
            };
            const f = a().memo(x)
        },
        XPku: (e, t, i) => {
            i.d(t, {
                P: () => x
            });
            var r = i("S+0I"),
                o = i("jbFV"),
                s = i.n(o),
                n = i("mXdx"),
                a = i("DTvD"),
                l = i("BiCW"),
                c = i("hAzz"),
                d = i("bQ69"),
                h = i("Qhol"),
                u = i("sXI5"),
                g = i("YRJq"),
                p = i("eQl9"),
                m = (0, l.A)((function() {
                    return i.e(7436).then(i.bind(i, "fDnR"))
                }), {
                    webpack: function() {
                        return ["fDnR"]
                    }
                }),
                x = function() {
                    var e = (0, h.DPo)().isLight,
                        t = (0, g.h1)().showCoachMark,
                        i = (0, p.C)(),
                        o = (0, a.useCallback)((0, r._)(s().mark((function r() {
                            var o, a = arguments;
                            return s().wrap((function(r) {
                                for (;;) switch (r.prev = r.next) {
                                    case 0:
                                        return o = a.length > 0 && void 0 !== a[0] && a[0], r.abrupt("return", new Promise((function(r) {
                                            if (o) return i(), void r(!0);
                                            var s = function() {
                                                c.RR.emit(d._E, {
                                                    visible: !1
                                                }), u.Ay.close(), t("tradeGuide", 0), r(!0)
                                            };
                                            u.Ay.show({
                                                isLight: e,
                                                contentSx: {
                                                    padding: 0,
                                                    maxWidth: "720px"
                                                },
                                                containerSx: {
                                                    zIndex: 1400
                                                },
                                                onCloseIconClick: s,
                                                closeIconProps: {
                                                    "data-testid": "button-close-dialog"
                                                },
                                                onMaskClick: s,
                                                children: (0, n.jsx)(m, {
                                                    isMargin: !1
                                                })
                                            })
                                        })));
                                    case 2:
                                    case "end":
                                        return r.stop()
                                }
                            }), r)
                        }))), [e]);
                    return o
                }
        }
    }
]);